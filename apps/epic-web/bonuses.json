[
  {
    "_updatedAt": "2024-03-27T12:41:28Z",
    "state": "published",
    "_type": "module",
    "title": "Interviews with Experts",
    "slug": {
      "current": "interviews-with-experts",
      "_type": "slug"
    },
    "image": "https://cdn.sanity.io/images/i1a93n76/production/97d5afcc33e1ad90bbdf40d1dc125c0aff62ec08-382x382.png",
    "body": "Kent C. Dodds is joined by expert developers, library creators, and tech industry leaders who share their insights and experience working within the ever-evolving world of web development.\n\nThese conversations cover a wide range of topics ranging from the intricacies of database efficiency, the future of authorization, the role of leadership in tech, and everything in between.\n\nNo matter your level of experience in web development, these conversations offer a wealth of knowledge and ideas that will inspire you to refine your craft, push boundaries, and become an Epic Web dev!\n\n## Content Management Systems with Alexandra Spalato\n\nAlexandra Spalato, a Developer Relations Engineer at Storyblok, discusses the future of content management systems. She emphasizes the significance of a CMS in simplifying complex processes into user-friendly interfaces and making content creation more accessible to non-developers.\n\n## Leadership in Tech with Ankita Kulkarni\n\nDeveloper and leadership educator Ankita Kulkarni discusses the intersection of leadership and development. The conversation explores the acquisition of leadership skills, and how to find the balance between coding and leadership roles. Ankita provides strategies for advancing into leadership positions, emphasizing the importance of proactive career management.\n\n## API Mocking with Artem Zakharchenko\n\nArtem Zakharchenko, the creator of Mock Service Worker (MSW), joins Kent to discuss the evolution of MSW from a weekend project into to a powerful open-source tool for API mocking and debugging.\n\n## Enhancing SQLite with Ben Johnson\n\nBen Johnson is a developer with a 20-year coding career spanning roles from Oracle to creating BoltDB. In this conversation, Ben discusses LiteFS and Litestream, both tools aimed at expanding SQLite's utility. Topics include a dive into SQLite's architectural elements, and how LiteFS enhances scalability on a single node.\n\n## The Evolution of Type Safety with Colin McDonnell\n\nColin McDonnell, a Developer Relations representative at Bun and the creator of Zod, discusses how Zod has grown from its original usage in medical software into a prominent tool in the TypeScript ecosystem. Colin also touches on TRPC, an end-to-end type safety library, and the challenges it addresses.\n\n## Navigating the Testing Terrain with Debbie O'Brien\n\nDebbie O'Brien, a community advocate for Playwright at Microsoft, discusses the adaptability and versatility of Playwright as a testing tool. She emphasizes its value in various testing scenarios and its role in Microsoft's application testing, including VSCode, Bing, and Teams.\n\n## Simplifying Web Form Management with Edmund Hung\n\nEdmund Hung, web developer at Delivery Hero, discusses how Conform has become a crucial component of the Epic Stack. He highlights Conform's unique approach to form management, which bypasses native browser validation in favor of its own system.\n\n## Scalable Databases and Authentication with Iheanyi Ekechukwu\n\nIheanyi Ekechukwu, a software engineer at PlanetScale, explore database and hosting options, highlights PlanetScale's scalability and the role of Vitess in the technology. The conversation also covers authentication solutions, and cautions against over-reliance on external services.\n\n## Understanding Web Development with Jacob Paris\n\nJacob Paris joins Kent to discuss his work on Remix. He highlights some of the challenges of server rendering, including handling user preferences and time zones. One the client side, Jacob emphasizes the importance of server output for correct client rendering, especially when users disable JavaScript.\n\n## The Depth of Software Testing with Jessica Sachs\n\nJessica Sachs, software engineer at Ionic and a testing & QA expert, joins Kent in a conversation about various testing paradigms. They discuss topics ranging from Test-Driven Development to End-to-End testing, emphasizing the importance of a balanced approach.\n\n## Platform Engineering with Jocelyn Harper\n\nJocelyn \"Josie\" Harper, tech lead at The New York Times, discusses her tech journey into roles including platform engineering and system design. Additional topics include backend optimization and the significance of documentation.\n\n## Exploring the Front-End Ecosystem with Mark Dalgleish\n\nMark Dalgleish, co-creator of CSS Modules and contributor at Shopify, discusses the evolution of CSS, React, and design systems. Touching on CSS Modules and CSS-in-JS, the conversation also goes into the challenges of managing design systems, particularly when it comes to balancing flexibility with standardization.\n\n## Navigating Changing Web Technologies with Mark Thompson\n\nMark Thompson from Google's Angular team joins Kent to share his career journey, the web's evolution, and AI's role in software development. Additional topics include the transformational role of APIs and Angular's transition from the View Engine to Ivy.\n\n## The Magic of TypeScript with Matt Pocock\n\nMatt Pocock, internet-renowned as the \"TypeScript guy\", discusses the merits and challenges of the TypeScript ecosystem. Highlighting its benefits in IDE capabilities and bug reduction, Matt also touches upon complexities in managing types and creating libraries.\n\n## Building Deep Skills with Michael Chan\n\nEducator and enthusiast Michael Chan shares his thoughts on the changing React landscape, emphasizing the significance of TypeScript and libraries like React Query. He advocates for building a deep understanding over surface-level knowledge. Both Michael and Kent stress the joy of creating meaningful projects and the importance of a comprehensive web development understanding.\n\n## Examining MDX with Monica Powell\n\nMonica Powell, a senior software engineer at Newsela, dives into MDX, which allows for developers to combine JSX with Markdown for creating rich content. She highlights MDX's role in the Unify ecosystem, as well as its challenges when getting started with CMS integration.\n\n## Efficient Form Management with Sandrina Pereira\n\nSandrina Pereira, a staff front-end engineer at remote.com, emphasizes the significance of web accessibility using the POUR principles. Additional topics include the complexities of managing large-scale forms dynamically for users across the world. \n\n## Transitioning from Rails to Remix with Sergio Xalambrí\n\nSergio Xalambrí shares his experience transitioning from a Rails and Next.js setup to Remix at fintech startup Duffy. Some of the challenges include highlighting challenges in internationalization and adding middleware. The conversation also into remix-auth's authentication strategies and contrasting Remix's modular approach with Rails' cohesive framework.\n\n## The Capabilities and Ecosystem of Tailwind CSS with Simon Vrachliotis\n\nSimon Vrachliotis, a Tailwind expert at Thinkmill, praises the benefits and adaptability of Tailwind CSS, emphasizing its alignment with React's component-level concerns. Simon discusses solving for type safety in addition to recommending tools for enhancing the Tailwind workflow.\n\n## The Crucial Role of Database Optimization with Tyler Benfield\n\nTyler Benfield, a software engineer at Prisma, dives into the intricacies of database efficiency, emphasizing backend optimization for enhanced frontend performance. Tyler also explores the advantages and limitations of ORM tools like Prisma, the potential of SQLite in production, and the universal importance of SQL knowledge across platforms.\n\n## Product Management with Nevi Shah\n\nNevi Shah, a product manager at Cloudflare, combined her technical and business skills to  transition from academia and consulting into product management. She highlights the role of a product manager in understanding user needs and introduces Cloudflare Pages as a solution for serverless architecture, while also discussing alternative hosting options like Fly.io.\n\n## Remix Behind the Scenes with Ryan Florence\n\nRyan Florence, co-founder of Remix and React Training, discusses the innovations behind Remix and its transition from React Router. The framework's compatibility with the web's fetch API broadens its server architecture reach, and its recent acquisition by Shopify promises a bright future for Remix.\n\n## From Tech Sales to Engineering with Shaundai Person\n\nShaundai Person, a senior software engineer at Netflix, joins Kent to discuss transitioning from tech sales to software engineering. She highlights the importance of recognizing and building individual strengths, especially communication, in large corporate settings.\n\n## Art, Code, and Data Visualization with Shirley Wu\n\nShirley Wu, an award-winning creator specializing in data-driven art, transitioned from the business sector to web development. She shares how her work offers artistic fulfillment and financial stability, but she emphasizes the importance of ethical considerations.\n\n## Understanding the Future of Authentication with Will Johnson\n\nWill Johnson from Auth0 highlights the limitations of password-based authentication and discusses the potential of alternatives like the Web Authentication API (WebAuthn). Will shares his anticipation for a future where biometrics or digital verification replace traditional passwords, as well as a need for more nuanced access controls in growing organizations.\n",
    "instructor": null,
    "lessons": [
      {
        "_type": "interview",
        "title": "Content Management Systems with Alexandra Spalato",
        "body": "Alexandra Spalato, a Developer Relations Engineer at Storyblok, joins Kent to talk about the future of content management systems (CMS). As an expert in the field, she specifically highlighted the capabilities and advantages of headless CMS platforms like Storyblok.\n\nContent management systems have become almost indispensable. These systems do more than just manage text; they serve as a bridge between the technical and the non-technical, simplifying complex processes into user-friendly interfaces. A CMS can abstract away the intricate details of coding, providing a more accessible approach for those who may not be developers.\n\nThis not only democratizes the digital creation process but also enables content to be easily reused and repurposed across different platforms.\n\nStoryblok stands out among other CMS for its ability to serve as a single, centralized repository for content, which can then be distributed across multiple channels. It goes beyond the basic features usually associated with a CMS and supports the nuanced needs of internationalization, extensions and data integrations, and even AI.\n\n## Resources\n\n- [Alexandra Spalato on Twitter](https://twitter.com/alexadark)\n- [Storyblok](https://www.storyblok.com/home)",
        "solution": null,
        "_id": "WBQDSVdErPwEcA4Fd0fTSc",
        "_updatedAt": "2023-10-18T14:21:29Z",
        "description": "Master end-to-end user flow tests, streamline authentication, and navigate login, profile editing, 2FA, and login verification.",
        "slug": "content-management-systems-with-alexandra-spalato",
        "videoResource": {
          "title": "Alexandra Spalato.mp4",
          "transcript": {
            "srt": "1\n00:00:00,480 --> 00:00:03,000\nHello everybody, I'm joined by my friend\n  \n\n2\n00:00:03,000 --> 00:00:07,259\nAlexandra Spallato. How are you doing? Fine, and\n  \n\n3\n00:00:07,259 --> 00:00:12,040\nyou? Doing great. I am joining you from Utah and\n  \n\n4\n00:00:12,259 --> 00:00:15,280\nAlexandra is coming from Spain, right? Yes, I'm in\n  \n\n5\n00:00:15,280 --> 00:00:19,200\nMadrid. Yeah, awesome. Madrid I have only been to\n  \n\n6\n00:00:19,200 --> 00:00:22,279\nthe airport. So maybe 1 day I can get out of the\n  \n\n7\n00:00:22,279 --> 00:00:24,720\nairport. You should come for tapas. I would be\n  \n\n8\n00:00:24,720 --> 00:00:30,480\nhappy. Yeah, yeah. So Alexandra and I met online, I\n  \n\n9\n00:00:30,480 --> 00:00:33,140\ndon't know, maybe like a year and a half ago or so.\n  \n\n10\n00:00:33,420 --> 00:00:37,300\nAnd- Not so much. Yeah, well, we met in person at\n  \n\n11\n00:00:37,300 --> 00:00:42,800\nRemixConf last year. And so, yeah, it's just been a\n  \n\n12\n00:00:42,800 --> 00:00:44,820\npleasure to get to know you. I'd love for the\n  \n\n13\n00:00:44,820 --> 00:00:46,920\naudience to get to know you a little bit. So could\n  \n\n14\n00:00:46,920 --> 00:00:51,560\nyou give us a little intro to yourself? So I'm\n  \n\n15\n00:00:51,560 --> 00:00:54,620\nAlexandra Spallato. I'm a developer relation\n  \n\n16\n00:00:54,720 --> 00:00:57,480\nengineer at Storyblock, which is a awesome\n  \n\n17\n00:00:57,500 --> 00:01:01,300\nheadless CMS. And before that I was freelancing\n  \n\n18\n00:01:01,640 --> 00:01:06,340\nfor about 10 years, a lot in the WordPress world and\n  \n\n19\n00:01:06,340 --> 00:01:10,640\nespecially Headless WordPress. I even created a\n  \n\n20\n00:01:10,640 --> 00:01:13,740\nproduct which was Gatsby WP Themes. It was themes\n  \n\n21\n00:01:13,740 --> 00:01:16,560\nwith the front end Gatsby and the back office in\n  \n\n22\n00:01:16,560 --> 00:01:19,920\nWordPress. But as I'm not a marketer, the sales\n  \n\n23\n00:01:19,920 --> 00:01:24,360\nwere not high, but I had a lot of fun creating it. And\n  \n\n24\n00:01:24,800 --> 00:01:27,540\nI did many other things before being in the web too.\n  \n\n25\n00:01:28,080 --> 00:01:31,320\nAwesome, yeah. So Spending a lot of time in\n  \n\n26\n00:01:31,320 --> 00:01:36,680\nWordPress, that's still the number 1 deployed\n  \n\n27\n00:01:37,580 --> 00:01:42,340\nthing on the internet for sure. And so you've just,\n  \n\n28\n00:01:42,400 --> 00:01:44,540\nit sounds like you've always been pretty\n  \n\n29\n00:01:44,540 --> 00:01:49,700\ninterested in content on the web. Yes, it's\n  \n\n30\n00:01:50,240 --> 00:01:53,540\nWordPress, I'm happy to stretch to development\n  \n\n31\n00:01:53,680 --> 00:01:56,740\nand to code, but at the end, I realized that I have\n  \n\n32\n00:01:56,740 --> 00:02:00,060\nalways been with working with CMSs from the\n  \n\n33\n00:02:00,060 --> 00:02:05,500\nhistoric 1, WordPress, to Storyblock, which is 1\n  \n\n34\n00:02:05,500 --> 00:02:08,800\nof the most modern ones. So yes, I realize I'm\n  \n\n35\n00:02:08,800 --> 00:02:12,380\nreally, really deep into this. Yeah, yeah. So what\n  \n\n36\n00:02:12,380 --> 00:02:15,580\nhave you, as you've been involved in content\n  \n\n37\n00:02:15,580 --> 00:02:20,580\nmanagement for a very long time. What evolutions\n  \n\n38\n00:02:20,660 --> 00:02:23,400\nhave you seen in the content management space\n  \n\n39\n00:02:23,800 --> 00:02:26,540\nsince your early days with WordPress to now?\n  \n\n40\n00:02:28,180 --> 00:02:30,560\nEspecially, I would say, the headless. Headless\n  \n\n41\n00:02:33,180 --> 00:02:36,200\nis everywhere now, I think, is a new way of doing\n  \n\n42\n00:02:36,200 --> 00:02:41,320\nthings because thanks to that and APIs, we can do\n  \n\n43\n00:02:41,320 --> 00:02:45,440\nomnichannel and have been only 1 source of truth of\n  \n\n44\n00:02:45,440 --> 00:02:49,540\ncontent without duplicating and deploy it on\n  \n\n45\n00:02:49,540 --> 00:02:53,880\nmobile apps, on web apps, even smartwatch and\n  \n\n46\n00:02:53,880 --> 00:03:00,060\nAlexa everywhere. So headless is really the best\n  \n\n47\n00:03:00,060 --> 00:03:05,380\nthing now. Oh God, I say Alexa and my Alexa is... Oh,\n  \n\n48\n00:03:05,380 --> 00:03:09,460\nnice. That's terrible. We'll make sure to avoid\n  \n\n49\n00:03:09,800 --> 00:03:12,340\ntriggering all of our assistants then. Yeah, yeah,\n  \n\n50\n00:03:12,340 --> 00:03:21,360\nyeah, yeah. Okay, stop. Yeah, thanks to headless,\n  \n\n51\n00:03:21,380 --> 00:03:26,400\nwebsites are faster, the SEO is better. Yes, it's\n  \n\n52\n00:03:26,400 --> 00:03:29,380\nmuch, much better. But even with WordPress, I was\n  \n\n53\n00:03:29,380 --> 00:03:33,540\nalready doing headless. However, with\n  \n\n54\n00:03:33,540 --> 00:03:37,360\nStoryblock and headless CMSs, which are done,\n  \n\n55\n00:03:37,360 --> 00:03:41,320\nespecially for that, of course, it's better\n  \n\n56\n00:03:41,320 --> 00:03:42,980\nbecause you are not hacking something. It's\n  \n\n57\n00:03:42,980 --> 00:03:45,660\nalready going to be headless. Your API are there.\n  \n\n58\n00:03:45,860 --> 00:03:51,320\nSo I really like to know both parts to begin with the\n  \n\n59\n00:03:51,540 --> 00:03:54,960\nhistoric 1 and it's great when people want to\n  \n\n60\n00:03:54,960 --> 00:03:58,040\ntransfer from there and don't want to change\n  \n\n61\n00:03:58,040 --> 00:04:00,140\nsystems. It's also possible if it's not too\n  \n\n62\n00:04:00,140 --> 00:04:05,400\ncomplicated. And CMS is like Storyblock, which\n  \n\n63\n00:04:05,400 --> 00:04:10,940\nare very, very advanced. Yeah, very cool. So I\n  \n\n64\n00:04:10,940 --> 00:04:15,200\nwanted to dive a little bit into what the the\n  \n\n65\n00:04:15,200 --> 00:04:20,579\nproblem is that CMS solves. So as a new developer\n  \n\n66\n00:04:20,640 --> 00:04:23,600\njumping into building web applications, they're\n  \n\n67\n00:04:23,600 --> 00:04:27,100\ngoing to pull up their H1 and they'll have a hello\n  \n\n68\n00:04:27,100 --> 00:04:30,140\nworld in there and that right there is content. So\n  \n\n69\n00:04:30,740 --> 00:04:34,280\nlike we already have a way to publish content on the\n  \n\n70\n00:04:34,280 --> 00:04:37,080\nweb. Why do we have to add this extra layer of\n  \n\n71\n00:04:37,080 --> 00:04:39,240\ncomplexity by having like a separate place where\n  \n\n72\n00:04:39,240 --> 00:04:42,240\nthe content is and everything? What is the problem\n  \n\n73\n00:04:42,240 --> 00:04:46,180\nthat a content management solution solves? It\n  \n\n74\n00:04:46,180 --> 00:04:48,780\ndepends. If you have a very simple blog, of course\n  \n\n75\n00:04:48,780 --> 00:04:53,800\nyou can do it on Git and with MDX or things like that.\n  \n\n76\n00:04:53,800 --> 00:04:58,980\nBut as soon as content becomes much more advanced\n  \n\n77\n00:04:59,060 --> 00:05:02,040\nthan just a blog, you can have different content\n  \n\n78\n00:05:02,040 --> 00:05:06,980\ntype. A content type is a schema for a type of\n  \n\n79\n00:05:06,980 --> 00:05:10,640\ncontent. It can be a post, a landing page. And so you\n  \n\n80\n00:05:10,640 --> 00:05:13,500\ncan design the schema or the fields. It can be a\n  \n\n81\n00:05:13,500 --> 00:05:17,080\ntitle, an image, even some flexible fields where\n  \n\n82\n00:05:17,080 --> 00:05:21,600\nyou can build some sort of builders. Also, perhaps\n  \n\n83\n00:05:21,600 --> 00:05:24,240\nyou need to categorize this content in different\n  \n\n84\n00:05:25,120 --> 00:05:29,540\nfolders and things to search it. You can set up\n  \n\n85\n00:05:29,540 --> 00:05:33,600\nworkflow, translation, messaging, many, many\n  \n\n86\n00:05:33,600 --> 00:05:37,580\nthings that I even don't talk about enterprise\n  \n\n87\n00:05:38,680 --> 00:05:41,880\nwebsites where it's obvious that you need a CMS to\n  \n\n88\n00:05:41,880 --> 00:05:47,220\ndo it. But even a small marketing website, As soon\n  \n\n89\n00:05:47,220 --> 00:05:50,860\nas you have a lot of different type of content and a\n  \n\n90\n00:05:50,860 --> 00:05:57,760\nlot of pages and fields, it will be much better with\n  \n\n91\n00:05:57,980 --> 00:06:01,780\na CMS. And you have the database which is included.\n  \n\n92\n00:06:02,220 --> 00:06:05,600\nMost of them are SaaS. Storyblock is a SaaS, for\n  \n\n93\n00:06:05,600 --> 00:06:10,460\nexample. WordPress is self-hosted. So with SaaS,\n  \n\n94\n00:06:10,460 --> 00:06:14,080\nyou have all the updates included. You have the\n  \n\n95\n00:06:14,080 --> 00:06:18,920\ndatabase and everything. So it's, yes, it makes\n  \n\n96\n00:06:18,920 --> 00:06:22,180\nlife really more easier. You can do it yourself,\n  \n\n97\n00:06:22,760 --> 00:06:26,940\nbut it can be complicated without it. Yeah, yeah. I\n  \n\n98\n00:06:26,940 --> 00:06:31,460\nwould say that it makes a lot of sense for when you\n  \n\n99\n00:06:31,460 --> 00:06:34,460\nhave multiple channels that you want to have\n  \n\n100\n00:06:34,460 --> 00:06:38,680\nconsuming the content, or you want to, like, let's\n  \n\n101\n00:06:38,680 --> 00:06:42,660\nsay you are building a blog. You've got the blog\n  \n\n102\n00:06:42,660 --> 00:06:45,700\npost itself, but then you wanna feed that into the\n  \n\n103\n00:06:45,700 --> 00:06:47,540\nhome screen. And so you can say, here are the\n  \n\n104\n00:06:47,540 --> 00:06:49,620\nfeatured blogs, and now you have to duplicate\n  \n\n105\n00:06:49,700 --> 00:06:52,540\nmaybe or something and so having a centralized\n  \n\n106\n00:06:52,720 --> 00:06:55,600\nlocation for all of the content and what's\n  \n\n107\n00:06:55,600 --> 00:06:58,660\ninteresting is that you mentioned there's blog\n  \n\n108\n00:06:58,660 --> 00:07:01,660\nposts as 1 type of content but then there's videos\n  \n\n109\n00:07:01,680 --> 00:07:04,820\nor images and you can host all those But then\n  \n\n110\n00:07:04,820 --> 00:07:07,080\nthere's subcategories too, like a blog post can\n  \n\n111\n00:07:07,080 --> 00:07:11,840\nhave an image, and it can have a video. And so it can\n  \n\n112\n00:07:11,840 --> 00:07:15,420\nget pretty complex. Oh yes, it can be very, very\n  \n\n113\n00:07:15,420 --> 00:07:20,380\ncomplex. Even with a CMS, you really have to, what\n  \n\n114\n00:07:20,380 --> 00:07:24,740\nis very important when you build a website, an app,\n  \n\n115\n00:07:24,800 --> 00:07:30,160\nis to plan how this content is going to flow, what\n  \n\n116\n00:07:30,160 --> 00:07:33,160\nyou need for the UX, how you want to display it, but\n  \n\n117\n00:07:33,160 --> 00:07:36,820\nthen how you break it in component and how you want\n  \n\n118\n00:07:36,820 --> 00:07:39,340\nto reuse this component, how you want to make\n  \n\n119\n00:07:39,340 --> 00:07:44,540\nvariation on this components, which content will\n  \n\n120\n00:07:44,540 --> 00:07:48,340\nbe attached to another and will depend 1 on another.\n  \n\n121\n00:07:48,340 --> 00:07:54,100\nSo being able to plan all that makes your life much,\n  \n\n122\n00:07:54,140 --> 00:07:57,260\nmuch easier because without that, it can be really,\n  \n\n123\n00:07:57,280 --> 00:08:00,860\nit can be a mess. Yeah, yeah, absolutely. And then\n  \n\n124\n00:08:00,860 --> 00:08:04,900\non top of that, you also have, like if you're\n  \n\n125\n00:08:04,900 --> 00:08:06,880\nbuilding a site for yourself, then you're the 1\n  \n\n126\n00:08:06,880 --> 00:08:10,680\nmaking the content, but at any scale at a company,\n  \n\n127\n00:08:11,000 --> 00:08:13,080\nyou're not gonna be the 1 writing the content and\n  \n\n128\n00:08:13,080 --> 00:08:15,360\nyou don't want to have the people who are in charge\n  \n\n129\n00:08:15,360 --> 00:08:17,360\nof writing the content reach out to you and say, hey,\n  \n\n130\n00:08:17,360 --> 00:08:19,640\ncan you update the code so that it says something\n  \n\n131\n00:08:19,640 --> 00:08:24,520\ndifferent? Exactly. Now, is there, and so like, of\n  \n\n132\n00:08:24,520 --> 00:08:26,140\ncourse, those people aren't gonna be committing\n  \n\n133\n00:08:26,140 --> 00:08:28,480\ncode either. So it is nice to have an externalized\n  \n\n134\n00:08:28,940 --> 00:08:31,200\nWYSIWYG editor or something like that. That can be\n  \n\n135\n00:08:31,200 --> 00:08:35,200\nreally helpful. Now, is there a situation where\n  \n\n136\n00:08:35,200 --> 00:08:38,299\nyou would say that a content management, or I guess,\n  \n\n137\n00:08:38,360 --> 00:08:42,100\nwhere's the line between I just hard code all the\n  \n\n138\n00:08:42,100 --> 00:08:46,400\ncontent in the code versus the content is now a data\n  \n\n139\n00:08:46,400 --> 00:08:51,360\nsource? Okay, you can, yes. You can art code\n  \n\n140\n00:08:51,360 --> 00:08:54,520\neverything if the website is simple and you are the\n  \n\n141\n00:08:54,520 --> 00:08:56,960\nonly 1 to work on it, or perhaps you have a friend\n  \n\n142\n00:08:56,960 --> 00:09:00,060\ndeveloper that will change things. But I think\n  \n\n143\n00:09:00,060 --> 00:09:06,500\nthat's the limit. You can use things like MDX and\n  \n\n144\n00:09:06,500 --> 00:09:09,220\nhave everything on Git too. But yes, I think that's\n  \n\n145\n00:09:09,280 --> 00:09:12,700\nthe limit. It's having a personal website with\n  \n\n146\n00:09:12,700 --> 00:09:15,260\nsimple content where you know everything and\n  \n\n147\n00:09:15,260 --> 00:09:19,300\nyou're the only 1 intervening on it, then yes, as\n  \n\n148\n00:09:19,300 --> 00:09:22,960\nsoon as it's a bit more complicated, it's much more\n  \n\n149\n00:09:22,960 --> 00:09:28,660\neasier to have a CMS. And I really like the CMS that\n  \n\n150\n00:09:28,660 --> 00:09:30,740\nare component-based, which is the case of\n  \n\n151\n00:09:30,740 --> 00:09:34,120\nStoryblock. WordPress, I was using it always with\n  \n\n152\n00:09:34,120 --> 00:09:37,820\na plugin name, Advanced Custom Fields and\n  \n\n153\n00:09:37,820 --> 00:09:41,600\nFlexible Content. So then you can map components\n  \n\n154\n00:09:41,980 --> 00:09:45,480\nto your code and make them reusable and not think\n  \n\n155\n00:09:45,480 --> 00:09:48,720\nabout pages. Pages are very monolithic too. It's\n  \n\n156\n00:09:48,740 --> 00:09:52,900\nnot flexible. So I really, really like to have\n  \n\n157\n00:09:52,900 --> 00:09:55,600\neverything component based and map everything in\n  \n\n158\n00:09:55,600 --> 00:10:01,160\nReact, for example, in Remix especially. And Yes,\n  \n\n159\n00:10:01,160 --> 00:10:05,640\nbut yes, I think working without a CMS is very\n  \n\n160\n00:10:05,640 --> 00:10:07,940\nlimited. Otherwise, there is also some\n  \n\n161\n00:10:07,940 --> 00:10:12,040\ndevelopers who like to build their own CMS. I had a\n  \n\n162\n00:10:12,040 --> 00:10:16,640\nfriend like that. I think it can be complex and\n  \n\n163\n00:10:16,640 --> 00:10:21,300\nfront to error and bugs and the CMS, you have all the\n  \n\n164\n00:10:21,300 --> 00:10:25,080\nsecurity updates and you don't have to touch, the\n  \n\n165\n00:10:25,080 --> 00:10:27,240\nbackend is here for you. Basically you have all\n  \n\n166\n00:10:27,240 --> 00:10:29,500\nyour backend and you just have to take care of the\n  \n\n167\n00:10:29,500 --> 00:10:35,080\nfrontend. Yeah, so with a website that's driven by\n  \n\n168\n00:10:35,080 --> 00:10:40,120\na CMS, like Storyblock or Century or, you know, the\n  \n\n169\n00:10:40,120 --> 00:10:42,940\nlist of companies goes on. Oh, there is a lot. Yeah.\n  \n\n170\n00:10:43,260 --> 00:10:46,160\nThere is not only Storyblock, even if I love it. But\n  \n\n171\n00:10:46,160 --> 00:10:48,340\nyeah, there is a lot. Yeah, so there are many\n  \n\n172\n00:10:48,520 --> 00:10:51,760\noptions there, but you can kind of implement a\n  \n\n173\n00:10:51,760 --> 00:10:55,240\nbackend for the front end architecture with Remix,\n  \n\n174\n00:10:55,240 --> 00:10:59,100\nwhere you've got the Remix loaders and actions\n  \n\n175\n00:10:59,100 --> 00:11:02,120\ninteracting with the CMS, and you are interacting\n  \n\n176\n00:11:02,120 --> 00:11:05,240\nwith the database directly. Now, is this only for\n  \n\n177\n00:11:05,240 --> 00:11:09,200\nmarketing sites, or can people benefit from using\n  \n\n178\n00:11:09,200 --> 00:11:13,420\na CMS for like apps as well? Yes, you can also build\n  \n\n179\n00:11:13,420 --> 00:11:18,220\napps. Basically, the CMS is for storing data,\n  \n\n180\n00:11:18,340 --> 00:11:23,040\ncontent is data. So you can use it for an app. It's\n  \n\n181\n00:11:23,040 --> 00:11:26,480\nthen your creativity and strategy that will\n  \n\n182\n00:11:26,480 --> 00:11:32,020\ndictate you what you need and which CMS is the best\n  \n\n183\n00:11:32,780 --> 00:11:37,940\nfor your use case. But yes, it's a way of managing\n  \n\n184\n00:11:38,100 --> 00:11:42,440\ndata in the most organized way possible and to have\n  \n\n185\n00:11:42,440 --> 00:11:46,340\na database as a service, so yes. Very cool, yeah. So\n  \n\n186\n00:11:47,040 --> 00:11:48,800\nI wanna talk a little bit about\n  \n\n187\n00:11:48,800 --> 00:11:50,460\ninternationalization or localization,\n  \n\n188\n00:11:51,420 --> 00:11:54,840\ntranslations and things. So when I was at PayPal, I\n  \n\n189\n00:11:54,840 --> 00:11:56,880\nreferenced my time at PayPal a lot because I think\n  \n\n190\n00:11:56,880 --> 00:11:59,680\nit resembles a lot of people's work. But even\n  \n\n191\n00:12:00,300 --> 00:12:02,600\nBefore that, I had other companies where we did\n  \n\n192\n00:12:02,600 --> 00:12:06,600\nsimilar things for internationalization. And\n  \n\n193\n00:12:06,600 --> 00:12:11,640\nwhat we did was we would have a directory in our\n  \n\n194\n00:12:11,640 --> 00:12:15,660\nrepository that had folders and then files that\n  \n\n195\n00:12:15,660 --> 00:12:18,280\nwere like basically properties files, so a key\n  \n\n196\n00:12:18,280 --> 00:12:21,820\nvalue sort of thing. We used message format,\n  \n\n197\n00:12:21,820 --> 00:12:24,920\nthat's kind of the standard for doing\n  \n\n198\n00:12:24,920 --> 00:12:28,120\ninternationalization with pluralization and\n  \n\n199\n00:12:28,260 --> 00:12:30,060\ngenders and different stuff like that, it's\n  \n\n200\n00:12:30,060 --> 00:12:33,900\npretty interesting. But yeah, so we just would\n  \n\n201\n00:12:33,900 --> 00:12:35,720\nhave all those files. We would have the English\n  \n\n202\n00:12:35,720 --> 00:12:39,240\nones, and then somebody at PayPal had built a tool\n  \n\n203\n00:12:39,240 --> 00:12:43,000\nthat our translators would be able to see what\n  \n\n204\n00:12:43,080 --> 00:12:45,680\nstrings were not translated yet. They'd see what\n  \n\n205\n00:12:45,680 --> 00:12:49,340\nthe previous 1 was or what the current English\n  \n\n206\n00:12:49,340 --> 00:12:51,700\nversion was and then they'd translate that. So\n  \n\n207\n00:12:51,700 --> 00:12:54,880\nwe'd have like a bunch of these different files and\n  \n\n208\n00:12:54,880 --> 00:12:57,780\nthen our server would consume those and we'd have\n  \n\n209\n00:12:57,780 --> 00:13:01,660\naccess to the translations. And that involved,\n  \n\n210\n00:13:02,600 --> 00:13:05,200\nthe tool would like make pull requests to the repo\n  \n\n211\n00:13:05,200 --> 00:13:07,560\nso we could pull the content changes and stuff.\n  \n\n212\n00:13:07,700 --> 00:13:11,280\nProbably not my favorite thing to do for managing\n  \n\n213\n00:13:11,280 --> 00:13:15,740\ncontent. So what is the experience like with a\n  \n\n214\n00:13:15,740 --> 00:13:18,140\nproper CMS? And you can use Storyblock\n  \n\n215\n00:13:18,160 --> 00:13:20,580\nspecifically, but if I wanted to\n  \n\n216\n00:13:20,580 --> 00:13:23,720\ninternationalize my site with a modern CMS, what\n  \n\n217\n00:13:23,720 --> 00:13:26,040\nis my experience going to be like there? And not\n  \n\n218\n00:13:26,040 --> 00:13:28,360\njust my experience as a developer, but also the\n  \n\n219\n00:13:28,360 --> 00:13:30,240\nexperience of the people writing the\n  \n\n220\n00:13:30,240 --> 00:13:33,740\ntranslations. Okay, in Storyblock there is\n  \n\n221\n00:13:33,900 --> 00:13:37,800\nseveral ways. I have not worked myself on a big\n  \n\n222\n00:13:37,800 --> 00:13:40,040\ninternationalization website, but I know how it\n  \n\n223\n00:13:40,040 --> 00:13:44,100\nworks. So you can do it at several levels. So the\n  \n\n224\n00:13:44,100 --> 00:13:47,360\nsimplest level, If you want just to have\n  \n\n225\n00:13:47,500 --> 00:13:50,860\ntranslation, just the text, then you can do it at\n  \n\n226\n00:13:50,860 --> 00:13:53,900\nthe feed level. And inside Storyblock, you can\n  \n\n227\n00:13:53,900 --> 00:13:56,640\nactivate that and you will have a dropdown and\n  \n\n228\n00:13:56,640 --> 00:13:58,940\nchoose the language and that with the API, you will\n  \n\n229\n00:13:58,940 --> 00:14:03,380\nhave the right code to build your front end. So\n  \n\n230\n00:14:03,380 --> 00:14:07,900\nthat's a way, but internationalization, it's not\n  \n\n231\n00:14:07,900 --> 00:14:12,620\nonly the text. It can be also you want, you can be,\n  \n\n232\n00:14:13,200 --> 00:14:16,400\nfor example, an English website for the US and for\n  \n\n233\n00:14:16,400 --> 00:14:21,940\nthe UK can look different colors, content or\n  \n\n234\n00:14:21,940 --> 00:14:27,860\nanything. So in this case, we can use folders and\n  \n\n235\n00:14:27,860 --> 00:14:31,740\nthere is an extension in Storyblock where you have\n  \n\n236\n00:14:31,740 --> 00:14:36,960\na drop-down and then you can clone the home page,\n  \n\n237\n00:14:36,960 --> 00:14:40,300\nfor example, from 1 country to another country and\n  \n\n238\n00:14:40,560 --> 00:14:44,860\nthen translate, make changes, then you can merge,\n  \n\n239\n00:14:44,860 --> 00:14:51,280\nfor example, the look of 1 country to another and\n  \n\n240\n00:14:51,580 --> 00:14:54,520\nthe language stay different. Well, that's\n  \n\n241\n00:14:54,520 --> 00:14:56,680\nanother strategy. It's not only the language, but\n  \n\n242\n00:14:56,680 --> 00:14:59,080\nalso the website. In this case, you use folders.\n  \n\n243\n00:14:59,540 --> 00:15:04,300\nAnd Storyblock, we also have spaces. So you can use\n  \n\n244\n00:15:04,300 --> 00:15:08,500\nthese spaces in case for big websites, you can have\n  \n\n245\n00:15:08,500 --> 00:15:11,420\na team that work on a region and another team in\n  \n\n246\n00:15:11,420 --> 00:15:16,720\nanother and assign spaces to these people. You can,\n  \n\n247\n00:15:16,720 --> 00:15:19,780\nof course, mix and match these methods, depending\n  \n\n248\n00:15:19,780 --> 00:15:22,580\non the complexity and your strategy and what you\n  \n\n249\n00:15:22,580 --> 00:15:26,280\nwant to do. So yes, in advanced CMS, it's not the\n  \n\n250\n00:15:26,280 --> 00:15:28,380\ncase in WordPress. I don't think there is, perhaps\n  \n\n251\n00:15:28,380 --> 00:15:30,200\nthere is plugins, there is plugins for everything\n  \n\n252\n00:15:30,200 --> 00:15:34,400\nin WordPress. But in Storyblock, we have special\n  \n\n253\n00:15:35,740 --> 00:15:38,220\nthings already ready for internationalization,\n  \n\n254\n00:15:38,680 --> 00:15:41,500\nso that's really great. Yeah, yeah. Definitely, I\n  \n\n255\n00:15:41,500 --> 00:15:45,420\nwould say that's kind of table stakes for CMS is to\n  \n\n256\n00:15:45,420 --> 00:15:49,040\nhandle translations. And that is a good point that\n  \n\n257\n00:15:49,040 --> 00:15:51,140\ninternationalization isn't just about the text,\n  \n\n258\n00:15:51,140 --> 00:15:55,260\nbut also the way you format numbers and different\n  \n\n259\n00:15:55,260 --> 00:15:59,780\nthings like that. Yes, also. And it's not just a\n  \n\n260\n00:15:59,780 --> 00:16:02,220\nmatter of you're displaying dollars, let's\n  \n\n261\n00:16:02,220 --> 00:16:04,700\nconvert that to pounds or euros. Or is it like, you\n  \n\n262\n00:16:04,700 --> 00:16:08,240\ngotta do a currency conversion if you really wanna\n  \n\n263\n00:16:08,240 --> 00:16:11,300\ngo that deep into it. And that's like very dynamic.\n  \n\n264\n00:16:11,600 --> 00:16:16,900\nAnd so it can be pretty complicated making a global\n  \n\n265\n00:16:17,500 --> 00:16:20,980\nweb presence. So it sounds like that's a pretty\n  \n\n266\n00:16:20,980 --> 00:16:24,280\nwell defined thing. So the people that you would\n  \n\n267\n00:16:24,280 --> 00:16:26,600\nhire, contractors or whoever, to do these\n  \n\n268\n00:16:26,600 --> 00:16:30,160\ntranslations, their experience is you give them a\n  \n\n269\n00:16:30,160 --> 00:16:32,800\nlogin to Storyblock and then they can go through\n  \n\n270\n00:16:32,800 --> 00:16:38,720\nand say, okay, here's the UI or the content that\n  \n\n271\n00:16:38,720 --> 00:16:40,640\nthey have in English. There's no Japanese\n  \n\n272\n00:16:40,640 --> 00:16:43,040\ntranslation in this yet. So I'm going to select the\n  \n\n273\n00:16:43,040 --> 00:16:46,260\ndropdown and make a Japanese translation. Do they\n  \n\n274\n00:16:46,260 --> 00:16:49,600\nget to see where that content exists in the app? Is\n  \n\n275\n00:16:49,600 --> 00:16:53,440\nthere an easy way for them to know how to use the app?\n  \n\n276\n00:16:53,900 --> 00:16:56,740\nYes. First we can create roles. You can assign,\n  \n\n277\n00:16:57,940 --> 00:17:00,560\ntranslate your role to translate in Japanese and\n  \n\n278\n00:17:01,500 --> 00:17:06,780\nyou will have only access to that. So if it's by\n  \n\n279\n00:17:06,780 --> 00:17:09,119\nregion, so there is these folders, you can see\n  \n\n280\n00:17:09,119 --> 00:17:15,640\nthese folders, but if it's just the fields, then it\n  \n\n281\n00:17:15,640 --> 00:17:18,760\njust has a dropdown and the different languages.\n  \n\n282\n00:17:21,280 --> 00:17:24,900\nAnd there is also extensions where, for example,\n  \n\n283\n00:17:25,020 --> 00:17:30,580\nyou can send the data to be translated by an\n  \n\n284\n00:17:30,580 --> 00:17:34,260\nexternal application and send back. Recently,\n  \n\n285\n00:17:34,640 --> 00:17:37,120\nI've seen something great, I have not tried it. And\n  \n\n286\n00:17:37,120 --> 00:17:39,140\nI think it's an extension done by your partner\n  \n\n287\n00:17:39,140 --> 00:17:41,960\nbecause Storyblock is extensible, so you can\n  \n\n288\n00:17:41,960 --> 00:17:48,340\nbuild on top of it. And it was with Deeple, and it was\n  \n\n289\n00:17:48,340 --> 00:17:51,560\ntranslating directly, automatically into\n  \n\n290\n00:17:51,560 --> 00:17:55,120\ndifferent languages. So that can be, yes, that can\n  \n\n291\n00:17:55,120 --> 00:17:57,980\nbe really, really great. I've just seen it working\n  \n\n292\n00:17:57,980 --> 00:18:03,040\n1 time. I have not deeply tested it, but I was quite\n  \n\n293\n00:18:03,040 --> 00:18:05,920\nimpressed by this. It changed the language and it\n  \n\n294\n00:18:05,920 --> 00:18:08,320\nwas translating, and then you can correct, of\n  \n\n295\n00:18:08,320 --> 00:18:13,260\ncourse. Yeah, yeah. That gives the contractors or\n  \n\n296\n00:18:13,260 --> 00:18:15,820\nwhatever service you're using, those people a\n  \n\n297\n00:18:15,820 --> 00:18:18,420\nheadstart in getting things going in the\n  \n\n298\n00:18:18,420 --> 00:18:23,680\ntranslation process. That's very cool. So yeah, I\n  \n\n299\n00:18:23,680 --> 00:18:26,940\nthink translation's an important part of a CMS.\n  \n\n300\n00:18:27,180 --> 00:18:29,580\nWhat are some other aspects of a CMS that people\n  \n\n301\n00:18:29,580 --> 00:18:33,180\ndon't typically think about but you have to deal\n  \n\n302\n00:18:33,180 --> 00:18:37,480\nwith on the day to day? Okay, I will talk about\n  \n\n303\n00:18:37,480 --> 00:18:39,960\nStoryblock because it's the 1 that I know the best\n  \n\n304\n00:18:39,960 --> 00:18:42,500\nand... Yeah, you can talk about Storyblock. 1 of\n  \n\n305\n00:18:42,500 --> 00:18:48,840\nthe features I love is the visual editor. Before\n  \n\n306\n00:18:48,840 --> 00:18:51,300\nworking at Storyblock, I realized that I opened an\n  \n\n307\n00:18:51,300 --> 00:18:55,780\naccount with them, I don't know, 2 years before,\n  \n\n308\n00:18:55,800 --> 00:18:59,080\nbecause I was very attracted by this visual editor.\n  \n\n309\n00:18:59,280 --> 00:19:02,320\nAnd I didn't use it because I have no time. I was\n  \n\n310\n00:19:02,320 --> 00:19:05,460\nfreelancing at this moment and I don't have time.\n  \n\n311\n00:19:05,560 --> 00:19:08,600\nBut yes, having a visual editor, the content in the\n  \n\n312\n00:19:08,600 --> 00:19:12,420\nmarketing people can see what they do and if the\n  \n\n313\n00:19:12,640 --> 00:19:15,060\nback office, if the components are well done, the\n  \n\n314\n00:19:15,060 --> 00:19:18,480\nstrategy is well done. They just have a Lego game\n  \n\n315\n00:19:18,580 --> 00:19:22,440\nand it can build all the pages and all what they need\n  \n\n316\n00:19:22,440 --> 00:19:27,260\nand variations. So it's visual, so you see what you\n  \n\n317\n00:19:27,260 --> 00:19:36,540\ndo. So that's really great. And... Well, you're\n  \n\n318\n00:19:36,540 --> 00:19:40,640\nthinking that's a good thing. Just to go off of that\n  \n\n319\n00:19:40,640 --> 00:19:42,900\na little bit, when, when people are writing\n  \n\n320\n00:19:42,900 --> 00:19:45,360\ncontent, they may see a field that's called.\n  \n\n321\n00:19:46,460 --> 00:19:49,780\nFooter, for example. But unless they actually can\n  \n\n322\n00:19:49,780 --> 00:19:53,600\nsee where that appears in the UI and everything, it\n  \n\n323\n00:19:53,600 --> 00:19:55,840\ncan just be a little more challenging to know what\n  \n\n324\n00:19:55,840 --> 00:19:59,380\nthe content should say, like how big is too big, or\n  \n\n325\n00:19:59,380 --> 00:20:01,840\nhow long is too long, how short is too short for\n  \n\n326\n00:20:01,840 --> 00:20:05,460\nwhere this appears in the UI. So that sounds like a\n  \n\n327\n00:20:05,460 --> 00:20:08,560\nreally useful feature. Yes, no, no, that's really,\n  \n\n328\n00:20:08,560 --> 00:20:13,140\nreally useful. 1 thing that is great too, and I've\n  \n\n329\n00:20:13,140 --> 00:20:17,780\nworked a lot on that, it's the extensions with\n  \n\n330\n00:20:17,780 --> 00:20:23,480\ne-commerce. Because thanks to that, you can\n  \n\n331\n00:20:23,480 --> 00:20:27,460\nimplement storytelling in your e-commerce\n  \n\n332\n00:20:27,860 --> 00:20:32,000\napplication. And so that's a help to sell. For\n  \n\n333\n00:20:32,000 --> 00:20:34,500\nexample, you have blog posts and you can implement,\n  \n\n334\n00:20:36,180 --> 00:20:38,380\ntell a story about your product and implement the\n  \n\n335\n00:20:38,380 --> 00:20:40,580\nproduct at the end. And so that drives people to\n  \n\n336\n00:20:40,580 --> 00:20:43,040\nsell because you drive their emotions with that.\n  \n\n337\n00:20:43,620 --> 00:20:45,700\nAnd in Storyblocks, there is this extension about\n  \n\n338\n00:20:45,700 --> 00:20:49,240\ne-commerce. So you can visually see the product,\n  \n\n339\n00:20:49,480 --> 00:20:53,980\nmix and match it with the CMS content. And that's\n  \n\n340\n00:20:54,240 --> 00:20:59,680\nreally, really great. And yes, you can do many\n  \n\n341\n00:20:59,680 --> 00:21:03,420\nextensions. As soon as you can interact with an API,\n  \n\n342\n00:21:03,420 --> 00:21:06,280\nyou can build an extension, that's great too. Oh\n  \n\n343\n00:21:06,280 --> 00:21:11,040\nyeah, because often our websites are composed of\n  \n\n344\n00:21:11,040 --> 00:21:13,960\nmultiple data sources. And so being able to\n  \n\n345\n00:21:14,100 --> 00:21:18,340\nintegrate those properly is very helpful. Yeah,\n  \n\n346\n00:21:18,340 --> 00:21:21,760\nyeah, yeah, yeah. Yeah, very cool. So is there\n  \n\n347\n00:21:21,760 --> 00:21:25,320\nanything that you would recommend people not use\n  \n\n348\n00:21:25,320 --> 00:21:29,880\nthe CMS for? Like we could go really deep on this and\n  \n\n349\n00:21:29,880 --> 00:21:33,940\nmaybe have, like maybe I'm using the CMS for my CSS.\n  \n\n350\n00:21:34,440 --> 00:21:37,640\nI'm bringing my CSS through the CMS. Is that, would\n  \n\n351\n00:21:37,640 --> 00:21:43,000\nthat be taking it too far? Where's the limit? CSS, I\n  \n\n352\n00:21:43,000 --> 00:21:47,500\nuse, I don't bring my CSS inside the CMS, but I make\n  \n\n353\n00:21:47,500 --> 00:21:49,820\ndifferent style. I can make conditionals, I make a\n  \n\n354\n00:21:49,820 --> 00:21:52,220\ndrop down. Okay, I want a dark background, I want a\n  \n\n355\n00:21:52,220 --> 00:21:55,880\ngreen background. I want to align left, so you can\n  \n\n356\n00:21:55,880 --> 00:21:58,940\nmake conditions like that. What you can bring in\n  \n\n357\n00:21:58,940 --> 00:22:04,060\nthe CMS, If it's a simple application that is not\n  \n\n358\n00:22:04,060 --> 00:22:07,940\nmanaging a lot of data and content, I don't know\n  \n\n359\n00:22:07,940 --> 00:22:11,120\nwhat a CMS will do there. But I think it's obvious at\n  \n\n360\n00:22:11,120 --> 00:22:14,340\nthe end. You use a CMS to manage things, so if you\n  \n\n361\n00:22:14,340 --> 00:22:17,040\nhave nothing to manage, you will not use it. Yeah, I\n  \n\n362\n00:22:17,040 --> 00:22:21,180\nsee. You've never really seen somebody use a CMS\n  \n\n363\n00:22:21,260 --> 00:22:23,940\nthat really shouldn't be, or like taking the CMS\n  \n\n364\n00:22:23,940 --> 00:22:27,160\ntoo far and that leading to problems? I have seen\n  \n\n365\n00:22:27,160 --> 00:22:32,740\nhorrible things in WordPress for sure. That's the\n  \n\n366\n00:22:32,740 --> 00:22:34,920\nproblem of WordPress, because there is all this\n  \n\n367\n00:22:34,920 --> 00:22:37,880\ntheme and extension that developers make to sell\n  \n\n368\n00:22:37,880 --> 00:22:40,360\nmore and more and these people that want to use it\n  \n\n369\n00:22:40,360 --> 00:22:42,460\nand they don't know anything about development.\n  \n\n370\n00:22:42,600 --> 00:22:46,980\nSo they just put 1 plugin on top of another and I\n  \n\n371\n00:22:46,980 --> 00:22:48,760\nremember when I was beginning, I rebuilt the\n  \n\n372\n00:22:48,760 --> 00:22:50,740\nwebsite that was super, super slow building\n  \n\n373\n00:22:50,740 --> 00:22:53,700\nWordPress and inside there was a builder. Inside\n  \n\n374\n00:22:53,700 --> 00:22:57,100\nthis builder, there was HTML and nothing was\n  \n\n375\n00:22:57,100 --> 00:23:00,860\nworking. There was images with a pattern on top of\n  \n\n376\n00:23:00,860 --> 00:23:05,340\nthem and this pattern was a PNG. And so it was super,\n  \n\n377\n00:23:05,460 --> 00:23:11,140\nyes. So you see things like that sometimes. Yeah,\n  \n\n378\n00:23:11,140 --> 00:23:14,240\nyeah. So and the CMS with all the themes and plugins,\n  \n\n379\n00:23:14,600 --> 00:23:18,420\nit's good because it gives power to people that are\n  \n\n380\n00:23:18,420 --> 00:23:21,360\nnot developers, but sometimes it gives too much\n  \n\n381\n00:23:21,940 --> 00:23:25,760\nand you have some monsters that grow there. And\n  \n\n382\n00:23:25,760 --> 00:23:29,240\nthat's, it looks nice, but cannot work because\n  \n\n383\n00:23:29,240 --> 00:23:33,520\nit's super slow, bringing all this code. And yes,\n  \n\n384\n00:23:33,520 --> 00:23:37,700\nthat's, that's it. Yeah, okay. So maybe another\n  \n\n385\n00:23:37,760 --> 00:23:42,280\nangle of that same idea is if I am building an\n  \n\n386\n00:23:42,280 --> 00:23:47,140\napplication that does have content, let's say I\n  \n\n387\n00:23:47,140 --> 00:23:51,240\nhave to make the decision of do I put, I have some new\n  \n\n388\n00:23:51,240 --> 00:23:53,880\ndata I need to store, do I put that in the CMS or do I\n  \n\n389\n00:23:53,880 --> 00:23:59,020\nput that in my own database? And so, what are the\n  \n\n390\n00:23:59,020 --> 00:24:02,260\nthings that kind of, Like let's say we've got a blog,\n  \n\n391\n00:24:03,100 --> 00:24:06,500\nand I use the CMS for the blog, but then I want people\n  \n\n392\n00:24:06,500 --> 00:24:09,620\nto be able to favorite blog posts, and so they're\n  \n\n393\n00:24:09,620 --> 00:24:11,580\ngonna have their list of favorites over here, and\n  \n\n394\n00:24:11,580 --> 00:24:13,080\nwhen they see a blog post, they're gonna hit\n  \n\n395\n00:24:13,080 --> 00:24:14,980\nfavorite on it, and now they've got their user\n  \n\n396\n00:24:14,980 --> 00:24:16,720\naccount, and that shows all their favorite blog\n  \n\n397\n00:24:16,720 --> 00:24:19,600\nposts. Where does that data live? What's the best\n  \n\n398\n00:24:19,600 --> 00:24:24,020\nplace to put data like that? Would you have the CMS\n  \n\n399\n00:24:24,020 --> 00:24:26,780\nmanage that list of favorites or would you\n  \n\n400\n00:24:26,820 --> 00:24:30,660\nrecommend putting that in your own database? I\n  \n\n401\n00:24:30,660 --> 00:24:33,540\nhave to think about it. I think for that... So it's\n  \n\n402\n00:24:33,540 --> 00:24:38,400\nnuanced. Because there's not necessarily the\n  \n\n403\n00:24:38,400 --> 00:24:42,980\nright answer. If it's permanent, then you need to\n  \n\n404\n00:24:43,420 --> 00:24:49,000\nbuild a user account, I think. So should you keep\n  \n\n405\n00:24:49,000 --> 00:24:51,580\nthis user account in your CMS on the database? I\n  \n\n406\n00:24:51,580 --> 00:24:55,080\ndon't know. I would need to think about it a bit more.\n  \n\n407\n00:24:55,080 --> 00:24:57,680\nCertainly, you will find an answer quicker than me.\n  \n\n408\n00:24:59,440 --> 00:25:02,940\nBut if it's not permanent, you can store it in the\n  \n\n409\n00:25:03,900 --> 00:25:08,300\nlocal storage or whatever. In this case, you don't\n  \n\n410\n00:25:08,300 --> 00:25:13,380\nneed, you don't need, you manage it front end. Yeah.\n  \n\n411\n00:25:13,380 --> 00:25:17,480\nOkay. So again, it Would it be correct to assume\n  \n\n412\n00:25:17,480 --> 00:25:22,640\nthen that the CMS is not typically where you would\n  \n\n413\n00:25:22,640 --> 00:25:26,720\nstore data from users of your application. The CMS\n  \n\n414\n00:25:26,720 --> 00:25:31,580\nwould be used primarily by people who are creating\n  \n\n415\n00:25:31,720 --> 00:25:35,280\ncontent for your application. And then anything\n  \n\n416\n00:25:35,280 --> 00:25:38,440\nthat your end users are, any of the data that the end\n  \n\n417\n00:25:38,440 --> 00:25:40,380\nuser is creating, you should probably store in\n  \n\n418\n00:25:40,380 --> 00:25:43,440\nyour own database. Is that pretty good line of\n  \n\n419\n00:25:43,440 --> 00:25:46,800\ndrawing? It depends. If I remember, I have worked\n  \n\n420\n00:25:46,800 --> 00:25:49,440\non a project, a big project on WordPress, but it was\n  \n\n421\n00:25:49,440 --> 00:25:53,320\nreally a mess. And I remember, I think I create, you\n  \n\n422\n00:25:53,320 --> 00:25:56,760\ncan create a user content type and then attach the\n  \n\n423\n00:25:56,760 --> 00:26:00,240\npost to it. That can be a solution. But I think It\n  \n\n424\n00:26:00,240 --> 00:26:03,480\ndepends on the website, on the application of what\n  \n\n425\n00:26:03,480 --> 00:26:08,960\nyou need, if you need an external database or if you\n  \n\n426\n00:26:09,060 --> 00:26:15,800\ncan store it in the CMS. Yeah, okay. Yes, I have done,\n  \n\n427\n00:26:15,800 --> 00:26:20,340\nfor example, I build something to make comments.\n  \n\n428\n00:26:20,340 --> 00:26:24,520\nIt was more in Storyblock, it was more to test how it\n  \n\n429\n00:26:24,520 --> 00:26:29,940\nworks than to use it because I can do it with Disqus\n  \n\n430\n00:26:29,960 --> 00:26:35,300\nand it's full featured. But I build a comment\n  \n\n431\n00:26:35,300 --> 00:26:38,800\nsystem with the management API, So I was attaching\n  \n\n432\n00:26:38,960 --> 00:26:42,260\nthe comments to a post automatically when people\n  \n\n433\n00:26:42,260 --> 00:26:46,100\nwere writing. So it's a bit the same. Attaching 1\n  \n\n434\n00:26:46,100 --> 00:26:49,200\ncontent to another so you can create the user and\n  \n\n435\n00:26:49,200 --> 00:26:52,680\nattach posts to it which are favorited. That's the\n  \n\n436\n00:26:52,680 --> 00:26:55,520\nstrategy, but there is no 1 way, I think. It depends\n  \n\n437\n00:26:55,520 --> 00:26:58,980\non the cases. Yeah, well, I think that is part of\n  \n\n438\n00:26:58,980 --> 00:27:01,120\nwhat makes software interesting is the fact that\n  \n\n439\n00:27:01,120 --> 00:27:03,640\nthere is no 1 way. And you have to figure... It\n  \n\n440\n00:27:03,640 --> 00:27:08,140\ndepends. Yeah. Always. Well, Alexa, we've had a\n  \n\n441\n00:27:08,140 --> 00:27:10,460\ngood time chatting together. Is there anything\n  \n\n442\n00:27:10,840 --> 00:27:14,540\nthat we didn't talk about that you'd like to touch\n  \n\n443\n00:27:14,540 --> 00:27:19,120\non before we wrap up? Perhaps about AI, because AI\n  \n\n444\n00:27:19,120 --> 00:27:24,900\nis really going up. I have not tested it, but it's\n  \n\n445\n00:27:24,900 --> 00:27:27,680\nchanging. It's changing things and more and more\n  \n\n446\n00:27:27,680 --> 00:27:31,120\ncontent. I read that I don't remember the\n  \n\n447\n00:27:31,120 --> 00:27:33,680\npercentage of additional content created this\n  \n\n448\n00:27:33,680 --> 00:27:37,440\nyear, because people, thanks to AI, can create a\n  \n\n449\n00:27:37,440 --> 00:27:43,380\nlot more. And you can do things with AI inside the\n  \n\n450\n00:27:43,380 --> 00:27:45,860\nCMS. I wanted to create an extension, but I think\n  \n\n451\n00:27:45,860 --> 00:27:50,060\nStoryblock is doing it to create, for example, a\n  \n\n452\n00:27:50,060 --> 00:27:54,280\ncontent and you can have the tone, you can have the\n  \n\n453\n00:27:54,280 --> 00:27:57,440\nsubject, the keywords, and automate the content\n  \n\n454\n00:27:57,440 --> 00:28:01,160\ncreation. I saw a partner also create something to\n  \n\n455\n00:28:01,340 --> 00:28:05,920\ncreate the image for a post, you can automatically\n  \n\n456\n00:28:06,240 --> 00:28:13,080\ntag images, you can categorize content, you can do\n  \n\n457\n00:28:13,080 --> 00:28:16,920\nmany things. I want to dive into that now. Yeah,\n  \n\n458\n00:28:16,920 --> 00:28:20,660\nyeah. This is a very exciting time. It's, I'm\n  \n\n459\n00:28:20,660 --> 00:28:22,800\nfinding that the biggest challenge with AI is\n  \n\n460\n00:28:22,800 --> 00:28:25,020\nfiguring out how to use it for more than just a\n  \n\n461\n00:28:25,020 --> 00:28:29,180\nchatbot. The chatbot, it seems like the obvious\n  \n\n462\n00:28:29,180 --> 00:28:34,400\nthing, but How do you use it to create something\n  \n\n463\n00:28:34,700 --> 00:28:36,820\nuseful to the user that doesn't involve them\n  \n\n464\n00:28:36,820 --> 00:28:40,020\nchatting back and forth with the AI assistant? So\n  \n\n465\n00:28:40,080 --> 00:28:42,540\nit's an exciting time. About that, yes, to\n  \n\n466\n00:28:42,780 --> 00:28:46,500\nintroducing using OpenAI and introduce perhaps,\n  \n\n467\n00:28:46,500 --> 00:28:49,540\nyou know, drop downs when they choose, oh, okay, as\n  \n\n468\n00:28:49,540 --> 00:28:53,620\na persona, I'm a blogger about food. Okay, I want to\n  \n\n469\n00:28:53,620 --> 00:28:59,020\nwrite about that. I want these keywords in my post.\n  \n\n470\n00:28:59,020 --> 00:29:02,420\nAnd so all this data can go to train OpenAI and\n  \n\n471\n00:29:02,420 --> 00:29:05,040\ngenerate automatically. So instead of prompting,\n  \n\n472\n00:29:05,140 --> 00:29:09,960\nit's just sending what is needed and creating. So I\n  \n\n473\n00:29:09,960 --> 00:29:12,340\nwant to work on that. I'm excited right now. Yeah,\n  \n\n474\n00:29:12,340 --> 00:29:15,360\nthat's very cool. It's an exciting time. All right,\n  \n\n475\n00:29:15,480 --> 00:29:18,000\nAlexandra, what's the best place for people to\n  \n\n476\n00:29:18,260 --> 00:29:21,280\nkeep up with what you're working on and reach out to\n  \n\n477\n00:29:21,280 --> 00:29:23,760\nyou if they have questions? Yes, they can find me on\n  \n\n478\n00:29:23,760 --> 00:29:30,060\nTwitter, on AlexaDark. If I can write it. Yeah,\n  \n\n479\n00:29:30,060 --> 00:29:34,440\nWe'll link to it for sure. Yeah, and dark is not\n  \n\n480\n00:29:34,440 --> 00:29:36,840\nbecause I'm dark. It's because my partner name is\n  \n\n481\n00:29:36,840 --> 00:29:44,300\nDarko Well, great, well, it was so nice to chat with\n  \n\n482\n00:29:44,300 --> 00:29:46,860\nyou today I think you're giving us some of your time\n  \n\n483\n00:29:46,960 --> 00:29:49,340\nand I hope everybody has an awesome time creating\n  \n\n484\n00:29:49,340 --> 00:29:52,900\nsome great content. Yes Thank you so much and see\n  \n\n485\n00:29:52,900 --> 00:29:56,500\nyou at the next conference Yeah, bye. Bye.\n  \n\n486\n00:29:56,680 --> 00:29:57,180\nBye",
            "text": "[00:00:00] Kent:\nHello everybody, I'm joined by my friend Alexandra Spalato. How are you doing? \n\n[00:00:06] Alexandra:\nFine, and you? \n\n[00:00:08] Kent:\nDoing great. I am joining you from Utah and Alexandra is coming from Spain, right? \n\n[00:00:14] Alexandra:\nYes, I'm in Madrid. \n\n[00:00:16] Kent:\nYeah, awesome. Madrid I have only been to the airport. So maybe 1 day I can \n\n[00:00:21] Alexandra:\nget out of the airport. You should come for tapas. I would be happy. Yeah, \n\n[00:00:25] Kent:\nyeah. So Alexandra and I \n\n[00:00:28] Kent:\nmet online, I don't know, maybe like a year and a half ago or so. And- Not \n\n[00:00:33] Alexandra:\nso much. \n\n[00:00:34] Kent:\nYeah, well, we met in person at RemixConf last year. And so, yeah, it's just been a pleasure to get to know you. I'd love for the audience to get to know you a little bit. So could you give us a little intro to yourself? \n\n[00:00:50] Alexandra:\nSo I'm Alexandra Spalato. I'm a developer relation engineer at Storyblock, which is a awesome headless CMS. And before that I was freelancing for about 10 years, a lot in the WordPress world and especially Headless WordPress. I even created \n\n[00:01:10] a product which was Gatsby WP Themes. It was themes with the front end Gatsby and the back office in WordPress. But as I'm not a marketer, the sales were not high, but I had a lot of fun creating it. And I did many other things before being in the web too. \n\n[00:01:28] Kent:\nAwesome, yeah. So Spending a lot of time in WordPress, that's still the number 1 deployed thing on the internet for sure. And so you've just, it sounds like you've always been pretty interested in content on the web. \n\n[00:01:48] Alexandra:\nYes, it's WordPress, I'm happy to stretch to development and to code, but at the end, I realized that I have always been with working with CMSs from the historic 1, WordPress, to Storyblock, which is 1 of the most modern ones. So yes, I realize I'm \n\n[00:02:08] really, really deep into this. \n\n[00:02:11] Kent:\nYeah, yeah. So what have you, as you've been involved in content management for a very long time. What evolutions have you seen in the content management space since your early days with WordPress to now? \n\n[00:02:28] Alexandra:\nEspecially, I would say, the headless. Headless is everywhere now, I think, is a new way of doing things because thanks to that and APIs, we can do omnichannel and have been only 1 source of truth of content without duplicating and \n\n[00:02:48] deploy it on mobile apps, on web apps, even smartwatch and Alexa everywhere. So headless is really the best thing now. Oh God, I say Alexa and my Alexa is... Oh, nice. That's terrible. We'll make sure \n\n[00:03:08] Kent:\nto avoid triggering all of our assistants then. \n\n[00:03:11] Alexandra:\nYeah, yeah, yeah, yeah. Okay, stop. Yeah, thanks to headless, websites are faster, the SEO is better. Yes, it's much, much better. But even with WordPress, I was already doing headless. \n\n[00:03:32] However, with Storyblock and headless CMSs, which are done, especially for that, of course, it's better because you are not hacking something. It's already going to be headless. Your API are there. So I really like to know both parts to begin with the historic 1 \n\n[00:03:52] and it's great when people want to transfer from there and don't want to change systems. It's also possible if it's not too complicated. And CMS is like Storyblock, which are very, very advanced. \n\n[00:04:07] Kent:\nYeah, very cool. So I wanted to dive a little bit into what the the problem is that CMS solves. So as a new developer jumping into building web applications, they're going to pull up their H1 and they'll have a hello world in there and \n\n[00:04:28] that right there is content. So like we already have a way to publish content on the web. Why do we have to add this extra layer of complexity by having like a separate place where the content is and everything? What is the problem that a content management solution solves? \n\n[00:04:46] Alexandra:\nIt depends. If you have a very simple blog, of course you can do it on Git and with MDX or things like that. But as soon as content becomes much more advanced than just a blog, you can have different content type. A content type is a schema \n\n[00:05:06] for a type of content. It can be a post, a landing page. And so you can design the schema or the fields. It can be a title, an image, even some flexible fields where you can build some sort of builders. Also, perhaps you need to categorize this content in different folders and things \n\n[00:05:26] to search it. You can set up workflow, translation, messaging, many, many things that I even don't talk about enterprise websites where it's obvious that you need a CMS to do it. But even a small marketing website, \n\n[00:05:46] As soon as you have a lot of different type of content and a lot of pages and fields, it will be much better with a CMS. And you have the database which is included. Most of them are SaaS. Storyblock is a SaaS, for example. WordPress \n\n[00:06:06] is self-hosted. So with SaaS, you have all the updates included. You have the database and everything. So it's, yes, it makes life really more easier. You can do it yourself, but it can be complicated without it. \n\n[00:06:25] Kent:\nYeah, yeah. I would say that it makes a lot of sense for when you have multiple channels that you want to have consuming the content, or you want to, like, let's say you are building a blog. You've got the blog post itself, but then you wanna feed that into the home \n\n[00:06:46] screen. And so you can say, here are the featured blogs, and now you have to duplicate maybe or something and so having a centralized location for all of the content and what's interesting is that you mentioned there's blog posts as 1 type of content but then there's videos or images and you can host all those But then there's subcategories \n\n[00:07:06] too, like a blog post can have an image, and it can have a video. And so it can get pretty complex. \n\n[00:07:13] Alexandra:\nOh yes, it can be very, very complex. Even with a CMS, you really have to, what is very important when you build a website, an app, is to plan how this content is going to flow, what you need for the UX, how you want to display it, but then how \n\n[00:07:33] you break it in component and how you want to reuse this component, how you want to make variation on this components, which content will be attached to another and will depend 1 on another. So being able to plan all that makes your life much, \n\n[00:07:54] much easier because without that, it can be really, it can be a mess. \n\n[00:07:59] Kent:\nYeah, yeah, absolutely. And then on top of that, you also have, like if you're building a site for yourself, then you're the 1 making the content, but at any scale at a company, you're not gonna be the 1 writing the content and you don't want to have the people who are in charge of writing the content reach out to you and say, hey, can you update the code so that it says \n\n[00:08:19] Alexandra:\nsomething different? \n\n[00:08:20] Kent:\nExactly. Now, is there, and so like, of course, those people aren't gonna be committing code either. So it is nice to have an externalized WYSIWYG editor or something like that. That can be really helpful. Now, is there a situation where you would say that a content management, or I guess, where's the line between I \n\n[00:08:41] just hard code all the content in the code versus the content is now a data source? \n\n[00:08:48] Alexandra:\nOkay, you can, yes. You can art code everything if the website is simple and you are the only 1 to work on it, or perhaps you have a friend developer that will change things. But I think that's the limit. You can use things like MDX and have everything on Git too. But yes, I think \n\n[00:09:08] that's the limit. It's having a personal website with simple content where you know everything and you're the only 1 intervening on it, then yes, as soon as it's a bit more complicated, it's much more easier to have a CMS. And I really like the CMS that are \n\n[00:09:28] component-based, which is the case of Storyblock. WordPress, I was using it always with a plugin name, Advanced Custom Fields and Flexible Content. So then you can map components to your code and make them reusable and not think about pages. Pages are very monolithic too. It's not \n\n[00:09:48] flexible. So I really, really like to have everything component based and map everything in React, for example, in Remix especially. And Yes, but yes, I think working without a CMS is very limited. Otherwise, there is also some developers who like \n\n[00:10:09] to build their own CMS. I had a friend like that. I think it can be complex and front to error and bugs and the CMS, you have all the security updates and you don't have to touch, the backend is here for you. Basically you have all your backend and you just have to take care \n\n[00:10:29] of the frontend. \n\n[00:10:32] Kent:\nYeah, so with a website that's driven by a CMS, like Storyblock or Century or, you know, the list of companies goes on. \n\n[00:10:41] Alexandra:\nOh, there is a lot. Yeah. There is not only Storyblock, even if I love it. But yeah, there is a lot. \n\n[00:10:47] Kent:\nYeah, so there are many options there, but you can kind of implement a backend for the front end architecture with Remix, where you've got the Remix loaders and actions interacting with the CMS, and you are interacting with the database directly. Now, is this only for marketing sites, or can \n\n[00:11:07] people benefit from using a CMS for like apps as well? \n\n[00:11:12] Alexandra:\nYes, you can also build apps. Basically, the CMS is for storing data, content is data. So you can use it for an app. It's then your creativity and strategy that will dictate you what you need and which CMS is the best \n\n[00:11:32] for your use case. But yes, it's a way of managing data in the most organized way possible and to have a database as a service, so yes. \n\n[00:11:44] Kent:\nVery cool, yeah. So I wanna talk a little bit about internationalization or localization, translations and things. So when I was at PayPal, I referenced my time at PayPal a lot because I think it resembles a lot of people's work. But even Before that, I had other companies where we did similar things for internationalization. \n\n[00:12:06] And what we did was we would have a directory in our repository that had folders and then files that were like basically properties files, so a key value sort of thing. We used message format, that's kind of the standard for doing internationalization with \n\n[00:12:26] pluralization and genders and different stuff like that, it's pretty interesting. But yeah, so we just would have all those files. We would have the English ones, and then somebody at PayPal had built a tool that our translators would be able to see what strings were not translated yet. They'd see what the previous \n\n[00:12:46] 1 was or what the current English version was and then they'd translate that. So we'd have like a bunch of these different files and then our server would consume those and we'd have access to the translations. And that involved, the tool would like make pull requests to the repo so we could pull the content changes \n\n[00:13:06] and stuff. Probably not my favorite thing to do for managing content. So what is the experience like with a proper CMS? And you can use Storyblock specifically, but if I wanted to internationalize my site with a modern CMS, what is my experience going to be like there? And not just my experience as \n\n[00:13:26] a developer, but also the experience of the people writing the translations. \n\n[00:13:31] Alexandra:\nOkay, in Storyblock there is several ways. I have not worked myself on a big internationalization website, but I know how it works. So you can do it at several levels. So the simplest level, If you want just to have translation, just the text, then you can do it at the feed level. And \n\n[00:13:52] inside Storyblock, you can activate that and you will have a dropdown and choose the language and that with the API, you will have the right code to build your front end. So that's a way, but internationalization, it's not only the text. It can be also you want, you can \n\n[00:14:12] be, for example, an English website for the US and for the UK can look different colors, content or anything. So in this case, we can use folders and there is an extension in Storyblock where you have a drop-down \n\n[00:14:32] and then you can clone the home page, for example, from 1 country to another country and then translate, make changes, then you can merge, for example, the look of 1 country to another and the language stay \n\n[00:14:52] different. Well, that's another strategy. It's not only the language, but also the website. In this case, you use folders. And Storyblock, we also have spaces. So you can use these spaces in case for big websites, you can have a team that work on a region and another team in another and \n\n[00:15:12] assign spaces to these people. You can, of course, mix and match these methods, depending on the complexity and your strategy and what you want to do. So yes, in advanced CMS, it's not the case in WordPress. I don't think there is, perhaps there is plugins, there is plugins for everything in WordPress. But in Storyblock, we \n\n[00:15:32] have special things already ready for internationalization, so that's really great. \n\n[00:15:40] Kent:\nYeah, yeah. Definitely, I would say that's kind of table stakes for CMS is to handle translations. And that is a good point that internationalization isn't just about the text, but also the way you format numbers and different things like that. \n\n[00:15:56] Alexandra:\nYes, also. \n\n[00:15:58] Kent:\nAnd it's not just a matter of you're displaying dollars, let's convert that to pounds or euros. Or is it like, you gotta do a currency conversion if you really wanna go that deep into it. And that's like very dynamic. And so it can be pretty complicated making a global web presence. \n\n[00:16:19] So it sounds like that's a pretty well defined thing. So the people that you would hire, contractors or whoever, to do these translations, their experience is you give them a login to Storyblock and then they can go through and say, okay, here's the UI or the content that they have in \n\n[00:16:39] English. There's no Japanese translation in this yet. So I'm going to select the dropdown and make a Japanese translation. Do they get to see where that content exists in the app? Is there an easy way for them to know how to \n\n[00:16:52] Kent:\nuse the app? \n\n[00:16:53] Alexandra:\nYes. First we can create roles. You can assign, translate your role to translate in Japanese and you will have only access to that. So if it's by region, so there is these folders, you can see these folders, but if it's just the fields, then \n\n[00:17:15] it just has a dropdown and the different languages. And there is also extensions where, for example, you can send the data to be translated by an external application and send back. Recently, I've seen something great, \n\n[00:17:35] I have not tried it. And I think it's an extension done by your partner because Storyblock is extensible, so you can build on top of it. And it was with Deeple, and it was translating directly, automatically into different languages. So that can be, yes, that can be really, \n\n[00:17:55] really great. I've just seen it working 1 time. I have not deeply tested it, but I was quite impressed by this. \n\n[00:18:04] Kent:\nIt changed \n\n[00:18:05] Alexandra:\nthe language and it was translating, and then you can correct, of course. \n\n[00:18:09] Kent:\nYeah, yeah. That gives the contractors or whatever service you're using, those people a headstart in getting things going in the translation process. \n\n[00:18:19] Alexandra:\nThat's very \n\n[00:18:20] Kent:\ncool. So yeah, I think translation's an important part of a CMS. What are some other aspects of a CMS that people don't typically think about but you have to deal with on the day to day? \n\n[00:18:35] Alexandra:\nOkay, I will talk about Storyblock because it's the 1 that I know the best and... \n\n[00:18:40] Kent:\nYeah, you can talk about Storyblock. \n\n[00:18:42] Alexandra:\n1 of the features I love is the visual editor. Before working at Storyblock, I realized that I opened an account with them, I don't know, 2 years before, because I was very attracted by this visual editor. And I didn't use it because I have no time. I was \n\n[00:19:02] freelancing at this moment and I don't have time. But yes, having a visual editor, the content in the marketing people can see what they do and if the back office, if the components are well done, the strategy is well done. They just have a Lego game and it can build all the pages and all what they need \n\n[00:19:22] and variations. So it's visual, so you see what you do. So that's really great. And... \n\n[00:19:36] Kent:\nWell, you're thinking that's \n\n[00:19:37] Alexandra:\na good thing. \n\n[00:19:38] Kent:\nJust to go off of that a little bit, when, when people are writing content, they may see a field that's called. Footer, for example. But unless they actually can see where that appears in the UI and everything, it can just be a little more challenging to know what the content should say, like how big is too big, \n\n[00:19:58] or how long is too long, how short is too short for where this appears in the UI. So that sounds like a really useful feature. \n\n[00:20:07] Alexandra:\nYes, no, no, that's really, really useful. 1 thing that is great too, and I've worked a lot on that, it's the extensions with e-commerce. Because thanks to that, you can implement storytelling in your e-commerce \n\n[00:20:27] application. And so that's a help to sell. For example, you have blog posts and you can implement, tell a story about your product and implement the product at the end. And so that drives people to sell because you drive their emotions with that. And in Storyblocks, there is this extension about e-commerce. So you can visually \n\n[00:20:48] see the product, mix and match it with the CMS content. And that's really, really great. And yes, you can do many extensions. As soon as you can interact with an API, you can build an extension, that's great too. \n\n[00:21:06] Kent:\nOh yeah, because often our websites are composed of multiple data sources. And so being able to integrate those properly is very helpful. \n\n[00:21:18] Alexandra:\nYeah, yeah, yeah, yeah. \n\n[00:21:19] Kent:\nYeah, very cool. So is there anything that you would recommend people not use the CMS for? Like we could go really deep on this and maybe have, like maybe I'm using the CMS for my CSS. I'm bringing my CSS through the CMS. Is that, would that be taking it too far? Where's the \n\n[00:21:39] limit? \n\n[00:21:42] Alexandra:\nCSS, I use, I don't bring my CSS inside the CMS, but I make different style. I can make conditionals, I make a drop down. Okay, I want a dark background, I want a green background. I want to align left, so you can make conditions like that. What you can bring in the CMS, If it's a \n\n[00:22:02] simple application that is not managing a lot of data and content, I don't know what a CMS will do there. But I think it's obvious at the end. You use a CMS to manage things, so if you have nothing to manage, you will not use it. Yeah, I see. You've never really seen \n\n[00:22:19] Kent:\nsomebody use a CMS that really shouldn't be, or like taking the CMS too far and that leading to problems? \n\n[00:22:26] Alexandra:\nI have seen horrible things in WordPress for sure. That's the problem of WordPress, because there is all this theme and extension that developers make to sell more and more and these people that want to use it and they don't know anything about development. So they just put 1 plugin on top of another and \n\n[00:22:46] I remember when I was beginning, I rebuilt the website that was super, super slow building WordPress and inside there was a builder. Inside this builder, there was HTML and nothing was working. There was images with a pattern on top of them and this pattern was a PNG. And so it was super, yes. \n\n[00:23:07] So you see things like that sometimes. \n\n[00:23:11] Kent:\nYeah, yeah. \n\n[00:23:11] Alexandra:\nSo and the CMS with all the themes and plugins, it's good because it gives power to people that are not developers, but sometimes it gives too much and you have some monsters that grow there. And that's, it looks nice, but cannot work because it's super slow, bringing all \n\n[00:23:31] this code. And yes, that's, that's it. \n\n[00:23:35] Kent:\nYeah, okay. So maybe another angle of that same idea is if I am building an application that does have content, let's say I have to make the decision of do I put, I have some new data I need to store, do I put that in the CMS or do I put that in my own database? \n\n[00:23:56] And so, what are the things that kind of, Like let's say we've got a blog, and I use the CMS for the blog, but then I want people to be able to favorite blog posts, and so they're gonna have their list of favorites over here, and when they see a blog post, they're gonna hit favorite on it, and now they've got their user account, and that shows all their favorite \n\n[00:24:16] blog posts. Where does that data live? What's the best place to put data like that? Would you have the CMS manage that list of favorites or would you recommend putting that in your own database? \n\n[00:24:30] Alexandra:\nI have to think about it. I think for that... So it's nuanced. Because there's \n\n[00:24:36] Kent:\nnot necessarily the right answer. \n\n[00:24:40] Alexandra:\nIf it's permanent, then you need to build a user account, I think. So should you keep this user account in your CMS on the database? I don't know. I would need to think about it a bit more. Certainly, you will find an answer quicker than me. But if it's not permanent, \n\n[00:25:00] you can store it in the local storage or whatever. In this case, you don't need, you don't need, you manage it front end. Yeah. Okay. So again, \n\n[00:25:15] Kent:\nit Would it be correct to assume then that the CMS is not typically where you would store data from users of your application. The CMS would be used primarily by people who are creating content for your application. And then anything that \n\n[00:25:35] your end users are, any of the data that the end user is creating, you should probably store in your own database. Is that pretty good line \n\n[00:25:43] Alexandra:\nof drawing? It depends. If I remember, I have worked on a project, a big project on WordPress, but it was really a mess. And I remember, I think I create, you can create a user content type and then attach the post to it. That can be a solution. But I think It depends on the website, on the application of what \n\n[00:26:03] you need, if you need an external database or if you can store it in the CMS. \n\n[00:26:14] Kent:\nYeah, okay. \n\n[00:26:15] Alexandra:\nYes, I have done, for example, I build something to make comments. It was more in Storyblock, it was more to test how it works than to use it because I can do it with Disqus and it's full featured. But I build a comment \n\n[00:26:35] system with the management API, So I was attaching the comments to a post automatically when people were writing. So it's a bit the same. Attaching 1 content to another so you can create the user and attach posts to it which are favorited. That's the strategy, but there is no 1 way, I think. It depends \n\n[00:26:55] on the cases. \n\n[00:26:56] Kent:\nYeah, well, I think that is part of what makes software interesting is the fact that there is no 1 way. And you have \n\n[00:27:02] Alexandra:\nto figure... It depends. Yeah. Always. \n\n[00:27:06] Kent:\nWell, Alexa, we've had a good time chatting together. Is there anything that we didn't talk about that you'd like to touch on before we wrap up? \n\n[00:27:16] Alexandra:\nPerhaps about AI, because AI is really going up. I have not tested it, but it's changing. It's changing things and more and more content. I read that I don't remember the percentage of additional content created this year, because people, thanks to AI, can \n\n[00:27:36] create a lot more. And you can do things with AI inside the CMS. I wanted to create an extension, but I think Storyblock is doing it to create, for example, a content and you can have the tone, you can have the subject, the keywords, and automate \n\n[00:27:56] the content creation. I saw a partner also create something to create the image for a post, you can automatically tag images, you can categorize content, you can do many things. I want to dive into that now. \n\n[00:28:16] Kent:\nYeah, yeah. \n\n[00:28:17] Alexandra:\nThis is \n\n[00:28:17] Kent:\na very exciting time. It's, I'm finding that the biggest challenge with AI is figuring out how to use it for more than just a chatbot. The chatbot, it seems like the obvious thing, but How do you use it to create something useful to the user that doesn't involve them chatting back and forth \n\n[00:28:38] with the AI assistant? So it's an exciting time. \n\n[00:28:41] Alexandra:\nAbout that, yes, to introducing using OpenAI and introduce perhaps, you know, drop downs when they choose, oh, okay, as a persona, I'm a blogger about food. Okay, I want to write about that. I want these keywords in my post. And so all this data can go to train \n\n[00:29:01] OpenAI and generate automatically. So instead of prompting, it's just sending what is needed and creating. So I want to work on that. I'm excited right now. \n\n[00:29:12] Kent:\nYeah, that's very cool. It's an exciting time. All right, Alexandra, what's the best place for people to keep up with what you're working on and reach out to you if they have questions? \n\n[00:29:22] Alexandra:\nYes, they can find me on Twitter, on AlexaDark. If I can write it. \n\n[00:29:29] Kent:\nYeah, We'll link to it for sure. \n\n[00:29:32] Alexandra:\nYeah, and dark is not because I'm dark. It's because my partner name is Darko \n\n[00:29:42] Kent:\nWell, great, well, it was so nice to chat with you today \n\n[00:29:44] Alexandra:\nI think you're \n\n[00:29:45] Kent:\ngiving us some of your time \n\n[00:29:46] Kent:\nand I hope everybody has an awesome time creating some great content. \n\n[00:29:50] Alexandra:\nYes Thank you so much and see you at the next conference \n\n[00:29:55] Kent:\nYeah, bye. Bye. \n\n[00:29:56] Alexandra:\nBye"
          },
          "muxAsset": {
            "_type": "muxAsset",
            "muxPlaybackId": "i01Piptlk9tNIMohOcGereRabXV4vofer9Ki4sb8t0200M",
            "muxAssetId": "EJiQQFF02NL6ZQrL7vP4fEuHdoutwhhN5m3m02SZ7xzNc"
          },
          "_id": "40TRIde2JTanrD7YPazWvx",
          "_updatedAt": "2024-03-19T20:25:57Z",
          "_rev": "6LaeqP6n94P8FD3sVhYK6c",
          "duration": 1797.4957,
          "state": "ready",
          "originalMediaUrl": "https://egghead-video-uploads.s3.amazonaws.com/epic-web/interviews/Alexandra+Spalato.mp4",
          "_createdAt": "2023-10-16T19:47:34Z",
          "_type": "videoResource"
        }
      },
      {
        "slug": "leadership-in-tech-with-ankita-kulkarni",
        "title": "Leadership in Tech with Ankita Kulkarni",
        "description": "Ankita Kulkarni, tech education expert, joins Kent to explore tech leadership. Balancing skills is key; leadership complements, not replaces, technical prowess. Start small, showcase potential, and build your leadership journey.",
        "body": "Ankita Kulkarni, a seasoned expert in tech education and leadership, joins Kent to unpack the complexities of leadership in the tech industry.\n\nLeadership skills can be acquired and honed. Ankita and Kent discuss how effective leadership contributes to not just personal growth, but also opens doors to better compensation. These are not just buzzwords; they are career-altering advantages that come with stepping up to lead.\n\nEven though leadership provides career advantages, developers often worry about losing touch with their technical skills as they move up the career ladder.\n\nAnkita suggests a 40-60% split as a reasonable split between development and leadership, with more time leaning towards leadership as one moves up. Leadership doesn't mean abandoning technical skills; it’s about adding a new set of competencies to one’s arsenal.\n\nHow do you get started in leadership? Ankita offers actionable advice: start small by taking on minor projects or tasks that showcase your potential. Public speaking and blogging are other avenues to not just share knowledge but also establish oneself in the field.\n\n## Resources\n\n[Ankita's Website](https://kulkarniankita.com/)\n[Ankita's Twitter](https://twitter.com/kulkarniankita9)",
        "videoResource": {
          "duration": 1753.9,
          "_rev": "6LaeqP6n94P8FD3sVhYK16",
          "_type": "videoResource",
          "_id": "40TRIde2JTanrD7YPbBtt5",
          "_createdAt": "2023-10-16T22:50:02Z",
          "state": "ready",
          "_updatedAt": "2024-03-19T20:25:53Z",
          "originalMediaUrl": "https://egghead-video-uploads.s3.amazonaws.com/epic-web/interviews/Ankita+Kulkarni.mp4",
          "title": "Ankita Kulkarni.mp4",
          "transcript": {
            "srt": "1\n00:00:00,420 --> 00:00:05,319\nHello, everybody. I'm so excited to be joined today by my friend Ankita.\n\n2\n00:00:06,879 --> 00:00:10,019\nOh, shoot. I didn't practice your last name. I'm going to try it. Kukarni?\n\n3\n00:00:10,760 --> 00:00:12,340\nYes, you got it right.\n\n4\n00:00:12,799 --> 00:00:13,299\nSweet.\n\n5\n00:00:14,880 --> 00:00:18,460\nSo, Ankita and I, I always like to say where we met.\n\n6\n00:00:19,020 --> 00:00:22,860\nI think the first time we met in person, was it at RemixConf this year?\n\n7\n00:00:23,320 --> 00:00:25,939\nOr at React Rally? Utah, Utah, yeah.\n\n8\n00:00:26,480 --> 00:00:29,279\nActually, I guess both were in Utah, right? Yes.\n\n9\n00:00:29,700 --> 00:00:32,379\nThere was some conference in Utah that I'm forgetting.\n\n10\n00:00:32,720 --> 00:00:38,200\nYeah, React Rally. React Rally, yes, oh my God, that's hilarious that I forgot already.\n\n11\n00:00:40,600 --> 00:00:41,980\nBut I definitely have\n\n12\n00:00:42,440 --> 00:00:48,300\nknown you for longer. I'm trying to remember where our paths first crossed, but it must have been on Twitter,\n\n13\n00:00:48,680 --> 00:00:50,040\nas it often is.\n\n14\n00:00:50,739 --> 00:00:54,559\nYeah, yeah, for sure, yeah. I think we did meet roughly\n\n15\n00:00:54,880 --> 00:00:57,680\nat React Summit at some point. Yes,\n\n16\n00:00:58,080 --> 00:01:00,840\nI was thinking we actually had met before,\n\n17\n00:01:01,239 --> 00:01:03,840\nback, that would have been, because I haven't been to Amsterdam\n\n18\n00:01:04,300 --> 00:01:06,600\nsince React Summit, which was like\n\n19\n00:01:07,300 --> 00:01:10,020\n2018 or something like that. Same, yeah.\n\n20\n00:01:10,580 --> 00:01:13,820\nSo, we go way back. Yeah, yeah, exactly.\n\n21\n00:01:15,060 --> 00:01:17,860\nSo, Ankita, I think it'd be great for\n\n22\n00:01:18,340 --> 00:01:21,140\nfolks to get to know you a little bit. Could you introduce yourself?\n\n23\n00:01:21,820 --> 00:01:23,900\nFor sure, yeah. So, currently\n\n24\n00:01:24,280 --> 00:01:25,460\nI am an educator.\n\n25\n00:01:25,840 --> 00:01:28,160\nJust, I help developers level up\n\n26\n00:01:28,700 --> 00:01:31,060\nthrough my technical content or\n\n27\n00:01:31,560 --> 00:01:32,920\nleadership as well.\n\n28\n00:01:33,580 --> 00:01:38,400\nAnd yeah, I've been working in tech for over a decade. So after\n\n29\n00:01:38,800 --> 00:01:45,780\nI wanted to like sort of paid back because I really love teaching and that's why I switched to being an educator in general.\n\n30\n00:01:46,220 --> 00:01:47,240\nBut yeah, I have,\n\n31\n00:01:48,080 --> 00:01:59,580\nI started off my career, went to school for computer science and like sort of grew and climbed the ladder pretty quickly. So I've done all sorts of things like solution architect, staff developer.\n\n32\n00:02:00,120 --> 00:02:00,820\nI was\n\n33\n00:02:01,160 --> 00:02:02,940\na technical lead, engineering\n\n34\n00:02:03,420 --> 00:02:08,900\nmanager, then stepped into a director position. So all sorts of fun stuff. And\n\n35\n00:02:09,520 --> 00:02:22,860\nI really enjoyed it. And I feel like I learned a lot doing all of that. So yeah, that's sort of like my experience. And again, like in terms of apps and stuff like that, like I have built and architected a lot of different apps with like enabled\n\n36\n00:02:23,260 --> 00:02:43,760\ndevelopers doing the same thing, taking something like an MVP, like a minimal viable product all the way to production, which is also like really fun and helping them scale to millions of users as well. So yeah, anyway, I can go on and on about this, but I really, I feel like I've done a lot and I want to like sort of pay it forward now and teach other devs how to do the same. So that's what I do.\n\n37\n00:02:44,100 --> 00:02:45,260\nThat is so rad.\n\n38\n00:02:45,660 --> 00:02:46,620\nSo the\n\n39\n00:02:47,540 --> 00:02:50,780\nthing that we're kind of dancing around a little bit is developer2leader.com,\n\n40\n00:02:53,400 --> 00:02:56,460\nthe course that you have recently launched,\n\n41\n00:02:57,040 --> 00:03:09,900\nand that's your full-time thing now, is that right? Yes, exactly. I would say 1 of my full-time things, yeah. But for sure, I plan to launch more courses like that just to help developers level up in their careers.\n\n42\n00:03:10,560 --> 00:03:12,180\nYeah, awesome. So\n\n43\n00:03:13,380 --> 00:03:16,600\nlet's start with why, the Simon Sinek thing.\n\n44\n00:03:19,340 --> 00:03:20,160\nSo why should\n\n45\n00:03:20,740 --> 00:03:23,140\na web developer who enjoys coding and everything,\n\n46\n00:03:23,980 --> 00:03:27,540\nwhy should they care or want to become a leader?\n\n47\n00:03:28,500 --> 00:03:30,360\nFor sure. I think that\n\n48\n00:03:31,220 --> 00:03:48,340\nas we grow, our ambitions grow, as our drive to mentorship grows. And I think as we start to like mentor more folks, start leading small teams, we start to get to a point where I have learned a lot and now I want to enable others and that actually brings me more joy\n\n49\n00:03:48,640 --> 00:04:08,980\ncompared to just writing code. Right. It's like I was writing code for so many years and then I'm like, I want a new challenge. I want something that I could like step into leadership and like help others do the same. And the challenges after you get into leadership are quite different. But as a developer, I think if you're curious about leadership,\n\n50\n00:04:09,380 --> 00:04:12,980\nstart mentoring folks, start leading smaller teams,\n\n51\n00:04:13,500 --> 00:04:16,660\ntalk to your manager about it as well and see how you could\n\n52\n00:04:17,120 --> 00:04:24,460\ngain those leadership opportunities in general. But again, you don't have to get the title or lead a team in general. You can also have those leadership\n\n53\n00:04:25,440 --> 00:04:41,180\nqualities or responsibilities. And if you learn that, you'd be able to become a better developer as well. So it's totally up to you. I feel like it doesn't have to be that. Once you get to staff level, you have to become a manager. You have to do this. I feel like it's like a\n\n54\n00:04:41,740 --> 00:04:42,840\npendulum, right?\n\n55\n00:04:43,140 --> 00:04:47,980\nYou can switch, keep switching back and forth and both of those skills complement each other.\n\n56\n00:04:48,420 --> 00:04:52,460\nYeah, yeah, that makes total sense. And I think that it's valuable\n\n57\n00:04:53,640 --> 00:04:56,020\nto also appreciate that\n\n58\n00:04:56,680 --> 00:05:00,120\nif you want to make a big impact, you've got to be a leader.\n\n59\n00:05:02,500 --> 00:05:12,940\nYou only have 24 hours in a day and for you to be an effective person, you should use at least 8 of those for sleep. And so, but you don't have a lot of time, but you can\n\n60\n00:05:13,680 --> 00:05:16,880\ndefinitely accomplish way, way more if you're\n\n61\n00:05:17,260 --> 00:05:18,680\nenabling other people\n\n62\n00:05:19,020 --> 00:05:19,980\nthrough your leadership.\n\n63\n00:05:20,820 --> 00:05:22,240\nAnd then also, like,\n\n64\n00:05:23,180 --> 00:05:24,260\nthe pay opportunity\n\n65\n00:05:24,640 --> 00:05:25,460\nis greater\n\n66\n00:05:25,840 --> 00:05:30,920\nas you take on, or as you create a bigger impact as well. So, like, there's\n\n67\n00:05:31,240 --> 00:05:34,340\npretty selfish reasons to become a leader too.\n\n68\n00:05:34,700 --> 00:05:41,140\nFor sure, and I think I like the word that you use, impact, because that's something I wanna focus on a little bit as well. I think\n\n69\n00:05:41,600 --> 00:05:45,180\nthe ability to grow your impact and you are going to make decisions\n\n70\n00:05:45,480 --> 00:05:55,660\nfor your team, obviously after talking to them and collaborating with them. But you're basically making those decisions which can influence the future of the business and the company, of the product,\n\n71\n00:05:56,040 --> 00:06:03,980\nand not just that, but also like in a developer world and how tech evolves and whatnot too. And I think that translates really well.\n\n72\n00:06:04,540 --> 00:06:10,880\nSo having that skill set in general is like really crucial for you to actually keep growing and leveling up in general.\n\n73\n00:06:11,600 --> 00:06:13,440\nYeah, yeah, yeah, that makes a lot of sense.\n\n74\n00:06:14,200 --> 00:06:14,700\nOkay,\n\n75\n00:06:15,260 --> 00:06:18,960\nSo what is it that people need to actually learn about being\n\n76\n00:06:19,360 --> 00:06:22,940\na leader? Isn't it just like a thing, there are natural born leaders,\n\n77\n00:06:23,260 --> 00:06:25,680\nand if you're not a leader, then you can't\n\n78\n00:06:26,000 --> 00:06:28,940\nlead people, or is this something you can actually learn?\n\n79\n00:06:29,380 --> 00:06:38,800\nYeah, for sure. I think definitely leadership is a skill set. And I think the things that you need to do to become a leader is actually start doing it, honestly.\n\n80\n00:06:39,140 --> 00:06:44,460\nIt's just like start with mentoring folks, start with understanding like how you can\n\n81\n00:06:45,340 --> 00:06:53,900\nenable others. So whatever path that you have taken so far, what is it that you can draw from your experience to showcase it to others and\n\n82\n00:06:54,620 --> 00:07:00,260\nhelp teach others as well? But in terms of leadership, in order to become a leader as well,\n\n83\n00:07:01,000 --> 00:07:06,520\nafter, what is it that your responsibilities are like? Like what are some of the expectations from you?\n\n84\n00:07:07,600 --> 00:07:11,020\nWhat is the, I would say like, I think it's called the\n\n85\n00:07:11,320 --> 00:07:14,780\n80-20 rule, like what is the 20% of effort that you could,\n\n86\n00:07:15,500 --> 00:07:29,020\nyou know, draw into that would result into 80% of outcomes, for example, right? So that's something that you need to keep thinking about as a leader in general. Like you don't need to, you don't need to think about taking on really massive projects,\n\n87\n00:07:29,440 --> 00:07:35,100\nbut keep thinking about the growth of the company and the growth of your team in general to help enable them.\n\n88\n00:07:36,420 --> 00:07:37,980\nYeah, I think that\n\n89\n00:07:38,300 --> 00:07:42,040\neven if you decide you don't want to be a leader from a management\n\n90\n00:07:42,560 --> 00:07:43,060\nperspective,\n\n91\n00:07:44,440 --> 00:07:46,740\nunderstanding the business and\n\n92\n00:07:47,080 --> 00:07:53,160\nthe mission of the company and all of that will make you way, way more effective at getting whatever you want\n\n93\n00:07:54,400 --> 00:07:55,180\nat the company.\n\n94\n00:07:55,840 --> 00:07:57,540\nLike if you really feel like\n\n95\n00:07:58,080 --> 00:08:00,260\nit's important for you to migrate from\n\n96\n00:08:00,660 --> 00:08:04,200\nyour old Create React app over to Remix, for example.\n\n97\n00:08:04,780 --> 00:08:09,460\nLike that's gonna cost the business some time and resources and stuff to do that.\n\n98\n00:08:09,920 --> 00:08:16,820\nBut if you really understand the business, then you can make a business case for why doing something like that is necessary.\n\n99\n00:08:17,220 --> 00:08:33,260\n100% and I think that if you know what those goals are for the quarter, right, goals for the year as well, then taking something like Create React Capital Remix, you can sort of draw like a roadmap for the leadership team to understand and start plotting it in quarters\n\n100\n00:08:33,740 --> 00:08:42,760\nto help get you there. And at the same time, depending on where your product is at the time as well, right, like then you can sort of plan it out accordingly.\n\n101\n00:08:46,060 --> 00:08:48,840\nAnd that's also like technical leadership, right? Like understanding\n\n102\n00:08:49,340 --> 00:08:50,280\nwhat's the complexity\n\n103\n00:08:50,660 --> 00:08:54,580\nin something like that is, and then planning it out\n\n104\n00:08:54,900 --> 00:08:56,440\nand dividing it into milestones\n\n105\n00:08:56,760 --> 00:09:02,140\nfor developers to sort of achieve that, but also like getting the entire team together to understand\n\n106\n00:09:02,500 --> 00:09:06,960\nhow can we slowly roll it out to everyone else so that it makes a lot of sense as well.\n\n107\n00:09:07,300 --> 00:09:08,460\nSo yeah, 100%.\n\n108\n00:09:09,140 --> 00:09:10,140\nTotally, totally.\n\n109\n00:09:10,680 --> 00:09:18,120\nSo now a lot of people will think about leadership and they're like, oh, but Leadership, that means that you spend less time\n\n110\n00:09:18,500 --> 00:09:24,300\ncoding and you spend more time with people. And I got into coding because I don't want to spend time with people or whatever.\n\n111\n00:09:25,180 --> 00:09:34,940\nBut like your experience that you said, like you were a tech lead and you were a staff engineer and a dev manager all over the place. And each 1 of those required leadership. So\n\n112\n00:09:35,900 --> 00:09:45,560\nlet's talk a little bit to the person who's like, I just really like coding and I just wanna get my tasks and implement them and go home and do whatever I want. So\n\n113\n00:09:46,260 --> 00:09:49,100\nwhy should somebody like that become a leader?\n\n114\n00:09:50,220 --> 00:09:52,240\nAnd I suppose also, is it\n\n115\n00:09:53,880 --> 00:10:00,800\nthe concern of, well, I just wanna keep coding, I don't wanna be a leader cause I don't wanna stop coding. Is that like a legit concern or Is there\n\n116\n00:10:01,260 --> 00:10:02,540\na misunderstanding there?\n\n117\n00:10:03,480 --> 00:10:05,440\nI would say maybe a little bit of misunderstanding.\n\n118\n00:10:05,860 --> 00:10:07,700\nLike I think that,\n\n119\n00:10:08,360 --> 00:10:16,220\nI guess like the higher up you go and if you're coding and being the VP of engineering, then obviously that's a problem, right? Because you have a lot of other responsibilities.\n\n120\n00:10:16,800 --> 00:10:25,220\nAnd it depends on the size of the company too, right? Like if it's a small company, a CTO probably codes a lot too. Exactly, so it depends on the size of the company as well.\n\n121\n00:10:25,920 --> 00:10:29,520\nBut I feel like this is honestly like a myth that you have to stop coding\n\n122\n00:10:29,920 --> 00:10:51,880\nafter you do it. Because if you stop coding, or if you don't know what the architecture looks like, how are you going to lead being a technical leader, you know, in general, right? So it's, I think that you don't have to stop coding, but you have to prioritize your time accordingly, right? Like you cannot spend 100% of your time coding, but maybe you would go down to 40% of your time coding and 60%\n\n123\n00:10:52,480 --> 00:11:04,780\nof your time like leading and enabling others and helping others make those decisions that you have learned how to make them as well. Right, so I would say like, it's definitely something you don't have to stop coding, you can always code.\n\n124\n00:11:05,220 --> 00:11:06,400\nAnd there are also different\n\n125\n00:11:06,980 --> 00:11:07,480\narchetypes\n\n126\n00:11:07,820 --> 00:11:08,540\nas well.\n\n127\n00:11:09,020 --> 00:11:17,980\nLike you said, different companies have different sort of roles. So if it's a smaller company, you will be coding a lot more and that will be expected out of you,\n\n128\n00:11:18,340 --> 00:11:20,820\nas along with leadership and things like that.\n\n129\n00:11:21,220 --> 00:11:48,900\nAnd in that case, you're probably, your archetype would be like a tech lead manager or some sort, right? Or like a technical lead more so. But if you like, you go to a medium sized company, then it sort of changes, right? So depending on the company and what you're looking to do, it changes, but you don't have to stop going, because if you do, I think that you get so far removed from it that you're unable to understand and empathize the problems. Like for example, this plugin breaks all the time.\n\n130\n00:11:49,400 --> 00:11:53,900\nI'm wasting so much time on it. If you don't understand what the plugin does,\n\n131\n00:11:54,340 --> 00:12:05,140\nhow the architecture works and whatnot, then you wouldn't be able to empathize. You just feel like, oh, this developer is just stuck on the specific problem, right? But like if you're able to understand it a lot more, then\n\n132\n00:12:05,460 --> 00:12:09,820\nit sort of helps in general. So yeah, I think it's important that you have that\n\n133\n00:12:10,520 --> 00:12:16,620\nbalance and understand that where you should be spending more time. And every week is gonna be different, right? Like maybe\n\n134\n00:12:17,380 --> 00:12:19,320\nthere's an important problem and\n\n135\n00:12:20,140 --> 00:12:26,180\nthings are not going as smooth as you would like, then maybe your leadership would actually help others, versus\n\n136\n00:12:26,680 --> 00:12:28,180\nyou coding at the time.\n\n137\n00:12:28,680 --> 00:12:30,980\nAnd every week depends and it differs\n\n138\n00:12:31,400 --> 00:12:44,740\nfrom week to week. So you have to sort of like prioritize and understand. And as a leader, I think that is also another important quality that to understand where to invest your time in. Where should your team invest your time in as well? Like,\n\n139\n00:12:45,120 --> 00:12:46,600\nfor example, if you wanna,\n\n140\n00:12:47,080 --> 00:12:49,460\nyou know, if you wanna like migrate to a specific\n\n141\n00:12:49,780 --> 00:13:01,600\ntechnology or whatever, then you need to understand what are the pros and cons of it. Is it a good time? Where is the business at? And so on. And accordingly, guide the team and lead them in general. So I think\n\n142\n00:13:02,220 --> 00:13:05,880\nthere are a few things, but you don't have to like stop coding at all.\n\n143\n00:13:06,680 --> 00:13:09,940\nBut at the same time that to answer your other question, like\n\n144\n00:13:10,460 --> 00:13:32,660\nif someone is already coding and they're just like, you know what, I don't want to code. I don't want to stop coding at all. I only want to focus on code. I never want to deal with people. Honestly, that's fine too. But remember that you're still working in a team. So you are going to deal with people and the higher up you go, it doesn't matter. You don't even have to take a managerial position or even a leadership position rather, but even as a senior developer,\n\n145\n00:13:32,980 --> 00:13:36,600\nthe expectation would be for me to enable others, to lead others,\n\n146\n00:13:37,020 --> 00:13:56,640\nhelp others and so on. So even though you would know, majority, the main responsibility would be coding, you're still participating in code reviews and making sure that, you know, you, it's a collaborative environment and you are actually giving feedback to help others grow. And all those things also plays a role in leadership, right? So I think knowing that,\n\n147\n00:13:57,500 --> 00:13:59,280\nlearning the basics of leadership\n\n148\n00:13:59,600 --> 00:14:04,780\nwould really help you become a better developer in general. If you just keep coding, then you\n\n149\n00:14:05,740 --> 00:14:06,240\nare,\n\n150\n00:14:06,860 --> 00:14:08,700\nI guess, so far removed from\n\n151\n00:14:09,400 --> 00:14:13,500\nthe big picture aspect of it, which is that, why am I coding this?\n\n152\n00:14:13,820 --> 00:14:22,540\nLike, why me? What's my skill set going to, how is my skill set going to help the business, right? But if you know, okay, the reason why I'm adding\n\n153\n00:14:22,900 --> 00:14:26,180\nthis specific, I guess, I don't know, the reason I'm adding,\n\n154\n00:14:26,740 --> 00:14:56,020\nmaking all the products accessible is so that I, all, more users and all users can, you know, use our product compared to not. Right. And then suddenly you will start thinking of accessibility in a different lens because you wouldn't necessarily think of it like, Oh, yeah, we're just adding a bunch of properties, right. Or we're not just testing it using a screen reader. And that just will sort of turn into, I understand why, and the impact of it going back to our previous conversation\n\n155\n00:14:56,480 --> 00:14:57,980\nwould grow because\n\n156\n00:14:58,500 --> 00:15:13,940\nthat does bring in more users, that makes it an inclusive environment for everyone. Your product is usable by others. You will get more feedback and all that good stuff. So knowing all that big picture also helps you to become a leader in general. So I,\n\n157\n00:15:15,020 --> 00:15:20,640\nin the, in the past, in my teams in general, like I've definitely asked devs to start taking,\n\n158\n00:15:21,020 --> 00:15:23,860\nslowly start taking like a little bit of leadership responsibility\n\n159\n00:15:24,180 --> 00:15:25,940\nso that they can start empathizing\n\n160\n00:15:26,820 --> 00:15:37,060\nwhat, when I'm, let's say even when I'm asking for something, It's not an unreasonable ask, it's because of why. Why are we doing this, right? And I think all that ties in really well together.\n\n161\n00:15:37,720 --> 00:15:38,600\nYeah, yeah.\n\n162\n00:15:38,940 --> 00:15:43,300\nI think that, like, I mean, there are a lot of great things that you said, but\n\n163\n00:15:43,740 --> 00:15:44,980\nI think that understanding\n\n164\n00:15:45,760 --> 00:15:47,280\nthe business is\n\n165\n00:15:48,180 --> 00:15:52,940\npart of what we do as developers. Even if what you enjoy is the coding aspect,\n\n166\n00:15:53,480 --> 00:15:55,820\nyou're not going to be able to be very\n\n167\n00:15:56,180 --> 00:15:58,160\neffective at ignoring\n\n168\n00:15:58,520 --> 00:15:59,200\nthe business.\n\n169\n00:15:59,820 --> 00:16:04,060\nYou will just not be an effective engineer. You probably won't enjoy it as much.\n\n170\n00:16:04,540 --> 00:16:06,560\nAnd so yeah, having that understanding.\n\n171\n00:16:07,200 --> 00:16:24,180\nThere probably aren't a lot of people who are gonna watch this who are like, I wanna go on the management track and like, I don't wanna code at all, right? Because if they're going through Epic Web, they probably wanna be able to code a little bit. But there could be some people who are like, yeah, as soon as I get into coding, I'm going,\n\n172\n00:16:24,520 --> 00:16:27,100\nand like, or as soon as I get into the management\n\n173\n00:16:27,440 --> 00:16:27,940\ntrack,\n\n174\n00:16:28,480 --> 00:16:30,900\nI don't wanna touch code ever again.\n\n175\n00:16:31,240 --> 00:16:33,900\nSo you kind of talked a little bit about\n\n176\n00:16:34,340 --> 00:16:39,120\nwhy it's important for you to be able to empathize with the developers and stuff.\n\n177\n00:16:40,080 --> 00:16:46,760\nI guess I'm not sure we need to go too much deeper on that. But do you have any other thoughts for that person who's thinking\n\n178\n00:16:47,540 --> 00:16:51,640\nthat they just wanna go into the management track and they wanna kind of ignore\n\n179\n00:16:52,000 --> 00:16:54,220\nthe technical aspect of their skills.\n\n180\n00:16:54,840 --> 00:17:06,680\nI would say, I mean, there's obviously room for everyone in tech, right? Like if that's the type of leader you wanna be, I think you should then accordingly find a company that will allow for that, for example.\n\n181\n00:17:07,060 --> 00:17:18,140\nAnd that is you need to have stronger technical leaders in the team and potentially staff developers as well, so that you can take a step back completely from coding and lean on their expertise\n\n182\n00:17:18,700 --> 00:17:26,540\nand your job would be to fully enable them, right? And like your team and helping them step up even more than before\n\n183\n00:17:27,440 --> 00:17:29,360\nbecause you don't want to specifically\n\n184\n00:17:29,720 --> 00:17:35,780\ncode or you don't want to get into those discussions or whatever, but then that means you need to hire, right?\n\n185\n00:17:36,340 --> 00:17:40,360\nYou need to make sure that the people are something that you can trust in your team.\n\n186\n00:17:40,720 --> 00:17:53,740\nBut yeah, there's room for everyone, but I think you need to find a team and a company that allows for that. It'd be very clear when you interview there, or even if you're an existing company, make sure you move into the team there. Because in a lot of companies,\n\n187\n00:17:54,480 --> 00:17:55,780\nit's common that\n\n188\n00:17:56,380 --> 00:17:59,640\nleaders should be technical, sort of. But I know that\n\n189\n00:18:00,060 --> 00:18:03,500\nA lot of companies don't have that. And I think you need to find those accordingly.\n\n190\n00:18:04,120 --> 00:18:05,300\nYeah, that makes sense.\n\n191\n00:18:06,780 --> 00:18:20,340\nSo do you have any, well, I'm sure you do have many, you have an entire course of tips on ways that, or things that people can do to start taking on more leadership roles. Like maybe they're\n\n192\n00:18:20,660 --> 00:18:25,620\non a team where there are more experienced engineers and so they are always the ones getting\n\n193\n00:18:25,920 --> 00:18:27,320\nthe higher impact\n\n194\n00:18:27,720 --> 00:18:28,220\nwork.\n\n195\n00:18:28,680 --> 00:18:34,260\nThis was me in my early career. I always felt like other people were getting the higher impact work that I wanted.\n\n196\n00:18:34,900 --> 00:18:35,400\nWhat\n\n197\n00:18:36,820 --> 00:19:02,140\ntips do you have for people to get that higher impact work and start getting into some of those leadership roles? Mm-hmm, for sure. I think it's obviously the first step would be to look in your team and see it, look for those opportunities, talk to your manager about it. But let's say you don't, I think I truly believe in paving your own path and like owning your own career, for example. So in that case, I would look beyond and look in the company\n\n198\n00:19:02,920 --> 00:19:12,320\nin general, like what is something that you can get involved, where you can help draw impact. And a lot of companies that are guilds, for example, where there are\n\n199\n00:19:13,960 --> 00:19:21,440\nspecific things that the people in those guilds are trying to focus, you can start showcasing the leadership there by first being a good participant\n\n200\n00:19:21,880 --> 00:19:32,660\nand then slowly taking on more responsibility and building trust with everyone else as well. So that is a good opportunity. But the other 1 is also like open source, right? Like try creating more\n\n201\n00:19:33,660 --> 00:19:36,100\nopen source projects, but also like help contribute\n\n202\n00:19:36,540 --> 00:19:41,420\nthere as well, because that is also going to immediately show your impact because you are no longer\n\n203\n00:19:42,260 --> 00:19:47,900\nfocusing on just what your work is as, but also like what, what is happening externally.\n\n204\n00:19:48,840 --> 00:19:53,460\nThe other ways, and I think this is like maybe less known, but start\n\n205\n00:19:53,800 --> 00:20:10,060\nblogging and start writing about how you think, what are the challenges you are coming across and how exactly can you have solved them that can help others because that is also showing impact there because that blog is going to read be read by so many developers\n\n206\n00:20:10,900 --> 00:20:13,880\nand leaders in general. And like you are going to\n\n207\n00:20:14,180 --> 00:20:14,680\nhelp,\n\n208\n00:20:15,060 --> 00:20:20,820\nyou know, showcase our leadership skills there as well. Speak at conferences. Like all these things also like\n\n209\n00:20:21,340 --> 00:20:25,460\nwill help you become a leader because that showcases that you are\n\n210\n00:20:25,920 --> 00:20:28,180\ntaking control of your own career,\n\n211\n00:20:28,580 --> 00:20:37,860\ndoing things that are sort of out of the box and like helping, drawing attention to yourself. So in the future, when there's a project in the company and whatnot, they already\n\n212\n00:20:38,560 --> 00:20:50,880\nknow that you have been doing this on what your thoughts are in general. Because again, I don't want to focus too much on like, You have to speak on conferences, but it's a topic, right? Let's say you talked about performance on a specific,\n\n213\n00:20:51,220 --> 00:20:55,580\nI don't know, I have my talk coming up, performance in React Native, for example.\n\n214\n00:20:56,120 --> 00:21:01,740\nIf that's a topic that you're passionate about, now everyone knows that that's a topic you're passionate about, right?\n\n215\n00:21:02,080 --> 00:21:06,380\nSo definitely that. The other thing I would also say is start building your brand.\n\n216\n00:21:07,060 --> 00:21:11,820\nPick something that you're really passionate about, something that you can rave about\n\n217\n00:21:12,440 --> 00:21:21,760\nwhen you're having lunch with your coworkers or your friends and you just wanna just talk about that all the time. Think about that. It could be SEO, it could be accessibility,\n\n218\n00:21:22,080 --> 00:21:24,780\nit could be React, React Native, performance,\n\n219\n00:21:25,120 --> 00:21:27,540\nany of this, any of this in general,\n\n220\n00:21:27,980 --> 00:21:28,680\nand start\n\n221\n00:21:29,320 --> 00:21:42,940\nbuilding deep expertise and knowledge in that because once you are able to get really good at your craft you automatically build trust to be able to again take on more leadership in that role right like for example if you know a lot about\n\n222\n00:21:43,480 --> 00:21:44,560\nperformance or\n\n223\n00:21:45,620 --> 00:21:47,600\nin notifications even like anything\n\n224\n00:21:48,620 --> 00:21:50,900\nyou know like very niche right but\n\n225\n00:21:51,380 --> 00:21:53,600\nlet's say that company your company is\n\n226\n00:21:54,060 --> 00:21:56,140\nis does need that specific expertise.\n\n227\n00:21:56,580 --> 00:21:59,940\nThen they're immediately going to pull you that, pull you into that team\n\n228\n00:22:00,520 --> 00:22:14,620\nand start help, you know, you are going to start helping others because again, you have gained so much knowledge, but also like help others do like, it doesn't need to be that you only focus on your team in general, but also start helping others\n\n229\n00:22:15,060 --> 00:22:23,700\nin company wide, see what questions come up, see what problems people are solving, and try to think of the big picture again, right? And start\n\n230\n00:22:24,000 --> 00:22:25,820\nshowcasing your impact there.\n\n231\n00:22:26,200 --> 00:22:32,380\nAgain, that it will help you get into that leadership position. And All of these things is something that I did because\n\n232\n00:22:32,800 --> 00:22:38,460\nI was in a similar position as you, Kent, where you mentioned like, I was not getting the work. I was not,\n\n233\n00:22:39,240 --> 00:22:40,820\nI was way too early in my career\n\n234\n00:22:41,140 --> 00:23:16,660\nand there were too many talented folks at my team which I learned a ton from, but I wasn't getting it. And I was like, how can I showcase my impact? I started blogging, then I started giving conference talks, then I started just talking to people and just helping them in general also goes a long way because they're going to remember that you went out of your way to help them, right? And all these just add to you becoming a leader because leadership is also serving other people, right? You are helping enable others. And all these qualities do like quickly compound and will help you as well.\n\n235\n00:23:17,120 --> 00:23:20,560\nOh, that is all such great advice. And I can see\n\n236\n00:23:21,180 --> 00:23:22,100\nmy own\n\n237\n00:23:22,540 --> 00:23:23,040\ncareer\n\n238\n00:23:23,440 --> 00:23:26,180\nin lots of the tips that you gave. So like\n\n239\n00:23:26,720 --> 00:23:31,220\nthe company that I was at, where I wasn't feeling like I was getting any opportunities,\n\n240\n00:23:31,920 --> 00:23:39,940\nI left that company because I gave a meetup talk or gave a couple meetup talks and I was recruited away because of those meetup talks.\n\n241\n00:23:40,440 --> 00:23:42,100\nAnd where I was recruited to,\n\n242\n00:23:42,720 --> 00:23:46,900\nI was given like 20% of my time to do architect level stuff.\n\n243\n00:23:47,860 --> 00:23:51,980\nAnd so I was able to start doing more leadership stuff. And another example,\n\n244\n00:23:52,360 --> 00:23:53,740\nwhen I was still in school,\n\n245\n00:23:54,320 --> 00:23:57,620\nI kind of became the AngularJS expert because I\n\n246\n00:23:58,060 --> 00:24:00,140\nran this workshop for my classmates.\n\n247\n00:24:00,860 --> 00:24:04,100\nI got Firebase to sponsor us some pizza and stuff. It was pretty cool.\n\n248\n00:24:05,020 --> 00:24:06,480\nBut after we graduated,\n\n249\n00:24:06,940 --> 00:24:08,300\nI had a friend who\n\n250\n00:24:08,640 --> 00:24:10,640\nneeded somebody who was an AngularJS\n\n251\n00:24:11,180 --> 00:24:18,280\nexpert to build a UI for them and guess who they called? They called the person they remembered, was really good at that. And\n\n252\n00:24:19,300 --> 00:24:22,120\nso, and then, you know, on that project, I was\n\n253\n00:24:22,420 --> 00:24:29,560\nthe tech lead for an AngularJS project. I was the only front end developer, but I was the lead. And so\n\n254\n00:24:30,560 --> 00:24:31,580\nI think that\n\n255\n00:24:32,380 --> 00:24:33,820\nthat makes a lot of sense.\n\n256\n00:24:34,440 --> 00:24:43,120\nAnd I say this often, but you can be the best software developer in the world, but if nobody knows, you're never gonna get the opportunities that you're looking for.\n\n257\n00:24:43,500 --> 00:24:44,180\nAnd so\n\n258\n00:24:44,540 --> 00:24:50,340\nI 100% agree that being kinda noisy about your skills and your accomplishments\n\n259\n00:24:50,860 --> 00:24:52,940\nis really valuable in this industry.\n\n260\n00:24:54,520 --> 00:24:55,020\nI\n\n261\n00:24:55,380 --> 00:24:56,400\nalways want to\n\n262\n00:24:56,880 --> 00:25:00,660\ncaveat that by saying that you want to avoid being noisy\n\n263\n00:25:01,020 --> 00:25:04,300\nor taking credit for other people's work.\n\n264\n00:25:04,860 --> 00:25:11,620\nYeah. While you're doing that too. And I think that's actually another quality of a leader is being able to give credit where it's due.\n\n265\n00:25:14,160 --> 00:25:18,620\nPeople aren't going to want to follow you again if you take credit for all their work.\n\n266\n00:25:19,860 --> 00:25:35,700\n100%. Now, yeah. And I think it's important that you take ownership of your work and give credit to other people as well. But yeah, I think 1 of the points that you mentioned, like even in a company, again, like another team that I was in, I was surrounded\n\n267\n00:25:36,040 --> 00:25:41,020\nby so many talented developers who had like 20, 30 years of experience\n\n268\n00:25:41,540 --> 00:25:49,340\nand I'm like, there's no way I'm going to be able to lead a project because I was really interested in leading a project and showcasing my skill set and ability.\n\n269\n00:25:49,780 --> 00:26:25,120\nAnd I just went to my manager and I said, and again, I have a transparent conversation with your manager too, about your goals. I just said, there's no reason for you to trust me right now because I just joined the team 2 months ago. I've done some work, but not enough for you to trust me. But if you find a smaller project that I could lead, I can show you what I know. And you can have someone as a backup as well if you want. But I have experience in this area by doing this and this and this. And I literally presented a PowerPoint presentation at the time. Wow. Like showcasing all my skillset and\n\n270\n00:26:25,520 --> 00:26:26,780\nwhy I deserve it.\n\n271\n00:26:27,740 --> 00:26:34,540\nHe was really impressed and then I think a month later he gave me a smaller project, which is again, a week long engagement.\n\n272\n00:26:34,860 --> 00:26:44,540\nThis was when I worked at IBM, and the client was really happy with me. I enabled all the developers, I think at the time in Angular, and like really helped them\n\n273\n00:26:45,180 --> 00:26:49,940\ncreate an app, enable them, educated them, and they were all very happy and excited.\n\n274\n00:26:51,040 --> 00:26:57,100\nAnd they also signed another engagement with IBM because of this smaller 1. Nice, good job. Because they got a taste of\n\n275\n00:26:58,080 --> 00:27:02,060\nwhat it was like working with IBM devs, I guess. But again,\n\n276\n00:27:03,240 --> 00:27:03,980\nI'm not\n\n277\n00:27:04,340 --> 00:27:10,880\nsharing this to brag, but I'm sharing this that I didn't have an opportunity there with 20 or 30 years of developers.\n\n278\n00:27:11,640 --> 00:27:14,840\nI just paved my path and tried to ask\n\n279\n00:27:15,180 --> 00:27:23,380\nfor it, and I delivered when that opportunity was presented. And I think that's the thing that you need to grab and like keep looking for.\n\n280\n00:27:23,860 --> 00:27:36,480\nIt's like, I feel like you will get a lot if you just ask for it. Because no one's going to read your mind. But if you ask for it, then you are going to get way further in life as well. Mm-hmm. Yeah, that makes tons of sense.\n\n281\n00:27:36,860 --> 00:27:38,600\nWell, this has been an awesome conversation,\n\n282\n00:27:39,160 --> 00:27:39,660\nAnkita.\n\n283\n00:27:40,020 --> 00:27:44,780\nIs there anything else that you really feel like we should talk about before we wrap things up?\n\n284\n00:27:46,060 --> 00:27:50,340\nI don't think so. I just feel like, you know, I think some of the things that we talked about\n\n285\n00:27:51,460 --> 00:27:51,960\nLike\n\n286\n00:27:52,360 --> 00:27:54,940\nI would also look for like let's say if you're seriously,\n\n287\n00:27:55,280 --> 00:28:01,200\nyou know, you're seriously serious If you're serious about becoming a manager or leader in general\n\n288\n00:28:01,700 --> 00:28:09,640\nThen you know follow a roadmap and I have it I have 1 I can share with you, Kent, as well. Follow a roadmap just like we would in a\n\n289\n00:28:10,080 --> 00:28:29,120\nbig app when you're trying to become developers, like the things that you need to do, just like in your course as well, right? Because I think having that career path and having that roadmap will help guide you to know what success should look like every step of the way. And you are not feeling like, oh, I don't know what I'm doing because you're suddenly in this new position.\n\n290\n00:28:29,440 --> 00:28:30,080\nSo yeah,\n\n291\n00:28:30,760 --> 00:28:33,420\nthat would be something that I would share with you.\n\n292\n00:28:33,820 --> 00:28:35,580\nYeah, I think that's a great idea.\n\n293\n00:28:36,040 --> 00:28:39,980\nThank you so much for that. So your website is developer2leader.com.\n\n294\n00:28:41,360 --> 00:28:48,580\nFolks can go take a look at that. Is there any other place that you wanna direct folks to keep up with what you're working on\n\n295\n00:28:49,120 --> 00:28:51,060\nand reach out to you if they have questions.\n\n296\n00:28:51,580 --> 00:28:54,120\nYeah, I would just say my website as well, kulkarniangita.com,\n\n297\n00:28:55,040 --> 00:28:56,960\nbut also like follow me on X.\n\n298\n00:28:58,640 --> 00:29:02,980\nI just feel weird saying that. Follow me on Twitter, no X.\n\n299\n00:29:05,820 --> 00:29:12,040\nSounds good. Well, thank you so much. It's been a pleasure to chat with you. And thanks everybody for watching. We'll see you later.\n\n300\n00:29:12,500 --> 00:29:13,840\nThank you for having me.",
            "text": "[00:00:00] Kent:\nHello, everybody. I'm so excited to be joined today by my friend Ankita. Oh, shoot. I didn't practice your last name. I'm going to try it. Kukarni? \n\n[00:00:10] Ankita:\nYes, you got it right. \n\n[00:00:12] Kent:\nSweet. So, Ankita and I, I always like to say where we met. I think the first time we met in person, was it at RemixConf this year? Or at React Rally? \n\n[00:00:24] Ankita:\nUtah, Utah, yeah. Actually, I guess both were in Utah, right? \n\n[00:00:28] Kent:\nYes. \n\n[00:00:29] Ankita:\nThere was some conference in Utah that I'm forgetting. \n\n[00:00:32] Kent:\nYeah, React Rally. \n\n[00:00:34] Ankita:\nReact Rally, yes, oh my God, that's hilarious that I forgot already. \n\n[00:00:40] Kent:\nBut I definitely have known you for longer. I'm trying to remember where our paths first crossed, but it must have been on Twitter, as it often is. \n\n[00:00:50] Ankita:\nYeah, yeah, for sure, yeah. I think we did meet roughly at React Summit at some point. \n\n[00:00:57] Kent:\nYes, I was thinking we actually had met before, back, that would have been, because I haven't been to Amsterdam since React Summit, which was like 2018 or something \n\n[00:01:08] Ankita:\nlike that. Same, yeah. So, we go way back. Yeah, yeah, exactly. \n\n[00:01:15] Kent:\nSo, Ankita, I think it'd be great for folks to get to know you a little bit. Could you introduce yourself? \n\n[00:01:21] Ankita:\nFor sure, yeah. So, currently I am an educator. Just, I help developers level up through my technical content or leadership as well. And yeah, I've been working in tech for over a decade. So after I wanted to like sort of paid back because I really love \n\n[00:01:41] teaching and that's why I switched to being an educator in general. But yeah, I have, I started off my career, went to school for computer science and like sort of grew and climbed the ladder pretty quickly. So I've done all sorts of things like solution architect, staff developer. I was a technical \n\n[00:02:01] lead, engineering manager, then stepped into a director position. So all sorts of fun stuff. And I really enjoyed it. And I feel like I learned a lot doing all of that. So yeah, that's sort of like my experience. And again, like in terms of apps and stuff like that, like I have built and architected a lot of different apps with \n\n[00:02:22] like enabled developers doing the same thing, taking something like an MVP, like a minimal viable product all the way to production, which is also like really fun and helping them scale to millions of users as well. So yeah, anyway, I can go on and on about this, but I really, I feel like I've done a lot and I want to like sort of pay it forward now and teach other devs how to do \n\n[00:02:42] the same. So that's what I do. \n\n[00:02:44] Kent:\nThat is so rad. So the thing that we're kind of dancing around a little bit is developer2leader.com, the course that you have recently launched, and that's your full-time thing now, is that right? \n\n[00:02:59] Ankita:\nYes, exactly. I would say 1 of my full-time things, yeah. \n\n[00:03:03] Kent:\nBut \n\n[00:03:03] Ankita:\nfor sure, I plan to launch more courses like that just to help developers level up in their careers. \n\n[00:03:10] Kent:\nYeah, awesome. So let's start with why, the Simon Sinek thing. So why should a web developer who enjoys coding and everything, why should they care or want to become a leader? \n\n[00:03:28] Ankita:\nFor sure. I think that as we grow, our ambitions grow, as our drive to mentorship grows. And I think as we start to like mentor more folks, start leading small teams, we start to get to a point where I have learned a lot and now I want to enable others and that actually brings me more joy \n\n[00:03:48] compared to just writing code. Right. It's like I was writing code for so many years and then I'm like, I want a new challenge. I want something that I could like step into leadership and like help others do the same. And the challenges after you get into leadership are quite different. But as a developer, I think if you're curious about leadership, \n\n[00:04:09] start mentoring folks, start leading smaller teams, talk to your manager about it as well and see how you could gain those leadership opportunities in general. But again, you don't have to get the title or lead a team in general. You can also have those leadership qualities or responsibilities. And if you learn that, you'd be able to become a better \n\n[00:04:29] developer as well. So it's totally up to you. I feel like it doesn't have to be that. Once you get to staff level, you have to become a manager. You have to do this. I feel like it's like a pendulum, right? You can switch, keep switching back and forth and both of those skills complement each other. \n\n[00:04:48] Kent:\nYeah, yeah, that makes total sense. And I think that it's valuable to also appreciate that if you want to make a big impact, you've got to be a leader. You only have 24 hours in a day and for you to be an effective person, you should use at least 8 of those for \n\n[00:05:08] sleep. And so, but you don't have a lot of time, but you can definitely accomplish way, way more if you're enabling other people through your leadership. And then also, like, the pay opportunity is greater as you take on, or as you create a bigger \n\n[00:05:28] impact as well. So, like, there's pretty selfish reasons to become a leader too. \n\n[00:05:34] Ankita:\nFor sure, and I think I like the word that you use, impact, because that's something I wanna focus on a little bit as well. I think the ability to grow your impact and you are going to make decisions for your team, obviously after talking to them and collaborating with them. But you're basically making those decisions which can influence the future of the business and the company, \n\n[00:05:54] of the product, and not just that, but also like in a developer world and how tech evolves and whatnot too. And I think that translates really well. So having that skill set in general is like really crucial for you to actually keep growing and leveling up in general. \n\n[00:06:11] Kent:\nYeah, yeah, yeah, that makes a lot of sense. Okay, So what is it that people need to actually learn about being a leader? Isn't it just like a thing, there are natural born leaders, and if you're not a leader, then you can't lead people, or is this something you can actually learn? \n\n[00:06:29] Ankita:\nYeah, for sure. I think definitely leadership is a skill set. And I think the things that you need to do to become a leader is actually start doing it, honestly. It's just like start with mentoring folks, start with understanding like how you can enable others. So whatever path that you have taken so far, what is it \n\n[00:06:49] that you can draw from your experience to showcase it to others and help teach others as well? But in terms of leadership, in order to become a leader as well, after, what is it that your responsibilities are like? Like what are some of the expectations from you? What is the, I would say like, \n\n[00:07:09] I think it's called the 80-20 rule, like what is the 20% of effort that you could, you know, draw into that would result into 80% of outcomes, for example, right? So that's something that you need to keep thinking about as a leader in general. Like you don't need to, you don't need to think about taking on really massive projects, but keep \n\n[00:07:29] thinking about the growth of the company and the growth of your team in general to help enable them. \n\n[00:07:36] Kent:\nYeah, I think that even if you decide you don't want to be a leader from a management perspective, understanding the business and the mission of the company and all of that will make you way, way more effective at getting whatever you want at the company. Like if you really \n\n[00:07:56] feel like it's important for you to migrate from your old Create React app over to Remix, for example. Like that's gonna cost the business some time and resources and stuff to do that. But if you really understand the business, then you can make a business case for why doing something like that is necessary. \n\n[00:08:17] Ankita:\n100% and I think that if you know what those goals are for the quarter, right, goals for the year as well, then taking something like Create React Capital Remix, you can sort of draw like a roadmap for the leadership team to understand and start plotting it in quarters to help get you there. And at the same time, depending on \n\n[00:08:37] where your product is at the time as well, right, like then you can sort of plan it out accordingly. And that's also like technical leadership, right? Like understanding what's the complexity in something like that is, and then planning it out and dividing it into milestones for developers \n\n[00:08:58] to sort of achieve that, but also like getting the entire team together to understand how can we slowly roll it out to everyone else so that it makes a lot of sense as well. So yeah, 100%. \n\n[00:09:09] Kent:\nTotally, totally. So now a lot of people will think about leadership and they're like, oh, but Leadership, that means that you spend less time coding and you spend more time with people. And I got into coding because I don't want to spend time with people or whatever. But like your experience that you said, like you were a tech lead and you were \n\n[00:09:29] a staff engineer and a dev manager all over the place. And each 1 of those required leadership. So let's talk a little bit to the person who's like, I just really like coding and I just wanna get my tasks and implement them and go home and do whatever I want. So why should somebody like that become a leader? \n\n[00:09:50] And I suppose also, is it the concern of, well, I just wanna keep coding, I don't wanna be a leader cause I don't wanna stop coding. Is that like a legit concern or Is there a misunderstanding there? \n\n[00:10:03] Ankita:\nI would say maybe a little bit of misunderstanding. Like I think that, I guess like the higher up you go and if you're coding and being the VP of engineering, then obviously that's a problem, right? Because you have a lot of other responsibilities. \n\n[00:10:16] Kent:\nAnd it depends on the size of the company too, right? \n\n[00:10:19] Ankita:\nLike if it's a small company, \n\n[00:10:20] Kent:\na CTO probably codes a lot too. \n\n[00:10:22] Ankita:\nExactly, so it depends on the size of the company as well. But I feel like this is honestly like a myth that you have to stop coding after you do it. Because if you stop coding, or if you don't know what the architecture looks like, how are you going to lead being a technical leader, you know, in general, right? So it's, I think that you don't have to stop coding, but you \n\n[00:10:42] have to prioritize your time accordingly, right? Like you cannot spend 100% of your time coding, but maybe you would go down to 40% of your time coding and 60% of your time like leading and enabling others and helping others make those decisions that you have learned how to make them as well. Right, so I would say like, it's definitely something you don't \n\n[00:11:02] have to stop coding, you can always code. And there are also different archetypes as well. Like you said, different companies have different sort of roles. So if it's a smaller company, you will be coding a lot more and that will be expected out of you, as along with leadership and things like that. And in that case, you're probably, \n\n[00:11:22] your archetype would be like a tech lead manager or some sort, right? Or like a technical lead more so. But if you like, you go to a medium sized company, then it sort of changes, right? So depending on the company and what you're looking to do, it changes, but you don't have to stop going, because if you do, I think that you get so far removed from \n\n[00:11:42] it that you're unable to understand and empathize the problems. Like for example, this plugin breaks all the time. I'm wasting so much time on it. If you don't understand what the plugin does, how the architecture works and whatnot, then you wouldn't be able to empathize. You just feel like, oh, this developer is just stuck on the specific problem, right? But like if you're able \n\n[00:12:03] to understand it a lot more, then it sort of helps in general. So yeah, I think it's important that you have that balance and understand that where you should be spending more time. And every week is gonna be different, right? Like maybe there's an important problem and things are not going as smooth as you would like, then \n\n[00:12:23] maybe your leadership would actually help others, versus you coding at the time. And every week depends and it differs from week to week. So you have to sort of like prioritize and understand. And as a leader, I think that is also another important quality that to understand where to invest your time in. Where should your team invest your time \n\n[00:12:43] in as well? Like, for example, if you wanna, you know, if you wanna like migrate to a specific technology or whatever, then you need to understand what are the pros and cons of it. Is it a good time? Where is the business at? And so on. And accordingly, guide the team and lead them in general. So I think there are a few things, but you don't \n\n[00:13:03] have to like stop coding at all. But at the same time that to answer your other question, like if someone is already coding and they're just like, you know what, I don't want to code. I don't want to stop coding at all. I only want to focus on code. I never want to deal with people. Honestly, that's fine too. But remember that you're still working in a team. So \n\n[00:13:23] you are going to deal with people and the higher up you go, it doesn't matter. You don't even have to take a managerial position or even a leadership position rather, but even as a senior developer, the expectation would be for me to enable others, to lead others, help others and so on. So even though you would know, majority, the main responsibility would be coding, you're still participating \n\n[00:13:43] in code reviews and making sure that, you know, you, it's a collaborative environment and you are actually giving feedback to help others grow. And all those things also plays a role in leadership, right? So I think knowing that, learning the basics of leadership would really help you become a better developer in general. If you just keep coding, \n\n[00:14:04] then you are, I guess, so far removed from the big picture aspect of it, which is that, why am I coding this? Like, why me? What's my skill set going to, how is my skill set going to help the business, right? But if you know, okay, the reason why I'm adding this specific, I guess, \n\n[00:14:24] I don't know, the reason I'm adding, making all the products accessible is so that I, all, more users and all users can, you know, use our product compared to not. Right. And then suddenly you will start thinking of accessibility in a different lens because you wouldn't necessarily think of it like, Oh, yeah, we're just adding \n\n[00:14:44] a bunch of properties, right. Or we're not just testing it using a screen reader. And that just will sort of turn into, I understand why, and the impact of it going back to our previous conversation would grow because that does bring in more users, that makes it an inclusive environment for everyone. \n\n[00:15:04] Your product is usable by others. You will get more feedback and all that good stuff. So knowing all that big picture also helps you to become a leader in general. So I, in the, in the past, in my teams in general, like I've definitely asked devs to start taking, slowly start taking like a little bit of leadership responsibility so \n\n[00:15:24] that they can start empathizing what, when I'm, let's say even when I'm asking for something, It's not an unreasonable ask, it's because of why. Why are we doing this, right? And I think all that ties in really well together. \n\n[00:15:37] Kent:\nYeah, yeah. I think that, like, I mean, there are a lot of great things that you said, but I think that understanding the business is part of what we do as developers. Even if what you enjoy is the coding aspect, you're not going to be able to be very effective at ignoring \n\n[00:15:58] the business. You will just not be an effective engineer. You probably won't enjoy it as much. And so yeah, having that understanding. There probably aren't a lot of people who are gonna watch this who are like, I wanna go on the management track and like, I don't wanna code at all, right? Because if they're going through Epic Web, they probably wanna be able to code \n\n[00:16:18] a little bit. But there could be some people who are like, yeah, as soon as I get into coding, I'm going, and like, or as soon as I get into the management track, I don't wanna touch code ever again. So you kind of talked a little bit about why it's important for you to be able to empathize with the developers and \n\n[00:16:38] stuff. I guess I'm not sure we need to go too much deeper on that. But do you have any other thoughts for that person who's thinking that they just wanna go into the management track and they wanna kind of ignore the technical aspect of their skills. \n\n[00:16:54] Ankita:\nI would say, I mean, there's obviously room for everyone in tech, right? Like if that's the type of leader you wanna be, I think you should then accordingly find a company that will allow for that, for example. And that is you need to have stronger technical leaders in the team and potentially staff developers as well, so that you can take a \n\n[00:17:14] step back completely from coding and lean on their expertise and your job would be to fully enable them, right? And like your team and helping them step up even more than before because you don't want to specifically code or you don't want to get into those discussions or whatever, but then that means you need to hire, \n\n[00:17:35] right? You need to make sure that the people are something that you can trust in your team. But yeah, there's room for everyone, but I think you need to find a team and a company that allows for that. It'd be very clear when you interview there, or even if you're an existing company, make sure you move into the team there. Because in a lot of companies, it's common \n\n[00:17:55] that leaders should be technical, sort of. But I know that A lot of companies don't have that. And I think you need to find those accordingly. \n\n[00:18:04] Kent:\nYeah, that makes sense. So do you have any, well, I'm sure you do have many, you have an entire course of tips on ways that, or things that people can do to start taking on more leadership roles. Like maybe they're on a team where there are more experienced engineers and so they are \n\n[00:18:24] always the ones getting the higher impact work. This was me in my early career. I always felt like other people were getting the higher impact work that I wanted. What tips do you have for people to get that higher impact work and start getting into some of those leadership roles? \n\n[00:18:43] Ankita:\nMm-hmm, for sure. I think it's obviously the first step would be to look in your team and see it, look for those opportunities, talk to your manager about it. But let's say you don't, I think I truly believe in paving your own path and like owning your own career, for example. So in that case, I would look beyond and look in the company in general, like \n\n[00:19:04] what is something that you can get involved, where you can help draw impact. And a lot of companies that are guilds, for example, where there are specific things that the people in those guilds are trying to focus, you can start showcasing the leadership there by first being a good participant and then slowly taking on more responsibility and \n\n[00:19:24] building trust with everyone else as well. So that is a good opportunity. But the other 1 is also like open source, right? Like try creating more open source projects, but also like help contribute there as well, because that is also going to immediately show your impact because you are no longer focusing on just what your work is \n\n[00:19:44] as, but also like what, what is happening externally. The other ways, and I think this is like maybe less known, but start blogging and start writing about how you think, what are the challenges you are coming across and how exactly can you have solved them that can help others because that is \n\n[00:20:04] also showing impact there because that blog is going to read be read by so many developers and leaders in general. And like you are going to help, you know, showcase our leadership skills there as well. Speak at conferences. Like all these things also like will help you become a leader because that showcases that you \n\n[00:20:24] are taking control of your own career, doing things that are sort of out of the box and like helping, drawing attention to yourself. So in the future, when there's a project in the company and whatnot, they already know that you have been doing this on what your thoughts are in general. Because again, I don't want to focus too much on \n\n[00:20:44] like, You have to speak on conferences, but it's a topic, right? Let's say you talked about performance on a specific, I don't know, I have my talk coming up, performance in React Native, for example. If that's a topic that you're passionate about, now everyone knows that that's a topic you're passionate about, right? So definitely that. The other thing I would also say \n\n[00:21:05] is start building your brand. Pick something that you're really passionate about, something that you can rave about when you're having lunch with your coworkers or your friends and you just wanna just talk about that all the time. Think about that. It could be SEO, it could be accessibility, it could be React, React Native, performance, \n\n[00:21:25] any of this, any of this in general, and start building deep expertise and knowledge in that because once you are able to get really good at your craft you automatically build trust to be able to again take on more leadership in that role right like for example if you know a lot about performance or \n\n[00:21:45] in notifications even like anything you know like very niche right but let's say that company your company is is does need that specific expertise. Then they're immediately going to pull you that, pull you into that team and start help, you know, you are going to start helping others because again, you have gained so much knowledge, \n\n[00:22:06] but also like help others do like, it doesn't need to be that you only focus on your team in general, but also start helping others in company wide, see what questions come up, see what problems people are solving, and try to think of the big picture again, right? And start showcasing your impact there. \n\n[00:22:26] Again, that it will help you get into that leadership position. And All of these things is something that I did because I was in a similar position as you, Kent, where you mentioned like, I was not getting the work. I was not, I was way too early in my career and there were too many talented folks at my team which I learned a ton from, but I \n\n[00:22:46] wasn't getting it. And I was like, how can I showcase my impact? I started blogging, then I started giving conference talks, then I started just talking to people and just helping them in general also goes a long way because they're going to remember that you went out of your way to help them, right? And all these just add to you becoming a leader because \n\n[00:23:06] leadership is also serving other people, right? You are helping enable others. And all these qualities do like quickly compound and will help you as well. \n\n[00:23:17] Kent:\nOh, that is all such great advice. And I can see my own career in lots of the tips that you gave. So like the company that I was at, where I wasn't feeling like I was getting any opportunities, I left that company because I gave a meetup talk or gave a couple meetup talks and \n\n[00:23:37] I was recruited away because of those meetup talks. And where I was recruited to, I was given like 20% of my time to do architect level stuff. And so I was able to start doing more leadership stuff. And another example, when I was still in school, I kind of became the AngularJS expert because \n\n[00:23:57] I ran this workshop for my classmates. I got Firebase to sponsor us some pizza and stuff. It was pretty cool. But after we graduated, I had a friend who needed somebody who was an AngularJS expert to build a UI for them and guess who they called? They called the person they remembered, was really good at \n\n[00:24:17] that. And so, and then, you know, on that project, I was the tech lead for an AngularJS project. I was the only front end developer, but I was the lead. And so I think that that makes a lot of sense. And I say this often, but you can be the best \n\n[00:24:37] software developer in the world, but if nobody knows, you're never gonna get the opportunities that you're looking for. And so I 100% agree that being kinda noisy about your skills and your accomplishments is really valuable in this industry. I always want to caveat that \n\n[00:24:57] by saying that you want to avoid being noisy or taking credit for other people's work. \n\n[00:25:04] Ankita:\nYeah. \n\n[00:25:05] Kent:\nWhile you're doing that too. And I think that's actually another quality of a leader is being able to give credit where it's due. People aren't going to want to follow you again if you take credit for all their work. \n\n[00:25:19] Ankita:\n100%. Now, yeah. And I think it's important that you take ownership of your work and give credit to other people as well. But yeah, I think 1 of the points that you mentioned, like even in a company, again, like another team that I was in, I was surrounded by so many talented developers who had like 20, 30 \n\n[00:25:39] years of experience and I'm like, there's no way I'm going to be able to lead a project because I was really interested in leading a project and showcasing my skill set and ability. And I just went to my manager and I said, and again, I have a transparent conversation with your manager too, about your goals. I just said, there's no reason for you to trust me right now because I just joined the team 2 \n\n[00:25:59] months ago. I've done some work, but not enough for you to trust me. But if you find a smaller project that I could lead, I can show you what I know. And you can have someone as a backup as well if you want. But I have experience in this area by doing this and this and this. And I literally presented a PowerPoint \n\n[00:26:20] presentation at the time. Wow. Like showcasing all my skillset and why I deserve it. He was really impressed and then I think a month later he gave me a smaller project, which is again, a week long engagement. This was when I worked at IBM, and the client was really happy with me. I enabled all \n\n[00:26:40] the developers, I think at the time in Angular, and like really helped them create an app, enable them, educated them, and they were all very happy and excited. And they also signed another engagement with IBM because of this smaller 1. \n\n[00:26:55] Kent:\nNice, good job. \n\n[00:26:55] Ankita:\nBecause they got a taste of what it was like working with IBM devs, I guess. But again, I'm not sharing this to brag, but I'm sharing this that I didn't have an opportunity there with 20 or 30 years of developers. I just paved my path and tried to ask for it, \n\n[00:27:15] and I delivered when that opportunity was presented. And I think that's the thing that you need to grab and like keep looking for. It's like, I feel like you will get a lot if you just ask for it. Because no one's going to read your mind. But if you ask for it, then you are going to get way further in life as well. \n\n[00:27:34] Kent:\nMm-hmm. Yeah, that makes tons of sense. Well, this has been an awesome conversation, Ankita. Is there anything else that you really feel like we should talk about before we wrap things up? \n\n[00:27:46] Ankita:\nI don't think so. I just feel like, you know, I think some of the things that we talked about Like I would also look for like let's say if you're seriously, you know, you're seriously serious If you're serious about becoming a manager or leader in general Then you know follow a roadmap and I have it I have 1 I can share with you, Kent, as \n\n[00:28:06] well. Follow a roadmap just like we would in a big app when you're trying to become developers, like the things that you need to do, just like in your course as well, right? Because I think having that career path and having that roadmap will help guide you to know what success should look like every step of the way. And you are not feeling like, \n\n[00:28:26] oh, I don't know what I'm doing because you're suddenly in this new position. So yeah, that would be something that I would share with you. \n\n[00:28:33] Kent:\nYeah, I think that's a great idea. Thank you so much for that. So your website is developer2leader.com. Folks can go take a look at that. Is there any other place that you wanna direct folks to keep up with what you're working on and reach out to you if they have questions. \n\n[00:28:51] Ankita:\nYeah, I would just say my website as well, kulkarniangita.com, but also like follow me on X. I just feel weird saying that. Follow me on Twitter, no X. \n\n[00:29:05] Kent:\nSounds good. Well, thank you so much. It's been a pleasure to chat with you. And thanks everybody for watching. We'll see you later. \n\n[00:29:12] Ankita:\nThank you for having me."
          },
          "muxAsset": {
            "muxPlaybackId": "YR54JR8pSXhA01t01sFAzppz4ZY5WrBasOUAjzJ2Thfjw",
            "muxAssetId": "bjLLRAAURKaNg6hf4sBO4NZ6YvQ9Lzp8niyCWl5lLys",
            "_type": "muxAsset"
          }
        },
        "solution": null,
        "_id": "B9MrGEg0NpGWTknnF8PMi7",
        "_type": "interview",
        "_updatedAt": "2023-10-17T22:53:43Z"
      },
      {
        "_id": "WBQDSVdErPwEcA4Fd0fVXw",
        "_type": "interview",
        "body": "Artem, the mind behind MSW (Mock Service Worker), discusses with Kent his experience with the development and broadening scope of this essential tool for developers. Originally conceived as a weekend project in the Czech Republic, MSW has grown into a resource for API mocking, debugging, and specialized production applications.\n\nWhen it comes to adaptability, MSW doesn't disappoint. It integrates seamlessly with both browser and Node.js environments. Unlike traditional mocking methods, which replace native modules, MSW enhances them. This allows for more nuanced control over HTTP requests\n\nWith additional capabilities like GraphQL support and Storybook integration, MSW proves itself as a versatile tool for a variety of developers.\n\nLooking ahead, plans are in place to simplify WebSocket implementations and make the tool even more user-friendly. Both Artem and Kent agree that community involvement and financial contributions are vital for the continued growth and improvement of MSW.\n\n## Resources\n\n- [Mock Service Worker](https://mswjs.io/)\n- [Artem Zakharchenko on Twitter](https://twitter.com/kettanaito)",
        "videoResource": {
          "state": "ready",
          "title": "Artem Zakharchenko.mp4",
          "originalMediaUrl": "https://egghead-video-uploads.s3.amazonaws.com/epic-web/interviews/Artem+Zakharchenko.mp4",
          "_type": "videoResource",
          "muxAsset": {
            "muxPlaybackId": "51pk01TcPzbAFLj00msySCFoP800IwR1MQSH01pYEC5Kk4A",
            "muxAssetId": "p5OUoy75CDu00sQmxIfePOUYbeg4ZMdQzmOXWUmPYkUY",
            "_type": "muxAsset"
          },
          "duration": 2316.36,
          "_rev": "WsAmd18YA1frbQaWBZprHG",
          "transcript": {
            "srt": "1\n00:00:00,240 --> 00:00:01,860\nHey, Artem, how's it going?\n\n2\n00:00:02,220 --> 00:00:04,620\nHey, Kent. It's great. What about you?\n\n3\n00:00:05,319 --> 00:00:10,960\nI'm doing great. And everybody watching right now, hopefully you've been enjoying the exercises and stuff.\n\n4\n00:00:11,400 --> 00:00:17,460\nArtem is the creator of MSW, which We're using in the workshops, and it's awesome\n\n5\n00:00:18,160 --> 00:00:22,800\nBeen working on that for years now. I'm gonna try and pronounce your last name you gave me a\n\n6\n00:00:23,560 --> 00:00:24,220\na guide\n\n7\n00:00:25,080 --> 00:00:25,939\nLet's try\n\n8\n00:00:27,259 --> 00:00:28,060\nThat Zakharchenko\n\n9\n00:00:29,279 --> 00:00:32,500\nThis is really close. Yeah, yeah, okay, okay? Can you say it?\n\n10\n00:00:33,300 --> 00:00:41,520\nZakharchenko? I think it's pretty pretty much the same. Yeah. Well, okay. So your pronunciation guide was very helpful then. Because I look at your,\n\n11\n00:00:42,120 --> 00:00:46,820\nthe spelling of your last name and I'm like, I have no idea how to say that. So yeah, thank you.\n\n12\n00:00:47,960 --> 00:00:51,960\nWell, so Artem, why don't you introduce yourself to folks listening?\n\n13\n00:00:52,700 --> 00:00:53,420\nYeah, sure.\n\n14\n00:00:54,140 --> 00:00:58,120\nHey there. My name is Artem. I'm a software engineer based in Czech Republic.\n\n15\n00:00:58,840 --> 00:01:05,040\nI've been fascinated by computers and engineering in particular since I was about 12 years old.\n\n16\n00:01:05,900 --> 00:01:14,560\nAnd I've been doing this as a hobby for a very long time before it became my full-time job. And like many years later, here we are.\n\n17\n00:01:15,560 --> 00:01:16,720\nAwesome. Well,\n\n18\n00:01:17,100 --> 00:01:17,600\nso\n\n19\n00:01:18,100 --> 00:01:18,600\ncan\n\n20\n00:01:19,060 --> 00:01:20,820\nyou dive a little deeper into\n\n21\n00:01:21,500 --> 00:01:26,700\nthe creation of MSW and what with like the stuff that you've been working on,\n\n22\n00:01:27,340 --> 00:01:32,400\nwhat really led you to create MSW, this tool that we're, that I really love?\n\n23\n00:01:34,300 --> 00:01:36,920\nI created MSW as a kind of over-weekend\n\n24\n00:01:37,360 --> 00:01:38,160\npet project.\n\n25\n00:01:38,479 --> 00:01:47,780\nI wasn't really satisfied with the state of API mocking libraries back then. I think it's about, it's like 5 years this year, 5 years ago. And I decided,\n\n26\n00:01:48,680 --> 00:01:49,980\nyeah, like time flies.\n\n27\n00:01:50,340 --> 00:01:52,860\nAnd I thought to myself that we can do better.\n\n28\n00:01:53,200 --> 00:01:58,340\nAnd I kind of created this prototype very hastily as prototypes usually are.\n\n29\n00:01:58,780 --> 00:02:10,160\nAnd you know, turned out we can do better. And over time I had a chance to iterate on it and improve it. And now you folks are all using and hopefully enjoying it in your workshop.\n\n30\n00:02:10,680 --> 00:02:12,840\nAwesome, yeah. I can tell you\n\n31\n00:02:14,080 --> 00:02:16,220\nhow I came to start using MSW.\n\n32\n00:02:17,720 --> 00:02:20,940\nI think you actually know, but I'll tell other folks who are listening.\n\n33\n00:02:21,560 --> 00:02:26,620\nSo I was working on Epic React and the material for that and\n\n34\n00:02:27,800 --> 00:02:28,760\ngetting into\n\n35\n00:02:29,280 --> 00:02:30,560\ndoing like\n\n36\n00:02:31,400 --> 00:02:32,820\nworking with a Pokemon\n\n37\n00:02:33,480 --> 00:02:40,220\napp or component that we were putting together. And I wanted to teach how to do fetch requests and things.\n\n38\n00:02:41,040 --> 00:02:41,820\nAnd so\n\n39\n00:02:42,620 --> 00:02:50,660\nthe challenge that I was facing is I didn't want to require people to set up a real server and run that server for the workshop.\n\n40\n00:02:51,100 --> 00:02:52,760\nI wanted to keep it really simple.\n\n41\n00:02:53,080 --> 00:02:56,920\nAnd so I built a little fetch mock. I say window.fetch\n\n42\n00:02:57,240 --> 00:02:58,580\nequals my own thing.\n\n43\n00:02:59,060 --> 00:03:01,700\nAnd it mocked things out and it worked fine.\n\n44\n00:03:02,080 --> 00:03:02,580\nBut\n\n45\n00:03:03,620 --> 00:03:04,340\nit wasn't\n\n46\n00:03:04,700 --> 00:03:07,160\nthe most ergonomic thing for me to develop with.\n\n47\n00:03:07,920 --> 00:03:12,780\nIt didn't like, users at the workshop had no idea that this was going on, so it was fine.\n\n48\n00:03:13,660 --> 00:03:14,440\nBut it just\n\n49\n00:03:15,300 --> 00:03:24,240\nwasn't very nice to work with. And then on top of that, I missed the ability to see the network tab and see the actual requests going through,\n\n50\n00:03:24,580 --> 00:03:25,440\nright? So\n\n51\n00:03:26,280 --> 00:03:37,860\nthat's when I started exploring using a service worker, but I'd done service workers before and I was like, yeah, that sounds awful. I don't want to write all this stuff in a service worker. There's so many edge cases with service workers.\n\n52\n00:03:38,480 --> 00:03:42,160\nAnd so then I started looking around, and somebody recommended Mirage.js,\n\n53\n00:03:42,720 --> 00:03:50,040\nwhich is a popular library for mocking. But Mirage does pretty much the same thing that what I was doing, just mocking,\n\n54\n00:03:50,340 --> 00:04:02,720\nmaking their own version of Fetcher. I don't know exactly their implementation, but the bottom line was no network tab. And so like, that wasn't any better from what I was doing. And then I discovered MSW. And the thing that really\n\n55\n00:04:03,340 --> 00:04:04,860\nsurprised me about MSW\n\n56\n00:04:05,460 --> 00:04:07,860\nwas that I could actually write my fetch handlers\n\n57\n00:04:08,240 --> 00:04:17,980\nwithin my Create React app, like within that source code. And so I didn't have to write anything in the service worker and MSW would handle the service worker for me.\n\n58\n00:04:18,579 --> 00:04:23,200\nAnd that was like sold. I was super, super into that.\n\n59\n00:04:23,560 --> 00:04:27,340\nAnd then on top of that, soon thereafter, you added the ability to\n\n60\n00:04:28,260 --> 00:04:29,980\nuse the same handlers\n\n61\n00:04:30,440 --> 00:04:30,940\nin\n\n62\n00:04:31,340 --> 00:04:34,900\nthe browser as well as in Node, so I could use it for testing.\n\n63\n00:04:35,380 --> 00:04:40,360\nAnd that just like, oh, chef's kiss like this, just it was so, so nice.\n\n64\n00:04:41,000 --> 00:04:43,780\nSo yeah, since then, years ago,\n\n65\n00:04:44,180 --> 00:04:45,760\never since then I have\n\n66\n00:04:46,220 --> 00:04:51,580\nloved it. I wrote a blog post about you should not mock Fetch, stop mocking Fetch\n\n67\n00:04:52,120 --> 00:04:54,020\nbecause MSW is the answer.\n\n68\n00:04:54,520 --> 00:04:56,020\nSo thank you.\n\n69\n00:04:56,760 --> 00:04:57,680\nOh, thank you.\n\n70\n00:04:58,840 --> 00:05:00,420\nYeah, it's been awesome. So\n\n71\n00:05:01,020 --> 00:05:03,220\nyeah, can you tell us a little bit about\n\n72\n00:05:03,640 --> 00:05:04,620\nsome of the,\n\n73\n00:05:05,380 --> 00:05:09,560\nso actually let me back up really quick. So with the, in Epic Web,\n\n74\n00:05:10,080 --> 00:05:13,100\nnone of the workshops are using MSW in the browser.\n\n75\n00:05:13,780 --> 00:05:14,640\nAnd in fact,\n\n76\n00:05:15,040 --> 00:05:17,980\nIn my active development, I don't use MSW in the browser\n\n77\n00:05:18,760 --> 00:05:21,920\nbecause I'm doing full stack development and so\n\n78\n00:05:22,540 --> 00:05:25,260\nall of the requests that I'm making to\n\n79\n00:05:25,640 --> 00:05:28,920\nthird parties that I want to mock out are happening on the server.\n\n80\n00:05:30,660 --> 00:05:38,580\nThere could be some integrations that are client-side only in the future, like for certain features, there's, you know, you wanna use,\n\n81\n00:05:39,060 --> 00:05:42,380\noh, I forget what it's called, but there's this API for\n\n82\n00:05:42,740 --> 00:06:09,940\ndoing autocomplete on an input for addresses and stuff. Google has 1, but there's this other 1 that I used at a company a while back, and yeah, proxying that through your server was not ever gonna work. So like doing stuff like that, those types of integrations, I totally would 100% use MSW in the browser, But for most of the time, I end up only using it on the server. And so I really would like to get an idea of how MSW works at that level.\n\n83\n00:06:10,320 --> 00:06:10,820\nBecause\n\n84\n00:06:11,140 --> 00:06:16,660\nin like MSW, for those who don't know, it's mock service worker. You know what that means.\n\n85\n00:06:17,100 --> 00:06:24,060\nBut we're not using the service worker at all. And so there's obviously, like there's no service worker on the server side.\n\n86\n00:06:24,480 --> 00:06:29,120\nSo yeah, I think it'd be kind of cool to hear about how did the server side\n\n87\n00:06:29,600 --> 00:06:31,820\naspect of MSW come to be?\n\n88\n00:06:32,920 --> 00:06:35,780\nAnd how does that work? How do you make that happen?\n\n89\n00:06:36,600 --> 00:06:42,780\nThat's a really cool question, because I remember people asking about this when the project just started, and folks started writing posts\n\n90\n00:06:43,100 --> 00:06:45,360\nabout using MSW in Node\n\n91\n00:06:45,660 --> 00:06:52,480\nand praising its service worker capabilities, but that was kind of mutually exclusive. There's no workers in Node like service workers.\n\n92\n00:06:52,960 --> 00:06:56,860\nAnd the way it works in Node is very similar to\n\n93\n00:06:57,340 --> 00:06:59,880\nthings like Knock, if people use that.\n\n94\n00:07:02,520 --> 00:07:07,100\nAnd it's similar, but a bit different. So to give you a bit of a history context,\n\n95\n00:07:07,680 --> 00:07:15,860\nmost of the tools in Node do like patching of request making modules, very similar to how you mentioned you override your fetch, like window.fetch,\n\n96\n00:07:16,560 --> 00:07:19,800\nbut library authors actually do like http.clientrequest\n\n97\n00:07:20,780 --> 00:07:21,480\nor http.get,\n\n98\n00:07:21,880 --> 00:07:24,440\nand they just take and override those classes and functions\n\n99\n00:07:24,840 --> 00:07:26,600\nto make them do whatever they want,\n\n100\n00:07:27,080 --> 00:07:27,940\nwhich is\n\n101\n00:07:28,380 --> 00:07:29,980\nalso not without the trade-offs.\n\n102\n00:07:30,480 --> 00:07:34,500\nLike, how I see this is when you override these native modules,\n\n103\n00:07:35,140 --> 00:07:38,860\nyou are throwing a big portion of their logic away,\n\n104\n00:07:39,220 --> 00:07:43,920\nand you are trimming them down just so they do whatever the mock requires.\n\n105\n00:07:44,540 --> 00:07:52,700\nAnd I, like you may guess, I'm not a big proponent of that because well, I believe mocking should be as transparent and as production\n\n106\n00:07:53,420 --> 00:07:59,540\nkind of resembling production as possible. Yeah, so what we did with, yeah, like what we did with MSW was\n\n107\n00:07:59,860 --> 00:08:01,180\ntake a slightly different approach.\n\n108\n00:08:01,560 --> 00:08:22,260\nI believe right now what you're using is like version 4 of this approach, but the idea, it didn't change. So the point was to take these native classes, let's take a HTTP client request as an example. This is 1 of the most used APIs in Node. And before like global fetch, like a year or 2 ago, this was the main way to make requests.\n\n109\n00:08:22,740 --> 00:08:26,780\nAnd what MSW does, it creates an extension of this class.\n\n110\n00:08:27,260 --> 00:08:46,420\nSo we don't override it, we extend it. And this allows us to go into things like, for example, this is the method when request happens. I don't want to override it. I want to kind of listen to it. And if there is a mock for this particular request, I want to hijack it. But if there is no mock, what I do is basically super.end,\n\n111\n00:08:47,600 --> 00:08:54,400\nfor example. And this is so powerful because it means I'm not throwing away everything that Node does. I'm just strategically\n\n112\n00:08:55,080 --> 00:08:56,520\nkind of listening to\n\n113\n00:08:56,880 --> 00:08:57,380\nproper\n\n114\n00:08:58,180 --> 00:08:58,680\nevents\n\n115\n00:08:59,280 --> 00:09:00,200\nduring the request.\n\n116\n00:09:00,860 --> 00:09:01,360\nAnd\n\n117\n00:09:01,920 --> 00:09:03,680\nwhat I've been experimenting recently\n\n118\n00:09:04,020 --> 00:09:05,660\nis even better than that.\n\n119\n00:09:06,580 --> 00:09:08,740\nThere was a proof of concept to use proxies,\n\n120\n00:09:09,400 --> 00:09:16,260\nwhere proxy in JavaScript is basically an API that wraps any object and allows you to react to changes\n\n121\n00:09:16,840 --> 00:09:27,460\nthat happen into that object. So you can listen to new properties being set or functions being called or classes being constructed because if you think about it, everything in JavaScript is an object.\n\n122\n00:09:27,980 --> 00:09:28,480\nAnd\n\n123\n00:09:28,860 --> 00:09:30,840\nI already rewrote the XMLHttpRequestInterception\n\n124\n00:09:32,220 --> 00:09:35,340\nusing this approach and it's fantastic. I literally had\n\n125\n00:09:36,040 --> 00:09:37,580\na kind of a revelation\n\n126\n00:09:38,260 --> 00:09:44,160\nthe other day. I was debugging something, and I opened this class that provides mocking for XMLHttpRequests,\n\n127\n00:09:45,060 --> 00:09:54,020\nAnd it took me a couple of minutes to realize where the mocks are, because it just doesn't do anything drastic. It takes the proxy, and it listens to particular\n\n128\n00:09:54,400 --> 00:09:57,940\nevents, like load start and load end, and that was it.\n\n129\n00:09:58,980 --> 00:10:02,140\nWow, that sounds interesting. So the work on MSW\n\n130\n00:10:03,100 --> 00:10:07,060\nand fine-tuning the way that it works, the implementation is never done.\n\n131\n00:10:07,500 --> 00:10:09,100\nIt's never done, no.\n\n132\n00:10:09,520 --> 00:10:13,820\nYeah, so since you're extending the class, you need to override\n\n133\n00:10:14,240 --> 00:10:19,060\nwhat happens when a module says import HTTP. How do you manage that?\n\n134\n00:10:19,760 --> 00:10:22,500\nSo what we have is a concept of Interceptor.\n\n135\n00:10:23,160 --> 00:10:24,560\nIt's a base class\n\n136\n00:10:25,160 --> 00:10:34,540\nthat basically does 2 things. It patches some modules. It can be actually anything. You can use it for whatever module you like, but we use it for this HTTP module in particular.\n\n137\n00:10:35,580 --> 00:10:37,660\nAnd it does some patches\n\n138\n00:10:38,260 --> 00:10:46,520\nto make your modules, and then it has a dispose method that reverts all those patches. And in fact, it reverts all the side effects that you might have introduced,\n\n139\n00:10:47,180 --> 00:11:00,040\nthe side effects you need to make this particular interception work. Because it comes down to the fact that you can make requests in Node in many ways, actually. Like, there is HTTP client request, which is the main way, but people are also using\n\n140\n00:11:00,780 --> 00:11:12,880\nthings like GS DOM without realizing this is actually Node, right? It's just a smart abstraction that makes you think you're working with a browser. So you have things like XML HTTP requests and even fetch historically.\n\n141\n00:11:13,380 --> 00:11:17,800\nBut all those were implemented under the hood using the same Node modules.\n\n142\n00:11:18,280 --> 00:11:18,780\nSo\n\n143\n00:11:19,300 --> 00:11:24,060\nin Node.js, we also have first-class support for those, so it's a little easier for us to manage.\n\n144\n00:11:25,120 --> 00:11:25,620\nAnd,\n\n145\n00:11:26,120 --> 00:11:28,840\nyeah, so this is what we do, effectively. We create\n\n146\n00:11:29,280 --> 00:11:29,780\nInterceptor,\n\n147\n00:11:30,520 --> 00:11:46,340\nAnd then we can also group them together because it will be really annoying if you would have to configure things if you're suddenly using not HTTP client request but something else in Node. So we do this for you, and we have another concept, which is a batch interceptor.\n\n148\n00:11:47,140 --> 00:11:59,520\nAnd effectively, all it does, it groups multiple interceptor instances together. So what most people are using when they import MSW slash node is actually a batch interceptor that combines client request,\n\n149\n00:11:59,860 --> 00:12:00,360\nXHR,\n\n150\n00:12:00,860 --> 00:12:05,520\nand fetch as well for modern versions of Node. And this is how they get this\n\n151\n00:12:06,340 --> 00:12:07,780\nAPI mocking working.\n\n152\n00:12:08,180 --> 00:12:09,020\nYeah, wow,\n\n153\n00:12:09,480 --> 00:12:11,260\nthat's honestly really fascinating\n\n154\n00:12:11,680 --> 00:12:12,940\nhow all that works.\n\n155\n00:12:14,160 --> 00:12:14,660\nSo,\n\n156\n00:12:15,860 --> 00:12:17,600\nCan you tell us a little bit about\n\n157\n00:12:18,320 --> 00:12:21,240\nwhat you see people using MSW for\n\n158\n00:12:21,760 --> 00:12:22,620\nand like\n\n159\n00:12:23,300 --> 00:12:25,940\nwhere can people integrate this into their workflow?\n\n160\n00:12:27,780 --> 00:12:34,180\nWhen I first created MSW, obviously the main goal was to help people mock APIs in a better way.\n\n161\n00:12:34,540 --> 00:12:38,700\nBut over the years, I've been honestly blown away by what people are\n\n162\n00:12:39,060 --> 00:12:42,000\nusing MSW for. Like, apart from\n\n163\n00:12:42,480 --> 00:12:43,580\nobviously testing\n\n164\n00:12:44,060 --> 00:12:44,760\nin Node.js,\n\n165\n00:12:45,660 --> 00:12:50,100\npeople are using MSW to prototype their apps because 1 of the applications\n\n166\n00:12:50,540 --> 00:13:03,480\nof it is that you can have a state when you have to develop a front end, but your backend isn't ready, or it has an issue, or you're developing on a train. You know, anything can happen. And what I love people doing is they just grab MSW and they describe\n\n167\n00:13:04,180 --> 00:13:09,340\nthe same request handlers they probably have in tests because you use it. It's just 1 network description.\n\n168\n00:13:09,720 --> 00:13:14,540\nAnd they just enable it whenever they want. And suddenly they're developing against a particular\n\n169\n00:13:15,140 --> 00:13:20,140\nstate of their backend APIs, which is fixed in time. It's never going to change. It's there.\n\n170\n00:13:20,660 --> 00:13:22,620\nAnd I absolutely love it. And\n\n171\n00:13:23,400 --> 00:13:27,540\nI think it's also very powerful for debugging. Like when you encounter something\n\n172\n00:13:28,020 --> 00:13:42,320\nbreaking in your app and you're certain it has to do with the data you're fetching, so something isn't right. So with MSW, you can actually emulate any data coming from any APIs, even those you don't own, and you can pinpoint the issue,\n\n173\n00:13:42,660 --> 00:13:52,240\nand then you just copy the same handler into your test, and you have this one-to-one reproduction that is always reliable and allows you to write a regression test for that.\n\n174\n00:13:53,300 --> 00:13:58,220\nAnd yeah, I think there are also a couple of unusual use cases, like I know you're using MSW\n\n175\n00:13:58,740 --> 00:14:08,160\nin production sometimes to kind of emulate the server that is running for some of the apps that you maybe built. Yeah, I used that for Epic React, yeah. Yeah, yeah.\n\n176\n00:14:08,760 --> 00:14:09,900\nThat's really cool.\n\n177\n00:14:11,120 --> 00:14:14,720\nPeople also employed a lot in tools like Storybook\n\n178\n00:14:15,060 --> 00:14:18,140\nbecause effectively those tools are centered around\n\n179\n00:14:18,820 --> 00:14:38,400\nshowcasing different state of your app. In this case, it's about UI state, but very often your UI state depends on something else, like network. So people are using our add-on for Storybook, and they can say, hey, this is how this component looks when there's a server error. And this is actually pretty easy to do. And I think this is a match made in heaven.\n\n180\n00:14:39,100 --> 00:14:45,560\nYeah, yeah, absolutely. I remember before MSW, Storybook was always a big pain because you had to figure out, well, how do I mock out\n\n181\n00:14:46,120 --> 00:15:02,140\nthe data that comes into this. And so I guess I'll, this is, I think, part of what motivated the idea behind the smart and dumb components or container and presentation components, right? So that your presentation components would be the ones that go into Storybook and then you just don't put Storybook on it. But\n\n182\n00:15:02,800 --> 00:15:12,080\nif you have the network mocked out, then you can totally do just your container components in Storybook. And you can do the whole app in Storybook if you want to. Which is nice.\n\n183\n00:15:13,580 --> 00:15:16,040\nAnd like it all comes back down to,\n\n184\n00:15:16,560 --> 00:15:26,140\nStorybook is just another type of a test. It's a manual test, like you actually have to pull it up and run it. Of course, they have their testing stuff too, which is also very cool. But\n\n185\n00:15:27,660 --> 00:15:29,840\neven with the manual testing\n\n186\n00:15:30,440 --> 00:15:31,720\ncapabilities of Storybook,\n\n187\n00:15:32,020 --> 00:15:33,720\nyou want to make your\n\n188\n00:15:34,060 --> 00:15:39,640\ncode run as close to the production code as possible so that you're actually testing more stuff.\n\n189\n00:15:40,260 --> 00:15:46,900\nAnd that's just 1 of the things that I love about MSW is that I don't have to change my source code at all\n\n190\n00:15:47,280 --> 00:15:53,940\nto be able to make this mock stuff work. So my tests can live over here and my source code can just pretend that,\n\n191\n00:15:54,400 --> 00:16:02,480\nor behave the same way in production or in test mode, which I think is just so key. I think That's 1 reason why\n\n192\n00:16:02,980 --> 00:16:03,900\nyou and I\n\n193\n00:16:04,400 --> 00:16:04,900\njust\n\n194\n00:16:05,500 --> 00:16:12,320\nare so aligned on the tools that we've made. You with MSW and me with Testing Libraries, we both have this really strong feeling\n\n195\n00:16:13,480 --> 00:16:15,100\nthat your tests should resemble\n\n196\n00:16:15,660 --> 00:16:17,280\nthe way your software is used.\n\n197\n00:16:18,580 --> 00:16:22,160\nAnd by doing that, you just get a lot more confidence. So\n\n198\n00:16:24,000 --> 00:16:24,500\nyeah,\n\n199\n00:16:25,080 --> 00:16:28,640\nI think that's awesome. Now, I know that you have\n\n200\n00:16:29,240 --> 00:16:33,340\ndone a little bit of work, or maybe a lot of work at this point in\n\n201\n00:16:34,020 --> 00:16:36,520\nother kinds of protocols, more than just HTTP.\n\n202\n00:16:37,900 --> 00:16:39,660\nAnd so I'm talking specifically,\n\n203\n00:16:40,020 --> 00:16:50,700\noh, well, actually before we get into like, I wanna talk about WebSockets and SMTP and stuff like that too. But before we talk about that, MSW also has support for GraphQL,\n\n204\n00:16:51,960 --> 00:16:52,460\nwhich\n\n205\n00:16:53,260 --> 00:16:58,500\nas somebody who has used GraphQL only a couple of times, I thought was kind of interesting.\n\n206\n00:16:59,380 --> 00:17:08,760\nAnd I don't know with the new version that you're working on now, is GraphQL still a first-class citizen, or is it just part of the HTTP mocking abilities now?\n\n207\n00:17:09,319 --> 00:17:10,160\nIt is\n\n208\n00:17:10,680 --> 00:17:20,240\nfirst-class citizen, as it's always been. And the same way as you could do it before, you can, of course, describe APIs, GraphQL APIs using HTTP handlers, because\n\n209\n00:17:20,540 --> 00:17:27,140\nthankfully on the web, GraphQL is most often done using HTTP. But we do ship a designated GraphQL\n\n210\n00:17:27,660 --> 00:17:31,120\nobject, so you can mock queries and mutations much easier.\n\n211\n00:17:32,020 --> 00:17:35,040\nYeah. Yeah, I suppose the reason for that is\n\n212\n00:17:35,380 --> 00:17:35,880\nbecause\n\n213\n00:17:36,780 --> 00:17:46,780\nit doesn't make a whole lot of sense to say, okay, HTTP post, here's my GraphQL endpoint, and now this is my handler, and it's like literally anything you can do is all going to be in here.\n\n214\n00:17:47,320 --> 00:17:47,820\nSo\n\n215\n00:17:48,340 --> 00:17:55,740\nthat makes a lot of sense to have a utility, especially for like if you're selecting these things, then here's what should come back.\n\n216\n00:17:57,040 --> 00:17:57,540\nYeah.\n\n217\n00:17:57,900 --> 00:18:00,980\nOkay, great. So I'd like to talk about WebSockets\n\n218\n00:18:02,500 --> 00:18:05,780\nand SMTP. Which would you like to mention first?\n\n219\n00:18:06,480 --> 00:18:08,500\nOh boy, let's go with WebSockets.\n\n220\n00:18:08,980 --> 00:18:10,180\nOkay, great, yeah.\n\n221\n00:18:11,540 --> 00:18:12,040\nSo,\n\n222\n00:18:13,500 --> 00:18:17,340\nWebSockets for those who are unfamiliar, that's all about\n\n223\n00:18:18,100 --> 00:18:24,020\ndoing two-way communication between the client and the server. So server can send messages to the client and vice versa.\n\n224\n00:18:24,520 --> 00:18:27,880\nDid I say that right? Server can go to client, client can go back to the server.\n\n225\n00:18:28,260 --> 00:18:29,400\nIt is not HTTP,\n\n226\n00:18:30,180 --> 00:18:35,700\nAnd so that brings with it a different set of challenges. Yeah, I'd love to hear about those.\n\n227\n00:18:36,420 --> 00:18:36,920\nYeah.\n\n228\n00:18:38,240 --> 00:18:38,740\nSo\n\n229\n00:18:39,140 --> 00:18:41,740\nWebSockets are really, really great for,\n\n230\n00:18:42,280 --> 00:18:43,160\nas you said,\n\n231\n00:18:43,780 --> 00:18:50,140\nlike full duplex communications, and they're really cool for like real world, like live kind of applications, like chat and collaborations,\n\n232\n00:18:50,740 --> 00:18:52,860\nbut they do come with a set of challenges.\n\n233\n00:18:53,520 --> 00:18:55,740\nSo yeah, first of all, it's a different protocol.\n\n234\n00:18:56,200 --> 00:19:00,680\nAnd historically in Node, there hasn't been a way of working with WebSockets\n\n235\n00:19:01,000 --> 00:19:11,620\nat all. I don't believe they ship API that allows you to kind of construct WebSocket connections natively right now. There is an effort behind that, but it's not that simple. And\n\n236\n00:19:12,180 --> 00:19:16,400\nwhat people ended up doing is basically building custom libraries like Circuit.io,\n\n237\n00:19:16,920 --> 00:19:18,340\nwhich rely on\n\n238\n00:19:18,740 --> 00:19:20,260\nquite a number of things,\n\n239\n00:19:20,680 --> 00:19:23,260\nbut in a nutshell, they just rely on native\n\n240\n00:19:23,680 --> 00:19:29,080\nNode primitives to implement WebSocket protocol as you may be used to it on the web.\n\n241\n00:19:29,380 --> 00:19:29,880\nAnd\n\n242\n00:19:30,600 --> 00:19:31,900\nThe main challenge\n\n243\n00:19:32,500 --> 00:19:40,880\nto me, like somebody who may want to bring WebSocket support to MSW, the main challenge is that there isn't a single way how these kind of connections are done.\n\n244\n00:19:41,520 --> 00:19:43,540\nSo, to give a bit of history,\n\n245\n00:19:45,040 --> 00:19:46,580\nWebsockets do have their own protocol,\n\n246\n00:19:47,240 --> 00:19:51,440\nbut Websocket connection can also be implemented by regular HTTP polling.\n\n247\n00:19:51,980 --> 00:19:56,680\nWhat that does is basically you ask the server every n seconds\n\n248\n00:19:57,040 --> 00:20:04,780\nwhether something has changed, and then if it did, you receive an event from the server, so it relies on a long polling connection to the server.\n\n249\n00:20:05,320 --> 00:20:07,380\nAnd this, as a client, this gives you\n\n250\n00:20:08,260 --> 00:20:12,260\nkind of the reality of being in a live communication with server.\n\n251\n00:20:12,620 --> 00:20:17,940\nAnd this is great, but you can already see how, okay, WebSockets can actually be done over HTTP2,\n\n252\n00:20:18,740 --> 00:20:20,900\nbut that's actually not everything.\n\n253\n00:20:21,340 --> 00:20:25,580\nIn Node, as I mentioned, there isn't WebSocket protocol, but instead,\n\n254\n00:20:26,180 --> 00:20:47,800\nother third-party libraries, they rely on the concept of transports. So they can use and like opt in and out of different transports without even you knowing that includes HTTP polling, that include, I believe, row socket connections, and they also have XHR polling for certain situations, I think mainly meant for the browser. And this creates quite a cascade of complexity\n\n255\n00:20:48,420 --> 00:20:59,380\nbecause to you as MSW user, I want you to just type a WS or WebSocket dot, I don't know, on particular event and then respond with a particular event back.\n\n256\n00:21:00,060 --> 00:21:10,220\nAnd this was historically very difficult to achieve. I do have a prototype which dates like a year or 2 ago back and it has WebSocket support for the browser,\n\n257\n00:21:10,920 --> 00:21:13,220\nbut the node part is difficult.\n\n258\n00:21:14,060 --> 00:21:20,200\nI've been asking for, like asking around about this and also open for any contributions there,\n\n259\n00:21:20,580 --> 00:21:28,640\nbecause we need to figure out how do you achieve this on the common level possible, because I would hate to implement each transport separately.\n\n260\n00:21:29,020 --> 00:21:31,140\nI would love to have this common denominator\n\n261\n00:21:31,840 --> 00:21:37,980\nupon which then all this transport from third party libraries build upon. And this denominator is effectively\n\n262\n00:21:39,020 --> 00:21:42,340\nnet dot socket in node, which is a raw socket connection.\n\n263\n00:21:42,940 --> 00:21:50,780\nAnd I spent some time looking into this and I achieved some pretty cool results with observing these connections. This is actually pretty,\n\n264\n00:21:52,060 --> 00:21:55,140\nlike this is a good scenario when you can use proxies that I mentioned,\n\n265\n00:21:55,640 --> 00:21:56,900\nbut emulating\n\n266\n00:21:57,360 --> 00:21:57,860\nresponses\n\n267\n00:21:58,220 --> 00:21:59,560\nfrom the socket connection\n\n268\n00:22:00,060 --> 00:22:01,100\nbecomes really difficult.\n\n269\n00:22:01,480 --> 00:22:05,340\nYou're basically so low on the network layer in Node\n\n270\n00:22:05,660 --> 00:22:18,980\nthat not only you're dealing with raw HTTP messages, which is strings, but you're also dealing with things like buffer parsing and encoding, and you need to replace way too many things for it to work, so I would like this approach.\n\n271\n00:22:19,440 --> 00:22:21,140\nSo it still remains\n\n272\n00:22:21,820 --> 00:22:22,540\nin discussion.\n\n273\n00:22:22,900 --> 00:22:32,340\nMaybe by the time I get back to it, a committee behind Node.js will actually ship an official Node.js, like a WebSocket API. That would be really good.\n\n274\n00:22:32,960 --> 00:22:36,140\nBut until then, it's just exploration and discovery.\n\n275\n00:22:37,120 --> 00:22:43,020\nYeah, yeah, wow. So these sorts of things are always more complicated than you think. Oh yeah.\n\n276\n00:22:43,920 --> 00:22:44,700\nSo yeah,\n\n277\n00:22:45,300 --> 00:22:46,960\nThat is very interesting.\n\n278\n00:22:48,420 --> 00:22:55,280\nSometimes when I hear about stuff like that, I sit back and think, how I can't believe this stuff works at all.\n\n279\n00:22:56,140 --> 00:22:57,940\nIt's amazing that it works.\n\n280\n00:22:58,780 --> 00:22:59,980\nSo yeah, awesome.\n\n281\n00:23:00,860 --> 00:23:07,500\nThank you for sharing that background. Is it a similar situation for SMTP for like sending emails and that sort of thing?\n\n282\n00:23:07,800 --> 00:23:09,340\nIt is similar, because\n\n283\n00:23:09,680 --> 00:23:12,580\nI believe it's also done through socket connection.\n\n284\n00:23:14,340 --> 00:23:19,020\nAnd it was 1 of the sessions that I had when you asked me about the ability to mock SMTP.\n\n285\n00:23:19,440 --> 00:23:25,940\nAnd I looked into sockets and, well, you have intercepted those, but as I said, it becomes quite problematic to mock those reliably.\n\n286\n00:23:26,520 --> 00:23:28,880\nAnd I don't think I liked the\n\n287\n00:23:29,440 --> 00:23:32,380\nend result that I achieved, so I put it on a break.\n\n288\n00:23:32,680 --> 00:23:37,700\nYeah, that makes sense. And for those going through the workshops, this is actually the reason,\n\n289\n00:23:38,360 --> 00:23:41,020\nthe primary reason that we're using\n\n290\n00:23:41,920 --> 00:23:43,160\nResend's API\n\n291\n00:23:43,500 --> 00:23:48,220\nfor sending email instead of the SMTP and NodeMailer and all of that.\n\n292\n00:23:49,020 --> 00:23:51,840\nThere is definitely a benefit to using SMTP\n\n293\n00:23:52,480 --> 00:23:56,780\nbecause it means that you can swap with any other email provider that\n\n294\n00:23:57,160 --> 00:24:00,000\nuses SMTP without changing any of your code,\n\n295\n00:24:01,340 --> 00:24:01,840\nallegedly.\n\n296\n00:24:02,320 --> 00:24:02,820\nBut\n\n297\n00:24:04,760 --> 00:24:10,940\nI have swapped email providers before, even using their REST APIs, and it's not that big of a deal anyway. So,\n\n298\n00:24:12,040 --> 00:24:18,840\nand then on top of that, we can mock it. And so I'm actually fine with that. So, yeah, very interesting.\n\n299\n00:24:19,540 --> 00:24:26,760\nIs there anything else that, oh, you know what? Let's talk about the process or process communication stuff. So in the workshop,\n\n300\n00:24:28,260 --> 00:24:30,400\nin the testing section, we have\n\n301\n00:24:31,780 --> 00:24:32,680\nthis onboarding\n\n302\n00:24:33,260 --> 00:24:36,240\nflow. And we actually have a couple of things, like we have\n\n303\n00:24:37,360 --> 00:24:39,840\nverification emails and different things that are sent.\n\n304\n00:24:40,200 --> 00:25:03,660\nAnd to test those, we of course don't want to send a real email and have the browser go to the email client and open it up, all that, that would be ridiculous. And so we do have the mock, but to communicate between the mock and the playwright browser is really difficult because the, our dev server that has the mock in it is sitting over here in process A and it could maybe even a different terminal that you're running it in. And then your Playwright\n\n305\n00:25:04,300 --> 00:25:09,060\ntests are running in a completely different process as well. So communicating between these processes\n\n306\n00:25:09,920 --> 00:25:10,820\nis non-trivial.\n\n307\n00:25:11,320 --> 00:25:13,760\nAnd so what we do in the workshop is we,\n\n308\n00:25:14,060 --> 00:25:27,140\nthe mock will save the email to disk and then the Playwright Browser will just wait until that file has been written and then read it like it's reading an email. That works well, and I have no problems with this.\n\n309\n00:25:27,740 --> 00:25:28,240\nBut\n\n310\n00:25:28,680 --> 00:25:31,600\nthat's not good enough for Artem. And so,\n\n311\n00:25:32,300 --> 00:25:37,840\nI would like to, and there actually is a issue with this approach, and that is\n\n312\n00:25:38,240 --> 00:25:42,320\nwhat if you wanted to mock out what happens if the email fails to send or\n\n313\n00:25:42,620 --> 00:25:48,060\nmaybe there's like some API failure, and So you want to change the mock for\n\n314\n00:25:48,680 --> 00:25:49,180\nresend\n\n315\n00:25:49,860 --> 00:25:51,300\nfor this particular test.\n\n316\n00:25:51,960 --> 00:25:56,300\nAnd that with the approach that I have right now would be very, very challenging.\n\n317\n00:25:56,740 --> 00:25:59,720\nYou'd have to, what I would do right now is I'd\n\n318\n00:26:00,040 --> 00:26:00,820\nhave a special\n\n319\n00:26:01,360 --> 00:26:12,560\nemail address that when you try to send to this email address, that will trigger a failure in the handler, which I have done before. We did this at PayPal and companies have been up before and I hate it so much\n\n320\n00:26:12,980 --> 00:26:16,720\nbecause there's a strong layer of indirection there.\n\n321\n00:26:17,620 --> 00:26:18,280\nAnd so,\n\n322\n00:26:18,860 --> 00:26:24,180\nthis is actually why I'm really excited for what Artem is working on. So can you tell us about this process-to-process communication?\n\n323\n00:26:24,640 --> 00:26:25,660\nYeah, yeah.\n\n324\n00:26:26,880 --> 00:26:27,380\nSo\n\n325\n00:26:28,920 --> 00:26:33,660\nmy main motivation to even look into this was the rise of React server components,\n\n326\n00:26:34,080 --> 00:26:35,880\nbecause to my limited understanding,\n\n327\n00:26:36,300 --> 00:26:40,340\nthey kind of consist of 2 parts, of the server part and the client part,\n\n328\n00:26:40,840 --> 00:26:43,520\nand those are often done in 2 different processes\n\n329\n00:26:43,840 --> 00:27:01,660\nfor various reasons. But the core idea is the same. You have 2 unrelated processes, but they are related by functionality, by React server components in this case. And I was thinking, well, how will folks test this? Because if you want to test it well, it has to resemble this architecture to some extent in the test. So you have to have kind of a...\n\n330\n00:27:02,280 --> 00:27:06,540\nYou may be the only person asking the question, how will people test server components?\n\n331\n00:27:07,840 --> 00:27:10,880\nSo thank you for blazing the trail there.\n\n332\n00:27:11,260 --> 00:27:12,420\nSomebody has to.\n\n333\n00:27:13,580 --> 00:27:14,980\nYeah, and I was\n\n334\n00:27:16,380 --> 00:27:21,520\nthinking how could this work in kind of in perfect world. And I do believe that\n\n335\n00:27:21,980 --> 00:27:23,300\nwe will arrive eventually\n\n336\n00:27:24,060 --> 00:27:36,240\nto this task emulating this architecture. So we would have a mock server kind of part, which is responsible for service side logic, and then you will have a client part, which is how we used to test React components right now, conventionally.\n\n337\n00:27:37,040 --> 00:27:38,080\nBut again,\n\n338\n00:27:38,720 --> 00:27:53,000\nif you kind of copy this architecture into your test, you will also end up with 2 different processes. So how do we solve that? Because what you want to achieve is full control of a network. But in this case, the network lives in a different place than your task lives.\n\n339\n00:27:53,400 --> 00:28:00,600\nAnd this poses a problem. Now you need to have these 2 processes communicating to know about each other, to affect each other. And\n\n340\n00:28:01,060 --> 00:28:06,180\nI looked into a more conventional IPC, which is inter-process communication, that Node provides.\n\n341\n00:28:06,720 --> 00:28:18,660\nAnd it was interesting, but I ended up on the idea of basically doing something similar to what you're doing with writing files to the disk, but instead of file system being the common place for this processes to communicate,\n\n342\n00:28:19,080 --> 00:28:21,140\nI lifted it to a WebSocket server.\n\n343\n00:28:21,580 --> 00:28:26,740\nSo this was encapsulated in a brand new API, which isn't out yet.\n\n344\n00:28:27,920 --> 00:28:29,760\nAnd the way it works is that\n\n345\n00:28:30,180 --> 00:28:32,580\nyou have a function that is called setupRemoteServer,\n\n346\n00:28:33,900 --> 00:28:38,740\nand it works very similarly to setupServer that you use for regular Node.js mocking,\n\n347\n00:28:39,140 --> 00:28:40,220\nbut with a twist.\n\n348\n00:28:40,600 --> 00:28:41,360\nYou basically\n\n349\n00:28:41,920 --> 00:28:43,760\ndelegate the interception\n\n350\n00:28:44,060 --> 00:28:48,980\nof requests to a different process, and we use WebSockets to communicate this intention.\n\n351\n00:28:49,340 --> 00:29:00,940\nSo how it works is, let's say you're testing a play, you have a playwright test that runs a remix app and you want to change the behavior of your loader function, right, which is on the server. And the way it works is\n\n352\n00:29:01,500 --> 00:29:08,500\nit runs the interception in your app and it notifies your test through WebSocket that hey request occurred\n\n353\n00:29:09,080 --> 00:29:10,360\nand your test\n\n354\n00:29:10,680 --> 00:29:20,420\nis the area responsible to describe how to handle this. The same way how we use service worker just for the interception, right? You don't write mocks there, it would be too cumbersome.\n\n355\n00:29:20,860 --> 00:29:25,580\nThe same way here, we use this WebSocket and your server just as the source of requests.\n\n356\n00:29:26,120 --> 00:29:26,980\nAnd they signal\n\n357\n00:29:27,440 --> 00:29:29,740\nkind of the requests that are happening to your test.\n\n358\n00:29:30,060 --> 00:29:41,820\nAnd in your test, you have all the same request handlers, all the same ability to do .use and reset handlers and all that. And once you provide the intention, it is sent back to your running server\n\n359\n00:29:42,520 --> 00:29:47,860\nand also using the WebSockets. And then when you send a certain intention, like a mock response,\n\n360\n00:29:48,340 --> 00:29:51,660\nit is used on the server and that's basically it.\n\n361\n00:29:52,660 --> 00:29:54,060\nOkay, yeah. So\n\n362\n00:29:54,520 --> 00:30:05,820\nI just think this is brilliant. I think it's a really clever idea. I really like how similar this is to the idea of how the WebSocket or the service worker works.\n\n363\n00:30:06,220 --> 00:30:10,860\nIt just really makes a lot of sense. I think that's actually a pretty cool aspect of the design.\n\n364\n00:30:11,640 --> 00:30:13,860\nSo 1 question that I have about\n\n365\n00:30:14,180 --> 00:30:14,680\nimplementation\n\n366\n00:30:15,040 --> 00:30:18,340\nof this is right now what I have is I start\n\n367\n00:30:18,840 --> 00:30:20,040\nmy my dev server,\n\n368\n00:30:20,660 --> 00:30:23,500\nwhether I'm testing it or not, I have MSW\n\n369\n00:30:23,800 --> 00:30:28,040\nrunning so that I'm not actually sending emails as I'm, you know, developing and everything.\n\n370\n00:30:29,240 --> 00:30:29,980\nAnd so\n\n371\n00:30:30,660 --> 00:30:32,260\nIf I want to be able to\n\n372\n00:30:32,860 --> 00:30:35,700\nswap out the implementation of handlers and things,\n\n373\n00:30:36,660 --> 00:30:39,560\nmy assumption is that I will set up the\n\n374\n00:30:40,120 --> 00:30:44,080\nmock service worker or the, yeah, I'll set up the mock server\n\n375\n00:30:44,700 --> 00:30:46,520\njust like I do in,\n\n376\n00:30:48,000 --> 00:30:57,020\nduring development, but I will also say set up remote servers or server. Is that right? Or do I do both or is it just 1?\n\n377\n00:30:59,680 --> 00:31:04,040\nI'm trying to recall right now how it's done, but I do believe you need both.\n\n378\n00:31:05,440 --> 00:31:08,460\nLet me remember. Yeah, I remember how it's done. So basically,\n\n379\n00:31:08,960 --> 00:31:12,100\nit's done in a way that you would need this\n\n380\n00:31:12,440 --> 00:31:12,940\nsetup\n\n381\n00:31:15,060 --> 00:31:27,540\nremote server API, but on your kind of controlling side, which in my example before was the test. But on the server side, you don't need any of that. On the server side, you just use regular setup server API.\n\n382\n00:31:28,260 --> 00:31:34,220\nAnd the way MSW works, it kind of knows about a certain agreement between these 2 APIs,\n\n383\n00:31:34,700 --> 00:31:38,300\nand if it's met, if it can kind of detect an open handle\n\n384\n00:31:38,680 --> 00:31:53,300\nfrom your test asking for, hey, I'm here, I'm ready to accept remote requests, it will just connect and send the traffic there. So that's how it's done. I see, okay. That makes sense. So then in my test, if I say, okay, I want to, you know, server.use\n\n385\n00:31:54,060 --> 00:31:56,640\nfor this particular API, I want it\n\n386\n00:31:56,960 --> 00:31:59,360\nto fail, right? That's my new handler.\n\n387\n00:31:59,680 --> 00:32:00,180\nSo\n\n388\n00:32:00,600 --> 00:32:04,300\nthe dev server actually has a handler for that, but because we\n\n389\n00:32:05,080 --> 00:32:07,260\nadded an override for that handler,\n\n390\n00:32:08,200 --> 00:32:14,020\nit's when the dev server makes this request, it's gonna say, oh, there's an override on the remote server so let me send it over there instead.\n\n391\n00:32:14,800 --> 00:32:15,840\nYeah, that's good.\n\n392\n00:32:16,240 --> 00:32:16,740\nAwesome.\n\n393\n00:32:17,540 --> 00:32:41,260\nYeah, it's pretty easy. Like we literally have the list of handlers, which are usually just your handlers in this process. And with this API, we're adding a preceding kind of check, which is like get me remote handlers, whatever, for this request. And it checks the remote connection first. If it handles the request, it uses that handler, that response, for example. And if it doesn't handle anything, it just goes through your already existing handlers.\n\n394\n00:32:41,580 --> 00:32:52,620\nVery cool. And when that WebSocket server goes down, then the dev server no longer needs to check, right? So like if I stop my playwright tests, then that remote server is no longer\n\n395\n00:32:53,480 --> 00:32:55,080\nlistening for any\n\n396\n00:32:55,380 --> 00:32:55,880\nresponses.\n\n397\n00:32:56,240 --> 00:33:00,560\nSo the dev server just continues with its regular stuff. Yeah, it will be terminated, yeah. Yeah,\n\n398\n00:33:00,940 --> 00:33:03,540\nyeah, that makes tons of sense. That is so cool.\n\n399\n00:33:04,180 --> 00:33:04,680\nBrilliant.\n\n400\n00:33:05,000 --> 00:33:05,500\nDefinitely\n\n401\n00:33:05,980 --> 00:33:08,040\nlooking forward to having that capability.\n\n402\n00:33:09,140 --> 00:33:13,040\nAnd so I wanna wrap up our conversation talking a little bit about how\n\n403\n00:33:13,580 --> 00:33:15,040\nyour work is supported\n\n404\n00:33:16,240 --> 00:33:18,340\nand like how you make this sustainable\n\n405\n00:33:18,960 --> 00:33:19,460\nbecause\n\n406\n00:33:20,460 --> 00:33:22,320\nyou do have a full-time job\n\n407\n00:33:22,940 --> 00:33:23,440\nand\n\n408\n00:33:24,160 --> 00:33:28,360\nlike you've got to be able to support yourself while you're doing this.\n\n409\n00:33:28,860 --> 00:33:29,940\nLike does your employer\n\n410\n00:33:30,620 --> 00:33:32,720\nor like how do you\n\n411\n00:33:33,580 --> 00:33:34,460\npay for this?\n\n412\n00:33:35,660 --> 00:33:37,660\nHow do you live? How do you make this sustainable?\n\n413\n00:33:38,620 --> 00:33:40,340\nWell, for a long time,\n\n414\n00:33:40,900 --> 00:33:43,160\nit wasn't sustainable at all. In fact,\n\n415\n00:33:43,780 --> 00:33:44,920\nwhen I first started\n\n416\n00:33:46,500 --> 00:33:50,940\nkind of seeing the attention that MSW was getting, it was a bit overwhelming,\n\n417\n00:33:51,280 --> 00:33:54,600\nand I ended up doing something very wrong, which was\n\n418\n00:33:54,960 --> 00:33:57,940\ndevoting almost all my free time to this project.\n\n419\n00:33:58,520 --> 00:34:08,319\nWell, of course, it resulted in the project moving forward and getting new features and kind of, you know, having more reasons for you to love it. But like the backside of it was me\n\n420\n00:34:08,699 --> 00:34:21,659\nkind of not feeling very happy about my life. Like, I don't think it was healthy to spend like every evening and almost all weekends on this because I have family to support, they also need me. And overall,\n\n421\n00:34:22,440 --> 00:34:28,739\nI learned, like with time, I came to realize that the balance between these things is really important.\n\n422\n00:34:29,440 --> 00:34:34,560\nAnd 1 of the things I learned from you actually is just addressing things that I'm\n\n423\n00:34:34,900 --> 00:34:36,420\npersonally interested in,\n\n424\n00:34:36,820 --> 00:34:45,520\nwhich sometimes means that people are raising issues and I just don't see this as something that I'm excited about. So I urge for contributing.\n\n425\n00:34:46,260 --> 00:34:54,360\nI'm trying to keep up like up to date documentation and how anybody can join and help. So this is open source, the whole point of it.\n\n426\n00:34:54,860 --> 00:34:55,360\nAnd\n\n427\n00:34:55,679 --> 00:34:59,700\nyeah, like, by other means, of course, I was very lucky to\n\n428\n00:35:00,100 --> 00:35:07,000\nget into GitHub Sponsors program so people can support MSW officially, financially through GitHub and Open Collective.\n\n429\n00:35:07,480 --> 00:35:11,680\nI believe you were actually the first GitHub sponsor I got. Oh, wow. Amazing.\n\n430\n00:35:11,980 --> 00:35:12,680\nHappy sponsor.\n\n431\n00:35:14,160 --> 00:35:24,780\nI'm thankful. And right Now we have around 13 sponsors for MSW, which is insane, and I'm really thankful for every person in the company. It's not enough. Yeah, I mean, it's not enough.\n\n432\n00:35:25,080 --> 00:35:35,320\nPeople may not realize it, but even something as small as MSW can spawn really quickly. Small in terms of like the promises we make, like we don't\n\n433\n00:35:35,740 --> 00:35:41,340\nmake like thousand promises. It's just a small tool that does 1 job and it tries to do it well.\n\n434\n00:35:41,660 --> 00:35:45,260\nBut even that takes a lot of time to maintain and test.\n\n435\n00:35:45,660 --> 00:35:46,660\nAnd honestly,\n\n436\n00:35:47,020 --> 00:35:49,100\nI'm very happy with kind of\n\n437\n00:35:49,500 --> 00:35:53,940\namount of time I'm able to dedicate to it. So I don't want to rush things.\n\n438\n00:35:54,520 --> 00:35:56,340\nI would prefer being slow\n\n439\n00:35:56,840 --> 00:36:01,880\ninstead of being fast and breaking like thousands of people's like CI and tests.\n\n440\n00:36:02,220 --> 00:36:03,780\nNobody would appreciate that.\n\n441\n00:36:04,200 --> 00:36:04,700\nBut\n\n442\n00:36:05,140 --> 00:36:07,900\nover time, it became difficult to sustain this financially.\n\n443\n00:36:08,220 --> 00:36:13,440\nI've been trying different ways to reach out to companies for sponsorships, to participate in some grants.\n\n444\n00:36:13,860 --> 00:36:15,860\nThey were not very successful, unfortunately.\n\n445\n00:36:16,440 --> 00:36:28,480\nSo if you are watching this by you aiming a viewer and you like MSW and you think it's a cool idea and it deserves more love, then please consider supporting. You can support\n\n446\n00:36:28,940 --> 00:36:29,440\nobviously\n\n447\n00:36:29,760 --> 00:36:38,140\nthrough GitHub sponsors and Open Collective, but you can also support through contributing, which I find the best kind of support. We are still a very small team.\n\n448\n00:36:38,680 --> 00:36:43,960\nIt's insane to me that there's so many companies that rely on MSW, like Google, Microsoft,\n\n449\n00:36:44,260 --> 00:36:44,760\nAmazon.\n\n450\n00:36:45,960 --> 00:36:51,260\nReally, there are countless companies, and still nobody really supports the effort behind it.\n\n451\n00:36:51,820 --> 00:36:53,540\nIt's still like this joke about\n\n452\n00:36:54,240 --> 00:36:55,740\nhuge enterprises being\n\n453\n00:36:56,740 --> 00:37:02,120\nlaying on the shoulders of 1 guy in some USA state. It's pretty much the same story.\n\n454\n00:37:02,980 --> 00:37:15,560\nI maintain it as the only active maintainer, but I'm very happy to have a few team members who help me with their judgment and who can reach out and pull requests and even tackle some things in a timely manner. But it's still not enough. And\n\n455\n00:37:15,860 --> 00:37:20,240\nmy main regret is that I can't really do this full time\n\n456\n00:37:20,600 --> 00:37:21,100\nbecause\n\n457\n00:37:21,660 --> 00:37:38,540\nyou've been seeing what MSW already did to the whole landscape of API mocking, which is really great, but it's a very small percentage of what we actually can do. But there is only as many hours in a day and I still need to pay for rent and I still need to, you know, have food. So obviously\n\n458\n00:37:39,240 --> 00:37:41,620\nthis is being sort of deprioritized.\n\n459\n00:37:43,040 --> 00:37:43,860\nYep. Yep.\n\n460\n00:37:44,240 --> 00:37:44,740\nWell,\n\n461\n00:37:45,040 --> 00:37:49,700\nI am happy to sponsor and I recommend anybody who is\n\n462\n00:37:50,500 --> 00:37:53,540\nmaking money off of code that's running through MSW\n\n463\n00:37:54,000 --> 00:37:54,500\nshould,\n\n464\n00:37:54,860 --> 00:37:55,740\njust send\n\n465\n00:37:56,200 --> 00:37:58,580\na penny every time your code goes\n\n466\n00:37:58,940 --> 00:37:59,720\nthrough MSW.\n\n467\n00:38:01,100 --> 00:38:01,600\nOr\n\n468\n00:38:01,920 --> 00:38:12,460\njust sponsor a little bit. I think that's a good thing to do. So thank you for all the work that you've done. Is there anything else that we didn't cover that you would like to make sure we cover before we wrap up?\n\n469\n00:38:15,060 --> 00:38:20,340\nI think we're good. I think we covered through everything and I'm really happy to be a part of this course.\n\n470\n00:38:20,920 --> 00:38:31,580\nYour support has been incredible. I'm very thankful for it. And I hope that people also enjoy what they will be building and learn a lot from MSW and from other things as well. Well, thank you so much, Artem.\n\n471\n00:38:31,920 --> 00:38:34,420\nAll right, thanks everybody. We'll see you later.\n\n472\n00:38:34,900 --> 00:38:36,100\nThank you, see ya.",
            "text": "[00:00:00] Kent:\nHey, Artem, how's it going? \n\n[00:00:02] Artem:\nHey, Kent. It's great. What about you? \n\n[00:00:05] Kent:\nI'm doing great. And everybody watching right now, hopefully you've been enjoying the exercises and stuff. Artem is the creator of MSW, which We're using in the workshops, and it's awesome been working on that for years now. I'm gonna try and pronounce your last name you gave me a a guide Let's \n\n[00:00:25] try that Zakharchenko\n\n[00:00:29] Artem:\nis really close. Yeah, yeah, \n\n[00:00:31] Kent:\nokay, okay? Can you say it? \n\n[00:00:33] Artem:\nZakharchenko, I think it's pretty pretty much \n\n[00:00:35] Kent:\nthe same. Yeah. Well, okay. So your pronunciation guide was very helpful then. Because I look at your, the spelling of your last name and I'm like, I have no idea how to say that. So yeah, thank you. Well, so Artem, why don't you introduce yourself to folks listening? \n\n[00:00:52] Artem:\nYeah, sure. Hey there. My name is Artem. I'm a software engineer based in Czech Republic. I've been fascinated by computers and engineering in particular since I was about 12 years old. And I've been doing this as a hobby for a very long time before it became my full-time job. And like many years \n\n[00:01:13] later, here we are. \n\n[00:01:15] Kent:\nAwesome. Well, so can you dive a little deeper into the creation of MSW and what with like the stuff that you've been working on, what really led you to create MSW, this tool that we're, that I really love? \n\n[00:01:34] Artem:\nI created MSW as a kind of over-weekend pet project. I wasn't really satisfied with the state of API mocking libraries back then. I think it's about, it's like 5 years this year, 5 years ago. And I decided, yeah, like time flies. And I thought to myself that we can do better. And I kind of \n\n[00:01:54] created this prototype very hastily as prototypes usually are. And you know, turned out we can do better. And over time I had a chance to iterate on it and improve it. And now you folks are all using and hopefully enjoying it in your workshop. \n\n[00:02:10] Kent:\nAwesome, yeah. I can tell you how I came to start using MSW. I think you actually know, but I'll tell other folks who are listening. So I was working on Epic React and the material for that and getting into doing like \n\n[00:02:31] working with a Pokemon app or component that we were putting together. And I wanted to teach how to do fetch requests and things. And so the challenge that I was facing is I didn't want to require people to set up a real server and run that server for the workshop. I wanted \n\n[00:02:51] to keep it really simple. And so I built a little fetch mock. I say window.fetch equals my own thing. And it mocked things out and it worked fine. But it wasn't the most ergonomic thing for me to develop with. It didn't like, users at the workshop had no idea that this was going on, \n\n[00:03:11] so it was fine. But it just wasn't very nice to work with. And then on top of that, I missed the ability to see the network tab and see the actual requests going through, right? So that's when I started exploring using a service worker, but I'd done service workers before and I \n\n[00:03:31] was like, yeah, that sounds awful. I don't want to write all this stuff in a service worker. There's so many edge cases with service workers. And so then I started looking around, and somebody recommended Mirage.js, which is a popular library for mocking. But Mirage does pretty much the same thing that what I was doing, just mocking, making their own version of Fetcher. \n\n[00:03:52] I don't know exactly their implementation, but the bottom line was no network tab. And so like, that wasn't any better from what I was doing. And then I discovered MSW. And the thing that really surprised me about MSW was that I could actually write my fetch handlers within my Create React app, like within that source code. \n\n[00:04:12] And so I didn't have to write anything in the service worker and MSW would handle the service worker for me. And that was like sold. I was super, super into that. And then on top of that, soon thereafter, you added the ability to use the same handlers in the browser as well as in \n\n[00:04:32] Node, so I could use it for testing. And that just like, oh, chef's kiss like this, just it was so, so nice. So yeah, since then, years ago, ever since then I have loved it. I wrote a blog post about you should not mock Fetch, stop mocking Fetch because MSW \n\n[00:04:53] is the answer. So thank you. \n\n[00:04:56] Artem:\nOh, thank you. \n\n[00:04:58] Kent:\nYeah, it's been awesome. So yeah, can you tell us a little bit about some of the, so actually let me back up really quick. So with the, in Epic Web, none of the workshops are using MSW in the browser. And in fact, In my active development, I don't use MSW in the browser because \n\n[00:05:19] I'm doing full stack development and so all of the requests that I'm making to third parties that I want to mock out are happening on the server. There could be some integrations that are client-side only in the future, like for certain features, there's, you know, you wanna use, oh, I \n\n[00:05:39] forget what it's called, but there's this API for doing autocomplete on an input for addresses and stuff. Google has 1, but there's this other 1 that I used at a company a while back, and yeah, proxying that through your server was not ever gonna work. So like doing stuff like that, those types of integrations, I totally would 100% use MSW in \n\n[00:05:59] the browser, But for most of the time, I end up only using it on the server. And so I really would like to get an idea of how MSW works at that level. Because in like MSW, for those who don't know, it's mock service worker. You know what that means. But we're not using the service worker at all. \n\n[00:06:19] And so there's obviously, like there's no service worker on the server side. So yeah, I think it'd be kind of cool to hear about how did the server side aspect of MSW come to be? And how does that work? How do you make that happen? \n\n[00:06:36] Artem:\nThat's a really cool question, because I remember people asking about this when the project just started, and folks started writing posts about using MSW in Node and praising its service worker capabilities, but that was kind of mutually exclusive. There's no workers in Node like service workers. And the way it works in Node is very similar to \n\n[00:06:57] things like Knock, if people use that. And it's similar, but a bit different. So to give you a bit of a history context, most of the tools in Node do like patching of request making modules, very similar to how you mentioned you override your fetch, like window.fetch, but library \n\n[00:07:17] authors actually do like http.clientrequest or http.get, and they just take and override those classes and functions to make them do whatever they want, which is also not without the trade-offs. Like, how I see this is when you override these native modules, you are throwing a big portion of their \n\n[00:07:37] logic away, and you are trimming them down just so they do whatever the mock requires. And I, like you may guess, I'm not a big proponent of that because well, I believe mocking should be as transparent and as production kind of resembling production as possible. \n\n[00:07:55] Kent:\nYeah, so \n\n[00:07:56] Artem:\nwhat we did with, yeah, like what we did with MSW was take a slightly different approach. I believe right now what you're using is like version 4 of this approach, but the idea, it didn't change. So the point was to take these native classes, let's take a HTTP client request as an example. This is 1 of the most used APIs \n\n[00:08:16] in Node. And before like global fetch, like a year or 2 ago, this was the main way to make requests. And what MSW does, it creates an extension of this class. So we don't override it, we extend it. And this allows us to go into things like, for example, this is the method when request happens. I don't want to override it. \n\n[00:08:36] I want to kind of listen to it. And if there is a mock for this particular request, I want to hijack it. But if there is no mock, what I do is basically super.end, for example. And this is so powerful because it means I'm not throwing away everything that Node does. I'm just strategically kind of listening to \n\n[00:08:56] proper events during the request. And what I've been experimenting recently is even better than that. There was a proof of concept to use proxies, where proxy in JavaScript is basically an API that wraps any object and allows you to react to changes that \n\n[00:09:17] happen into that object. So you can listen to new properties being set or functions being called or classes being constructed because if you think about it, everything in JavaScript is an object. And I already rewrote the XMLHttpRequestInterception using this approach and it's fantastic. I literally had a kind of a revelation \n\n[00:09:38] the other day. I was debugging something, and I opened this class that provides mocking for XMLHttpRequests, And it took me a couple of minutes to realize where the mocks are, because it just doesn't do anything drastic. It takes the proxy, and it listens to particular events, like load start and load end, and that was it. \n\n[00:09:58] Kent:\nWow, that sounds interesting. So the work on MSW and fine-tuning the way that it works, the implementation is never done. \n\n[00:10:07] Artem:\nIt's never done, no. \n\n[00:10:09] Kent:\nYeah, so since you're extending the class, you need to override what happens when a module says import HTTP. How do you manage that? \n\n[00:10:19] Artem:\nSo what we have is a concept of Interceptor. It's a base class that basically does 2 things. It patches some modules. It can be actually anything. You can use it for whatever module you like, but we use it for this HTTP module in particular. And it does some patches to make your modules, and \n\n[00:10:39] then it has a dispose method that reverts all those patches. And in fact, it reverts all the side effects that you might have introduced, the side effects you need to make this particular interception work. Because it comes down to the fact that you can make requests in Node in many ways, actually. Like, there is HTTP client request, which is the main way, but people are also using \n\n[00:11:00] things like GS DOM without realizing this is actually Node, right? It's just a smart abstraction that makes you think you're working with a browser. So you have things like XML HTTP requests and even fetch historically. But all those were implemented under the hood using the same Node modules. So in Node.js, we also have first-class \n\n[00:11:21] support for those, so it's a little easier for us to manage. And, yeah, so this is what we do, effectively. We create Interceptor, And then we can also group them together because it will be really annoying if you would have to configure things if you're suddenly using not HTTP client request but something else in Node. \n\n[00:11:41] So we do this for you, and we have another concept, which is a batch interceptor. And effectively, all it does, it groups multiple interceptor instances together. So what most people are using when they import MSW slash node is actually a batch interceptor that combines client request, XHR, and fetch as \n\n[00:12:01] well for modern versions of Node. And this is how they get this API mocking working. \n\n[00:12:08] Kent:\nYeah, wow, that's honestly really fascinating how all that works. So, Can you tell us a little bit about what you see people using MSW for and like where can people integrate this into their workflow? \n\n[00:12:27] Artem:\nWhen I first created MSW, obviously the main goal was to help people mock APIs in a better way. But over the years, I've been honestly blown away by what people are using MSW for. Like, apart from obviously testing in Node.js, people are using MSW to prototype \n\n[00:12:47] their apps because 1 of the applications of it is that you can have a state when you have to develop a front end, but your backend isn't ready, or it has an issue, or you're developing on a train. You know, anything can happen. And what I love people doing is they just grab MSW and they describe the same request handlers they probably have in tests because you use it. It's \n\n[00:13:07] just 1 network description. And they just enable it whenever they want. And suddenly they're developing against a particular state of their backend APIs, which is fixed in time. It's never going to change. It's there. And I absolutely love it. And I think it's also very powerful for debugging. Like when you encounter something \n\n[00:13:28] breaking in your app and you're certain it has to do with the data you're fetching, so something isn't right. So with MSW, you can actually emulate any data coming from any APIs, even those you don't own, and you can pinpoint the issue, and then you just copy the same handler into your test, and you have this one-to-one reproduction \n\n[00:13:48] that is always reliable and allows you to write a regression test for that. And yeah, I think there are also a couple of unusual use cases, like I know you're using MSW in production sometimes to kind of emulate the server that is running for some of the apps that you maybe built. Yeah, \n\n[00:14:05] Kent:\nI used that for Epic React, yeah. \n\n[00:14:07] Artem:\nYeah, yeah. That's really cool. People also employed a lot in tools like Storybook because effectively those tools are centered around showcasing different state of your app. In this case, it's about UI state, but very often your UI state depends on something else, like network. So \n\n[00:14:27] people are using our add-on for Storybook, and they can say, hey, this is how this component looks when there's a server error. And this is actually pretty easy to do. And I think this is a match made in heaven. \n\n[00:14:39] Kent:\nYeah, yeah, absolutely. I remember before MSW, Storybook was always a big pain because you had to figure out, well, how do I mock out the data that comes into this. And so I guess I'll, this is, I think, part of what motivated the idea behind the smart and dumb components or container and presentation components, right? So that your presentation components would be the ones that go into Storybook and \n\n[00:14:59] then you just don't put Storybook on it. But if you have the network mocked out, then you can totally do just your container components in Storybook. And you can do the whole app in Storybook if you want to. Which is nice. And like it all comes back down to, Storybook is just another type of a test. It's \n\n[00:15:19] a manual test, like you actually have to pull it up and run it. Of course, they have their testing stuff too, which is also very cool. But even with the manual testing capabilities of Storybook, you want to make your code run as close to the production code as possible so that you're actually testing more stuff. \n\n[00:15:40] And that's just 1 of the things that I love about MSW is that I don't have to change my source code at all to be able to make this mock stuff work. So my tests can live over here and my source code can just pretend that, or behave the same way in production or in test mode, which I think is just so key. I think \n\n[00:16:00] That's 1 reason why you and I just are so aligned on the tools that we've made. You with MSW and me with Testing Libraries, we both have this really strong feeling that your tests should resemble the way your software is used. And by doing that, you just \n\n[00:16:20] get a lot more confidence. So yeah, I think that's awesome. Now, I know that you have done a little bit of work, or maybe a lot of work at this point in other kinds of protocols, more than just HTTP. And so I'm talking specifically, oh, well, actually \n\n[00:16:40] before we get into like, I wanna talk about WebSockets and SMTP and stuff like that too. But before we talk about that, MSW also has support for GraphQL, which as somebody who has used GraphQL only a couple of times, I thought was kind of interesting. And I don't know with the new \n\n[00:17:01] version that you're working on now, is GraphQL still a first-class citizen, or is it just part of the HTTP mocking abilities now? \n\n[00:17:09] Artem:\nIt is first-class citizen, as it's always been. And the same way as you could do it before, you can, of course, describe APIs, GraphQL APIs using HTTP handlers, because thankfully on the web, GraphQL is most often done using HTTP. But we do ship a designated GraphQL object, so you can mock queries \n\n[00:17:29] and mutations much easier. \n\n[00:17:32] Kent:\nYeah. Yeah, I suppose the reason for that is because it doesn't make a whole lot of sense to say, okay, HTTP post, here's my GraphQL endpoint, and now this is my handler, and it's like literally anything you can do is all going to be in here. So that makes a lot of sense to have a utility, especially for like if you're \n\n[00:17:52] selecting these things, then here's what should come back. Yeah. Okay, great. So I'd like to talk about WebSockets and SMTP. Which would you like to mention first? \n\n[00:18:06] Artem:\nOh boy, let's go with WebSockets. \n\n[00:18:08] Kent:\nOkay, great, yeah. So, WebSockets for those who are unfamiliar, that's all about doing two-way communication between the client and the server. So server can send messages to the client and vice versa. Did I say that right? Server can go to client, client can go back to the server. It is not HTTP, \n\n[00:18:30] And so that brings with it a different set of challenges. Yeah, I'd love to hear about those. \n\n[00:18:36] Artem:\nYeah. So WebSockets are really, really great for, as you said, like full duplex communications, and they're really cool for like real world, like live kind of applications, like chat and collaborations, but they do come with a set of challenges. So yeah, first of all, it's a different protocol. And \n\n[00:18:56] historically in Node, there hasn't been a way of working with WebSockets at all. I don't believe they ship API that allows you to kind of construct WebSocket connections natively right now. There is an effort behind that, but it's not that simple. And what people ended up doing is basically building custom libraries like Circuit.io, \n\n[00:19:16] which rely on quite a number of things, but in a nutshell, they just rely on native Node primitives to implement WebSocket protocol as you may be used to it on the web. And The main challenge to me, like somebody who may want to bring WebSocket support to MSW, the main challenge \n\n[00:19:37] is that there isn't a single way how these kind of connections are done. So, to give a bit of history, Websockets do have their own protocol, but Websocket connection can also be implemented by regular HTTP polling. What that does is basically you ask the server every n seconds \n\n[00:19:57] whether something has changed, and then if it did, you receive an event from the server, so it relies on a long polling connection to the server. And this, as a client, this gives you kind of the reality of being in a live communication with server. And this is great, but you can already see how, okay, WebSockets can actually be done \n\n[00:20:17] over HTTP2, but that's actually not everything. In Node, as I mentioned, there isn't WebSocket protocol, but instead, other third-party libraries, they rely on the concept of transports. So they can use and like opt in and out of different transports without even you knowing that includes HTTP \n\n[00:20:37] polling, that include, I believe, row socket connections, and they also have XHR polling for certain situations, I think mainly meant for the browser. And this creates quite a cascade of complexity because to you as MSW user, I want you to just type a WS or WebSocket dot, I don't know, on particular event and then respond \n\n[00:20:57] with a particular event back. And this was historically very difficult to achieve. I do have a prototype which dates like a year or 2 ago back and it has WebSocket support for the browser, but the node part is difficult. I've been asking for, like asking around about this and also \n\n[00:21:17] open for any contributions there, because we need to figure out how do you achieve this on the common level possible, because I would hate to implement each transport separately. I would love to have this common denominator upon which then all this transport from third party libraries build upon. And this denominator is effectively \n\n[00:21:39] net dot socket in node, which is a raw socket connection. And I spent some time looking into this and I achieved some pretty cool results with observing these connections. This is actually pretty, like this is a good scenario when you can use proxies that I mentioned, but emulating responses from the socket \n\n[00:21:59] connection becomes really difficult. You're basically so low on the network layer in Node that not only you're dealing with raw HTTP messages, which is strings, but you're also dealing with things like buffer parsing and encoding, and you need to replace way too many things for it to work, so I would like this approach. \n\n[00:22:19] So it still remains in discussion. Maybe by the time I get back to it, a committee behind Node.js will actually ship an official Node.js, like a WebSocket API. That would be really good. But until then, it's just exploration and discovery. \n\n[00:22:37] Kent:\nYeah, yeah, wow. So these sorts of things are always more complicated than you think. Oh yeah. So yeah, That is very interesting. Sometimes when I hear about stuff like that, I sit back and think, how I can't believe this stuff works at all. It's amazing that \n\n[00:22:57] it works. So yeah, awesome. Thank you for sharing that background. Is it a similar situation for SMTP for like sending emails and that sort of thing? \n\n[00:23:07] Artem:\nIt is similar, because I believe it's also done through socket connection. And it was 1 of the sessions that I had when you asked me about the ability to mock SMTP. And I looked into sockets and, well, you have intercepted those, but as I said, it becomes quite problematic to mock those reliably. And I don't think I \n\n[00:23:27] liked the end result that I achieved, so I put it on a break. \n\n[00:23:32] Kent:\nYeah, that makes sense. And for those going through the workshops, this is actually the reason, the primary reason that we're using Resend's API for sending email instead of the SMTP and NodeMailer and all of that. There is definitely a benefit to using SMTP because \n\n[00:23:52] it means that you can swap with any other email provider that uses SMTP without changing any of your code, allegedly. But I have swapped email providers before, even using their REST APIs, and it's not that big of a deal anyway. So, and then on top \n\n[00:24:12] of that, we can mock it. And so I'm actually fine with that. So, yeah, very interesting. Is there anything else that, oh, you know what? Let's talk about the process or process communication stuff. So in the workshop, in the testing section, we have this onboarding \n\n[00:24:33] flow. And we actually have a couple of things, like we have verification emails and different things that are sent. And to test those, we of course don't want to send a real email and have the browser go to the email client and open it up, all that, that would be ridiculous. And so we do have the mock, but to communicate between the mock and the playwright browser is really difficult \n\n[00:24:53] because the, our dev server that has the mock in it is sitting over here in process A and it could maybe even a different terminal that you're running it in. And then your Playwright tests are running in a completely different process as well. So communicating between these processes is non-trivial. And so what we do in the workshop is we, \n\n[00:25:14] the mock will save the email to disk and then the Playwright Browser will just wait until that file has been written and then read it like it's reading an email. That works well, and I have no problems with this. But that's not good enough for Artem. And so, I would like to, and there \n\n[00:25:34] actually is a issue with this approach, and that is what if you wanted to mock out what happens if the email fails to send or maybe there's like some API failure, and So you want to change the mock for resend for this particular test. And that with the approach that I have right \n\n[00:25:54] now would be very, very challenging. You'd have to, what I would do right now is I'd have a special email address that when you try to send to this email address, that will trigger a failure in the handler, which I have done before. We did this at PayPal and companies have been up before and I hate it so much because there's \n\n[00:26:14] a strong layer of indirection there. And so, this is actually why I'm really excited for what Artem is working on. So can you tell us about this process-to-process communication? \n\n[00:26:24] Artem:\nYeah, yeah. So my main motivation to even look into this was the rise of React server components, because to my limited understanding, they kind of consist of 2 parts, of the server part and the client part, and those are often done in 2 different processes for various reasons. \n\n[00:26:45] But the core idea is the same. You have 2 unrelated processes, but they are related by functionality, by React server components in this case. And I was thinking, well, how will folks test this? Because if you want to test it well, it has to resemble this architecture to some extent in the test. So you have to have kind of a... \n\n[00:27:02] Kent:\nYou may be the only person asking the question, how will people test server components? So thank you for blazing the trail there. \n\n[00:27:11] Artem:\nSomebody has to. Yeah, and I was thinking how could this work in kind of in perfect world. And I do believe that we will arrive eventually to this task emulating this architecture. So we would have a mock server kind of part, which is responsible for service side logic, and then \n\n[00:27:31] you will have a client part, which is how we used to test React components right now, conventionally. But again, if you kind of copy this architecture into your test, you will also end up with 2 different processes. So how do we solve that? Because what you want to achieve is full control of a network. But in this case, the network lives in a different place \n\n[00:27:51] than your task lives. And this poses a problem. Now you need to have these 2 processes communicating to know about each other, to affect each other. And I looked into a more conventional IPC, which is inter-process communication, that Node provides. And it was interesting, but I ended up on the idea of basically doing something similar \n\n[00:28:11] to what you're doing with writing files to the disk, but instead of file system being the common place for this processes to communicate, I lifted it to a WebSocket server. So this was encapsulated in a brand new API, which isn't out yet. And the way it works is that you have a function that is called \n\n[00:28:32] setupRemoteServer, and it works very similarly to setupServer that you use for regular Node.js mocking, but with a twist. You basically delegate the interception of requests to a different process, and we use WebSockets to communicate this intention. So how it works is, let's say you're testing a play, you have \n\n[00:28:52] a playwright test that runs a remix app and you want to change the behavior of your loader function, right, which is on the server. And the way it works is it runs the interception in your app and it notifies your test through WebSocket that hey request occurred and your test is the area responsible to \n\n[00:29:12] describe how to handle this. The same way how we use service worker just for the interception, right? You don't write mocks there, it would be too cumbersome. The same way here, we use this WebSocket and your server just as the source of requests. And they signal kind of the requests that are happening to your test. And in your test, you have all the same request handlers, \n\n[00:29:32] all the same ability to do .use and reset handlers and all that. And once you provide the intention, it is sent back to your running server and also using the WebSockets. And then when you send a certain intention, like a mock response, it is used on the server and that's basically it. \n\n[00:29:52] Kent:\nOkay, yeah. So I just think this is brilliant. I think it's a really clever idea. I really like how similar this is to the idea of how the WebSocket or the service worker works. It just really makes a lot of sense. I think that's actually a pretty cool aspect of the design. So 1 question \n\n[00:30:12] that I have about implementation of this is right now what I have is I start my my dev server, whether I'm testing it or not, I have MSW running so that I'm not actually sending emails as I'm, you know, developing and everything. And so If I want to be able to \n\n[00:30:32] swap out the implementation of handlers and things, my assumption is that I will set up the mock service worker or the, yeah, I'll set up the mock server just like I do in, during development, but I will also say set up remote servers \n\n[00:30:53] or server. Is that right? Or do I do both or is it just 1? \n\n[00:30:59] Artem:\nI'm trying to recall right now how it's done, but I do believe you need both. Let me remember. Yeah, I remember how it's done. So basically, it's done in a way that you would need this setup remote server API, but on your kind of controlling side, which in my \n\n[00:31:19] example before was the test. But on the server side, you don't need any of that. On the server side, you just use regular setup server API. And the way MSW works, it kind of knows about a certain agreement between these 2 APIs, and if it's met, if it can kind of detect an open handle from your test asking \n\n[00:31:39] for, hey, I'm here, I'm ready to accept remote requests, it will just connect and send the traffic there. So that's how it's done. \n\n[00:31:47] Kent:\nI see, okay. That makes sense. So then in my test, if I say, okay, I want to, you know, server.use for this particular API, I want it to fail, right? That's my new handler. So the dev server actually has a handler for that, but because we added an override for that handler, \n\n[00:32:08] it's when the dev server makes this request, it's gonna say, oh, there's an override on the remote server so let me send it over there instead. \n\n[00:32:14] Artem:\nYeah, that's good. \n\n[00:32:16] Kent:\nAwesome. \n\n[00:32:17] Artem:\nYeah, it's pretty easy. Like we literally have the list of handlers, which are usually just your handlers in this process. And with this API, we're adding a preceding kind of check, which is like get me remote handlers, whatever, for this request. And it checks the remote connection first. If it handles the request, it uses that handler, that response, for example. And if \n\n[00:32:37] it doesn't handle anything, it just goes through your already existing handlers. \n\n[00:32:41] Kent:\nVery cool. And when that WebSocket server goes down, then the dev server no longer needs to check, right? So like if I stop my playwright tests, then that remote server is no longer listening for any responses. So the dev server just continues with its regular stuff. \n\n[00:32:59] Artem:\nYeah, it will be terminated, yeah. Yeah, \n\n[00:33:00] Kent:\nyeah, that makes tons of sense. That is so cool. Brilliant. Definitely looking forward to having that capability. And so I wanna wrap up our conversation talking a little bit about how your work is supported and like how you make this sustainable because you do have \n\n[00:33:21] a full-time job and like you've got to be able to support yourself while you're doing this. Like does your employer or like how do you pay for this? How do you live? How do you make this sustainable? \n\n[00:33:38] Artem:\nWell, for a long time, it wasn't sustainable at all. In fact, when I first started kind of seeing the attention that MSW was getting, it was a bit overwhelming, and I ended up doing something very wrong, which was devoting almost all my free time to this project. Well, \n\n[00:33:58] of course, it resulted in the project moving forward and getting new features and kind of, you know, having more reasons for you to love it. But like the backside of it was me kind of not feeling very happy about my life. Like, I don't think it was healthy to spend like every evening and almost all weekends on this because I have family \n\n[00:34:18] to support, they also need me. And overall, I learned, like with time, I came to realize that the balance between these things is really important. And 1 of the things I learned from you actually is just addressing things that I'm personally interested in, which sometimes means that people are raising \n\n[00:34:39] issues and I just don't see this as something that I'm excited about. So I urge for contributing. I'm trying to keep up like up to date documentation and how anybody can join and help. So this is open source, the whole point of it. And yeah, like, by other means, of course, I was very lucky to \n\n[00:35:00] get into GitHub Sponsors program so people can support MSW officially, financially through GitHub and Open Collective. I believe you were actually the first GitHub sponsor I got. Oh, wow. Amazing. Happy sponsor. \n\n[00:35:14] Kent:\nI'm thankful. \n\n[00:35:14] Artem:\nAnd right Now we have around 13 sponsors for MSW, which is insane, and I'm really thankful for every \n\n[00:35:20] Kent:\nperson in the company. It's not enough. \n\n[00:35:23] Artem:\nYeah, I mean, it's not enough. People may not realize it, but even something as small as MSW can spawn really quickly. Small in terms of like the promises we make, like we don't make like thousand promises. It's just a small tool that does 1 job and it tries to do it well. But even that takes a \n\n[00:35:43] lot of time to maintain and test. And honestly, I'm very happy with kind of amount of time I'm able to dedicate to it. So I don't want to rush things. I would prefer being slow instead of being fast and breaking like thousands of people's like CI and tests. Nobody would appreciate \n\n[00:36:03] that. But over time, it became difficult to sustain this financially. I've been trying different ways to reach out to companies for sponsorships, to participate in some grants. They were not very successful, unfortunately. So if you are watching this by you aiming a viewer and you like MSW and you think it's a cool idea \n\n[00:36:23] and it deserves more love, then please consider supporting. You can support obviously through GitHub sponsors and Open Collective, but you can also support through contributing, which I find the best kind of support. We are still a very small team. It's insane to me that there's so many companies that rely on MSW, like Google, Microsoft, \n\n[00:36:44] Amazon. Really, there are countless companies, and still nobody really supports the effort behind it. It's still like this joke about huge enterprises being laying on the shoulders of 1 guy in some USA state. It's pretty much the same story. I maintain it as the only active \n\n[00:37:04] maintainer, but I'm very happy to have a few team members who help me with their judgment and who can reach out and pull requests and even tackle some things in a timely manner. But it's still not enough. And my main regret is that I can't really do this full time because you've been seeing what MSW already did to \n\n[00:37:24] the whole landscape of API mocking, which is really great, but it's a very small percentage of what we actually can do. But there is only as many hours in a day and I still need to pay for rent and I still need to, you know, have food. So obviously this is being sort of deprioritized. \n\n[00:37:43] Kent:\nYep. Yep. Well, I am happy to sponsor and I recommend anybody who is making money off of code that's running through MSW should, just send a penny every time your code goes through MSW. Or just sponsor a little bit. \n\n[00:38:03] I think that's a good thing to do. So thank you for all the work that you've done. Is there anything else that we didn't cover that you would like to make sure we cover before we wrap up? \n\n[00:38:15] Artem:\nI think we're good. I think we covered through everything and I'm really happy to be a part of this course. Your support has been incredible. I'm very thankful for it. And I hope that people also enjoy what they will be building and learn a lot from MSW and from other things as well. \n\n[00:38:30] Kent:\nWell, thank you so much, Artem. All right, thanks everybody. We'll see you later. \n\n[00:38:34] Artem:\nThank you, see ya."
          },
          "_createdAt": "2023-10-16T19:16:31Z",
          "_id": "WdwvWKVMBI6e9tAqpSqR0K",
          "_updatedAt": "2024-03-19T20:25:59Z"
        },
        "_updatedAt": "2023-10-17T22:53:44Z",
        "title": "API Mocking with Artem Zakharchenko",
        "description": "Artem, creator of MSW, transforms API mocking. Seamless integration, nuanced control. GraphQL, Storybook support, and enhanced WebSocket, community involvement.",
        "slug": "api-mocking-with-artem-zakharchenko",
        "solution": null
      },
      {
        "title": "Enhancing SQLite with Ben Johnson",
        "videoResource": {
          "_updatedAt": "2024-03-19T20:25:51Z",
          "_type": "videoResource",
          "state": "ready",
          "originalMediaUrl": "https://egghead-video-uploads.s3.amazonaws.com/epic-web/interviews/Ben+Johnson.mp4",
          "_id": "WdwvWKVMBI6e9tAqpTAJUe",
          "duration": 2685.466667,
          "_rev": "9CeTKuUcQZRsVUft8Vle5Z",
          "title": "Ben Johnson.mp4",
          "transcript": {
            "srt": "1\n00:00:00,320 --> 00:00:05,440\nWhat is up everybody? I am so excited to be joined by my friend Ben Johnson\n\n2\n00:00:06,720 --> 00:00:08,700\nand Ben and I met through\n\n3\n00:00:09,940 --> 00:00:13,219\nhis work on light stream and light FS\n\n4\n00:00:13,679 --> 00:00:15,519\nat over at fly and\n\n5\n00:00:17,140 --> 00:00:22,279\nYeah, it's been a just a pleasure to work with Ben and test the limits\n\n6\n00:00:22,840 --> 00:00:24,660\nof LightFS a little bit. And\n\n7\n00:00:25,760 --> 00:00:33,560\nyeah, Ben has just been a really awesome help in me getting my website in a good place and feeling confident with LightFS.\n\n8\n00:00:33,900 --> 00:00:36,140\nAnd so yeah, Ben works full-time on LightFS.\n\n9\n00:00:37,239 --> 00:00:44,680\nI think it'd actually be good for you to kind of introduce yourself, give us an idea of some of your background and everything too, Ben. So can you give us some of that, please?\n\n10\n00:00:45,480 --> 00:00:50,940\nYeah, yeah, for sure. Thanks for having me on Kent. I was happy to talk about databases and SQLite.\n\n11\n00:00:52,420 --> 00:00:56,260\nAnd yeah, so I've been writing code for probably 20 years professionally\n\n12\n00:00:57,260 --> 00:01:02,900\nand just kind of did like a whirlwind journey of I used to be like an Oracle DBA back in the day. I've done JavaScript,\n\n13\n00:01:03,480 --> 00:01:06,840\nweb apps, I've done data visualization work, I've done Rails apps.\n\n14\n00:01:07,200 --> 00:01:10,580\nAnd then I got into like a weird specialty of like writing databases.\n\n15\n00:01:12,040 --> 00:01:12,540\nAnd\n\n16\n00:01:12,940 --> 00:01:15,140\nyeah, I wrote a database called BoltDB,\n\n17\n00:01:15,660 --> 00:01:17,860\nwhich in the Go community is a pretty common\n\n18\n00:01:18,340 --> 00:01:19,740\nembedded key value store.\n\n19\n00:01:21,040 --> 00:01:22,240\nSo and that kind of\n\n20\n00:01:22,680 --> 00:01:25,340\ntrickled out and a lot of people have used that over the years.\n\n21\n00:01:25,760 --> 00:01:27,100\nThings like console etcd\n\n22\n00:01:27,540 --> 00:01:30,560\nprograms like that. So you kind of find it a little bit everywhere.\n\n23\n00:01:31,500 --> 00:01:39,460\nAnd then I just kind of slowly kind of I realized like I really love like embedded databases, but I also really like schemas too. So\n\n24\n00:01:39,760 --> 00:01:42,180\nlike the natural conversion of that is SQLite.\n\n25\n00:01:43,080 --> 00:01:53,600\nAnd kind of the realization is like I really want to use SQLite for most everything, but what are my biggest issues trying to make it work? So I kind of got into figuring out how to do\n\n26\n00:01:54,160 --> 00:02:07,860\ndisaster recovery and just make it really usable on the server side, where it used to be more of an embedded device database. So that's kind of what I've been working on the last couple of years. So I made a tool called Lightstream, which does like a streaming backup of\n\n27\n00:02:08,560 --> 00:02:18,180\nSQLite. And then now I'm working on LightFS, which is more like a high availability distributed SQLite, which sounds really fancy, but we're trying to make it as simple as possible. Yeah, yeah. Well,\n\n28\n00:02:18,560 --> 00:02:19,580\nit is pretty fancy.\n\n29\n00:02:20,320 --> 00:02:21,680\nIt's pretty cool.\n\n30\n00:02:22,440 --> 00:02:24,560\nSo with your interest in\n\n31\n00:02:25,040 --> 00:02:26,420\nembedded, but schema-based\n\n32\n00:02:27,100 --> 00:02:27,600\ndatabases,\n\n33\n00:02:29,060 --> 00:02:32,140\nwas that just like, Was that professional or personal interests?\n\n34\n00:02:32,680 --> 00:02:37,320\nLike, did you have a requirement at work that kind of required that?\n\n35\n00:02:38,860 --> 00:02:47,020\nYou know, like actually getting into the embedded database side was actually like a weird, it was really more like, so I was actually at this job where we did analytics\n\n36\n00:02:47,320 --> 00:03:01,200\nand we'd pull in like logs from these huge like Fortune 500 companies and we stick all the log information into like a SQL server like a central database and then process it all and it took like a week or 2 to process this reports and it was brutal\n\n37\n00:03:01,620 --> 00:03:09,660\nAnd I tried to tell my boss, I was like, hey, this is like when Hadoop first came out. This was years ago. I was like, hey, there's this thing called Hadoop where you can kind of like spread out all your,\n\n38\n00:03:12,120 --> 00:03:34,140\nwhat is it, processing of the data to all your different nodes. And he's like, no, we'll just keep kind of doing it this way. So like I had in my head, I was like, you know what, I bet I could make this a lot faster. And I just kind of like in my free time, like even after that job, I was like, I want to try to make like a faster version. So like I built on Redis at first and I was like, you know, it's still too slow. And I built kind of like my own data layer. And I started understanding like all the pieces of how you write a database.\n\n39\n00:03:34,900 --> 00:03:41,820\nAnd that thing was just like, it ended up being wicked fast. So like the things that were taking a week to run could run like a second. So you could really do like ad hoc\n\n40\n00:03:42,400 --> 00:03:50,100\nqueries, like when you really like lay out your data in a very specific way for the use case you have. So it was kind of interesting. And actually that project,\n\n41\n00:03:50,660 --> 00:03:56,180\nit was called SkyDB. It was an open source behavioral analytics database that kind of didn't go anywhere, but\n\n42\n00:03:56,840 --> 00:04:00,740\nShopify. I actually, here's a funny story. Actually, I gave a talk\n\n43\n00:04:01,400 --> 00:04:03,300\nhere in Denver about like\n\n44\n00:04:04,300 --> 00:04:11,680\nbehavioral analytics and how you can do data analysis with it. And this is kind of like funnel analysis and kind of like where you go on past that.\n\n45\n00:04:12,660 --> 00:04:24,780\nAnd I gave this talk and I was like, hey, you know, for example, what if you were like Shopify for example, And you know, you've got like people come into your site and they click on this and they go to this and like, you can see every step, like where people diverge and how people do, you know, make different decisions.\n\n46\n00:04:25,580 --> 00:04:36,680\nAnd then like 2 weeks later, someone from Shopify, they were like, hey, we saw that talk, It was online. So I ended up actually working at Shopify for a couple of years. And we built out the analytics platform over there.\n\n47\n00:04:37,040 --> 00:04:38,500\nOh, that's pretty cool.\n\n48\n00:04:39,140 --> 00:04:40,360\nYeah, I actually,\n\n49\n00:04:40,760 --> 00:04:43,820\nso here's a quick little shout out to speaking\n\n50\n00:04:45,160 --> 00:04:46,220\nat events in general.\n\n51\n00:04:48,480 --> 00:04:52,460\n1 of my early talks at a meetup got picked up by\n\n52\n00:04:52,840 --> 00:04:53,820\nfolks at Egghead.\n\n53\n00:04:54,620 --> 00:04:56,900\nThis is an online training platform.\n\n54\n00:04:58,140 --> 00:05:02,700\nAnd they reached out to me to make a course. And that was the first course I ever made was based\n\n55\n00:05:03,080 --> 00:05:04,520\non that talk.\n\n56\n00:05:05,080 --> 00:05:07,660\nAnd the rest is history, as they say.\n\n57\n00:05:08,260 --> 00:05:09,300\nSo yeah, speaking\n\n58\n00:05:09,760 --> 00:05:14,620\nand creating content, that can change the trajectory of your career, for sure. Yeah, it really can.\n\n59\n00:05:15,040 --> 00:05:20,780\nI always think it's funny too, this isn't really SQLite related, but like, I've seen about this today where like, I feel like there's a community.\n\n60\n00:05:21,140 --> 00:05:36,300\nLike I always think about people I interact with on like Twitter and they're like, most people that are developers, you know, aren't like putting out content all the time or whatnot. So like the group of people, like, especially like in the Go community, right? Hang out a lot. Like, you know, it's a couple dozen people, maybe, like kind of infrequently\n\n61\n00:05:36,680 --> 00:05:42,940\ndo content. So honestly, if you're just somebody that just puts out some content, like good content on a regular basis, you are like\n\n62\n00:05:43,480 --> 00:05:51,780\nfar ahead of, like, what, over 99% of developers. And you're like in this little small community of people that just make content. So you can really, I agree, it can accelerate your career, John.\n\n63\n00:05:52,120 --> 00:05:58,260\nYeah, yeah, totally. And the big secret is that it's like, some people ask me how I\n\n64\n00:05:59,440 --> 00:06:08,040\nlike stay on top of things or how I have such a deep understanding of certain things and the secret is that like, I create content about it and that forces me to.\n\n65\n00:06:08,420 --> 00:06:26,300\nYeah. So. And if you're wrong about something, everyone will let you know. Yeah, yeah, you get these professional people who like really know their stuff telling you, hey, you got that wrong. It's like, wow, you never would have given me the light of day if I hadn't gotten it wrong. Yeah, there's this guy on Hacker News, and like every time I post like a SQLite\n\n66\n00:06:26,680 --> 00:06:28,940\nthing on there, he runs like,\n\n67\n00:06:29,280 --> 00:06:42,260\ntheir company, He's at some company, but he runs like this pretty large, like multi gigabyte database, SQLite database, and they do all kinds of stuff on it and all kinds of tricks and whatnot. But he always, he'll always comment. I always learn something from his comments. His name's like Bob1243\n\n68\n00:06:43,580 --> 00:06:44,660\nor something like that.\n\n69\n00:06:45,480 --> 00:06:57,840\nBut yeah, it's like those, those people out there, like there's some guy that just like knows this knowledge and like, it's a great way to really expand, like challenge yourself really, to expand your own knowledge. Yeah, you do have to develop a bit of a thick skin.\n\n70\n00:06:58,260 --> 00:06:59,780\nSometimes people aren't always\n\n71\n00:07:00,860 --> 00:07:03,340\nkind about how they share their knowledge.\n\n72\n00:07:03,940 --> 00:07:05,640\nAnd sometimes they're wrong too.\n\n73\n00:07:08,100 --> 00:07:09,360\nWell cool, so that's\n\n74\n00:07:10,240 --> 00:07:13,480\nhow you got into embedded stuff. And then\n\n75\n00:07:13,900 --> 00:07:18,140\nSQLite shows up for you when? When you're at Shopify?\n\n76\n00:07:20,340 --> 00:07:25,880\nYou know it was after Shopify, I'm trying to think of what actually spurred it on. I think I just started,\n\n77\n00:07:26,820 --> 00:07:31,220\nI kind of started playing around with like, some people have added like schema stuff on top of Bolt.\n\n78\n00:07:32,420 --> 00:07:46,300\nAnd that works to some degree, but like, like just having the SQL piece, like, you know, 1 of the thing I actually realized that was really helpful is having your your app like Bolt, since it's an embedded database, you kind of have your application schema kind of embedded into your,\n\n79\n00:07:47,280 --> 00:07:51,540\nbut it's not so much JavaScript. You guys are very loosely typed, but like, you know, like typed,\n\n80\n00:07:52,460 --> 00:08:06,640\nstructs and whatnot within your program, they're really tightly coupled to your data, which is fine. Except when you want to like migrate data from like an old version to a new version. It's nice to have this like intermediary data language like SQL to be able to do those kind\n\n81\n00:08:07,200 --> 00:08:12,540\nof translations without having like a bunch of different versions of your structures. So yeah, yeah.\n\n82\n00:08:12,900 --> 00:08:16,420\nAs far as when I got into it, I actually don't even know. Like I've always kind of known about SQLite.\n\n83\n00:08:16,880 --> 00:08:21,720\nAnd I always thought of it as that database you use when you need to run some tests or something locally.\n\n84\n00:08:22,360 --> 00:08:30,420\nYou know, like, you actually ship a real database later. Yeah, yeah. Or like they throw it on a Android device or something to just store,\n\n85\n00:08:30,840 --> 00:08:39,900\nyou know, bits and pieces of information. Yeah, really just a toy. Yeah, and then once you actually like start digging in like the amount of testing that goes into SQLite is just ridiculous.\n\n86\n00:08:40,460 --> 00:08:45,000\nJust because it's deployed on its most widely deployed database in the world. So like if they make changes,\n\n87\n00:08:45,440 --> 00:08:47,000\nyou know it has to work.\n\n88\n00:08:47,780 --> 00:08:51,220\nSo it's yeah, their test suite I think runs for days and it's,\n\n89\n00:08:51,900 --> 00:08:53,400\nthey have like multiple,\n\n90\n00:08:54,000 --> 00:09:02,360\nwhat is it? They have, they don't, it's not certified for like aviation, whatever compliance, but the, the tests that they do are based on like aviation\n\n91\n00:09:02,680 --> 00:09:06,180\ncompliance stuff. Like the way that they do like branch\n\n92\n00:09:07,060 --> 00:09:09,740\ncoverage and whatnot is really strict around,\n\n93\n00:09:10,080 --> 00:09:16,260\nyou know, not just that you test individual branches, but that you actually test like the different permutations of\n\n94\n00:09:17,220 --> 00:09:22,980\nlike Boolean logic within the kind of if statement, you know, the switch. That's too nerdy. That's\n\n95\n00:09:23,940 --> 00:09:24,660\nvery interesting.\n\n96\n00:09:25,260 --> 00:09:36,360\nBut yeah, it's really pretty, it's pretty interesting what they do. And you can find some talks too. Like the person that does the project is Dr. Richard Hipp. He's the 1 that started it back in, I think 2000.\n\n97\n00:09:37,440 --> 00:09:39,420\nI'm gonna totally botch that, somewhere around 2000.\n\n98\n00:09:40,360 --> 00:09:42,540\nAnd I think he originally did it for\n\n99\n00:09:42,980 --> 00:09:43,920\nsome kind of military\n\n100\n00:09:45,040 --> 00:09:45,980\nsystem. But\n\n101\n00:09:46,500 --> 00:09:50,340\nanyway, he's done some talks on how they test this stuff and he's great, honestly.\n\n102\n00:09:51,740 --> 00:09:52,360\nYeah, yeah.\n\n103\n00:09:54,180 --> 00:09:58,760\nOver time as, so I'll say for me, where I started being\n\n104\n00:09:59,140 --> 00:10:01,360\ninterested in SQLite was\n\n105\n00:10:01,820 --> 00:10:02,320\nin\n\n106\n00:10:02,780 --> 00:10:03,360\na conversation\n\n107\n00:10:03,740 --> 00:10:04,440\nat RemixConf\n\n108\n00:10:04,760 --> 00:10:05,260\nwith\n\n109\n00:10:05,940 --> 00:10:07,900\nKurt, the CEO of Fly.\n\n110\n00:10:08,440 --> 00:10:13,340\nHe was there and we chatted about stuff and he said, have you seen this Lightstream\n\n111\n00:10:13,680 --> 00:10:17,060\nstuff that has been going on? And I actually had seen that.\n\n112\n00:10:18,040 --> 00:10:18,660\nI think\n\n113\n00:10:19,020 --> 00:10:28,180\nMichael Jackson had talked about SQLite and that SQLite was just really cool and there's this Lightstream thing. And so I hadn't really looked too closely into it,\n\n114\n00:10:28,660 --> 00:10:35,880\nbut the more, at that point after that, I was like, well, maybe I should take a look at this. Because at the time I was having a lot of trouble with Postgres\n\n115\n00:10:36,980 --> 00:10:37,660\nand Redis,\n\n116\n00:10:38,180 --> 00:10:39,120\neach of these\n\n117\n00:10:39,600 --> 00:10:40,100\nservices\n\n118\n00:10:41,000 --> 00:10:44,680\non my site, I had like my site and then Redis and Postgres.\n\n119\n00:10:45,040 --> 00:10:52,160\nAnd then I had those deployed to 6 regions all over the world. So I've got 18 services that I'm worried about.\n\n120\n00:10:53,180 --> 00:10:57,420\nAnd this was a couple of years ago now, I guess. So it\n\n121\n00:10:58,260 --> 00:11:05,420\nwas not a hundred percent reliable. And so if something were to go down, like the entire thing just kind of came crumbling down and it just was not\n\n122\n00:11:05,940 --> 00:11:09,420\npleasant with all those services. And so I was kind of in\n\n123\n00:11:10,580 --> 00:11:12,540\nother database curious, I suppose.\n\n124\n00:11:13,360 --> 00:11:15,800\nAnd so the more I looked into SQLite\n\n125\n00:11:16,440 --> 00:11:19,220\nand played around with the different options there.\n\n126\n00:11:19,540 --> 00:11:23,200\nAnd the more I realized, like, this thing is really powerful.\n\n127\n00:11:24,000 --> 00:11:24,500\nIt's\n\n128\n00:11:25,200 --> 00:11:26,300\nthe biggest drawback\n\n129\n00:11:26,680 --> 00:11:30,800\nwas the lack of data replication so that I can deploy it to multiple regions.\n\n130\n00:11:31,400 --> 00:11:37,440\nThat was the reason I chose Fly, was because I wanted to deploy my app to multiple regions,\n\n131\n00:11:37,760 --> 00:11:46,940\nbut I didn't want to be limited to the serverless runtime environment and that infrastructure out. Well, Fly is like serverless with long running servers.\n\n132\n00:11:47,320 --> 00:11:55,120\nSo that word kind of is weird, but I didn't wanna have like a non long running server. I didn't want to just have a Lambda function.\n\n133\n00:11:55,440 --> 00:12:01,160\nAnd so Fly fit the bill with its Postgres clusters. But as I said, the services were\n\n134\n00:12:01,940 --> 00:12:02,720\nnot always\n\n135\n00:12:03,120 --> 00:12:05,240\ngreat for what I was doing. And so\n\n136\n00:12:06,260 --> 00:12:21,420\nonce I, once Kurt said, Hey, we're actually, now we're putting together this light of fasting. And so you can do data replication with SQLite. That's when I got really, really interested because as it's an embedded database, now it's not a service. It's just like running alongside,\n\n137\n00:12:21,980 --> 00:12:26,340\nit's not even running really, it's just like a file that's like sitting in your volume\n\n138\n00:12:26,980 --> 00:12:27,480\nalongside\n\n139\n00:12:27,980 --> 00:12:33,280\nyour application that's running. So That was my experience getting interested in SQLite.\n\n140\n00:12:33,620 --> 00:12:39,780\nAnd so I guess Ben, what I'm saying is, I can just attribute all of my love for SQLite to you.\n\n141\n00:12:41,320 --> 00:12:47,420\nAnd the work that you've been doing. So I think it would be good for people to get a little background on what is\n\n142\n00:12:47,760 --> 00:12:48,260\nLightstream\n\n143\n00:12:48,940 --> 00:12:51,320\nand how did that convert into LightFS?\n\n144\n00:12:52,300 --> 00:12:52,800\nYeah,\n\n145\n00:12:53,300 --> 00:12:54,120\nso Lightstream,\n\n146\n00:12:56,820 --> 00:13:05,260\nso it stemmed out of this whole idea of like how do you make SQLite work on the server? And like Lightstream was not my first idea. Like I went through a lot of iterations\n\n147\n00:13:06,040 --> 00:13:17,640\nand probably spent, I mean, probably a couple of years honestly trying to like try different things. I tried for a little while, I was honestly just like rewriting SQLite. I was putting it into Go just so I could better understand how SQLite is structured and how it works internally\n\n148\n00:13:18,220 --> 00:13:22,100\nand trying to see if there's like ways I could hook in to how it writes and just\n\n149\n00:13:23,420 --> 00:13:27,940\ndifferent ways to kind of safely pull out data and be able to replicate it somewhere else.\n\n150\n00:13:28,680 --> 00:13:29,180\nAnd\n\n151\n00:13:29,540 --> 00:13:32,140\nI don't know what it was that kind of like,\n\n152\n00:13:32,640 --> 00:13:38,260\nkind of hit me that made me realize like, actually, so the whole premise of Lightstream works on this,\n\n153\n00:13:40,680 --> 00:13:42,940\nwhat would I call it? It's kind of a quirk\n\n154\n00:13:43,740 --> 00:13:44,440\nof SQLite.\n\n155\n00:13:45,840 --> 00:13:52,700\nWe love those, right? Yeah, yeah. And it works well. It's not meant to be like, it's a hack, but it's like an actual legit hack.\n\n156\n00:13:54,100 --> 00:14:11,500\nSo like I guess I'll step back a little bit and explain how SQLite works. Really just like a really brief primer. So SQLite is an embedded database. It actually it doesn't run as a separate process. It actually embeds into the same process as your application. So there's no like IPC mechanism where you're like communicating over socket or anything.\n\n157\n00:14:12,620 --> 00:14:17,940\nSo it runs inside your process and then it writes out to a database file. So it's a single file that stores all your data.\n\n158\n00:14:18,380 --> 00:14:22,100\nAnd that's laid out in these contiguous blocks that are called pages.\n\n159\n00:14:22,800 --> 00:14:35,140\nAnd then those pages are kind of logically structured inside of the database as this tree in your schema and all that stuff. You don't need to worry about how all that works necessarily. Just know that like you have these fixed size blocks, they're usually like 4 kilobytes.\n\n160\n00:14:36,620 --> 00:14:41,980\nSo what SQLite will do is whenever you make updates, it has a whole system of\n\n161\n00:14:42,280 --> 00:14:54,820\nmaking those updates and they update an entire block at a time or multiple blocks for a transaction. It has a way to do that safely so that when you if you need to roll back, then it can recover all your data and there's no problem.\n\n162\n00:14:55,840 --> 00:14:56,340\nSo\n\n163\n00:14:56,680 --> 00:15:02,740\nthere's a mode inside SQLite called the write-ahead log or the wall. And that's where every time it makes a change\n\n164\n00:15:03,640 --> 00:15:09,500\nto your SQLite database, it'll write the pages to a separate file called the write-ahead log. And then once\n\n165\n00:15:09,920 --> 00:15:16,360\nthat write-ahead log gets too big, then it'll kind of transfer over all the pages back to SQLite, or the main data file.\n\n166\n00:15:18,080 --> 00:15:22,240\nThat doesn't really necessarily to a transaction, right? That's a separate concept.\n\n167\n00:15:23,040 --> 00:15:25,640\nSo the transaction is kind of like a series of\n\n168\n00:15:26,320 --> 00:15:27,840\npages written to the wall.\n\n169\n00:15:28,680 --> 00:15:36,000\nAnd then they're not actually committed until like the last page is written. There's checksums all along the way to make sure that you don't have like a partial right\n\n170\n00:15:36,540 --> 00:15:38,540\nby the recovery mechanisms in there.\n\n171\n00:15:39,620 --> 00:15:44,080\nBut they use the wall to do transactions. But the nice thing about the wall is that\n\n172\n00:15:44,440 --> 00:15:47,580\nsince it keeps depending on new versions to the end of the file.\n\n173\n00:15:48,180 --> 00:15:56,260\nAny transactions that have started before that your transaction started can keep running even if more writes happen because they have the old versions of those pages. Oh, interesting.\n\n174\n00:15:56,580 --> 00:16:01,940\nYeah, so that's why you don't have, you can have multiple readers at the same time and they all have their own snapshot of the database\n\n175\n00:16:02,480 --> 00:16:03,900\nat the given time they started,\n\n176\n00:16:04,400 --> 00:16:07,380\neven while the database is changing underneath, which is kind of cool.\n\n177\n00:16:08,260 --> 00:16:09,180\nThat is interesting.\n\n178\n00:16:10,240 --> 00:16:11,640\nSo what we do with Lightstream,\n\n179\n00:16:12,180 --> 00:16:13,160\nso the trick is\n\n180\n00:16:13,660 --> 00:16:17,820\nSQLite can't transfer pages back from that write-ahead log until\n\n181\n00:16:18,480 --> 00:16:20,140\nbasically all the readers, all the\n\n182\n00:16:20,660 --> 00:16:29,940\ntransactions are kind of stopped for a second. It has a thing called checkpointing and it'll kind of make sure everything's stopped. No one's actually reading or accessing the write ahead log and you can push the pages back over.\n\n183\n00:16:30,560 --> 00:16:32,920\nSo Lightstream actually runs as a separate process,\n\n184\n00:16:33,340 --> 00:16:34,300\nand it will\n\n185\n00:16:34,820 --> 00:16:38,220\nbasically hook on with a long-running transaction and block that checkpointing\n\n186\n00:16:38,680 --> 00:16:39,700\nprocess from happening,\n\n187\n00:16:40,320 --> 00:16:45,120\njust to ensure that it's able to pick up all those changes on the write-ahead log, and it can\n\n188\n00:16:45,660 --> 00:16:48,700\nship them out in chunks out to somewhere like S3\n\n189\n00:16:49,640 --> 00:16:54,640\nas a backup, and then kind of control that process of writing the changes back into SQLite.\n\n190\n00:16:55,200 --> 00:16:56,360\nOkay, that's interesting.\n\n191\n00:17:00,280 --> 00:17:07,940\nSo, Let me, I'll restate it in my own terms of what you have so far. I know you're not done, but so like you're taking,\n\n192\n00:17:08,800 --> 00:17:13,220\nthe write-ahead log is just like, these are the things that are going to happen to the database.\n\n193\n00:17:13,780 --> 00:17:15,960\nYou know, once these things are committed, then,\n\n194\n00:17:16,500 --> 00:17:29,760\nis that the right word? You'd say they're committed, Yeah. So once they're committed, then that's what the database is. And so you just keep track of those, the write ahead log, the wall, and that's what you're streaming over to, you know, wherever you're doing your backups.\n\n195\n00:17:30,560 --> 00:17:31,260\nIs that\n\n196\n00:17:31,860 --> 00:17:41,780\nkind of the right? Okay, so you can almost think of the wall as like commits in a Git repo. So if you have that history, you can generate the final version just by\n\n197\n00:17:42,500 --> 00:17:56,760\nprocessing each 1 of those. Yep, yep. So when we do a restore off of that, we can just grab a snapshot, which is basically we'll pull every day or every, you know, some interval, like usually 24 hours, you can get a full copy of the database, push it up to S3,\n\n198\n00:17:57,180 --> 00:18:01,740\nand then the wall tracking will just basically push up the incremental updates every second.\n\n199\n00:18:02,540 --> 00:18:21,800\nThe other nice thing, actually, this is another kind of quirk of not a sequel light, but S3 is S3 is super cheap to upload to, but really expensive to download from. That's where they make their money. So it's a great like disaster recovery place because usually don't need to download and restore. You just always want to keep uploading. So you can run Lightstream\n\n200\n00:18:22,200 --> 00:18:25,580\neven on a frequently updated database for less than a dollar a month.\n\n201\n00:18:26,500 --> 00:18:28,540\nWow, that's cool. That's pretty dirt cheap.\n\n202\n00:18:28,860 --> 00:18:29,720\nYeah, yeah. So\n\n203\n00:18:30,040 --> 00:18:32,980\nWith that architecture, though, how do you handle\n\n204\n00:18:33,400 --> 00:18:36,540\nsituations where the wall file is created but then the transaction\n\n205\n00:18:36,900 --> 00:18:38,220\nfails? And so,\n\n206\n00:18:38,800 --> 00:18:39,620\nlike, some of\n\n207\n00:18:40,440 --> 00:18:44,940\nthose walls are not actually going to be applied to the database, right? Yeah.\n\n208\n00:18:45,260 --> 00:18:45,760\nSo,\n\n209\n00:18:46,080 --> 00:18:55,320\nwith Lightstream, Lightstream tracks the last place in the right head log it read from, and then it'll keep reading every second or so. It'll check to see if there's updates, and then\n\n210\n00:18:56,440 --> 00:19:00,120\nit'll try to read forward all the transactions that have occurred since that point.\n\n211\n00:19:00,860 --> 00:19:12,080\nAnd the way that SQLite works is that it has a rolling checksum where every time there's another page written, it's basically there's a header on it where you'll have your data and then the header will have\n\n212\n00:19:12,880 --> 00:19:16,580\nthe checksum of that data and all preceding data. So that\n\n213\n00:19:17,220 --> 00:19:22,780\nyou have to have the checksums of every page be correct in order for it to be a valid transaction.\n\n214\n00:19:23,800 --> 00:19:26,400\nSo that's how it actually keeps track and makes sure\n\n215\n00:19:27,100 --> 00:19:27,900\nthat it works.\n\n216\n00:19:28,320 --> 00:19:39,020\nYeah, yeah. Cool. Okay, so I kind of interrupted you partway through, so you can finish now. Oh, yeah. So, I mean, that's the long and short of it, is you kind of, you were streaming up all these little tiny updates\n\n217\n00:19:39,480 --> 00:19:45,580\nto S3, and then when you need to recover, you can just simply say restore. Like if your server just completely gets hosed,\n\n218\n00:19:46,120 --> 00:19:49,120\nor even if you like deleted your table or your\n\n219\n00:19:49,540 --> 00:19:57,100\ndatabase, you can go back and say, hey, I want to restore to this point in time. I don't know a minute ago and it can go and rebuild that file from that state.\n\n220\n00:19:57,700 --> 00:19:59,200\nSo it's really nice in that sense.\n\n221\n00:20:00,160 --> 00:20:14,740\nYeah, that's really kind of all Lightstream is meant to do. And 1 of the biggest, and this might be your next question, but like 1 of the biggest things that like people always wanted, actually 2 different things people always wanted. 1 issue with Lightstream is that it runs on a single process, like a SQLite\n\n222\n00:20:15,360 --> 00:20:17,120\ndatabase only runs on 1 server.\n\n223\n00:20:17,860 --> 00:20:27,280\nSo people can't, if you do a deployment, you have to kind of take down that server and then you're gonna have like a couple seconds of downtime before you can redeploy it up.\n\n224\n00:20:27,600 --> 00:20:32,060\nAnd some people just need to minimize the downtime. If they do a lot of deploys, that can really add up.\n\n225\n00:20:32,680 --> 00:20:37,620\nSo that's 1 thing they wanted to be able to have, like a primary server that can switch between different servers.\n\n226\n00:20:38,220 --> 00:20:41,300\nThe other thing is, like you mentioned earlier, is you really want to,\n\n227\n00:20:42,200 --> 00:20:47,220\nthere's a nice part about SQLite is that you can, It's really fast, but if you live in\n\n228\n00:20:47,540 --> 00:20:54,360\nChicago and your servers in India, then your request is going to be super slow because you have probably 200 milliseconds of delay\n\n229\n00:20:55,240 --> 00:21:01,540\njust to go send your request out there and get back. So replication was a big issue that people wanted to see fixed too.\n\n230\n00:21:02,320 --> 00:21:05,640\nAnd I originally tried to put all this stuff into Lightstream, but\n\n231\n00:21:06,400 --> 00:21:13,040\nit wasn't really architected exactly for that kind of stuff. So we built out this project called LightFS, which just kind of does those 2 pieces.\n\n232\n00:21:13,380 --> 00:21:18,660\nYou can change your primary. You can switch between different nodes. And you can replicate your data out globally.\n\n233\n00:21:20,340 --> 00:21:22,800\nAnd that is where I came in\n\n234\n00:21:23,140 --> 00:21:24,440\nto wanting to use.\n\n235\n00:21:24,860 --> 00:21:33,640\nYou were very, very alpha stage of LightFS, and I appreciate your patience for sure. You brought up a lot of bugs, we fixed a lot of stuff, and it was great, so I appreciate that. Yeah, yeah,\n\n236\n00:21:34,280 --> 00:21:35,240\nWell, I appreciate\n\n237\n00:21:35,980 --> 00:21:39,100\nbeing able to do that. I'll be honest,\n\n238\n00:21:39,720 --> 00:21:54,880\na couple of years ago, I was full on front end dev. I did not want to have to do anything with backend stuff. And even when I was at PayPal, I did plenty of backend stuff. It was all Node and everything there, but I still didn't get anywhere close to the database and I didn't wanna touch that. And then,\n\n239\n00:21:56,520 --> 00:22:02,140\nRemix kinda forced me into the backend and I wanted my own database. And I created all of these\n\n240\n00:22:03,340 --> 00:22:04,620\nrequirements for myself\n\n241\n00:22:05,220 --> 00:22:10,740\nthat like this is the way that I wanna teach people how to build sites. I feel like this is the right way to do it.\n\n242\n00:22:11,200 --> 00:22:11,700\nAnd\n\n243\n00:22:12,440 --> 00:22:14,340\nunfortunately, they're just for me,\n\n244\n00:22:15,300 --> 00:22:23,720\nthere wasn't a whole lot available there. Like, they're just, I wanted to limit the number of third party services I was using. And so like, I'm not gonna be using,\n\n245\n00:22:24,280 --> 00:22:25,620\neven though there are cool\n\n246\n00:22:25,920 --> 00:22:34,700\nthings like FanaDB that allows your data to be replicated all over, like that's cool, but I don't wanna use a service for that. I wanna use my own database. And so,\n\n247\n00:22:35,140 --> 00:22:49,400\nbut I also want to deploy all over the world. And if you deploy all over the world, but your data is not all over the world, then like, why are you deploying all over the world? Like it doesn't necessarily make things faster anyway. And so, and then I can't use third party auth either because\n\n248\n00:22:50,260 --> 00:22:56,180\nthey're not deployed all over the world. So you have to resolve user authentication sessions, you know, and so like, they're just,\n\n249\n00:22:56,540 --> 00:23:01,860\nthis actually, honestly, the 1 constraint of, I want my app to be globally fast everywhere,\n\n250\n00:23:02,460 --> 00:23:06,060\nthat 1 constraint just made it so that I had to\n\n251\n00:23:06,660 --> 00:23:07,160\nuse\n\n252\n00:23:07,740 --> 00:23:08,900\nstuff like SQLite,\n\n253\n00:23:09,640 --> 00:23:10,140\nLightFS,\n\n254\n00:23:10,840 --> 00:23:17,280\nor Postgres clusters, but then, yeah, Postgres clusters just didn't do it for me. So anyway, I'm thrilled\n\n255\n00:23:18,340 --> 00:23:20,400\nthat LightFS came to be.\n\n256\n00:23:21,820 --> 00:23:23,620\nAnd so no, I don't mind\n\n257\n00:23:24,000 --> 00:23:27,140\nthe bumps that we had early on with LightFS\n\n258\n00:23:28,260 --> 00:23:28,760\nand\n\n259\n00:23:29,200 --> 00:23:35,140\nit's just been really awesome now, like from that point. I definitely do some weird things.\n\n260\n00:23:35,900 --> 00:23:40,440\nI'm definitely the kind of person who gets into edge cases very easily.\n\n261\n00:23:41,260 --> 00:23:42,100\nSo I'm glad\n\n262\n00:23:42,740 --> 00:23:43,400\nthat my\n\n263\n00:23:43,920 --> 00:23:46,380\nweirdness has been helpful to LightFS.\n\n264\n00:23:46,920 --> 00:23:53,800\nNo, yeah, I mean, you took it to another level. I mean, you started deploying to production on the very alpha build, so it was... Yeah, yeah, so...\n\n265\n00:23:54,140 --> 00:23:54,740\nIt really\n\n266\n00:23:55,520 --> 00:23:56,260\nhelps the ante.\n\n267\n00:23:56,780 --> 00:23:58,940\nYeah, for a long time, there was\n\n268\n00:23:59,540 --> 00:24:03,940\nthis notice at the top of the docs that said, you know, not recommended for production use.\n\n269\n00:24:04,340 --> 00:24:06,080\nAnd I made this meme\n\n270\n00:24:06,420 --> 00:24:11,260\nof like, I don't know what movie this is from, but there's like this clown in the sewer\n\n271\n00:24:11,580 --> 00:24:16,940\nand there's this girl looking down at him and he's like, come on down here. And then she like climbs into the sewer\n\n272\n00:24:17,540 --> 00:24:26,180\nin the next frame of the meme. And I had it saying, like the clown would say, not recommended for production use. And then I have me be the girl going down.\n\n273\n00:24:26,820 --> 00:24:31,660\nLike it's so obvious you shouldn't be doing this because it says right there, don't use it for production.\n\n274\n00:24:32,220 --> 00:24:33,380\nThat won't stop me.\n\n275\n00:24:34,000 --> 00:24:34,500\nNo.\n\n276\n00:24:35,580 --> 00:24:41,340\nBut that now has been taken off the docks. I use it for production. I've got,\n\n277\n00:24:42,880 --> 00:24:45,560\nI should look at how big my database is, but\n\n278\n00:24:45,940 --> 00:24:48,620\nas far as like volume size, but it,\n\n279\n00:24:49,400 --> 00:24:55,180\nyeah, I shouldn't say a number, but I can say for sure that I have over half a million rows in my database.\n\n280\n00:24:56,000 --> 00:24:57,020\nAnd I'm querying\n\n281\n00:24:57,440 --> 00:24:59,280\nto that database like constantly.\n\n282\n00:25:00,400 --> 00:25:30,560\nSo it is very, very active database, and it's just, it's humming along great. I love it So yeah, yeah, I'm glad to hear that yeah, it's nice to I mean when you do queries you're doing locally So it's not like yes You know like if you look at like like I love the whole idea of serverless databases that are coming out, but really you're pushing off your compute and your queries off to them and you have to pay for that every time. But the nice thing is when you have all your data locally on disk, the queries are super fast for 1 thing and\n\n283\n00:25:31,320 --> 00:25:34,780\nthere's no cost to it either. So yeah. And no latency.\n\n284\n00:25:35,500 --> 00:25:45,120\nBecause like the, they, they not only do they have to pay for their compute, but they also pay for their inbound and outbound traffic too. And they have to forward those costs onto you so they can make money.\n\n285\n00:25:45,560 --> 00:25:47,940\nAnd yeah, so like so many things\n\n286\n00:25:48,940 --> 00:25:50,740\nare simpler and cheaper\n\n287\n00:25:51,340 --> 00:25:53,140\nby just using SQLite.\n\n288\n00:25:55,940 --> 00:26:10,700\nAnd so LightFS is super cool, and that's what I recommend people use. But SQLite is being used in a lot of really interesting places for web stuff too. Do you wanna talk a little bit about that and maybe what you think, like why you think SQLite is getting so much attention recently?\n\n289\n00:26:11,580 --> 00:26:12,420\nSure, yeah.\n\n290\n00:26:12,840 --> 00:26:13,420\nI mean,\n\n291\n00:26:13,740 --> 00:26:14,240\ninterestingly,\n\n292\n00:26:14,680 --> 00:26:21,900\nI think that SQLite, it's a great database, but it's been a great database for a long time. So I think, you know, the bigger question of like, why now?\n\n293\n00:26:23,360 --> 00:26:47,380\nLike my gut feeling is that it's not that SQLite has gotten better. I mean, it has gotten better, but like, I don't think that's the reason. I think it's really more like computers have gotten better. Like, you know, I don't know how long people have been in the industry, but like if you even go back 10 years, 15 years, like, you know, running a server was really expensive. And like you got, you know, a little bit of RAM and it was like a tiny little hard disk and like everything was super slow.\n\n294\n00:26:47,980 --> 00:26:48,900\nAnd just\n\n295\n00:26:49,700 --> 00:26:53,040\nthe rate of change or just improvements of you know, we have like NVMe\n\n296\n00:26:54,400 --> 00:27:01,260\ndisk drives now that are like crazy fast and you can get a couple gigabytes of RAM. You can get, you know, multi-core CPUs\n\n297\n00:27:01,640 --> 00:27:02,740\nfor pretty cheap.\n\n298\n00:27:03,260 --> 00:27:08,540\nSo I think the combination of all those things just made it so that more and more people can run\n\n299\n00:27:08,940 --> 00:27:10,020\neven just a moderately,\n\n300\n00:27:10,460 --> 00:27:39,940\nsmall to moderate sized website, even on a single node, honestly, if you want to start there and not have any problems. Like you used to be, like, you know, back in the day, this is where I sound old. Back in the day, you know, you'd have like a dedicated database server and you put so much money into that thing to make it as fast as possible because that was really where you needed to optimize and you have a bunch of little app servers around it. But now those app servers these days are as fast as that, you know, big clunky expensive database server back in the day, or faster really.\n\n301\n00:27:40,520 --> 00:27:44,000\nSo you just, I think it's just a, yeah, it's just expanded\n\n302\n00:27:44,440 --> 00:27:46,860\nwhat apps can do on a single node, really.\n\n303\n00:27:47,360 --> 00:27:50,220\nYeah, yeah. And actually that's very true.\n\n304\n00:27:50,660 --> 00:27:54,640\nThe Epic stack is built with LightFS support from the get-go.\n\n305\n00:27:56,320 --> 00:28:02,900\nAnd that's not just for multi-region. There's like cloud backup and other reasons you wanna use LightFS, even if you have 1 region.\n\n306\n00:28:03,380 --> 00:28:12,220\nBut I do recommend that people start with just 1 region and 1 instance, because I would say the vast majority of people don't actually need multi-region.\n\n307\n00:28:13,780 --> 00:28:21,260\nFor many of the apps that we're building, it's like US only or Europe only or whatever. And so having just a single instance,\n\n308\n00:28:21,820 --> 00:28:23,500\nlike these apps are fast\n\n309\n00:28:24,020 --> 00:28:25,740\nand that network latency\n\n310\n00:28:26,240 --> 00:28:26,980\nis really\n\n311\n00:28:27,380 --> 00:28:29,080\nonly a differentiator for\n\n312\n00:28:29,800 --> 00:28:32,540\na subset of apps that people are building. So\n\n313\n00:28:33,480 --> 00:28:34,340\nyeah, SQLite,\n\n314\n00:28:36,500 --> 00:28:39,120\nI like your perspective as the aged,\n\n315\n00:28:40,160 --> 00:28:41,340\nI'm just kidding.\n\n316\n00:28:41,920 --> 00:28:43,200\nBut yeah, I think\n\n317\n00:28:43,840 --> 00:28:45,800\nthat perspective is really helpful.\n\n318\n00:28:46,680 --> 00:29:18,620\nAnd what's cool is, yeah, go ahead. Well, 1 thing I will say on that is like, it's funny when I was writing Lightstream, you know, people would always complain that like, oh, I'm not going to use SQLite because it doesn't scale and like I can't, you know, they need, you know, whatever, web scale, you know, MongoDB or, you know, Postgres or whatever, people complain it wouldn't scale. And it does, honestly, on a single node, but you can't scale, it couldn't scale before to multiple nodes. And then once I wrote LightFS, everyone's like, who needs multi-node SQLite? Like, I don't need to scale. So it's always like someone always has a problem with\n\n319\n00:29:19,700 --> 00:29:27,460\n1 or the other. But I mean, I think having that gamut of like, sure, you can start small and then you can grow large. You can scale horizontally\n\n320\n00:29:28,260 --> 00:29:31,500\npretty well for reads. And I think that's really where people need it typically.\n\n321\n00:29:31,880 --> 00:29:37,580\nAnd I think having the story in place and like being able to do that, even if you don't need it now, I think is a\n\n322\n00:29:38,040 --> 00:29:40,060\nbig deal when you're choosing a database initially.\n\n323\n00:29:40,480 --> 00:29:41,680\nYeah, 100%.\n\n324\n00:29:42,900 --> 00:29:43,400\nAnd\n\n325\n00:29:44,640 --> 00:29:51,000\nrelatively recently, SQLite isn't done, Like they're still actively developing it. That's why they have that huge test suite, of course.\n\n326\n00:29:51,820 --> 00:29:54,820\nAnd so relatively recently, there was\n\n327\n00:29:55,840 --> 00:29:57,300\nsomething that caught my attention,\n\n328\n00:29:58,260 --> 00:29:59,520\nwhich is that\n\n329\n00:30:00,320 --> 00:30:01,820\nSQLite now supports\n\n330\n00:30:02,720 --> 00:30:03,480\nan exabyte-sized\n\n331\n00:30:04,920 --> 00:30:05,420\ndatabase.\n\n332\n00:30:06,260 --> 00:30:07,620\nIt's just like,\n\n333\n00:30:07,960 --> 00:30:08,740\nsay what?\n\n334\n00:30:10,240 --> 00:30:10,740\nIt's,\n\n335\n00:30:11,260 --> 00:30:17,060\nyeah, this thing can scale in volume as well. No, yeah, you're gonna hit your disk drive size\n\n336\n00:30:17,720 --> 00:30:23,000\nlimits before you hit SQLite limits for sure. Excuse me. That's pretty remarkable, honestly.\n\n337\n00:30:24,340 --> 00:30:27,620\nOkay, so I would like to talk a little bit about some of the\n\n338\n00:30:28,620 --> 00:30:34,680\ntrade-offs though with SQLite. So like we've talked about how amazing SQLite is, and it totally is, and it satisfies\n\n339\n00:30:35,020 --> 00:30:37,800\nmost use cases for most web apps. And in fact,\n\n340\n00:30:38,480 --> 00:30:42,460\nI have gone so far as to say that most web apps should use SQLite,\n\n341\n00:30:43,380 --> 00:30:52,240\nbecause, like, for the vast majority of us, it is enough, and it is simpler than other solutions. And simple is better so long as it satisfies your requirements.\n\n342\n00:30:52,860 --> 00:30:53,360\nHowever,\n\n343\n00:30:53,960 --> 00:30:57,840\nthere's no panacea. Like there's no silver bullet that can do all the things\n\n344\n00:30:58,700 --> 00:31:00,660\nand is the best at that. So\n\n345\n00:31:02,380 --> 00:31:05,780\nI'll lead in with 1 that I think is kind of ironic a little bit\n\n346\n00:31:06,460 --> 00:31:09,220\nSo you got into embedded systems with that\n\n347\n00:31:09,640 --> 00:31:10,680\njob of analytics?\n\n348\n00:31:11,400 --> 00:31:18,580\nThat the or embedded databases with the analytics stuff sequel light. I think would probably not be a great database\n\n349\n00:31:18,900 --> 00:31:20,200\nfor capturing\n\n350\n00:31:20,740 --> 00:31:22,700\nthe analytics rights. Is that,\n\n351\n00:31:23,400 --> 00:31:29,640\nwould you say that or am I off? You know, I think that, I think it depends on the scale of analytics you're looking at.\n\n352\n00:31:30,060 --> 00:31:34,620\nHonestly, you can get really far just throwing it into SQLite and calling it a day.\n\n353\n00:31:35,380 --> 00:31:37,860\nIf you start scaling up, there's definitely more optimized\n\n354\n00:31:38,240 --> 00:31:41,620\nthings you can look at. Like DuckDB is kind of like the SQLite version\n\n355\n00:31:42,380 --> 00:31:43,160\nfor analytics.\n\n356\n00:31:43,480 --> 00:31:45,840\nIt's like an embedded database, but instead of...\n\n357\n00:31:47,280 --> 00:31:49,040\nSo SQLite is row-oriented,\n\n358\n00:31:49,400 --> 00:31:54,220\nSo every time it stores a row of your data, it puts it in like 1 contiguous little block of data.\n\n359\n00:31:54,620 --> 00:32:03,980\nWhereas DuckDB is column oriented, which means they split up all your columns and store them separately for every row, all the different values. And you can do a lot of really interesting compression stuff and\n\n360\n00:32:04,640 --> 00:32:07,440\noptimize analytics queries a lot with that.\n\n361\n00:32:07,760 --> 00:32:11,080\nSo if you do start scaling up, if you really do start hitting limits of\n\n362\n00:32:11,400 --> 00:32:19,900\nSQLite, honestly, DuckDB is great. And there's, I think, MotherDuck is a startup that's started up around them, doing analytics with some super smart people.\n\n363\n00:32:20,540 --> 00:32:25,060\nSo, yeah, that's definitely a cool 1 to grab. The reason that I said that was because it's my understanding\n\n364\n00:32:25,840 --> 00:32:26,620\nwhere SQLite,\n\n365\n00:32:27,100 --> 00:32:29,840\nor at least my thought of SQLite's\n\n366\n00:32:30,200 --> 00:32:30,700\nbiggest\n\n367\n00:32:31,460 --> 00:32:33,780\ntrade-off is in rights\n\n368\n00:32:34,540 --> 00:32:39,460\nand the fact that you can't have concurrent rights. Can you talk to that a little bit?\n\n369\n00:32:39,760 --> 00:32:48,220\nSure. Yeah. And yeah, so concurrent rights is you can't have. So sure. Let me back up. So you can have a single writer at a time with SQLite.\n\n370\n00:32:49,220 --> 00:32:51,780\nSo if you do a transaction and you write some data,\n\n371\n00:32:53,300 --> 00:32:54,220\nany other transactions,\n\n372\n00:32:54,840 --> 00:32:58,140\nif you set something called a busy timeout on there, they'll just queue up\n\n373\n00:32:58,500 --> 00:33:01,780\nafter that 1 and they'll get processed immediately after.\n\n374\n00:33:02,160 --> 00:33:05,040\nSo they'll show up eventually. It's not like it's just going to fail.\n\n375\n00:33:05,660 --> 00:33:08,500\nYeah, or it'll time out eventually if you have too many writes.\n\n376\n00:33:10,440 --> 00:33:19,580\nBut the trade-off is really like if you keep your writes short, you can do it really fast. I mean, sub-milliseconds. So you can have thousands of writes per second\n\n377\n00:33:20,740 --> 00:33:21,240\nfor\n\n378\n00:33:22,020 --> 00:33:22,960\nsmall to medium-sized\n\n379\n00:33:23,360 --> 00:33:23,860\nwrites.\n\n380\n00:33:24,320 --> 00:33:58,880\nI think if you get into big analytics, that could be a problem. If you're taking in tens of thousands or hundreds of thousands of writes a second, I mean, you're really going to have to scale up to something else at some point, but that's not usually most people's problem. Yeah. And that's also per database too. So honestly, like a nice property of SQLite is, you know, your users, maybe you have a database per user, honestly. Like if you're tracking websites, each website could have their own SQLite database, it's just a file on disk. So you don't have a lot of overhead with each 1. Yeah, and that's not an extra service per user. That actually, so you wrote a blog post that I saw today\n\n381\n00:33:59,380 --> 00:34:02,460\nthat mentions that. So like if you have a multi-tenant\n\n382\n00:34:03,380 --> 00:34:03,880\napp,\n\n383\n00:34:04,220 --> 00:34:26,340\nthen you could just have a separate database for each 1. And normally that's like this big consideration. You're like, oh, I don't know if I want to do that. Let's just do a workspace ID on all the row tables and stuff. But in SQLite, it's just a file. So just make another 1. It's pretty cool. Yeah, it's kind of cool. I mean, you can, and it really protects you from accidentally forgetting to like limit your queries on a certain workspace. So\n\n384\n00:34:27,100 --> 00:34:28,580\nit's pretty nice in that sense.\n\n385\n00:34:29,340 --> 00:34:38,540\nAnd yeah, And honestly, like, so you can also, you can optimize your write throughput as well with that. And there's some other settings in there within SQLite you can adjust to make it so that you can get faster writes.\n\n386\n00:34:39,679 --> 00:34:43,000\nSo it's all, you know, things you can tweak. Yeah, yeah. So\n\n387\n00:34:43,520 --> 00:34:47,860\nyou can get quite a few writes, but with LightFS though,\n\n388\n00:34:48,760 --> 00:35:00,560\nisn't there like quite a bit stronger limitation on the number of writes per second you can handle? And can you explain why? Yep. So LightFS right now, so it runs through a layer called Fuse. So we, LightFS exists\n\n389\n00:35:01,940 --> 00:35:07,740\nin the file system layer. So we actually mount it as a file system. You write databases onto there, and it'll track.\n\n390\n00:35:08,200 --> 00:35:11,300\nIt basically passes through to the other underlying database files,\n\n391\n00:35:11,840 --> 00:35:18,080\nbut it'll track when the application is taking locks and doing some other things to actually determine where\n\n392\n00:35:18,480 --> 00:35:29,180\ntransactions start and stop. And when they start and stop, we can grab the information, kind of the data that's changed within that, package it up and can ship it off. And we have a lot of control because they're right there in the\n\n393\n00:35:29,800 --> 00:35:30,860\nfile system layer.\n\n394\n00:35:31,220 --> 00:35:34,500\nThe downside of that is it's this layer is called FUSE,\n\n395\n00:35:34,840 --> 00:35:35,580\nfile system\n\n396\n00:35:36,620 --> 00:35:39,660\nas in user space. I think that's what it stands for.\n\n397\n00:35:40,080 --> 00:35:43,040\nIt's a Linux system where you can build your own file systems basically.\n\n398\n00:35:43,580 --> 00:35:44,740\nAnd that's notoriously\n\n399\n00:35:45,340 --> 00:35:46,120\nnot fast,\n\n400\n00:35:47,060 --> 00:35:47,560\nwhich\n\n401\n00:35:47,960 --> 00:35:52,620\nis interesting. It seems like a terrible thing to write a database layer on.\n\n402\n00:35:53,420 --> 00:36:02,820\nAnd for the right side it does slow things down. You tend to get limited around like 100 writes per second, which is still above and beyond what most people probably need. Yeah, but by a long shot,\n\n403\n00:36:03,300 --> 00:36:10,300\nLike if you're listening right now and you're like, oh, only a hundred writes a second. No, no, no. Your app probably does not have that load.\n\n404\n00:36:10,900 --> 00:36:22,940\nNo, yeah, for sure. It's possible, like you're an event ticket, like you're selling tickets and the tickets go on sale and it's Taylor Swift, yeah, okay, go ahead and use Postgres instead or something. But yeah, for most of us,\n\n405\n00:36:23,540 --> 00:36:24,040\nthat's\n\n406\n00:36:24,520 --> 00:36:34,540\nnot even close to how many writes a second we're getting. Yeah, and when you start adding it up and multiplying by number of seconds in a day, like 100 times whatever is 86,400\n\n407\n00:36:35,220 --> 00:36:37,240\nseconds in a day, like doing like\n\n408\n00:36:37,640 --> 00:36:42,820\n8 billion or whatever million, I don't know, some crazy number of rights a day. It's like, you're not doing that.\n\n409\n00:36:43,860 --> 00:37:03,020\nSo yeah, most people honestly get. A small handful and that's, that's most web apps. I think everyone always looks at Facebook and Google and they're like, oh, what do they do? They have a gajillion rights a second or requests a second. It's like, that's not the vast majority of people out there, so don't build your systems like that. Yeah, yeah. That actually, I think that's such a key point\n\n410\n00:37:03,480 --> 00:37:03,980\nthat\n\n411\n00:37:04,540 --> 00:37:05,360\nlike people\n\n412\n00:37:05,680 --> 00:37:18,360\nlook at those apps and they say, I wanna build my app that way. And it just, that does not make sense. That's kind of like saying, I need to go to my neighbor's house. And so I'm gonna get charter a plane.\n\n413\n00:37:18,720 --> 00:37:21,580\nLike, no. Yeah, like Bezos does that, yeah.\n\n414\n00:37:21,900 --> 00:37:23,500\nIt's very efficient at\n\n415\n00:37:24,140 --> 00:37:28,300\ngetting you places. It's very good at that, but you don't have to go that far.\n\n416\n00:37:28,840 --> 00:37:32,860\nYeah, yeah, for sure. There's a lot of context for sure when you're choosing things.\n\n417\n00:37:33,280 --> 00:37:37,760\nBut yeah, so like on the right side, LightFS is slow right now. We are building out\n\n418\n00:37:38,200 --> 00:37:47,220\na virtual file system layer, so we will avoid that fuse layer entirely if you want to. The fuse layer is just nice because you can treat it just like SQLite, and it just works\n\n419\n00:37:47,860 --> 00:37:49,900\nlike the regular SQLite on disk.\n\n420\n00:37:50,660 --> 00:37:53,300\nBut so we have plans to make that faster on writes.\n\n421\n00:37:53,680 --> 00:37:57,740\nOn the read side, you really shouldn't notice almost any difference from regular SQLite.\n\n422\n00:37:58,380 --> 00:38:02,120\nWhat happens is the Fused Layer does serve out pages from the database,\n\n423\n00:38:02,720 --> 00:38:09,720\nBut then the operating system has a thing called the OS page cache. And as it reads pages in, it keeps them in memory and like a little\n\n424\n00:38:11,000 --> 00:38:11,500\ninside\n\n425\n00:38:12,440 --> 00:38:15,220\nthe kernel, like the file system kernel or the OS kernel.\n\n426\n00:38:15,540 --> 00:38:18,900\nAnd it'll automatically just reserve those pages super fast. So\n\n427\n00:38:19,400 --> 00:38:22,060\nyou generally don't notice much of a difference on the read side.\n\n428\n00:38:22,660 --> 00:38:23,260\nYeah, yeah.\n\n429\n00:38:23,600 --> 00:38:27,480\nAnd the reads are like going to be pretty dang fast anyway. In fact,\n\n430\n00:38:28,780 --> 00:38:33,940\nthere's this post on the SQLite site that's titled 35% Faster Than the File System,\n\n431\n00:38:34,380 --> 00:38:38,660\nwhich is very interesting. So in the Epic stack and in\n\n432\n00:38:39,240 --> 00:38:45,140\nthe workshop, we store all the user upload or image uploads in SQLite,\n\n433\n00:38:46,320 --> 00:38:49,980\nwhich is like, at first glance, you're like, whoa, that sounds wrong.\n\n434\n00:38:50,500 --> 00:38:51,000\nBut\n\n435\n00:38:52,060 --> 00:38:53,100\nin some cases,\n\n436\n00:38:53,600 --> 00:39:00,980\nit actually can be faster, just because of the way that paging works. Is that right? Yeah, yeah. And you honestly, a lot of times you won't even notice.\n\n437\n00:39:01,400 --> 00:39:16,940\nYeah, if it is lower, it won't be noticeably slower. Yeah, for sure. I think once you get to like certain size, like you probably shouldn't store videos in there. Yeah. That kind of thing, but like most images are probably fine. Yeah, and in fact, you can correct me if I'm wrong, but I don't know if you can stream\n\n438\n00:39:18,520 --> 00:39:19,940\ndata into SQLite,\n\n439\n00:39:20,800 --> 00:39:23,740\nor this is probably a little outside of my depth.\n\n440\n00:39:24,280 --> 00:39:26,140\nBut would that be possible to\n\n441\n00:39:26,680 --> 00:39:27,880\nset a video?\n\n442\n00:39:28,260 --> 00:39:30,560\nLike, let's say it's a gigabyte in size.\n\n443\n00:39:31,060 --> 00:39:33,540\nYeah, there is an optimized way to write in blobs.\n\n444\n00:39:34,300 --> 00:39:35,640\nIt's called the blob AVI.\n\n445\n00:39:36,600 --> 00:39:40,140\nAnd not every client library supports it, but yeah,\n\n446\n00:39:40,580 --> 00:39:46,020\nsome do. It's definitely a much more optimized way to like read in and out blobs without copying so much data into memory.\n\n447\n00:39:46,720 --> 00:39:52,280\nYeah, yeah. So in the workshop, we take the file uploads and load them up into memory\n\n448\n00:39:52,580 --> 00:39:54,360\nand then we save those blobs\n\n449\n00:39:54,900 --> 00:40:00,540\nall together at once, which works great for an enormous number of use cases.\n\n450\n00:40:00,920 --> 00:40:07,240\nBut that actually brings us to another topic that I wanted to touch on. I know we're getting toward the end of our time, but LightFS\n\n451\n00:40:08,160 --> 00:40:09,020\nbeing used\n\n452\n00:40:09,320 --> 00:40:11,500\npotentially for more than just SQLite,\n\n453\n00:40:11,980 --> 00:40:12,480\nbut\n\n454\n00:40:13,100 --> 00:40:15,540\nfiles in general. Can you speak to that at all?\n\n455\n00:40:16,240 --> 00:40:26,260\nOh, sure. That's been like 1 really big request to have, like people always ask, hey, can we also stick other stuff in this thing and distributed out to edge nodes as well?\n\n456\n00:40:26,680 --> 00:40:30,140\nSo there's an issue out for it. I don't think it's a super hard\n\n457\n00:40:30,720 --> 00:40:34,240\nproblem to solve. We really kind of have the very standardized packaging\n\n458\n00:40:34,760 --> 00:40:39,480\nformat for all the changes and when you're uploading a like a file it's really just\n\n459\n00:40:39,840 --> 00:40:49,180\npackaging into this format and shipping it off to your other nodes. So I think it's definitely doable but that would give you the ability just to instead of using an S3 or something like that,\n\n460\n00:40:49,760 --> 00:40:57,680\nyou know, for at least initially, I mean, if you don't have a ton of blob data that you really need to worry about or that you're trying to optimize costs for,\n\n461\n00:40:58,180 --> 00:40:59,240\nI think it's a\n\n462\n00:41:00,060 --> 00:41:05,500\nGood alternative where you could just put it into LightFS. It'll distribute out to your edge nodes and you can serve them from there.\n\n463\n00:41:06,040 --> 00:41:12,680\nAnd distribute it out to your edge nodes. It's nothing to sneeze at either. Like you put something on S3 and you're choosing a region,\n\n464\n00:41:13,140 --> 00:41:13,640\nbut\n\n465\n00:41:14,380 --> 00:41:20,880\nwith LightFS, it's gonna just be deployed where you're at, so, or like whatever regions you're in. So\n\n466\n00:41:21,380 --> 00:41:23,920\nthat is cool for some use cases still. Like,\n\n467\n00:41:24,280 --> 00:41:27,420\nagain, this is not for everything, but 1 of the\n\n468\n00:41:28,280 --> 00:41:28,780\nreally,\n\n469\n00:41:29,140 --> 00:41:37,080\nthe things I really wanna focus on with the Epic stack is just let's see how simple we can get this to be, how few services we can use\n\n470\n00:41:37,840 --> 00:41:39,620\nand have it be reasonable still.\n\n471\n00:41:40,640 --> 00:41:49,240\nSo that you can get started with something. A lot of people will say, let's just use as many services as possible so we don't have to build all this stuff ourselves\n\n472\n00:41:49,900 --> 00:41:53,080\nso that we can move fast. And I can appreciate that,\n\n473\n00:41:53,720 --> 00:41:54,220\nbut\n\n474\n00:41:55,080 --> 00:42:00,200\nwhen the thing does end up working out, you're gonna have to migrate off of all that stuff to save money or for whatever,\n\n475\n00:42:00,580 --> 00:42:04,260\nthey don't satisfy your requirements, all that stuff. And so I would rather\n\n476\n00:42:05,320 --> 00:42:15,740\nbe able to say, oh no, you don't have to worry about building stuff, but you also don't have to worry about setting up these accounts because you just generate this project and it has all of these features that don't require\n\n477\n00:42:16,560 --> 00:42:17,540\npaying another\n\n478\n00:42:18,900 --> 00:42:28,160\nseparate service for all that stuff. So I am definitely looking forward to having that support. I think that it would satisfy an enormous number of requirements\n\n479\n00:42:28,940 --> 00:42:34,500\nfor people with existing apps and then for pretty much everybody just getting started as well.\n\n480\n00:42:35,460 --> 00:42:37,000\nSo yeah, LightFS\n\n481\n00:42:37,360 --> 00:42:38,260\nis pretty cool.\n\n482\n00:42:38,680 --> 00:42:40,180\nThanks, yeah, thank you.\n\n483\n00:42:40,900 --> 00:42:57,780\nYeah, no, I agree. I think that every new service you add is just another liability. So I think if you can minimize it, I mean, like you slowly become an expert in all those services, which is painful. And every time you, if you hire somebody and you bring them on, they have to slowly become an expert in all those things. Cause like, they just, they all break in like weird little ways.\n\n484\n00:42:58,280 --> 00:43:02,220\nAnd the older I get, the more I just want something simple that just kind of works.\n\n485\n00:43:02,960 --> 00:43:06,700\nYeah, yeah, 100%. There are definitely trade-offs upside down and sideways.\n\n486\n00:43:07,100 --> 00:43:07,860\nLike, you know,\n\n487\n00:43:08,540 --> 00:43:10,740\nnow you're managing this, but\n\n488\n00:43:11,140 --> 00:43:19,340\nif it's built for you and like you just get started and there it is, then I don't know, it seems kind of nice to have it that way.\n\n489\n00:43:20,200 --> 00:43:29,360\nSo this has been awesome to chat with you, Ben. Thank you so much for giving me some of your time. Is there anything that we didn't touch on that you really wanted to make sure we talk about?\n\n490\n00:43:30,060 --> 00:43:32,940\nNo, I think that's a great overview of kind of where everything's at.\n\n491\n00:43:33,600 --> 00:43:40,240\nNo, I think you did a great job. Yeah, thanks for having me on too. I always love chatting SQLite. So, I mean, if anybody ever has any questions, happy\n\n492\n00:43:40,680 --> 00:43:47,040\nto reply. Yeah, yeah. What's the best way for people to reach out to you? Oh, you can find me on Twitter. I'm Ben B. Johnson.\n\n493\n00:43:47,360 --> 00:43:48,340\nThat's a good way.\n\n494\n00:43:48,680 --> 00:43:52,700\nI would say Discord, but you just messaged me earlier and I missed it, so\n\n495\n00:43:53,100 --> 00:43:55,640\nyeah, probably Twitter's the best. Or GitHub. Awesome,\n\n496\n00:43:55,960 --> 00:43:56,700\ncool, cool.\n\n497\n00:43:57,040 --> 00:44:05,340\nWell, good. And if anybody wants to contribute or help in some way, Like what's the best way that somebody could support the work that you're doing?\n\n498\n00:44:05,900 --> 00:44:22,320\nYou know, honestly, the best thing is just tell us, like, how are you using it? And like, what things do you find confusing? What things could make simpler? Like, that's really the goal. You know, I live my world for probably the last decade, like in low level databases. So, you know, different perspectives. I always love hearing,\n\n499\n00:44:22,640 --> 00:44:34,980\nand I always just want to make things as simple as possible. I think that's kind of the best software out there. Is a software you don't really think about. Yeah, you just like, You type a command, it's in there, and you forget about it almost, because it's just that easy. So,\n\n500\n00:44:35,900 --> 00:44:39,640\nyeah, I would love to hear what people think and how we can make it better.\n\n501\n00:44:40,080 --> 00:44:40,580\nAwesome.\n\n502\n00:44:40,920 --> 00:44:45,560\nWell, thank you so much again, Ben, and thanks everybody for listening. We'll talk to you later.",
            "text": "[00:00:00] Kent:\nWhat is up everybody? I am so excited to be joined by my friend Ben Johnson and Ben and I met through his work on light stream and light FS at over at fly and Yeah, it's been a just a pleasure to work with \n\n[00:00:20] Ben and test the limits of LightFS a little bit. And yeah, Ben has just been a really awesome help in me getting my website in a good place and feeling confident with LightFS. And so yeah, Ben works full-time on LightFS. I think it'd actually be good for you to kind of introduce yourself, give us an \n\n[00:00:40] idea of some of your background and everything too, Ben. So can you give us some of that, please? \n\n[00:00:45] Ben:\nYeah, yeah, for sure. Thanks for having me on Kent. I was happy to talk about databases and SQLite. And yeah, so I've been writing code for probably 20 years professionally and just kind of did like a whirlwind journey of I used to be like an Oracle DBA back in the day. I've done JavaScript, web apps, I've done data visualization work, \n\n[00:01:05] I've done Rails apps. And then I got into like a weird specialty of like writing databases. And yeah, I wrote a database called BoltDB, which in the Go community is a pretty common embedded key value store. So and that kind of trickled out and a lot of people have used that over the years. \n\n[00:01:25] Things like console etcd programs like that. So you kind of find it a little bit everywhere. And then I just kind of slowly kind of I realized like I really love like embedded databases, but I also really like schemas too. So like the natural conversion of that is SQLite. And kind of the realization is like I really want \n\n[00:01:45] to use SQLite for most everything, but what are my biggest issues trying to make it work? So I kind of got into figuring out how to do disaster recovery and just make it really usable on the server side, where it used to be more of an embedded device database. So that's kind of what I've been working on the last couple of years. So I made a tool called Lightstream, which does \n\n[00:02:06] like a streaming backup of SQLite. And then now I'm working on LightFS, which is more like a high availability distributed SQLite, which sounds really fancy, but we're trying to make it as simple as possible. \n\n[00:02:17] Kent:\nYeah, yeah. Well, it is pretty fancy. It's pretty cool. So with your interest in embedded, but schema-based databases, was that just like, Was that professional or personal interests? Like, did you have a requirement at work that kind of required that? \n\n[00:02:38] Ben:\nYou know, like actually getting into the embedded database side was actually like a weird, it was really more like, so I was actually at this job where we did analytics and we'd pull in like logs from these huge like Fortune 500 companies and we stick all the log information into like a SQL server like a central database and then process it all and it took like a week or 2 to process \n\n[00:02:59] this reports and it was brutal And I tried to tell my boss, I was like, hey, this is like when Hadoop first came out. This was years ago. I was like, hey, there's this thing called Hadoop where you can kind of like spread out all your, what is it, processing of the data to all your different nodes. And he's like, no, we'll just keep kind of doing it this way. So like I had in my head, I was like, you know what, I \n\n[00:03:19] bet I could make this a lot faster. And I just kind of like in my free time, like even after that job, I was like, I want to try to make like a faster version. So like I built on Redis at first and I was like, you know, it's still too slow. And I built kind of like my own data layer. And I started understanding like all the pieces of how you write a database. And that thing was just like, it ended up being wicked fast. So like the things that were taking a week to run could \n\n[00:03:39] run like a second. So you could really do like ad hoc queries, like when you really like lay out your data in a very specific way for the use case you have. So it was kind of interesting. And actually that project, it was called SkyDB. It was an open source behavioral analytics database that kind of didn't go anywhere, but Shopify. I actually, here's a funny story. Actually, I \n\n[00:03:59] gave a talk here in Denver about like behavioral analytics and how you can do data analysis with it. And this is kind of like funnel analysis and kind of like where you go on past that. And I gave this talk and I was like, hey, you know, for example, what if you were like Shopify for example, And you know, you've got like people come into your site and they click on \n\n[00:04:19] this and they go to this and like, you can see every step, like where people diverge and how people do, you know, make different decisions. And then like 2 weeks later, someone from Shopify, they were like, hey, we saw that talk, It was online. So I ended up actually working at Shopify for a couple of years. And we built out the analytics platform over there. \n\n[00:04:37] Kent:\nOh, that's pretty cool. Yeah, I actually, so here's a quick little shout out to speaking at events in general. 1 of my early talks at a meetup got picked up by folks at Egghead. This is an online training platform. \n\n[00:04:58] And they reached out to me to make a course. And that was the first course I ever made was based on that talk. And the rest is history, as they say. So yeah, speaking and creating content, that can change the trajectory of your career, for sure. \n\n[00:05:13] Ben:\nYeah, it really can. I always think it's funny too, this isn't really SQLite related, but like, I've seen about this today where like, I feel like there's a community. Like I always think about people I interact with on like Twitter and they're like, most people that are developers, you know, aren't like putting out content all the time or whatnot. So like the group of people, like, especially like in the Go community, right? Hang out a lot. Like, you know, it's \n\n[00:05:33] a couple dozen people, maybe, like kind of infrequently do content. So honestly, if you're just somebody that just puts out some content, like good content on a regular basis, you are like far ahead of, like, what, over 99% of developers. And you're like in this little small community of people that just make content. So you can really, I agree, it can accelerate your career, John. \n\n[00:05:52] Kent:\nYeah, yeah, totally. And the big secret is that it's like, some people ask me how I like stay on top of things or how I have such a deep understanding of certain things and the secret is that like, I create content about it and that forces me to. \n\n[00:06:08] Ben:\nYeah. So. And if you're wrong about something, everyone will let you know. \n\n[00:06:12] Kent:\nYeah, yeah, you get these professional people who like really know their stuff telling you, hey, you got that wrong. It's like, wow, you never would have given me the light of day if I hadn't gotten it wrong. \n\n[00:06:21] Ben:\nYeah, there's this guy on Hacker News, and like every time I post like a SQLite thing on there, he runs like, their company, He's at some company, but he runs like this pretty large, like multi gigabyte database, SQLite database, and they do all kinds of stuff on it and all kinds of tricks and whatnot. But he always, he'll always comment. I always learn something from his comments. His name's like Bob1243 \n\n[00:06:43] or something like that. But yeah, it's like those, those people out there, like there's some guy that just like knows this knowledge and like, it's a great way to really expand, like challenge yourself really, to expand your own knowledge. \n\n[00:06:55] Kent:\nYeah, you do have to develop a bit of a thick skin. Sometimes people aren't always kind about how they share their knowledge. And sometimes they're wrong too. Well cool, so that's how you got into embedded stuff. And then SQLite shows up \n\n[00:07:15] for you when? When you're at Shopify? \n\n[00:07:20] Ben:\nYou know it was after Shopify, I'm trying to think of what actually spurred it on. I think I just started, I kind of started playing around with like, some people have added like schema stuff on top of Bolt. And that works to some degree, but like, like just having the SQL piece, like, you know, 1 of the thing I actually realized that was really helpful is having your your app \n\n[00:07:40] like Bolt, since it's an embedded database, you kind of have your application schema kind of embedded into your, but it's not so much JavaScript. You guys are very loosely typed, but like, you know, like typed, structs and whatnot within your program, they're really tightly coupled to your data, which is fine. Except when you want to like migrate data from like an old version \n\n[00:08:00] to a new version. It's nice to have this like intermediary data language like SQL to be able to do those kind of translations without having like a bunch of different versions of your structures. So yeah, yeah. As far as when I got into it, I actually don't even know. Like I've always kind of known about SQLite. \n\n[00:08:16] Kent:\nAnd \n\n[00:08:17] Ben:\nI always thought of it as that database you use when you need to run some tests or something locally. You know, \n\n[00:08:22] Kent:\nlike, you actually ship a \n\n[00:08:23] Ben:\nreal database later. \n\n[00:08:25] Kent:\nYeah, yeah. Or like they throw it on a Android device or something to just store, you know, bits and pieces of information. Yeah, really just a toy. \n\n[00:08:34] Ben:\nYeah, and then once you actually like start digging in like the amount of testing that goes into SQLite is just ridiculous. Just because it's deployed on its most widely deployed database in the world. So like if they make changes, you know it has to work. So it's yeah, their test suite I think runs for days and it's, they have like multiple, what is it? They have, \n\n[00:08:54] they don't, it's not certified for like aviation, whatever compliance, but the, the tests that they do are based on like aviation compliance stuff. Like the way that they do like branch coverage and whatnot is really strict around, you know, not just that you test individual branches, but that you actually test like the different \n\n[00:09:15] permutations of like Boolean logic within the kind of if statement, you know, the switch. That's too nerdy. That's \n\n[00:09:23] Kent:\nvery interesting. \n\n[00:09:25] Ben:\nBut yeah, it's really pretty, it's pretty interesting what they do. And you can find some talks too. Like the person that does the project is Dr. Richard Hipp. He's the 1 that started it back in, I think 2000. I'm gonna totally botch that, somewhere around 2000. And I think he originally did it for some kind of military system. \n\n[00:09:45] But anyway, he's done some talks on how they test this stuff and he's great, honestly. \n\n[00:09:51] Kent:\nYeah, yeah. Over time as, so I'll say for me, where I started being interested in SQLite was in a conversation at RemixConf with Kurt, the CEO of Fly. He was there and we chatted about stuff and he said, \n\n[00:10:11] have you seen this Lightstream stuff that has been going on? And I actually had seen that. I think Michael Jackson had talked about SQLite and that SQLite was just really cool and there's this Lightstream thing. And so I hadn't really looked too closely into it, but the more, at that point after that, I was like, well, maybe \n\n[00:10:32] I should take a look at this. Because at the time I was having a lot of trouble with Postgres and Redis, each of these services on my site, I had like my site and then Redis and Postgres. And then I had those deployed to 6 regions all over the world. So I've got 18 services that I'm worried about. \n\n[00:10:53] And this was a couple of years ago now, I guess. So it was not a hundred percent reliable. And so if something were to go down, like the entire thing just kind of came crumbling down and it just was not pleasant with all those services. And so I was kind of in other database curious, I suppose. \n\n[00:11:13] And so the more I looked into SQLite and played around with the different options there. And the more I realized, like, this thing is really powerful. It's the biggest drawback was the lack of data replication so that I can deploy it to multiple regions. That was the reason I chose Fly, \n\n[00:11:33] was because I wanted to deploy my app to multiple regions, but I didn't want to be limited to the serverless runtime environment and that infrastructure out. Well, Fly is like serverless with long running servers. So that word kind of is weird, but I didn't wanna have like a non long running server. I didn't want \n\n[00:11:53] to just have a Lambda function. And so Fly fit the bill with its Postgres clusters. But as I said, the services were not always great for what I was doing. And so once I, once Kurt said, Hey, we're actually, now we're putting together this light of fasting. And so you can do data replication with \n\n[00:12:13] SQLite. That's when I got really, really interested because as it's an embedded database, now it's not a service. It's just like running alongside, it's not even running really, it's just like a file that's like sitting in your volume alongside your application that's running. So That was my experience getting interested in SQLite. And \n\n[00:12:33] so I guess Ben, what I'm saying is, I can just attribute all of my love for SQLite to you. And the work that you've been doing. So I think it would be good for people to get a little background on what is Lightstream and how did that convert into LightFS? \n\n[00:12:52] Ben:\nYeah, so Lightstream, so it stemmed out of this whole idea of like how do you make SQLite work on the server? And like Lightstream was not my first idea. Like I went through a lot of iterations and probably spent, I mean, probably a couple of years honestly trying to like try different things. I tried for a little while, I was honestly just like rewriting \n\n[00:13:12] SQLite. I was putting it into Go just so I could better understand how SQLite is structured and how it works internally and trying to see if there's like ways I could hook in to how it writes and just different ways to kind of safely pull out data and be able to replicate it somewhere else. And I don't know what it was that kind of like, \n\n[00:13:32] kind of hit me that made me realize like, actually, so the whole premise of Lightstream works on this, what would I call it? It's kind of a quirk of SQLite. We love those, right? Yeah, yeah. And it works well. It's not meant to be like, it's a hack, but it's like an actual legit hack. \n\n[00:13:54] So like I guess I'll step back a little bit and explain how SQLite works. Really just like a really brief primer. So SQLite is an embedded database. It actually it doesn't run as a separate process. It actually embeds into the same process as your application. So there's no like IPC mechanism where you're like communicating over socket or anything. So it runs inside your process and then \n\n[00:14:14] it writes out to a database file. So it's a single file that stores all your data. And that's laid out in these contiguous blocks that are called pages. And then those pages are kind of logically structured inside of the database as this tree in your schema and all that stuff. You don't need to worry about how all that works necessarily. Just know that like you have these fixed size blocks, they're usually like \n\n[00:14:34] 4 kilobytes. So what SQLite will do is whenever you make updates, it has a whole system of making those updates and they update an entire block at a time or multiple blocks for a transaction. It has a way to do that safely so that when you if you need to roll back, then it can recover all your data and there's no problem. \n\n[00:14:55] So there's a mode inside SQLite called the write-ahead log or the wall. And that's where every time it makes a change to your SQLite database, it'll write the pages to a separate file called the write-ahead log. And then once that write-ahead log gets too big, then it'll kind of transfer over all the pages back to SQLite, or the main data \n\n[00:15:15] file. \n\n[00:15:18] Kent:\nThat doesn't really necessarily to a transaction, right? That's a separate concept. \n\n[00:15:23] Ben:\nSo the transaction is kind of like a series of pages written to the wall. And then they're not actually committed until like the last page is written. There's checksums all along the way to make sure that you don't have like a partial right by the recovery mechanisms in there. But they use the wall to do transactions. But the nice thing about the \n\n[00:15:43] wall is that since it keeps depending on new versions to the end of the file. Any transactions that have started before that your transaction started can keep running even if more writes happen because they have the old versions of those pages. Oh, interesting. Yeah, so that's why you don't have, you can have multiple readers at the same time and they all have their own snapshot of the database at the given time \n\n[00:16:03] they started, even while the database is changing underneath, which is kind of cool. \n\n[00:16:08] Kent:\nThat is interesting. \n\n[00:16:10] Ben:\nSo what we do with Lightstream, so the trick is SQLite can't transfer pages back from that write-ahead log until basically all the readers, all the transactions are kind of stopped for a second. It has a thing called checkpointing and it'll kind of make sure everything's stopped. No one's actually reading or accessing the write ahead log and you can push the pages back over. \n\n[00:16:30] So Lightstream actually runs as a separate process, and it will basically hook on with a long-running transaction and block that checkpointing process from happening, just to ensure that it's able to pick up all those changes on the write-ahead log, and it can ship them out in chunks out to somewhere like S3 as a backup, \n\n[00:16:50] and then kind of control that process of writing the changes back into SQLite. \n\n[00:16:55] Kent:\nOkay, that's interesting. So, Let me, I'll restate it in my own terms \n\n[00:17:03] Ben:\nof what \n\n[00:17:03] Kent:\nyou have so far. I know you're not done, but so like you're taking, the write-ahead log is just like, these are the things that are going to happen to the database. You know, once these things are committed, then, is that the right word? You'd say they're committed, Yeah. So once they're committed, then that's what the database is. And so you just keep track of those, \n\n[00:17:24] the write ahead log, the wall, and that's what you're streaming over to, you know, wherever you're doing your backups. Is that kind of the right? Okay, so you can almost think of the wall as like commits in a Git repo. So if you have that history, you can generate the final version just by processing each 1 of those. \n\n[00:17:44] Ben:\nYep, yep. So when we do a restore off of that, we can just grab a snapshot, which is basically we'll pull every day or every, you know, some interval, like usually 24 hours, \n\n[00:17:53] Kent:\nyou \n\n[00:17:53] Ben:\ncan get a full copy of the database, push it up to S3, and then the wall tracking will just basically push up the incremental updates every second. The other nice thing, actually, this is another kind of quirk of not a sequel light, but S3 is S3 is super cheap to upload to, but really expensive to download from. That's where they make their money. So it's a great \n\n[00:18:13] like disaster recovery place because usually don't need to download and restore. You just always want to keep uploading. So you can run Lightstream even on a frequently updated database for less than a dollar a month. \n\n[00:18:26] Kent:\nWow, that's cool. \n\n[00:18:27] Ben:\nThat's pretty dirt cheap. \n\n[00:18:28] Kent:\nYeah, yeah. So With that architecture, though, how do you handle situations where the wall file is created but then the transaction fails? And so, like, some of those walls are not actually going to be applied to the database, right? \n\n[00:18:44] Ben:\nYeah. So, with Lightstream, Lightstream tracks the last place in the right head log it read from, and then it'll keep reading every second or so. It'll check to see if there's updates, and then it'll try to read forward all the transactions that have occurred since that point. And the way that SQLite works is that it has a rolling checksum \n\n[00:19:04] where every time there's another page written, it's basically there's a header on it where you'll have your data and then the header will have the checksum of that data and all preceding data. So that you have to have the checksums of every page be correct in order for it to be a valid transaction. So that's how it actually \n\n[00:19:25] keeps track and makes sure that it works. Yeah, \n\n[00:19:28] Kent:\nyeah. Cool. Okay, so I kind of interrupted you partway through, so you can finish now. \n\n[00:19:33] Ben:\nOh, yeah. So, I mean, that's the long and short of it, is you kind of, you were streaming up all these little tiny updates to S3, and then when you need to recover, you can just simply say restore. Like if your server just completely gets hosed, or even if you like deleted your table or your database, you can go back and say, hey, I want to restore to this point in time. I don't know \n\n[00:19:53] a minute ago and it can go and rebuild that file from that state. So it's really nice in that sense. Yeah, that's really kind of all Lightstream is meant to do. And 1 of the biggest, and this might be your next question, but like 1 of the biggest things that like people always wanted, actually 2 different things people always wanted. 1 issue with Lightstream is that it runs on a single \n\n[00:20:13] process, like a SQLite database only runs on 1 server. So people can't, if you do a deployment, you have to kind of take down that server and then you're gonna have like a couple seconds of downtime before you can redeploy it up. And some people just need to minimize the downtime. If they do a lot of deploys, that can really add up. So that's 1 thing they \n\n[00:20:33] wanted to be able to have, like a primary server that can switch between different servers. The other thing is, like you mentioned earlier, is you really want to, there's a nice part about SQLite is that you can, It's really fast, but if you live in Chicago and your servers in India, then your request is going to be super slow because you have probably 200 milliseconds \n\n[00:20:53] of delay just to go send your request out there and get back. So replication was a big issue that people wanted to see fixed too. And I originally tried to put all this stuff into Lightstream, but it wasn't really architected exactly for that kind of stuff. So we built out this project called LightFS, which just kind of does those 2 pieces. You can change \n\n[00:21:13] your primary. You can switch between different nodes. And you can replicate your data out globally. \n\n[00:21:20] Kent:\nAnd that is where I came in to wanting to use. \n\n[00:21:24] Ben:\nYou were very, very alpha stage of LightFS, and I appreciate your patience for sure. You brought up a lot of bugs, we fixed a lot of stuff, and it was great, so I appreciate that. \n\n[00:21:32] Kent:\nYeah, yeah, Well, I appreciate being able to do that. I'll be honest, a couple of years ago, I was full on front end dev. I did not want to have to do anything with backend stuff. And even when I was at PayPal, I did plenty of backend stuff. It was all Node and everything there, but I still didn't get anywhere close to the database and \n\n[00:21:53] I didn't wanna touch that. And then, Remix kinda forced me into the backend and I wanted my own database. And I created all of these requirements for myself that like this is the way that I wanna teach people how to build sites. I feel like this is the right way to do it. And unfortunately, they're \n\n[00:22:13] just for me, there wasn't a whole lot available there. Like, they're just, I wanted to limit the number of third party services I was using. And so like, I'm not gonna be using, even though there are cool things like FanaDB that allows your data to be replicated all over, like that's cool, but I don't wanna use a service for that. I wanna use \n\n[00:22:33] my own database. And so, but I also want to deploy all over the world. And if you deploy all over the world, but your data is not all over the world, then like, why are you deploying all over the world? Like it doesn't necessarily make things faster anyway. And so, and then I can't use third party auth either because they're not deployed all over the world. So you have to resolve user authentication \n\n[00:22:53] sessions, you know, and so like, they're just, this actually, honestly, the 1 constraint of, I want my app to be globally fast everywhere, that 1 constraint just made it so that I had to use stuff like SQLite, LightFS, or Postgres clusters, but then, yeah, Postgres clusters just \n\n[00:23:14] didn't do it for me. So anyway, I'm thrilled that LightFS came to be. And so no, I don't mind the bumps that we had early on with LightFS and it's just been really awesome now, like from that point. I definitely do \n\n[00:23:34] some weird things. I'm definitely the kind of person who gets into edge cases very easily. So I'm glad that my weirdness has been helpful to LightFS. \n\n[00:23:46] Ben:\nNo, yeah, I mean, you took it to another level. I mean, you started deploying to production on the very alpha build, so it was... \n\n[00:23:52] Kent:\nYeah, yeah, so... \n\n[00:23:54] Ben:\nIt really helps the ante. \n\n[00:23:56] Kent:\nYeah, for a long time, there was this notice at the top of the docs that said, you know, not recommended for production use. And I made this meme of like, I don't know what movie this is from, but there's like this clown in the sewer and there's this girl looking down at him and he's like, come on down here. And then she like climbs into the sewer \n\n[00:24:17] in the next frame of the meme. And I had it saying, like the clown would say, not recommended for production use. And then I have me be the girl going down. Like it's so obvious you shouldn't be doing this because it says right there, don't use it for production. That won't stop me. \n\n[00:24:34] Ben:\nNo. \n\n[00:24:35] Kent:\nBut that now has been taken off the docks. I use it for production. I've got, I should look at how big my database is, but as far as like volume size, but it, yeah, I shouldn't say a number, but I can say for sure that I have over half a million rows in my database. \n\n[00:24:56] And I'm querying to that database like constantly. So it is very, very active database, and it's just, it's humming along great. I love it So \n\n[00:25:07] Ben:\nyeah, yeah, I'm glad to hear that \n\n[00:25:09] Kent:\nyeah, \n\n[00:25:09] Ben:\nit's nice to I mean when you do queries you're doing locally So it's not like yes You know like if you look at like like I love the whole idea of serverless databases that are coming out, but really you're pushing off your compute and your queries off to them and you have to pay for that every time. \n\n[00:25:25] Kent:\nBut the \n\n[00:25:25] Ben:\nnice thing is when you have all your data locally on disk, the queries are super fast for 1 thing and there's no cost to it either. \n\n[00:25:32] Kent:\nSo yeah. And no latency. Because like the, they, they not only do they have to pay for their compute, but they also pay for their inbound and outbound traffic too. And they have to forward those costs onto you so they can make money. And yeah, so like so many things are simpler and cheaper by just using SQLite. \n\n[00:25:55] And so LightFS is super cool, and that's what I recommend people use. But SQLite is being used in a lot of really interesting places for web stuff too. Do you wanna talk a little bit about that and maybe what you think, like why you think SQLite is getting so much attention recently? \n\n[00:26:11] Ben:\nSure, yeah. I mean, interestingly, I think that SQLite, it's a great database, but it's been a great database for a long time. So I think, you know, the bigger question of like, why now? Like my gut feeling is that it's not that SQLite has gotten better. I mean, it has gotten better, but like, I don't think that's the reason. I think it's really more like computers have gotten better. \n\n[00:26:31] Like, you know, I don't know how long people have been in the industry, but like if you even go back 10 years, 15 years, like, you know, running a server was really expensive. And like you got, you know, a little bit of RAM and it was like a tiny little hard disk and like everything was super slow. And just the rate of change or just improvements of \n\n[00:26:51] you know, we have like NVMe disk drives now that are like crazy fast and you can get a couple gigabytes of RAM. You can get, you know, multi-core CPUs for pretty cheap. So I think the combination of all those things just made it so that more and more people can run even just a moderately, small to moderate sized website, \n\n[00:27:12] even on a single node, honestly, if you want to start there and not have any problems. Like you used to be, like, you know, back in the day, this is where I sound old. Back in the day, you know, you'd have like a dedicated database server and you put so much money into that thing to make it as fast as possible because that was really where you needed to optimize and you have a bunch of little app servers around it. But \n\n[00:27:32] now those app servers these days are as fast as that, you know, big clunky expensive database server back in the day, or faster really. So you just, I think it's just a, yeah, it's just expanded what apps can do on a single node, really. \n\n[00:27:47] Kent:\nYeah, yeah. And actually that's very true. The Epic stack is built with LightFS support from the get-go. And that's not just for multi-region. There's like cloud backup and other reasons you wanna use LightFS, even if you have 1 region. But I do recommend that people start with just 1 region and 1 instance, \n\n[00:28:07] because I would say the vast majority of people don't actually need multi-region. For many of the apps that we're building, it's like US only or Europe only or whatever. And so having just a single instance, like these apps are fast and that network latency is really only a \n\n[00:28:27] differentiator for a subset of apps that people are building. So yeah, SQLite, I like your perspective as the aged, I'm just kidding. But yeah, I think that perspective is really helpful. And what's cool is, \n\n[00:28:47] yeah, \n\n[00:28:48] Ben:\ngo ahead. Well, 1 thing I will say on that is like, it's funny when I was writing Lightstream, you know, people would always complain that like, oh, I'm not going to use SQLite because it doesn't scale and like I can't, you know, they need, you know, whatever, web scale, you know, MongoDB or, you know, Postgres or whatever, people complain it wouldn't scale. And it does, honestly, on a single node, but you can't scale, it \n\n[00:29:08] couldn't scale before to multiple nodes. And then once I wrote LightFS, everyone's like, who needs multi-node SQLite? Like, I don't need to scale. So it's always like someone always has a problem with 1 or the other. But I mean, I think having that gamut of like, sure, you can start small and then you can grow large. You can scale horizontally \n\n[00:29:28] pretty well for reads. And I think that's really where people need it typically. And I think having the story in place and like being able to do that, even if you don't need it now, I think is a big deal when you're choosing a database initially. \n\n[00:29:40] Kent:\nYeah, 100%. And relatively recently, SQLite isn't done, Like they're still actively developing it. That's why they have that huge test suite, of course. And so relatively recently, there was something that caught my attention, which is that SQLite \n\n[00:30:00] now supports an exabyte-sized database. It's just like, say what? It's, yeah, this thing can scale in volume as well. \n\n[00:30:14] Ben:\nNo, yeah, you're gonna hit your disk drive size limits before you hit SQLite limits for sure. Excuse me. \n\n[00:30:21] Kent:\nThat's pretty remarkable, honestly. Okay, so I would like to talk a little bit about some of the trade-offs though with SQLite. So like we've talked about how amazing SQLite is, and it totally is, and it satisfies most use cases for most web apps. And in fact, I have gone so far as to say that most web apps \n\n[00:30:41] should use SQLite, because, like, for the vast majority of us, it is enough, and it is simpler than other solutions. And simple is better so long as it satisfies your requirements. However, there's no panacea. Like there's no silver bullet that can do all the things and is the best at that. So \n\n[00:31:02] I'll lead in with 1 that I think is kind of ironic a little bit So you got into embedded systems with that job of analytics? That the or embedded databases with the analytics stuff sequel light. I think would probably not be a great database for capturing the analytics rights. Is that, \n\n[00:31:23] would you say that or am I off? \n\n[00:31:25] Ben:\nYou know, I think that, I think it depends on the scale of analytics you're looking at. Honestly, you can get really far just throwing it into SQLite and calling it a day. If you start scaling up, there's definitely more optimized things you can look at. Like DuckDB is kind of like the SQLite version for analytics. It's like an embedded database, but instead of... \n\n[00:31:47] So SQLite is row-oriented, So every time it stores a row of your data, it puts it in like 1 contiguous little block of data. Whereas DuckDB is column oriented, which means they split up all your columns and store them separately for every row, all the different values. And you can do a lot of really interesting compression stuff and optimize analytics queries a lot with that. \n\n[00:32:07] So if you do start scaling up, if you really do start hitting limits of SQLite, honestly, DuckDB is great. And there's, I think, MotherDuck is a startup that's started up around them, doing analytics with some super smart people. So, yeah, that's definitely \n\n[00:32:21] Kent:\na cool \n\n[00:32:22] Ben:\n1 to grab. \n\n[00:32:22] Kent:\nThe reason that I said that was because it's my understanding where SQLite, or at least my thought of SQLite's biggest trade-off is in rights and the fact that you can't have concurrent rights. Can you talk to that a little bit? \n\n[00:32:39] Ben:\nSure. Yeah. And yeah, so concurrent rights is you can't have. So sure. Let me back up. So you can have a single writer at a time with SQLite. So if you do a transaction and you write some data, any other transactions, if you set something called a busy timeout on there, they'll just queue up after that 1 and \n\n[00:32:59] they'll get processed immediately after. \n\n[00:33:02] Kent:\nSo they'll show up eventually. It's not like it's just going to fail. Yeah, or it'll time \n\n[00:33:06] Ben:\nout eventually if you have too many writes. But the trade-off is really like if you keep your writes short, you can do it really fast. I mean, sub-milliseconds. So you can have thousands of writes per second for small to medium-sized writes. I think if you get into big analytics, that \n\n[00:33:26] could be a problem. If you're taking in tens of thousands or hundreds of thousands of writes a second, I mean, you're really going to have to scale up to something else at some point, but that's not usually most people's problem. Yeah. And that's also per database too. So honestly, like a nice property of SQLite is, you know, your users, maybe you have a database per user, honestly. Like if you're tracking websites, each website could \n\n[00:33:46] have their own SQLite database, it's just a file on disk. So you don't have a lot of overhead with each 1. \n\n[00:33:52] Kent:\nYeah, and that's not an extra service per user. That actually, so you wrote a blog post that I saw today that mentions that. So like if you have a multi-tenant app, then you could just have a separate database for each 1. And normally that's like this big consideration. You're like, oh, I don't know if I want to do that. Let's just do a workspace ID on all \n\n[00:34:12] the row tables and stuff. But in SQLite, it's just a file. So just make another 1. It's pretty cool. \n\n[00:34:18] Ben:\nYeah, it's kind of cool. I mean, you can, and it really protects you from accidentally forgetting to like limit your queries on a certain workspace. So it's pretty nice in that sense. And yeah, And honestly, like, so you can also, you can optimize your write throughput as well with that. And there's some other settings in there within SQLite you can adjust to make it so that you can get faster writes. \n\n[00:34:39] So it's all, you know, things you can tweak. \n\n[00:34:41] Kent:\nYeah, yeah. So you can get quite a few writes, but with LightFS though, isn't there like quite a bit stronger limitation on the number of writes per second you can handle? And can you explain why? \n\n[00:34:55] Ben:\nYep. So LightFS right now, so it runs through a layer called Fuse. So we, LightFS exists in the file system layer. So we actually mount it as a file system. You write databases onto there, and it'll track. It basically passes through to the other underlying database files, but it'll track when the application is taking locks and doing \n\n[00:35:15] some other things to actually determine where transactions start and stop. And when they start and stop, we can grab the information, kind of the data that's changed within that, package it up and can ship it off. And we have a lot of control because they're right there in the file system layer. The downside of that is it's this layer is called FUSE, file system \n\n[00:35:36] as in user space. I think that's what it stands for. It's a Linux system where you can build your own file systems basically. And that's notoriously not fast, which is interesting. It seems like a terrible thing to write a database layer on. And for the right side it does slow things down. You tend to get limited \n\n[00:35:56] around like 100 writes per second, which is still above and beyond what most people probably need. \n\n[00:36:01] Kent:\nYeah, but by a long shot, Like if you're listening right now and you're like, oh, only a hundred writes a second. No, no, no. Your app probably does not have that load. \n\n[00:36:10] Ben:\nNo, yeah, \n\n[00:36:11] Kent:\nfor sure. It's possible, like you're an event ticket, like you're selling tickets and the tickets go on sale and it's Taylor Swift, yeah, okay, go ahead and use Postgres instead or something. But yeah, for most of us, that's not even close to how many writes a second we're getting. \n\n[00:36:27] Ben:\nYeah, and when you start adding it up and multiplying by number of seconds in a day, like 100 times whatever is 86,400 seconds in a day, like doing like 8 billion or whatever million, I don't know, some crazy number of rights a day. It's like, you're not doing that. So yeah, most people honestly get. A small handful and that's, that's \n\n[00:36:47] most web apps. I think everyone always looks at Facebook and Google and they're like, oh, what do they do? They have a gajillion rights a second or requests a second. It's like, that's not the vast majority of people out there, so don't build your systems like that. \n\n[00:36:59] Kent:\nYeah, yeah. That actually, I think that's such a key point that like people look at those apps and they say, I wanna build my app that way. And it just, that does not make sense. That's kind of like saying, I need to go to my neighbor's house. And so I'm gonna get charter a plane. \n\n[00:37:18] Ben:\nLike, no. Yeah, like Bezos does that, yeah. \n\n[00:37:21] Kent:\nIt's very efficient at getting you places. It's very good at that, but you don't have to go that far. \n\n[00:37:28] Ben:\nYeah, yeah, for sure. There's a lot of context for sure when you're choosing things. But yeah, so like on the right side, LightFS is slow right now. We are building out a virtual file system layer, so we will avoid that fuse layer entirely if you want to. The fuse layer is just nice because you can treat it just like SQLite, and it just works like the regular SQLite \n\n[00:37:49] on disk. But so we have plans to make that faster on writes. On the read side, you really shouldn't notice almost any difference from regular SQLite. What happens is the Fused Layer does serve out pages from the database, But then the operating system has a thing called the OS page cache. And as it reads pages in, it keeps them in memory and like a \n\n[00:38:09] little inside the kernel, like the file system kernel or the OS kernel. And it'll automatically just reserve those pages super fast. So you generally don't notice much of a difference on the read side. \n\n[00:38:22] Kent:\nYeah, yeah. And the reads are like going to be pretty dang fast anyway. In fact, there's this post on the SQLite site that's titled 35% Faster Than the File System, which is very interesting. So in the Epic stack and in the workshop, we store all the user upload \n\n[00:38:43] or image uploads in SQLite, which is like, at first glance, you're like, whoa, that sounds wrong. But in some cases, it actually can be faster, just because of the way that paging works. Is that right? \n\n[00:38:58] Ben:\nYeah, yeah. And you honestly, a lot of times you won't even notice. \n\n[00:39:01] Kent:\nYeah, if it is lower, it won't be noticeably slower. \n\n[00:39:04] Ben:\nYeah, for sure. I think once you get to like certain size, like you probably shouldn't store videos in there. Yeah. That kind of thing, but like most images are probably fine. \n\n[00:39:12] Kent:\nYeah, and in fact, you can correct me if I'm wrong, but I don't know if you can stream data into SQLite, or this is probably a little outside of my depth. But would that be possible to set a video? Like, let's say it's a gigabyte in size. \n\n[00:39:31] Ben:\nYeah, there is an optimized way to write in blobs. It's called the blob AVI. And not every client library supports it, but \n\n[00:39:39] Kent:\nyeah, \n\n[00:39:40] Ben:\nsome do. It's definitely a much more optimized way to like read in and out blobs without copying so much data into memory. \n\n[00:39:46] Kent:\nYeah, yeah. So in the workshop, we take the file uploads and load them up into memory and then we save those blobs all together at once, which works great for an enormous number of use cases. But that actually brings us to another topic that I wanted to touch on. I know we're getting toward the end of our time, but \n\n[00:40:06] LightFS being used potentially for more than just SQLite, but files in general. Can you speak to that at all? \n\n[00:40:16] Ben:\nOh, sure. That's been like 1 really big request to have, like people always ask, hey, can we also stick other stuff in this thing and distributed out to edge nodes as well? So there's an issue out for it. I don't think it's a super hard problem to solve. We really kind of have the very standardized packaging format for all the changes \n\n[00:40:36] and when you're uploading a like a file it's really just packaging into this format and shipping it off to your other nodes. So I think it's definitely doable but that would give you the ability just to instead of using an S3 or something like that, you know, for at least initially, I mean, if you don't have a ton of blob data that you really need to worry about or that you're trying to optimize \n\n[00:40:56] costs for, I think it's a Good alternative where you could just put it into LightFS. It'll distribute out to your edge nodes and you can serve them from there. \n\n[00:41:06] Kent:\nAnd distribute it out to your edge nodes. It's nothing to sneeze at either. Like you put something on S3 and you're choosing a region, but with LightFS, it's gonna just be deployed where you're at, so, or like whatever regions you're in. So that is cool for some use cases still. Like, again, this is not for everything, but \n\n[00:41:26] 1 of the really, the things I really wanna focus on with the Epic stack is just let's see how simple we can get this to be, how few services we can use and have it be reasonable still. So that you can get started with something. A lot of people will say, let's just use as many services \n\n[00:41:46] as possible so we don't have to build all this stuff ourselves so that we can move fast. And I can appreciate that, but when the thing does end up working out, you're gonna have to migrate off of all that stuff to save money or for whatever, they don't satisfy your requirements, all that stuff. And so I would rather be able to say, \n\n[00:42:06] oh no, you don't have to worry about building stuff, but you also don't have to worry about setting up these accounts because you just generate this project and it has all of these features that don't require paying another separate service for all that stuff. So I am definitely looking forward to having that support. I think that it would satisfy \n\n[00:42:26] an enormous number of requirements for people with existing apps and then for pretty much everybody just getting started as well. So yeah, LightFS is pretty cool. \n\n[00:42:38] Ben:\nThanks, yeah, thank you. Yeah, no, I agree. I think that every new service you add is just another liability. So I think if you can minimize it, I mean, like you slowly become an expert in all those services, which is painful. And every time you, if you hire somebody and you bring them on, they have to slowly become an expert in all those things. Cause like, they just, they all break in like weird little ways. And \n\n[00:42:58] the older I get, the more I just want something simple that just kind of works. \n\n[00:43:02] Kent:\nYeah, yeah, 100%. There are definitely trade-offs upside down and sideways. \n\n[00:43:07] Ben:\nLike, \n\n[00:43:07] Kent:\nyou know, now you're managing this, but if it's built for you and like you just get started and there it is, then I don't know, it seems kind of nice to have it that way. So this has been awesome to chat with you, Ben. Thank you so much for giving me some of your time. Is there anything that we didn't touch on \n\n[00:43:27] that you really wanted to make sure we talk about? \n\n[00:43:30] Ben:\nNo, I think that's a great overview of kind of where everything's at. No, I think you did a great job. Yeah, thanks for having me on too. I always love chatting SQLite. So, I mean, if anybody ever has any questions, happy to reply. \n\n[00:43:41] Kent:\nYeah, yeah. What's the best way for people to reach out to you? \n\n[00:43:44] Ben:\nOh, you can find me on Twitter. I'm Ben B. Johnson. That's a good way. I would say Discord, but you just messaged me earlier and I missed it, so yeah, probably Twitter's the best. Or GitHub. Awesome, \n\n[00:43:55] Kent:\ncool, cool. Well, good. And if anybody wants to contribute or help in some way, Like what's the best way that somebody could support the work that you're doing? \n\n[00:44:05] Ben:\nYou know, honestly, the best thing is just tell us, like, how are you using it? And like, what things do you find confusing? What things could make simpler? Like, that's really the goal. You know, I live my world for probably the last decade, like in low level databases. So, you know, different perspectives. I always love hearing, and I always just want to make things as simple as possible. I think that's kind of the best \n\n[00:44:25] software out there. Is a software you don't really think about. Yeah, you just like, You type a command, it's in there, and you forget about it almost, because it's just that easy. So, yeah, I would love to hear what people think and how we can make it better. \n\n[00:44:40] Kent:\nAwesome. Well, thank you so much again, Ben, and thanks everybody for listening. We'll talk to you later."
          },
          "_createdAt": "2023-10-16T23:15:27Z",
          "muxAsset": {
            "muxPlaybackId": "AKfugAoxf02800WyKwHBMS00Y00f7wirImUNzPap01RjBFPM",
            "muxAssetId": "jKwK5jhaBdDS7ddzuehyRqHD9WNjDL3AOTfXb4PyLTc",
            "_type": "muxAsset"
          }
        },
        "solution": null,
        "_id": "B9MrGEg0NpGWTknnF8PMuV",
        "_updatedAt": "2023-10-17T22:53:46Z",
        "body": "Ben Johnson has had a 20-year long coding career, working in roles from Oracle to the creation of BoltDB. In this episode, Ben speaks with Kent about his latest projects, LiteFS and Litestream. These initiatives aim to expand SQLite's utility.\n\nFrom its embedded nature and the transactional write-ahead logs (WAL), Ben talks in-depth about SQLite's architectural elements. Although SQLite faces limitations like restricted concurrent writes, Ben points out its commendable scalability on a single node, particularly when coupled with LiteFS.\n\nThe discussion covers more than just databases. Topics include:\n\n- Content creation’s impact on career progression\n- The downsides of relying on pre-configured setups\n- And the value of user feedback for refining software projects.\n\n## Resources\n\n- [Ben Johnson on Twitter](https://twitter.com/benbjohnson)\n- [Ben Johnson on GitHub](https://github.com/benbjohnson)\n- [LiteFS on GitHub](https://github.com/superfly/litefs)\n- [Litestream.io](https://litestream.io/)",
        "slug": "enhancing-sqlite-with-ben-johnson",
        "_type": "interview",
        "description": "Ben Johnson, from Oracle to BoltDB, unveils LiteFS & Litestream. Expanding SQLite's horizons. Deep dive into SQLite's architecture & scalability."
      },
      {
        "title": "The Evolution of Type Safety with Colin McDonnell",
        "description": "Colin McDonnell, Bun's Developer Relations, and Zod creator, dives into web dev type safety. Zod excels in data validation. TRPC ensures end-to-end type safety.",
        "body": "Colin McDonnell, a Developer Relations representative at Bun and the creator of Zod, shares invaluable insights into the world of type safety in web development. With a background that spans from medical software to tech companies like EdgeDB, Colin brings a multifaceted perspective to the table.\n\nZod was initially designed to enhance data validation and type safety in a complex medical application. Over time, Zod has established itself in the TypeScript ecosystem, providing superior type inference capabilities compared to alternatives like Yup.\n\nColin had also developed TRPC, which was later taken over by Alex Johansson, who has since made considerable contributions to the library. TRPC aims to offer end-to-end type safety and has seen its popularity surge, thanks in part to Alex's dedicated efforts.\n\nThis sets up a notoriously tricky problem, nested and dynamically arrayed form data. Colin explains how Zod and TRPC can be used to handle this challenge. He also mentions Valobot, a faster but less comprehensive alternative to Zod, while asserting his preference for Zod's developer experience.\n\n## Resources\n\n- [@ColinHacks on Twitter](https://twitter.com/ColinHacks)\n- [Zod Repo](https://github.com/colinhacks/zod)\n- [bun.sh](https://bun.sh/)",
        "videoResource": {
          "_rev": "WsAmd18YA1frbQaWBZpq8o",
          "transcript": {
            "srt": "1\n00:00:00,179 --> 00:00:02,580\nHey, everybody. How's it going? Colin?\n\n2\n00:00:03,540 --> 00:00:06,000\nNot too bad. How you doing? Doing great.\n\n3\n00:00:06,420 --> 00:00:08,100\nEverybody, this is my friend Colin.\n\n4\n00:00:08,440 --> 00:00:10,580\nAnd Colin is the creator of Zod.\n\n5\n00:00:11,139 --> 00:00:11,639\nAnd\n\n6\n00:00:12,179 --> 00:00:20,460\nyou probably by this point in the Epic Web workshop, you've probably used Zod a bit. We use Zod a lot in this workshop series. So\n\n7\n00:00:20,860 --> 00:00:21,600\nI think,\n\n8\n00:00:22,680 --> 00:00:25,619\nI definitely appreciate everything that Colin has done.\n\n9\n00:00:25,960 --> 00:00:29,720\n1 thing, before I let Colin introduce himself, 1 thing I want to mention\n\n10\n00:00:30,060 --> 00:00:41,660\nis that if you enjoy the type safety that we get across the network chasm between our loader and our UI and our actions in our UI, you have Colin to thank for that.\n\n11\n00:00:42,040 --> 00:00:42,540\nSo\n\n12\n00:00:42,880 --> 00:00:51,500\nI was at the first RemixConf and Colin was talking to me about how, listen, this generic nonsense that you're doing is not great,\n\n13\n00:00:51,900 --> 00:00:53,040\nit can be better.\n\n14\n00:00:55,080 --> 00:00:56,180\nColin put his\n\n15\n00:00:56,640 --> 00:00:59,440\nfingers on the keyboard to actually make it better.\n\n16\n00:01:00,239 --> 00:01:04,900\nAnd so, We're just super grateful for Colin in doing that for the Remix community.\n\n17\n00:01:05,640 --> 00:01:13,300\nAnd then also Zod is just like, so many people in the web world are using Zod, whether within Remix and outside of Remix, of course.\n\n18\n00:01:13,700 --> 00:01:22,940\nSo with that little intro from me, and also all of that said, Colin's just like a pleasure to get to know and to chat with. I really enjoy\n\n19\n00:01:23,320 --> 00:01:29,280\nhanging out and chatting with Colin. So happy to have you here Colin. Why don't you give your own introduction to yourself?\n\n20\n00:01:29,760 --> 00:01:30,980\nYeah, sounds great.\n\n21\n00:01:32,040 --> 00:01:43,300\nI'll just spin that back at you and say you are a just phenomenal person to meet. People really got to go to all the Remix Comps, do whatever you got to do to meet Ken in person because he's just like truly as just incredibly\n\n22\n00:01:43,860 --> 00:01:53,180\nnice and kind as You would expect based on what you see. This is just like a little interview of us like saying nice things about each other. Only way I know.\n\n23\n00:01:54,280 --> 00:01:55,020\nThank you.\n\n24\n00:01:55,360 --> 00:01:58,940\nDon't want to take too much credit for the remix\n\n25\n00:01:59,479 --> 00:02:01,720\ntype safety bit. You guys had\n\n26\n00:02:02,360 --> 00:02:04,240\na system in place, I guess,\n\n27\n00:02:04,900 --> 00:02:05,400\nmaybe\n\n28\n00:02:06,380 --> 00:02:14,320\nat the time you were defining your loaders and then the kind of recommended practice was to just kind of extract out the return type of it with just the built-in TypeScript\n\n29\n00:02:15,020 --> 00:02:19,060\nbuilt-ins, return type is there to pull out the return type of a function.\n\n30\n00:02:20,020 --> 00:02:21,520\nAnd so I think\n\n31\n00:02:22,360 --> 00:02:23,220\njust a few,\n\n32\n00:02:23,860 --> 00:02:29,940\nsaved a few characters there by trying to support it where in the use loader hook you could just put type of loader.\n\n33\n00:02:30,300 --> 00:02:33,920\nAnd that was all I did, but you guys had type save.\n\n34\n00:02:34,280 --> 00:02:38,800\nIt's just a little, nothing. It was way better. So for those listening who weren't\n\n35\n00:02:39,400 --> 00:02:40,580\nback in the day,\n\n36\n00:02:41,400 --> 00:02:43,340\nyou could make a, like,\n\n37\n00:02:43,980 --> 00:02:49,860\nyou could say whatever the return type of the loader is now pipe that into the use loader data generic.\n\n38\n00:02:50,340 --> 00:02:57,080\nBut the problem was if you wanted to use return anything but like the actual object, like if you want to return\n\n39\n00:02:57,660 --> 00:02:58,820\na call to JSON\n\n40\n00:02:59,180 --> 00:03:05,400\nto turn it into JSON so that you could supply headers, then you're toast. And so you had to then extract\n\n41\n00:03:05,940 --> 00:03:17,420\nthe logic to create the object to a separate function and then do your generic nonsense up there. And it was not fun. No, Colin, it's way better now. So thank you.\n\n42\n00:03:18,620 --> 00:03:32,180\nSo Colin, do you want to talk about really quick where you work? Cause I think people will find that interesting too. Yes, I'll stop dodging the question of introducing myself. I'm Colin, I work at BUN, I'm a 2 developer relations there.\n\n43\n00:03:33,340 --> 00:03:34,940\nBefore that, I was at EdgeDB.\n\n44\n00:03:35,660 --> 00:03:41,440\nAnd before that, I was, you know, working on Indie Hackery startup stuff,\n\n45\n00:03:42,060 --> 00:03:50,040\nwhich is kind of a bit of the origin story for Zod and some of the other, you know, like the version 0 of TRPC and things like that\n\n46\n00:03:50,460 --> 00:03:53,500\nare some tools that I was kind of working on\n\n47\n00:03:53,960 --> 00:03:57,480\nas I was trying to, you know, build this like piece of medical,\n\n48\n00:03:58,480 --> 00:04:01,100\nlike basically medical record software back in like 2019.\n\n49\n00:04:02,120 --> 00:04:02,620\nAnd\n\n50\n00:04:03,660 --> 00:04:05,820\nat the time, there was a kind of like a\n\n51\n00:04:06,300 --> 00:04:08,500\ntransition to from JavaScript to TypeScript\n\n52\n00:04:08,860 --> 00:04:13,200\nand to kind of like push towards like end-to-end type safety was kind of in its infancy.\n\n53\n00:04:14,140 --> 00:04:14,700\nYou know,\n\n54\n00:04:15,220 --> 00:04:16,320\nback then, 2019,\n\n55\n00:04:17,380 --> 00:04:20,680\nlike the only time I'd even heard the term end-to-end type safety was\n\n56\n00:04:21,040 --> 00:04:25,940\nin a random Prisma blog post, where they were kind of pushing this as a new concept.\n\n57\n00:04:26,680 --> 00:04:29,140\nPeople didn't really know what it meant\n\n58\n00:04:29,540 --> 00:04:46,820\nwhen you said it, and the tooling just really wasn't there. So as it turns out, I just got extremely lucky to be, you know, A, trying to build like this software that involved a lot of complexity, you know, data modeling. I know you've got a whole 64 unit course on data modeling here.\n\n59\n00:04:47,220 --> 00:04:50,220\nVery hard problem to solve in the general case.\n\n60\n00:04:51,340 --> 00:04:52,160\nAnd if\n\n61\n00:04:53,140 --> 00:04:55,580\nyou mess it up at the beginning, then your migration\n\n62\n00:04:56,440 --> 00:04:58,880\nstory can be really painful and messy.\n\n63\n00:05:00,060 --> 00:05:03,580\nYou're gonna have to predict the future a little bit, which is awful.\n\n64\n00:05:03,920 --> 00:05:05,040\nYes, for sure.\n\n65\n00:05:06,260 --> 00:05:08,960\nSo yeah, I just kind of got lucky to come into\n\n66\n00:05:09,580 --> 00:05:16,140\nTypeScript ecosystem at a time where there was really just a lot of kind of green field tools to be\n\n67\n00:05:17,380 --> 00:05:18,980\nmade. Zod was\n\n68\n00:05:19,860 --> 00:05:21,440\nnot much more than\n\n69\n00:05:22,960 --> 00:05:23,460\nYUP\n\n70\n00:05:24,560 --> 00:05:27,640\nwith better type inference at the time where it launched.\n\n71\n00:05:28,860 --> 00:05:29,560\nAnd there's,\n\n72\n00:05:30,060 --> 00:05:43,760\nsince now we've added some things that YUP doesn't have. But also I think 1 of the major appeals of Zot is, you know, it kind of didn't include things, you know, aspects of the YUP API that didn't lend themselves well to like TypeScript, type inference stuff.\n\n73\n00:05:44,180 --> 00:05:46,580\nSo kind of like pulling out some of the chaff\n\n74\n00:05:47,140 --> 00:05:48,480\nfrom this very bloated\n\n75\n00:05:48,840 --> 00:05:54,140\nAPI. That was more from kind of a bygone JavaScript era, I guess.\n\n76\n00:05:54,640 --> 00:05:57,540\nYeah, yeah, absolutely. I used YUP in\n\n77\n00:05:57,880 --> 00:05:58,640\nthose bygone\n\n78\n00:05:59,180 --> 00:05:59,680\ndays.\n\n79\n00:06:00,300 --> 00:06:01,360\nAnd yeah,\n\n80\n00:06:01,920 --> 00:06:05,040\nthe type aspect of Zod is like really special.\n\n81\n00:06:05,800 --> 00:06:11,560\nSo I'm sure we'll delve into that a little bit further, but I wanted to ask you a little bit about\n\n82\n00:06:12,120 --> 00:06:13,600\nthe origin story for\n\n83\n00:06:14,060 --> 00:06:15,040\nZod and TRPC\n\n84\n00:06:15,360 --> 00:06:17,980\nand like what's the relationship there?\n\n85\n00:06:18,340 --> 00:06:22,760\nI know Alex is, as far as I understand, Alex is still the primary maintainer of TRPC.\n\n86\n00:06:23,680 --> 00:06:27,180\nAnd so how did that transition happen? All of that, I'm kind of interested.\n\n87\n00:06:28,680 --> 00:06:29,340\nYeah, so\n\n88\n00:06:30,040 --> 00:06:30,540\nThis\n\n89\n00:06:30,920 --> 00:06:33,580\nbit of software I was working on that I alluded to,\n\n90\n00:06:34,600 --> 00:06:38,960\nI decided to be too clever for my own good. And so I decided\n\n91\n00:06:39,620 --> 00:06:43,240\nto try to avoid some of this migration pain I was alluding to. I used\n\n92\n00:06:43,820 --> 00:06:44,320\nNeo4j\n\n93\n00:06:44,800 --> 00:06:46,860\nas my backend database, which\n\n94\n00:06:47,160 --> 00:06:47,660\nis,\n\n95\n00:06:47,980 --> 00:06:50,220\neven the Neo4j team would tell you,\n\n96\n00:06:50,740 --> 00:06:52,060\ndon't do that for\n\n97\n00:06:53,400 --> 00:06:56,180\nyour core application database, because it's schema-less.\n\n98\n00:06:57,440 --> 00:07:01,220\nIt's like a graph database, and everything is just nodes\n\n99\n00:07:01,640 --> 00:07:06,420\nwith edges to other nodes, and both nodes and edges can have properties, and that's kind of the whole thing.\n\n100\n00:07:07,200 --> 00:07:11,500\nYeah, schema-less, nothing really to enforce that the data that's in your database\n\n101\n00:07:12,440 --> 00:07:15,780\nis at all, you know, has any kind of expected structure.\n\n102\n00:07:16,980 --> 00:07:30,140\nNot only, you know, It's not like a node isn't even like, you can't even attach like a particular type to it. You can't say like, this is a user node. You can just say, this has the label user and it can also have arbitrarily many other labels as well. Interesting.\n\n103\n00:07:30,480 --> 00:07:40,420\nSo, you just accidentally insert something into your database that's both a user and like a medical condition, and your database is just like, great, that seems fine to me.\n\n104\n00:07:41,140 --> 00:07:50,120\nLet's go with that. Yeah, it definitely sounds like a tool that has a purpose, but what you're using it for is probably not that purpose. Right, yeah.\n\n105\n00:07:50,660 --> 00:07:55,220\nI was definitely like, oh yeah, you know, I was in this like, it's all, you know,\n\n106\n00:07:56,320 --> 00:08:03,580\nthis kind of like lispy, like, oh yeah, whatever, like go with the flow, totally. Like your data can be anything. I'll be able to like\n\n107\n00:08:03,900 --> 00:08:10,660\nattach like edge properties to like implement new features and not have to worry about like actual relational migrations, whatever.\n\n108\n00:08:11,120 --> 00:08:12,140\nA huge mistake.\n\n109\n00:08:13,140 --> 00:08:15,460\nIt turns out, you know, I've learned.\n\n110\n00:08:16,160 --> 00:08:17,280\nBut you know, the,\n\n111\n00:08:17,640 --> 00:08:21,100\nthe, what this led me to is basically like I needed to validate\n\n112\n00:08:21,500 --> 00:08:29,360\nevery single bit of data before I wrote it to my database and make sure that it conformed to, you know, an actual schema that I had to find. Exactly.\n\n113\n00:08:31,320 --> 00:08:33,480\nAnd those schemas were, you know,\n\n114\n00:08:34,179 --> 00:08:35,760\nI started off basically\n\n115\n00:08:36,200 --> 00:08:38,740\ntrying to define them with some of the existing tools\n\n116\n00:08:39,440 --> 00:08:40,940\nthat were out there for schema validation.\n\n117\n00:08:41,400 --> 00:08:44,700\nNone of them really like made the cut at the time in terms of type inference.\n\n118\n00:08:45,040 --> 00:08:56,880\nAnd so that's the origin story for Zod. And that was kind of the source of truth for my schema information, you know, for this big medical application that had like 200 different models or something.\n\n119\n00:08:58,140 --> 00:09:01,140\nAnd that's, you know, that's kind of like where it came from.\n\n120\n00:09:02,180 --> 00:09:05,640\nAnd then that's also why like kind of recursive types were\n\n121\n00:09:05,980 --> 00:09:07,440\nan important part of\n\n122\n00:09:08,620 --> 00:09:13,940\nthe story because my data model, you know, medical data is very like heavily connected, strongly connected.\n\n123\n00:09:14,380 --> 00:09:15,080\nAnd so\n\n124\n00:09:15,660 --> 00:09:21,600\nkind of like having like a good way to do recursive types didn't really exist in anything except IOTS,\n\n125\n00:09:22,060 --> 00:09:24,680\nwhich was basically I used the same approach\n\n126\n00:09:25,800 --> 00:09:26,460\nas IOTS\n\n127\n00:09:26,960 --> 00:09:27,660\nfor Zod.\n\n128\n00:09:28,140 --> 00:09:28,640\nAnd\n\n129\n00:09:29,180 --> 00:09:30,860\nnot to, you know,\n\n130\n00:09:31,940 --> 00:09:38,080\nspoil anything, but, you know, proper recursive types that are, have a lot better developer experience than\n\n131\n00:09:39,000 --> 00:09:41,100\nis the current API in Zod3.\n\n132\n00:09:41,680 --> 00:09:44,020\nIt's gonna be 1 of the main features for Zod4.\n\n133\n00:09:45,060 --> 00:09:49,340\nWhere you can just kind of like use getters inside of your just like z.object\n\n134\n00:09:49,760 --> 00:09:50,260\ndeclaration.\n\n135\n00:09:50,900 --> 00:09:59,360\nAnd, you know, it turns out TypeScript is good enough with getters to just like define schemas that, you know, reference each other and have all the type inference work automatically\n\n136\n00:10:00,060 --> 00:10:03,840\nwithout having to like do the thing right now where you have to actually cast it\n\n137\n00:10:04,280 --> 00:10:17,460\nto like Zod type, like to the base class. Interesting, okay. That's something to keep your eyes peeled. I don't know if it'll be out by the time of course for us or not. That is actually pretty cool because I've noticed that Zod is fairly stable.\n\n138\n00:10:18,260 --> 00:10:20,420\nLike you haven't done a ton of releases,\n\n139\n00:10:20,820 --> 00:10:21,320\nwhich\n\n140\n00:10:21,760 --> 00:10:29,600\nsome people are like, oh, where are the features and stuff? But others, like for me, I'm like, no, please, like keep it the way it is. It's working great. Like,\n\n141\n00:10:30,060 --> 00:10:31,140\nIt sounds like there are a couple,\n\n142\n00:10:31,560 --> 00:10:32,260\nthere are\n\n143\n00:10:32,680 --> 00:10:36,900\nsome challenges with it and everything, but I appreciate the stability.\n\n144\n00:10:37,540 --> 00:10:39,240\nYeah, it's definitely,\n\n145\n00:10:40,680 --> 00:10:43,100\nhad a lot of fantastic contributions to Zod,\n\n146\n00:10:44,200 --> 00:10:52,240\nover the 3 and a bit years that it's been around now. But more of the feature requests that I see these days are things that\n\n147\n00:10:52,900 --> 00:10:55,300\nI either like, and very intentionally not including,\n\n148\n00:10:55,840 --> 00:11:00,700\nor are like, clearly too niche to be, adding another 200 bytes or whatever\n\n149\n00:11:01,360 --> 00:11:05,180\nto the bundle size to support like some kind of obscure\n\n150\n00:11:05,640 --> 00:11:07,260\nform of UUID\n\n151\n00:11:07,940 --> 00:11:10,280\nor something, I don't know. Oh yeah, yeah, sure.\n\n152\n00:11:11,040 --> 00:11:11,540\nSo\n\n153\n00:11:12,280 --> 00:11:17,780\nyou mentioned earlier that the first time you had really heard about end-to-end,\n\n154\n00:11:18,140 --> 00:11:18,640\nor\n\n155\n00:11:19,080 --> 00:11:24,040\nwhat did you say? End-to-end type safety? End-to-end type safety, yeah. Which is now like all over the TRPC\n\n156\n00:11:24,480 --> 00:11:28,440\nwebsite and this can talk about a little more. So that was on,\n\n157\n00:11:28,780 --> 00:11:29,480\nfrom Prisma.\n\n158\n00:11:30,060 --> 00:11:32,700\nI remember hearing about that idea from\n\n159\n00:11:33,040 --> 00:11:42,580\nApollo years ago and the GraphQL folks, they were just constantly like, this is so amazing. And this is, I heard about this before I was really into TypeScript. It was like maybe 2017\n\n160\n00:11:42,900 --> 00:11:46,420\nor something. That was actually around the time I started getting into TypeScript.\n\n161\n00:11:47,080 --> 00:11:56,860\nBut I saw that and I'm like, I mean, that seems really cool, but then you have to do all this stuff that requires like a GraphQL thing, which is a very serious investment,\n\n162\n00:11:57,980 --> 00:12:01,520\ntime and effort, and like, it doesn't really suit\n\n163\n00:12:01,880 --> 00:12:06,980\nall web applications, but the DX is so nice that a lot of people just went for it.\n\n164\n00:12:07,360 --> 00:12:15,260\nAnd so I think that kind of leads us in naturally to TRPC and its role in, and I want to hear about its origin story as well.\n\n165\n00:12:15,720 --> 00:12:17,780\nAbsolutely, yeah. You know,\n\n166\n00:12:19,300 --> 00:12:24,520\ncertainly 2019 was, you know, we were already pretty well into the kind of isomorphic JavaScript,\n\n167\n00:12:25,120 --> 00:12:29,080\nlike JavaScript everywhere, server and client kind of movement.\n\n168\n00:12:30,280 --> 00:12:30,900\nYou know,\n\n169\n00:12:31,640 --> 00:12:35,340\nAt the time, Next.js had kind of like relatively recently\n\n170\n00:12:35,660 --> 00:12:42,080\nmoved away from get initial props and had their like move towards, you know, get server-side props, get static props,\n\n171\n00:12:42,900 --> 00:12:44,640\nI think was maybe came in\n\n172\n00:12:45,060 --> 00:12:46,280\n2018 or something.\n\n173\n00:12:46,980 --> 00:12:50,660\nAnd so it kind of like had reached a bit of its final form, at least\n\n174\n00:12:50,980 --> 00:12:54,560\nup until now with app directory, it's kind of like a new evolution of it.\n\n175\n00:12:55,300 --> 00:13:00,860\nBut you know, having just like this feeling of like, this is truly all 1 code base, like you don't have\n\n176\n00:13:01,220 --> 00:13:03,260\neven a separate directory for\n\n177\n00:13:04,540 --> 00:13:07,380\nyour server and client. Like it's all just right there.\n\n178\n00:13:07,960 --> 00:13:10,320\nYou may have your API routes kind of tucked into\n\n179\n00:13:10,960 --> 00:13:13,360\nthe like pages slash API or whatever.\n\n180\n00:13:14,240 --> 00:13:17,220\nBut like, it really is just like all just TypeScript.\n\n181\n00:13:17,560 --> 00:13:30,700\nThey did all the compiler magic for you where you could just feel like you were importing types straight from your server into your client. You've got your API route that has your Zod schema and you can just import the type from that\n\n182\n00:13:31,980 --> 00:13:33,060\nover into\n\n183\n00:13:33,500 --> 00:13:35,420\nyour front end code, wherever you're\n\n184\n00:13:36,560 --> 00:13:40,120\ndefining a form or something and using that same schema in your form.\n\n185\n00:13:41,680 --> 00:13:42,180\nI\n\n186\n00:13:42,880 --> 00:13:44,740\ndid try using GraphQL\n\n187\n00:13:45,300 --> 00:13:47,180\nas I was working on this application\n\n188\n00:13:47,580 --> 00:13:48,300\nin 2019.\n\n189\n00:13:49,060 --> 00:13:50,460\nAnd it basically just like,\n\n190\n00:13:51,580 --> 00:13:56,720\nit kind of like rubbed me the wrong way. I remember at the time I had to have, you know,\n\n191\n00:13:58,260 --> 00:14:08,140\nthis kind of just like a pipeline of cogeneration tools. Yeah. Which is part of the, you know, the sales pitch is like, yeah, your GraphQL schema, it's there, it's introspectable,\n\n192\n00:14:08,560 --> 00:14:13,760\nit's like in a serializable format and you can just code gen whatever you need in any language ecosystem,\n\n193\n00:14:14,280 --> 00:14:17,460\nwhich I still think like definitely a time and a place for that. And that's\n\n194\n00:14:18,320 --> 00:14:19,060\nsuper valuable.\n\n195\n00:14:20,020 --> 00:14:27,440\nBut when you know you're gonna be all TypeScript for your front end and your back end, and you're not planning to build any mobile apps or whatnot,\n\n196\n00:14:29,480 --> 00:14:31,940\nit is a lot of friction in the developer experience.\n\n197\n00:14:33,260 --> 00:14:34,040\nThere's like,\n\n198\n00:14:34,780 --> 00:14:36,840\nchanges have to propagate through\n\n199\n00:14:37,200 --> 00:14:40,060\nyour code in this way that felt kind of like,\n\n200\n00:14:41,140 --> 00:14:48,920\npain, you know, kind of just like, it felt very slow and painful. You'd upgrade your GraphQL schema, then you had to update your queries, then you had to update\n\n201\n00:14:50,080 --> 00:14:56,420\nall your query mutations, and then throughout all of this, you'd have to be like regenerating the TypeScript types for all these things.\n\n202\n00:14:57,980 --> 00:14:58,640\nAnd ultimately,\n\n203\n00:14:59,640 --> 00:15:00,180\nI just\n\n204\n00:15:00,720 --> 00:15:01,900\nkind of bumped on it.\n\n205\n00:15:02,320 --> 00:15:05,640\nAnd I had actually seen a project from a friend of mine named Kevin\n\n206\n00:15:06,500 --> 00:15:08,980\nKwok, and that was called Obvious RPC.\n\n207\n00:15:09,680 --> 00:15:10,580\nAnd it was\n\n208\n00:15:11,060 --> 00:15:13,540\nkind of just like a way for you to have\n\n209\n00:15:15,120 --> 00:15:17,460\nlike a file where you export a bunch of functions,\n\n210\n00:15:18,560 --> 00:15:26,620\nyou're able to like kind of import all of those and extract like the return types of all of them. And then just kind of like start using\n\n211\n00:15:27,040 --> 00:15:30,040\nthose inferred types in your client side code.\n\n212\n00:15:30,780 --> 00:15:36,240\nThere was no sense of like a router or anything. It wasn't kind of TRPC like where you had\n\n213\n00:15:37,360 --> 00:15:43,760\nlike an actual like router class that you can kind of like add procedures onto with, you know, change method calls,\n\n214\n00:15:44,540 --> 00:15:46,340\nyou know, like dot route, whatever,\n\n215\n00:15:47,080 --> 00:15:51,720\nyou know, in case you can't tell from Zod's API, I like method calls, I like fluent APIs.\n\n216\n00:15:52,360 --> 00:16:01,100\nHis thing was a little more magical where you're just exporting these functions and then you've got like kind of a config file to, you know, tell it like how to handle middleware and things like that.\n\n217\n00:16:02,500 --> 00:16:10,940\nI basically thought it would be kind of a nice experience to have something that looks at least kind of familiar to like an Express user or a Cobo user.\n\n218\n00:16:11,480 --> 00:16:14,700\nYou actually have like this router, it's a little more declarative\n\n219\n00:16:15,040 --> 00:16:20,320\nAnd you're just kind of like adding procedures onto it. And that was the birth of TRPC\n\n220\n00:16:20,740 --> 00:16:21,240\nv0.\n\n221\n00:16:22,360 --> 00:16:26,780\nAt the time I was still working on the startup. I was using my v0 version,\n\n222\n00:16:27,700 --> 00:16:29,840\nyou know, internally, like in production,\n\n223\n00:16:30,740 --> 00:16:31,980\nas I built this app.\n\n224\n00:16:32,320 --> 00:16:34,400\nBut ultimately at the time Zod was getting\n\n225\n00:16:35,020 --> 00:16:37,900\nmore popular by a long shot than TRPC.\n\n226\n00:16:38,800 --> 00:16:39,300\nAnd\n\n227\n00:16:39,920 --> 00:16:43,640\nit was kind of like the combination of working on the startup and trying to\n\n228\n00:16:44,640 --> 00:16:48,580\nput more effort into Zod. Basically I just kind of didn't have bandwidth for TRPC,\n\n229\n00:16:48,960 --> 00:16:50,040\neven though I like,\n\n230\n00:16:50,380 --> 00:16:54,100\nbelieved in it and you know, thought that it like really ought to be,\n\n231\n00:16:54,660 --> 00:17:01,860\nyou know, like, used more widely like this pattern in general. And so I just tweeted out saying like, yeah, I've got like,\n\n232\n00:17:02,220 --> 00:17:05,780\na handful of open source projects that I've been working on that I have internally\n\n233\n00:17:06,260 --> 00:17:11,980\nthat I don't really have time for. And I just, you know, you can still go see this tweet. TRPC was in a list of 4\n\n234\n00:17:12,280 --> 00:17:14,700\nprojects that I kind of like had\n\n235\n00:17:15,119 --> 00:17:16,740\nproofs of concept of.\n\n236\n00:17:17,220 --> 00:17:18,079\nBut then Alex,\n\n237\n00:17:18,619 --> 00:17:23,040\nyou know, messaged me back and said, like, I actually have something pretty similar to that, that I've been working on myself.\n\n238\n00:17:25,440 --> 00:17:34,020\nSo a lot of these ideas were kind of in the air at the time. And then he was like, kind of took over TRPC and that repo and the branding of it and\n\n239\n00:17:34,400 --> 00:17:35,880\nput together v1\n\n240\n00:17:36,500 --> 00:17:38,200\nreally quickly and it was\n\n241\n00:17:38,500 --> 00:17:39,000\nimmediately\n\n242\n00:17:39,480 --> 00:17:41,500\nway more mature, way more feature complete.\n\n243\n00:17:42,440 --> 00:17:46,680\nAlex gets basically all the credit for TRPC in its modern incarnation,\n\n244\n00:17:48,280 --> 00:17:58,000\nespecially with some of the major API changes in version 10 that I think are just like phenomenal and like really like made it what it is today.\n\n245\n00:17:59,340 --> 00:18:05,040\nSo yeah, all props to Alice for TRPC, he's killed it. Yeah, yeah. Well, it's definitely\n\n246\n00:18:05,660 --> 00:18:10,320\ngotten really, really popular and just the idea of end-to-end type safety\n\n247\n00:18:11,800 --> 00:18:12,300\nis\n\n248\n00:18:12,700 --> 00:18:17,620\nonce you taste that fruit, you can't go back. Like it's just so, so nice.\n\n249\n00:18:18,480 --> 00:18:20,300\nSo yeah, thank you for your contributions\n\n250\n00:18:20,740 --> 00:18:21,960\non both of those.\n\n251\n00:18:22,420 --> 00:18:25,700\nAnd shout out to you, Alex, if you ever see this. Thank you.\n\n252\n00:18:26,580 --> 00:18:27,740\nAnd all contributors,\n\n253\n00:18:28,340 --> 00:18:32,220\nwe all know open source is not built by a single person in Nebraska.\n\n254\n00:18:34,060 --> 00:18:38,340\nIt is, yeah, there's definitely a lot, a lot that goes into that.\n\n255\n00:18:39,960 --> 00:18:48,380\nAlthough sometimes, that guy in Nebraska, he really does, he is like the foundation for like, you know, billions of dollars in value for sure.\n\n256\n00:18:49,740 --> 00:18:50,520\nIt's the XKCD,\n\n257\n00:18:51,100 --> 00:18:54,440\nthe 1 little pillar that's supporting the entire ecosystem.\n\n258\n00:18:55,260 --> 00:18:57,380\nThat's some 4 person you've never heard of.\n\n259\n00:18:57,700 --> 00:19:00,260\nYeah, yeah. I remember when that\n\n260\n00:19:00,560 --> 00:19:01,680\nwas going around,\n\n261\n00:19:02,380 --> 00:19:03,160\nSean Larkin,\n\n262\n00:19:04,160 --> 00:19:05,720\nco-maintainer of Webpack,\n\n263\n00:19:06,020 --> 00:19:09,560\nlived in Nebraska at that time. And I always thought that was kind of funny.\n\n264\n00:19:11,000 --> 00:19:11,500\nSo\n\n265\n00:19:11,820 --> 00:19:15,620\nyeah, great. Thank you for sharing some of those motivating\n\n266\n00:19:16,100 --> 00:19:17,680\nfactors. I think that helps contextualize\n\n267\n00:19:18,900 --> 00:19:19,400\nthe\n\n268\n00:19:20,220 --> 00:19:23,600\nideas around these technologies that we use.\n\n269\n00:19:24,640 --> 00:19:30,540\nIn Remix, I have yet to find a use case for TRPC. I don't know if you'd agree with me that\n\n270\n00:19:31,400 --> 00:19:37,240\nthere definitely could be some use cases for them, but for the most part, the loader action\n\n271\n00:19:38,000 --> 00:19:42,480\nmethodology around Remix kind of makes TRPC unnecessary. Is that right?\n\n272\n00:19:43,080 --> 00:19:43,960\nFrom your perspective?\n\n273\n00:19:45,360 --> 00:19:45,860\nThat's,\n\n274\n00:19:46,720 --> 00:19:47,600\nI think certainly\n\n275\n00:19:47,980 --> 00:19:49,780\nthe loader does for,\n\n276\n00:19:50,340 --> 00:19:51,560\nyou know, for reads.\n\n277\n00:19:52,360 --> 00:19:57,260\nI can see a scenario where people might consider setting up TRPC for mutations\n\n278\n00:19:58,060 --> 00:19:58,840\nif like\n\n279\n00:19:59,220 --> 00:19:59,720\nthey\n\n280\n00:20:00,040 --> 00:20:06,040\nwant to break out of, and forgive me, because I'm a little behind on some of the work in Remix on like,\n\n281\n00:20:06,820 --> 00:20:08,680\nkind of like, you know, nested JSON\n\n282\n00:20:09,380 --> 00:20:09,880\npayloads\n\n283\n00:20:10,380 --> 00:20:12,100\nfor posts, like for writes,\n\n284\n00:20:12,940 --> 00:20:15,800\nwhich I know is like, you know, some,\n\n285\n00:20:17,780 --> 00:20:33,840\nI don't really know what the current status quo is on that. I know like form data kind of just doesn't lend itself super well to that kind of thing. And that's unfortunate, but it lends itself extremely, extremely well to handling file uploads and things that, you know, you need to go through that form data attraction.\n\n286\n00:20:34,240 --> 00:20:37,240\nAnd so it does seem, and we've discussed this on Twitter,\n\n287\n00:20:37,720 --> 00:20:40,440\nthat there's not really like currently a perfect,\n\n288\n00:20:41,760 --> 00:20:45,820\na perfect version where you're able to maybe have like, you know, a nicely validated\n\n289\n00:20:46,120 --> 00:21:03,860\nkind of like nested, you know, a form that kind of produces like a nicely validated nested JSON structure and then be able to like, just like send that over to your backend. I don't know, you can speak more. Yeah, yeah. So actually maybe We'll stick this segment of our interview right after we do the nested\n\n290\n00:21:04,540 --> 00:21:05,340\nand dynamically,\n\n291\n00:21:05,900 --> 00:21:10,280\nyou know, arrays of form data. Cause yeah, in that\n\n292\n00:21:10,620 --> 00:21:15,780\nexercise, I have this like big thing that explains why form data is so bad at this.\n\n293\n00:21:16,580 --> 00:21:19,620\nAnd just cause it's super not designed for that sort of thing.\n\n294\n00:21:20,280 --> 00:21:20,920\nAnd Conform\n\n295\n00:21:21,540 --> 00:21:23,580\nis the library that we use in the workshop\n\n296\n00:21:24,140 --> 00:21:28,000\nby Edmund, and we're gonna have Edmund on these interviews too.\n\n297\n00:21:28,580 --> 00:21:29,080\nBut\n\n298\n00:21:29,540 --> 00:21:31,940\nConform is just brilliant and\n\n299\n00:21:32,420 --> 00:21:33,620\nuses Zod,\n\n300\n00:21:33,940 --> 00:21:35,700\nthe Zod schema to enable\n\n301\n00:21:36,160 --> 00:21:38,660\nthese types of field sets. And so,\n\n302\n00:21:39,220 --> 00:21:43,020\nyeah, that is definitely a huge pain point. And in recent,\n\n303\n00:21:43,520 --> 00:21:45,140\nlike the last couple of months,\n\n304\n00:21:45,480 --> 00:21:47,820\nthat has been pretty well solved by Conform,\n\n305\n00:21:48,520 --> 00:21:51,100\nwhich is just stellar. It's so nice.\n\n306\n00:21:52,040 --> 00:21:53,300\nSo I think,\n\n307\n00:21:56,060 --> 00:21:59,840\nlike, and then on top of that, like if you're okay going with the TRPC,\n\n308\n00:22:00,820 --> 00:22:02,440\nif that's what you want for,\n\n309\n00:22:03,320 --> 00:22:07,860\nto solve that particular problem, you can actually still submit JSON\n\n310\n00:22:08,360 --> 00:22:14,760\nusing lower level or other APIs from Remix as well. So I do think that TRPC\n\n311\n00:22:15,780 --> 00:22:24,940\nhas a better place in other frameworks that haven't quite embraced the forms or if that's not an important aspect of the web app that you're building.\n\n312\n00:22:25,760 --> 00:22:27,100\nBut Zod for sure\n\n313\n00:22:27,620 --> 00:22:30,560\nhas like just a beautiful place in\n\n314\n00:22:31,080 --> 00:22:33,140\nthe apps that I build anyway.\n\n315\n00:22:34,020 --> 00:22:35,140\nSo on this-\n\n316\n00:22:35,740 --> 00:22:36,720\nIt slots in,\n\n317\n00:22:37,160 --> 00:22:37,920\nyou know,\n\n318\n00:22:38,880 --> 00:22:41,680\nreally nicely, I would say, with Next.js,\n\n319\n00:22:42,280 --> 00:22:43,120\npretty app-tier.\n\n320\n00:22:43,940 --> 00:22:48,000\nAnd then some of the other things that are a little more hands-off in terms of just like, you know,\n\n321\n00:22:48,480 --> 00:22:52,560\nyou've got to figure out the whole data layer for yourself, which was\n\n322\n00:22:53,640 --> 00:23:00,860\nmost frameworks really until like Next.js to like a limited extent and then Remix is where it's like, you know, the loader concept\n\n323\n00:23:01,400 --> 00:23:09,100\nand loaders and action concepts are like integrated into your, like, you know, the files system structure for the framework, you know, in a way that,\n\n324\n00:23:10,080 --> 00:23:10,580\nlike\n\n325\n00:23:11,040 --> 00:23:15,080\nis really smart and like unlocks just like all the good stuff that Remix gives you.\n\n326\n00:23:15,780 --> 00:23:18,060\nAnd so, yeah, we'll see if more of these,\n\n327\n00:23:18,840 --> 00:23:20,340\nwhatever, like even\n\n328\n00:23:21,040 --> 00:23:27,940\nnext-gen frameworks that are coming out, get more or less opinionated in terms of how like data fetching or mutations happen.\n\n329\n00:23:29,280 --> 00:23:30,980\nYeah, you know, I think that TRPC\n\n330\n00:23:32,120 --> 00:23:34,020\nhad a role in\n\n331\n00:23:34,480 --> 00:23:35,200\nthe motivation\n\n332\n00:23:35,800 --> 00:23:36,300\nbehind\n\n333\n00:23:36,900 --> 00:23:40,120\nwhat all these frameworks are doing. It's just like\n\n334\n00:23:40,440 --> 00:23:47,500\na very natural progression of, yeah, TypeScript's pretty cool. I sure wish that I had type safety over this network boundary.\n\n335\n00:23:48,400 --> 00:23:52,380\nAnd that, so that I think had a major influence there.\n\n336\n00:23:53,480 --> 00:23:56,440\nSo on the Zod subject, a couple\n\n337\n00:23:56,980 --> 00:23:58,980\nweeks, maybe months ago, we\n\n338\n00:23:59,440 --> 00:24:02,940\nhad this new library come out called Valobot.\n\n339\n00:24:05,140 --> 00:24:16,560\nAt least, I'm not sure how they market themselves right now. I should probably look, but when it came out, it was like smaller version of Zod and faster. And like, basically,\n\n340\n00:24:16,880 --> 00:24:18,640\nI am Zod, but better.\n\n341\n00:24:19,900 --> 00:24:21,540\nWhich is always kind of a\n\n342\n00:24:22,360 --> 00:24:23,220\nFunny feeling\n\n343\n00:24:23,560 --> 00:24:26,080\nthat I get when I see something marketed as\n\n344\n00:24:26,580 --> 00:24:27,840\nlike this but better\n\n345\n00:24:29,200 --> 00:24:29,700\nbut\n\n346\n00:24:30,720 --> 00:24:37,060\nI don't mind it so much if it comes from the author of the thing, but it feels kind of funny coming from somebody else.\n\n347\n00:24:37,540 --> 00:24:38,300\nSo yeah,\n\n348\n00:24:38,760 --> 00:24:41,460\nI'd love to hear your take on Valobot.\n\n349\n00:24:41,780 --> 00:24:43,820\nAnd I've got my own kind of opinions\n\n350\n00:24:44,280 --> 00:24:47,060\nfrom what I've seen so far, but yeah, love to hear your take.\n\n351\n00:24:47,660 --> 00:24:50,960\nI'm very thrilled that Valobot exists. And\n\n352\n00:24:51,420 --> 00:24:52,460\nI'd be way\n\n353\n00:24:53,180 --> 00:24:54,440\nmore annoyed. You know,\n\n354\n00:24:54,840 --> 00:24:58,380\nwhen Zob came out, I would say the improvements that it provided\n\n355\n00:25:01,500 --> 00:25:18,620\nwere quite marginal on the status quo, marginal improvements over YUP, which had like a lot of weirdness in its API, like things like when you declare an object schema, you know, all of your keys are optional by default, unless you do not require it on them or whatever. That's just like kind of like an incompatibility\n\n356\n00:25:18,940 --> 00:25:21,540\nwith the way we think about data modeling as TypeScript,\n\n357\n00:25:21,900 --> 00:25:23,060\nyou know, engineers.\n\n358\n00:25:24,160 --> 00:25:30,140\nAnd so changing the API, you know, some little changes to the API to bring it in line with the TypeScript ethos,\n\n359\n00:25:30,940 --> 00:25:37,080\nyou know, turned out to be like something that a lot of people were looking for. But ultimately, like, you know, the bones of the thing\n\n360\n00:25:37,720 --> 00:25:38,500\nare like\n\n361\n00:25:38,800 --> 00:25:44,440\nquite similar to to YUP or like, you know, the bones of Zod are quite similar to YUP or other existing options.\n\n362\n00:25:45,540 --> 00:25:51,240\nI'm I love that Valobot exists because it's like a dramatically different take. And it's like a very clean trade-off\n\n363\n00:25:51,900 --> 00:25:52,400\nthat\n\n364\n00:25:53,200 --> 00:25:54,000\nwas known\n\n365\n00:25:54,720 --> 00:25:57,220\nto me when I was designing the API for Zod.\n\n366\n00:25:58,620 --> 00:26:00,660\nIt's truly a trade-off between\n\n367\n00:26:01,860 --> 00:26:04,700\nwhat I would consider to be developer experience,\n\n368\n00:26:05,660 --> 00:26:08,500\nlike a trade-off between having a trainable fluent API,\n\n369\n00:26:09,020 --> 00:26:11,700\nthat's like easier to learn and more discoverable\n\n370\n00:26:12,120 --> 00:26:16,380\nand being tree shakable. And it's just like kind of 1 of these law of the universe things\n\n371\n00:26:16,800 --> 00:26:18,220\nwhere, you know,\n\n372\n00:26:18,520 --> 00:26:19,020\nI\n\n373\n00:26:20,460 --> 00:26:22,820\npersonally don't really like the idea of like importing,\n\n374\n00:26:23,180 --> 00:26:23,860\nyou know,\n\n375\n00:26:24,620 --> 00:26:29,580\nhaving a separate import for like every single kind of like bit of functionality that I need from a library.\n\n376\n00:26:30,800 --> 00:26:32,360\nIt's you know, it's\n\n377\n00:26:32,980 --> 00:26:36,880\ncommon I think with monorepos to kind of like end up publishing\n\n378\n00:26:37,420 --> 00:26:38,580\ndifferent bits of functionality\n\n379\n00:26:39,060 --> 00:26:41,540\nfor your library to like different packages.\n\n380\n00:26:42,900 --> 00:26:55,900\nThis is not a great example, but you know, the like, at trpc slash client at trpc slash server at trpc slash next. Like you kind of like have all these different packages and you have end up with a lot of TRPC related imports\n\n381\n00:26:57,260 --> 00:27:01,960\njust to, you know, depending on what kind of bit of bits of functionality you need.\n\n382\n00:27:03,140 --> 00:27:03,640\nI,\n\n383\n00:27:04,160 --> 00:27:06,820\nFor the most part, I've been building apps that are\n\n384\n00:27:08,000 --> 00:27:11,440\neither all server-side rendered or single-page applications where\n\n385\n00:27:12,100 --> 00:27:14,640\nI kind of had already lost the bundle size\n\n386\n00:27:15,060 --> 00:27:17,020\nfight or it was irrelevant.\n\n387\n00:27:18,740 --> 00:27:20,100\nI haven't built like\n\n388\n00:27:21,760 --> 00:27:26,540\na blog or something recent that isn't like entirely statically\n\n389\n00:27:27,040 --> 00:27:28,680\ngenerated or like SSR.\n\n390\n00:27:29,380 --> 00:27:30,620\nSo things where like\n\n391\n00:27:31,220 --> 00:27:38,980\nthe bundle size of what you send to the client matters a lot. And these kinds of content driven sites that are common for users of Astro,\n\n392\n00:27:40,000 --> 00:27:40,740\nfor instance,\n\n393\n00:27:41,740 --> 00:27:44,640\nthey are in a scenario where 9 kilobytes\n\n394\n00:27:46,240 --> 00:27:48,980\nto ship down all of Zod is like,\n\n395\n00:27:50,200 --> 00:27:52,940\nyou know, not a worthwhile trade off, especially if you're trying to\n\n396\n00:27:53,300 --> 00:27:53,800\nlike,\n\n397\n00:27:54,140 --> 00:27:59,280\nmake sure that your site loads quickly for people who are on like, you know, 3G connections, things like that.\n\n398\n00:28:00,280 --> 00:28:00,780\nYeah,\n\n399\n00:28:01,300 --> 00:28:01,800\nI'm\n\n400\n00:28:02,600 --> 00:28:03,840\nlike very\n\n401\n00:28:04,400 --> 00:28:05,920\nsympathetic to that, but\n\n402\n00:28:07,080 --> 00:28:07,580\nultimately,\n\n403\n00:28:09,340 --> 00:28:14,620\nif I redesign Zod today, I would stick with the Kergan API, the Chainable API,\n\n404\n00:28:15,240 --> 00:28:22,700\nBecause I like the idea of importing everything as Z, even if I'm importing the whole package. I like the idea of, you know,\n\n405\n00:28:23,080 --> 00:28:36,140\nif you have an instance of Zod, you know, a Zod schema instance, you know the full set of methods that are gonna be available on it. In your IDE, you can press dot and then see them all listed and you can arrow through them. Yeah, discoverability.\n\n406\n00:28:36,760 --> 00:28:37,400\nThe discoverability\n\n407\n00:28:39,020 --> 00:28:39,700\nwith IntelliSense,\n\n408\n00:28:40,240 --> 00:28:40,740\nlike\n\n409\n00:28:41,480 --> 00:28:42,600\nthat feels like\n\n410\n00:28:43,680 --> 00:28:47,780\nif you're optimizing for developer experience, which is, you know, Zod's whole thing,\n\n411\n00:28:48,580 --> 00:28:51,960\nthen that's kind of the only move. I think it's\n\n412\n00:28:53,000 --> 00:28:53,500\nbasically\n\n413\n00:28:53,960 --> 00:29:06,180\nextremely clever what Fabian did, Fabian Hiller, who also has contributed to Zod and sent me a pre-release version of Valobot and is very kind to shout out Zod on stocks and stuff.\n\n414\n00:29:07,240 --> 00:29:09,180\nBut it's very clever what he did where\n\n415\n00:29:09,780 --> 00:29:18,360\nin Zod you would do z.string to declare a string schema, and then you chain methods from there to add refinements or add a transform or\n\n416\n00:29:18,700 --> 00:29:20,340\nmake it optional, yada yada.\n\n417\n00:29:20,860 --> 00:29:23,260\nFor his API, you do z.string,\n\n418\n00:29:24,720 --> 00:29:26,380\nthat's a function, and then\n\n419\n00:29:26,720 --> 00:29:28,720\nyou pass in an array of your\n\n420\n00:29:29,340 --> 00:29:38,320\nadditional validations that you want to do on that string schema. And a lot of those, like the names of, you know, you just pass in basically a bunch of little validators\n\n421\n00:29:38,640 --> 00:29:46,300\nthat you would import, you know, like have a separate import for. So something like, you know, ends with, or, you know, length or something.\n\n422\n00:29:46,980 --> 00:29:50,140\nYou can just kind of like import those in and do like z.string\n\n423\n00:29:50,580 --> 00:29:54,260\nparentheses and then pass into that your array of all your kind of sub-validations.\n\n424\n00:29:55,240 --> 00:29:55,740\nAnd\n\n425\n00:29:57,660 --> 00:30:01,800\nthat lets you do the tree shaking because if you're not using the min-length\n\n426\n00:30:02,860 --> 00:30:03,360\nvalidator,\n\n427\n00:30:03,740 --> 00:30:06,540\nthat gets stripped away when you do your final build\n\n428\n00:30:07,080 --> 00:30:11,240\njust with tree shaking that's built into modern bundlers. Whereas for Zod,\n\n429\n00:30:12,260 --> 00:30:12,980\nyou know,\n\n430\n00:30:13,340 --> 00:30:16,560\ndot ends with it's like a method on the Zod string schema.\n\n431\n00:30:17,640 --> 00:30:22,940\nAnd that's just all those method implementations are gonna get pulled in if you have any instance of ZodString\n\n432\n00:30:23,680 --> 00:30:27,340\nanywhere in your code base. And then that actually gets compounded\n\n433\n00:30:27,940 --> 00:30:28,440\nbecause\n\n434\n00:30:29,540 --> 00:30:38,180\na lot of the methods that people really rely on in Zod are, they're on the base class that all schemas inherit from, things like .optional, .nullable,\n\n435\n00:30:39,340 --> 00:30:42,380\nrefine, transform, super refine, whatever, things like that.\n\n436\n00:30:43,140 --> 00:30:47,080\nThose are on the base class and they return instances of subclasses.\n\n437\n00:30:47,760 --> 00:30:51,240\nSo like .optional returns a Zod optional instance.\n\n438\n00:30:51,680 --> 00:30:52,180\nSo\n\n439\n00:30:52,580 --> 00:30:53,680\nif you use any\n\n440\n00:30:54,680 --> 00:31:10,320\ninstance of any Zod schema, then the implementation of Zod optional is gonna get pulled in because it's used in the implementation of the dot optional method that's on the base class. So, you know, ultimately everything ends up getting pulled in. And, you know, the move for Zod is like,\n\n441\n00:31:12,200 --> 00:31:15,040\nyou know, try to make the bundle size as small as possible.\n\n442\n00:31:15,660 --> 00:31:21,180\nBut, you know, that's always been a secondary concern for me after developer experience.\n\n443\n00:31:22,440 --> 00:31:23,600\nBut you know,\n\n444\n00:31:23,940 --> 00:31:31,820\nby all means, like I think the more the merrier. I think all the tools that are out there that want to support, you know, I\n\n445\n00:31:32,260 --> 00:31:34,300\nprefer when tools don't, you know,\n\n446\n00:31:35,380 --> 00:31:36,980\nrely exclusively on SOD,\n\n447\n00:31:37,360 --> 00:31:43,860\nyou know, third party ecosystem tools. I think it generally makes sense to try to, like TRPC does, support kind of like\n\n448\n00:31:44,480 --> 00:31:54,340\nevery possible validation library, you know, just like let people pass in any object with a dot parse method on it or something, you know, which is not dissimilar from what TRPC does.\n\n449\n00:31:55,300 --> 00:31:59,120\nAnd, you know, it's always good if you're going to be building something that requires\n\n450\n00:31:59,440 --> 00:32:01,260\nruntime validation, you know,\n\n451\n00:32:01,560 --> 00:32:05,960\nfor your own user's sake, let them bring whatever they want to the table in terms of validation.\n\n452\n00:32:06,580 --> 00:32:07,080\nYeah,\n\n453\n00:32:07,540 --> 00:32:09,260\nI think that's such a great take.\n\n454\n00:32:10,840 --> 00:32:12,540\nSo when I was working at PayPal,\n\n455\n00:32:12,920 --> 00:32:16,980\nthis story relates, but it's gonna be a little bit long. So when I was working at PayPal,\n\n456\n00:32:17,680 --> 00:32:18,180\nI\n\n457\n00:32:19,660 --> 00:32:27,540\nwanted to solve some CSS problems that we had. Long story short, I created Glamorous, which is a CSS and JS library inspired by styled components.\n\n458\n00:32:29,060 --> 00:32:29,560\nAnd\n\n459\n00:32:30,040 --> 00:32:36,400\nthey were different enough that it made sense for them both to exist. Then later on, a year or 2 down the road,\n\n460\n00:32:37,540 --> 00:32:39,520\nsomebody who helped me with Glamorous\n\n461\n00:32:40,160 --> 00:32:41,440\ndecided to rewrite\n\n462\n00:32:42,280 --> 00:32:44,020\nthe CSS and JS implementation,\n\n463\n00:32:45,040 --> 00:32:47,540\nwhich was called Glamour, written by Sunil Pai,\n\n464\n00:32:48,160 --> 00:32:58,820\ndecided he wanted to rewrite that from scratch and do something else, and then built effectively what was same thing as Glamourous but he packaged it all up into 1 thing called Emotion.\n\n465\n00:33:01,780 --> 00:33:06,960\nAnd that library was smaller, faster, and better in every single way\n\n466\n00:33:07,580 --> 00:33:14,320\nto Glamorous. And so when I looked at that and I was thinking, okay, so what emotion can I adopt? And I just thought, there's\n\n467\n00:33:14,640 --> 00:33:17,460\nnot a single reason that Glamorous should exist because\n\n468\n00:33:17,860 --> 00:33:18,360\nthis\n\n469\n00:33:18,660 --> 00:33:27,760\nemotion does everything that Glamorous can do. There's no trade-off here where Glamorous comes out on top. And so I deprecated Glamorous and I said, everybody move over to Emotion\n\n470\n00:33:28,200 --> 00:33:28,940\nand Tejas\n\n471\n00:33:29,680 --> 00:33:36,720\nput together a code mod and the rest is history, it was great. But that's not the case for Zod and Valbot.\n\n472\n00:33:37,360 --> 00:33:39,360\nThere's actually like legitimate\n\n473\n00:33:39,880 --> 00:33:46,140\nreasons for each of these to continue to exist. And I really appreciate your breakdown of the trade-offs there.\n\n474\n00:33:46,980 --> 00:33:50,580\nSo yeah, thank you for that. For me, when I saw Valobot,\n\n475\n00:33:51,460 --> 00:33:54,980\nI feel similar about the developer experience\n\n476\n00:33:55,840 --> 00:33:56,500\nto you.\n\n477\n00:33:57,100 --> 00:33:58,120\nAnd what really\n\n478\n00:33:58,820 --> 00:34:08,260\nmade me just stick with Zod, like this was, if for no other reason, this would be enough, Conform, my form library, only supports Zod, it doesn't support Valbot.\n\n479\n00:34:09,400 --> 00:34:10,340\nAnd so I'm\n\n480\n00:34:10,860 --> 00:34:13,760\nlike, that does it for me, because Conform is awesome,\n\n481\n00:34:14,179 --> 00:34:15,600\nand Zod is great.\n\n482\n00:34:16,060 --> 00:34:29,860\nWhen I first started with the Epic stack, I was trying to figure out, okay, how can I make sure that Zot is only a server side thing so that I don't bring in Zot into the client? And the longer I spent working on that, the more I realized that does not matter.\n\n483\n00:34:30,199 --> 00:34:31,940\nLike It is totally fine\n\n484\n00:34:32,659 --> 00:34:43,500\nto bring Zot along for the ride. It's really not that big. And on top of that, when you have server rendering and the user sees the whole page while the JavaScript is loading in the background, like,\n\n485\n00:34:43,940 --> 00:34:45,520\nso what? That's fine.\n\n486\n00:34:45,860 --> 00:34:59,700\nEverything, especially with Conform, it's progressively enhanced, so the forms will still work and everything, and the validation still runs on the server, like it's all gonna work just fine. So I don't mind so much that there's so much JavaScript in the client. And Zot, it really, it's not that much. So\n\n487\n00:35:00,480 --> 00:35:02,520\nAnyway, I appreciate that breakdown\n\n488\n00:35:03,340 --> 00:35:04,740\nof the trade-offs there.\n\n489\n00:35:05,280 --> 00:35:09,900\nAnd I'm glad that Valobot exists for those same reasons. That makes a lot of sense.\n\n490\n00:35:10,200 --> 00:35:14,180\nAbsolutely, yeah. If you're trying to go 0 JS, you know, like\n\n491\n00:35:14,480 --> 00:35:18,300\nGoHamp, Valobot's really good for it. Or like minimal JS,\n\n492\n00:35:18,640 --> 00:35:22,100\nat least. But yeah, that's a really good point as well, where if you're,\n\n493\n00:35:22,540 --> 00:35:26,400\neven if you are server-side rendering and then sending a bundle for hydration,\n\n494\n00:35:28,380 --> 00:35:32,580\nthe user's got something to look at as it comes down. That's a good call. Yeah.\n\n495\n00:35:33,520 --> 00:35:41,080\nWell, awesome. I've really enjoyed this chat, Colin. I think we're winding down to a close. Is there anything that we didn't talk about that you'd like to mention?\n\n496\n00:35:42,380 --> 00:35:46,660\nWell, something that I put in the form as I was scheduling this\n\n497\n00:35:47,000 --> 00:35:47,640\nis that\n\n498\n00:35:48,920 --> 00:35:56,940\nI'm far from a diehard, actually, but I did some research on this. I was, lived about a mile and a half away from the coworking space where I usually work,\n\n499\n00:35:57,240 --> 00:35:58,060\nup until recently.\n\n500\n00:35:58,380 --> 00:36:02,720\nAnd I was looking at my options for, you know, last mile electric transport.\n\n501\n00:36:03,420 --> 00:36:08,140\nAnd I know that you're a bit of an evangelist of the 1 wheel.\n\n502\n00:36:08,680 --> 00:36:09,180\nAnd\n\n503\n00:36:09,780 --> 00:36:11,680\nyou were giving people lessons at RemixConf\n\n504\n00:36:12,540 --> 00:36:22,500\nlast year, which I thought was just fantastic. I was on my way to the airport with my suitcase and I see a gaggle of people getting, you know, 1 wheel lessons from Ken. And I was like,\n\n505\n00:36:23,140 --> 00:36:25,780\nI've made a huge mistake. I didn't make the points in my flight.\n\n506\n00:36:27,540 --> 00:36:30,140\nBut what I ended up getting was an EUC\n\n507\n00:36:31,360 --> 00:36:31,860\nbecause\n\n508\n00:36:32,540 --> 00:36:33,040\nunfortunately\n\n509\n00:36:34,060 --> 00:36:38,500\nthey win on basically all the metrics, you know, like all the specs, except they just\n\n510\n00:36:38,940 --> 00:36:40,460\nlook way lamer.\n\n511\n00:36:42,900 --> 00:36:44,440\nI a hundred percent agree.\n\n512\n00:36:45,060 --> 00:36:47,700\nYeah, that's funny. Like you can go way faster.\n\n513\n00:36:48,080 --> 00:36:54,560\nI actually, when I think about that, so, okay, actually you continue. What kind of unicycle did you get?\n\n514\n00:36:55,120 --> 00:36:59,180\nI got the 1 that was at for sale at an insane price\n\n515\n00:36:59,540 --> 00:37:01,220\non Craigslist. I actually\n\n516\n00:37:01,680 --> 00:37:19,180\nnot even sure what the brand name is. I like taken it out 3 times and learned like, oh, I've got a lot of catching up to do because you need to actually have like a core strength and balance to ride in the UC, which is another actually huge strike against it. You know, you got to have some sense of balance for 1 wheels.\n\n517\n00:37:19,640 --> 00:37:21,140\nThe EUC, it was\n\n518\n00:37:21,460 --> 00:37:22,660\nnot coming naturally\n\n519\n00:37:23,000 --> 00:37:23,860\nto me immediately.\n\n520\n00:37:25,440 --> 00:37:28,680\nYeah, I've never ridden 1 before, I would like to sometime,\n\n521\n00:37:29,440 --> 00:37:36,040\nbut I know some of those things can go like 40, 50, maybe even 60 miles an hour. And it's just like,\n\n522\n00:37:37,420 --> 00:37:38,260\nno thanks.\n\n523\n00:37:39,060 --> 00:37:46,400\nYeah, there's like an off-road community as well of people who are just like motorcycle helmet, like all pads everywhere, just going down like\n\n524\n00:37:46,920 --> 00:37:48,620\nmountain biking trails and stuff.\n\n525\n00:37:49,760 --> 00:37:58,840\nIt's true madness. I think the range on mine is something like 40 miles. Yeah, that's nice. I could like, yeah, I'm in Seattle, I could do a loop around\n\n526\n00:37:59,320 --> 00:38:04,040\nall the way to Redmond, Bellevue, and across the bridge, all the way back around\n\n527\n00:38:04,860 --> 00:38:13,680\njust on 1 charge, which is wild. That is super wild. This is me really just putting out a plea. I don't know if you have some contacts at the Onewheel company.\n\n528\n00:38:14,440 --> 00:38:21,240\nWe gotta get the 40 mile range version of the 1 you're going. That would be so nice. So I have the GT and\n\n529\n00:38:22,280 --> 00:38:23,100\nit's fantastic.\n\n530\n00:38:24,140 --> 00:38:30,260\nI can leave from my front doorstep and make it all the way to Ryan's house, which is about 25 to\n\n531\n00:38:30,900 --> 00:38:32,540\n27 miles apart.\n\n532\n00:38:32,980 --> 00:38:35,140\nAnd I get to his house with 2%.\n\n533\n00:38:36,180 --> 00:38:36,680\nIncredible.\n\n534\n00:38:37,200 --> 00:38:38,460\nYeah, it's barely\n\n535\n00:38:39,720 --> 00:38:45,300\nand I'm not going as fast as you are either so it does take me longer because I get up to about 20 miles an hour\n\n536\n00:38:45,620 --> 00:38:54,160\nAnd that's about as fast as I can get. But, That's good though. That'll, Yeah, pretty fast. Yeah, that'll be a long time. I wouldn't want to go much faster. Exactly.\n\n537\n00:38:55,280 --> 00:38:55,520\nBut,\n\n538\n00:38:56,140 --> 00:38:58,520\nyeah, that would be super nice to have\n\n539\n00:38:58,840 --> 00:39:02,840\nthat much more battery, so. We'll get there, we'll get there.\n\n540\n00:39:03,840 --> 00:39:05,360\nWe need better battery technology.\n\n541\n00:39:05,800 --> 00:39:08,100\nEverybody's working on it. That's right.\n\n542\n00:39:08,440 --> 00:39:11,880\nYeah, well, Colin, thank you so much. This has just been such\n\n543\n00:39:12,260 --> 00:39:13,680\na pleasure to chat with you\n\n544\n00:39:14,280 --> 00:39:15,640\nand from everybody watching\n\n545\n00:39:16,120 --> 00:39:19,140\nand from me to you, just thank you for all your contributions\n\n546\n00:39:19,600 --> 00:39:20,100\nin\n\n547\n00:39:20,560 --> 00:39:27,180\nthe web and especially your work on Bunn right now too. Super stoked about all that work, so thank you for that work too.\n\n548\n00:39:27,740 --> 00:39:34,660\nAnd yeah, keep up the good work. Thank you so much, Kent. And right back at you. So psyched for Epic Web Dev. So\n\n549\n00:39:35,020 --> 00:39:42,100\nyeah, thanks for having me. Thank you so much. Oh, 1 last thing. What's the best way for people to get in contact with you?\n\n550\n00:39:43,380 --> 00:39:43,880\nTwitter\n\n551\n00:39:44,180 --> 00:39:46,800\nstill. I'm there, at Colin Hacks.\n\n552\n00:39:48,060 --> 00:39:49,320\nOr Colin at ColinHacks.com.\n\n553\n00:39:49,900 --> 00:39:52,520\nYou know, good old-fashioned email. All right, solid.\n\n554\n00:39:53,020 --> 00:39:54,260\nOK, hey, thanks a lot.\n\n555\n00:39:55,080 --> 00:39:56,680\nWe'll see everybody later.\n\n556\n00:39:57,800 --> 00:39:58,520\nBye, Ken.",
            "text": "[00:00:00] Kent:\nHey, everybody. How's it going? Colin? \n\n[00:00:03] Colin:\nNot too bad. How you doing? \n\n[00:00:05] Kent:\nDoing great. Everybody, this is my friend Colin. And Colin is the creator of Zod. And you probably by this point in the Epic Web workshop, you've probably used Zod a bit. We use Zod a lot in this workshop series. So I think, I definitely appreciate everything that Colin has done. \n\n[00:00:25] 1 thing, before I let Colin introduce himself, 1 thing I want to mention is that if you enjoy the type safety that we get across the network chasm between our loader and our UI and our actions in our UI, you have Colin to thank for that. So I was at the first RemixConf and Colin was talking to \n\n[00:00:46] me about how, listen, this generic nonsense that you're doing is not great, it can be better. Colin put his fingers on the keyboard to actually make it better. And so, We're just super grateful for Colin in doing that for the Remix community. And then also \n\n[00:01:06] Zod is just like, so many people in the web world are using Zod, whether within Remix and outside of Remix, of course. So with that little intro from me, and also all of that said, Colin's just like a pleasure to get to know and to chat with. I really enjoy hanging out and chatting with Colin. So happy to have you here \n\n[00:01:26] Colin. Why don't you give your own introduction to yourself? \n\n[00:01:29] Colin:\nYeah, sounds great. I'll just spin that back at you and say you are a just phenomenal person to meet. People really got to go to all the Remix Comps, do whatever you got to do to meet Ken in person because he's just like truly as just incredibly nice and kind as You would expect based on what you see. \n\n[00:01:47] Kent:\nThis is just like a little interview of us like saying nice things about each other. \n\n[00:01:52] Colin:\nOnly way I know. Thank you. Don't want to take too much credit for the remix type safety bit. You guys had a system in place, I guess, maybe at the time you were defining your loaders and then the kind of recommended practice was to just kind of extract out the return type \n\n[00:02:12] of it with just the built-in TypeScript built-ins, return type is there to pull out the return type of a function. And so I think just a few, saved a few characters there by trying to support it where in the use loader hook you could just put type of loader. And that was all I did, but you guys \n\n[00:02:32] had type save. It's just a little, nothing. \n\n[00:02:35] Kent:\nIt was way better. So for those listening who weren't back in the day, you could make a, like, you could say whatever the return type of the loader is now pipe that into the use loader data generic. But the problem was if you wanted to use return anything but like the actual object, \n\n[00:02:55] like if you want to return a call to JSON to turn it into JSON so that you could supply headers, then you're toast. And so you had to then extract the logic to create the object to a separate function and then do your generic nonsense up there. And it was not fun. No, Colin, it's way \n\n[00:03:15] better now. So thank you. So Colin, do you want to talk about really quick where you work? Cause I think people will find that interesting too. \n\n[00:03:24] Colin:\nYes, I'll stop dodging the question of introducing myself. I'm Colin, I work at BUN, I'm a 2 developer relations there. Before that, I was at EdgeDB. And before that, I was, you know, working on Indie Hackery startup stuff, which is kind of a bit of the origin story \n\n[00:03:44] for Zod and some of the other, you know, like the version 0 of TRPC and things like that are some tools that I was kind of working on as I was trying to, you know, build this like piece of medical, like basically medical record software back in like 2019. And at the time, there was a kind \n\n[00:04:04] of like a transition to from JavaScript to TypeScript and to kind of like push towards like end-to-end type safety was kind of in its infancy. You know, back then, 2019, like the only time I'd even heard the term end-to-end type safety was in a random Prisma blog post, where they were kind of pushing this \n\n[00:04:25] as a new concept. People didn't really know what it meant when you said it, and the tooling just really wasn't there. So as it turns out, I just got extremely lucky to be, you know, A, trying to build like this software that involved a lot of complexity, you know, data modeling. I know you've got a whole 64 unit course \n\n[00:04:45] on data modeling here. Very hard problem to solve in the general case. And if you mess it up at the beginning, then your migration story can be really painful and messy. \n\n[00:05:00] Kent:\nYou're gonna have to predict the future a little bit, which is awful. \n\n[00:05:03] Colin:\nYes, for sure. So yeah, I just kind of got lucky to come into TypeScript ecosystem at a time where there was really just a lot of kind of green field tools to be made. Zod was not much more than YUP \n\n[00:05:24] with better type inference at the time where it launched. And there's, since now we've added some things that YUP doesn't have. But also I think 1 of the major appeals of Zot is, you know, it kind of didn't include things, you know, aspects of the YUP API that didn't lend themselves well to like TypeScript, type inference stuff. So kind of \n\n[00:05:44] like pulling out some of the chaff from this very bloated API. That was more from kind of a bygone JavaScript era, I guess. \n\n[00:05:54] Kent:\nYeah, yeah, absolutely. I used YUP in those bygone days. And yeah, the type aspect of Zod is like really special. So I'm sure we'll delve into that a little bit further, but I wanted to ask you a little bit about the origin story for Zod and TRPC \n\n[00:06:15] and like what's the relationship there? I know Alex is, as far as I understand, Alex is still the primary maintainer of TRPC. And so how did that transition happen? All of that, I'm kind of interested. \n\n[00:06:28] Colin:\nYeah, so This bit of software I was working on that I alluded to, I decided to be too clever for my own good. And so I decided to try to avoid some of this migration pain I was alluding to. I used Neo4j as my backend database, which is, even the Neo4j \n\n[00:06:49] team would tell you, don't do that for your core application database, because it's schema-less. It's like a graph database, and everything is just nodes with edges to other nodes, and both nodes and edges can have properties, and that's kind of the whole thing. Yeah, schema-less, nothing really to enforce \n\n[00:07:09] that the data that's in your database is at all, you know, has any kind of expected structure. Not only, you know, It's not like a node isn't even like, you can't even attach like a particular type to it. You can't say like, this is a user node. You can just say, this has the label user and it can also have arbitrarily many other labels as \n\n[00:07:28] Kent:\nwell. Interesting. \n\n[00:07:30] Colin:\nSo, you just accidentally insert something into your database that's both a user and like a medical condition, and your database is just like, great, that seems fine to me. Let's go with that. \n\n[00:07:42] Kent:\nYeah, it definitely sounds like a tool that has a purpose, but what you're using it for is probably not that purpose. \n\n[00:07:49] Colin:\nRight, yeah. I was definitely like, oh yeah, you know, I was in this like, it's all, you know, this kind of like lispy, like, oh yeah, whatever, like go with the flow, totally. Like your data can be anything. I'll be able to like attach like edge properties to like implement new features and not have to worry about like actual relational \n\n[00:08:09] migrations, whatever. A huge mistake. It turns out, you know, I've learned. But you know, the, the, what this led me to is basically like I needed to validate every single bit of data before I wrote it to my database and make sure that it conformed to, you know, an actual schema that I had to find. Exactly. \n\n[00:08:31] And those schemas were, you know, I started off basically trying to define them with some of the existing tools that were out there for schema validation. None of them really like made the cut at the time in terms of type inference. And so that's the origin story for Zod. And that was kind of the source of truth for my schema information, \n\n[00:08:51] you know, for this big medical application that had like 200 different models or something. And that's, you know, that's kind of like where it came from. And then that's also why like kind of recursive types were an important part of the story because my data model, you know, medical data \n\n[00:09:11] is very like heavily connected, strongly connected. And so kind of like having like a good way to do recursive types didn't really exist in anything except IOTS, which was basically I used the same approach as IOTS for Zod. And not to, you know, \n\n[00:09:31] spoil anything, but, you know, proper recursive types that are, have a lot better developer experience than is the current API in Zod3. It's gonna be 1 of the main features for Zod4. Where you can just kind of like use getters inside of your just like z.object declaration. And, you know, \n\n[00:09:51] it turns out TypeScript is good enough with getters to just like define schemas that, you know, reference each other and have all the type inference work automatically without having to like do the thing right now where you have to actually cast it to like Zod type, like to the base class. \n\n[00:10:07] Kent:\nInteresting, okay. \n\n[00:10:08] Colin:\nThat's something to keep your eyes peeled. I don't know if it'll be out by the \n\n[00:10:11] Kent:\ntime of course for us or not. That is actually pretty cool because I've noticed that Zod is fairly stable. Like you haven't done a ton of releases, which some people are like, oh, where are the features and stuff? But others, like for me, I'm like, no, please, like keep it the way it is. It's working great. Like, It sounds like there are a couple, there \n\n[00:10:31] are some challenges with it and everything, but I appreciate the stability. \n\n[00:10:37] Colin:\nYeah, it's definitely, had a lot of fantastic contributions to Zod, over the 3 and a bit years that it's been around now. But more of the feature requests that I see these days are things that I either like, and very intentionally not including, or are like, clearly too niche \n\n[00:10:57] to be, adding another 200 bytes or whatever to the bundle size to support like some kind of obscure form of UUID or something, I don't know. \n\n[00:11:09] Kent:\nOh yeah, yeah, sure. So you mentioned earlier that the first time you had really heard about end-to-end, or what did you say? End-to-end type safety? \n\n[00:11:20] Colin:\nEnd-to-end type safety, yeah. Which is now like all over the TRPC website and this can talk about a little more. \n\n[00:11:27] Kent:\nSo that was on, from Prisma. I remember hearing about that idea from Apollo years ago and the GraphQL folks, they were just constantly like, this is so amazing. And this is, I heard about this before I was really into TypeScript. It was like maybe 2017 or something. That was actually around the time I started getting into TypeScript. But \n\n[00:11:47] I saw that and I'm like, I mean, that seems really cool, but then you have to do all this stuff that requires like a GraphQL thing, which is a very serious investment, time and effort, and like, it doesn't really suit all web applications, but the DX is so nice that a lot of people just went for it. And \n\n[00:12:07] so I think that kind of leads us in naturally to TRPC and its role in, and I want to hear about its origin story as well. \n\n[00:12:15] Colin:\nAbsolutely, yeah. You know, certainly 2019 was, you know, we were already pretty well into the kind of isomorphic JavaScript, like JavaScript everywhere, server and client kind of movement. You know, At the time, Next.js had kind of like relatively recently moved \n\n[00:12:35] away from get initial props and had their like move towards, you know, get server-side props, get static props, I think was maybe came in 2018 or something. And so it kind of like had reached a bit of its final form, at least up until now with app directory, it's kind of like a new evolution of it. But you know, \n\n[00:12:55] having just like this feeling of like, this is truly all 1 code base, like you don't have even a separate directory for your server and client. Like it's all just right there. You may have your API routes kind of tucked into the like pages slash API or whatever. But like, it really is just like \n\n[00:13:16] all just TypeScript. They did all the compiler magic for you where you could just feel like you were importing types straight from your server into your client. You've got your API route that has your Zod schema and you can just import the type from that over into your front end code, wherever you're \n\n[00:13:36] defining a form or something and using that same schema in your form. I did try using GraphQL as I was working on this application in 2019. And it basically just like, it kind of like rubbed me the wrong way. I remember at the time I had to have, you know, \n\n[00:13:58] this kind of just like a pipeline of cogeneration tools. Yeah. Which is part of the, you know, the sales pitch is like, yeah, your GraphQL schema, it's there, it's introspectable, it's like in a serializable format and you can just code gen whatever you need in any language ecosystem, which I still think like definitely a time and a place for that. And that's \n\n[00:14:18] super valuable. But when you know you're gonna be all TypeScript for your front end and your back end, and you're not planning to build any mobile apps or whatnot, it is a lot of friction in the developer experience. There's like, changes have to propagate through your code in this way \n\n[00:14:38] that felt kind of like, pain, you know, kind of just like, it felt very slow and painful. You'd upgrade your GraphQL schema, then you had to update your queries, then you had to update all your query mutations, and then throughout all of this, you'd have to be like regenerating the TypeScript types for all these things. And ultimately, \n\n[00:14:59] I just kind of bumped on it. And I had actually seen a project from a friend of mine named Kevin Kwok, and that was called Obvious RPC. And it was kind of just like a way for you to have like a file where you export a bunch of functions, you're able to like \n\n[00:15:19] kind of import all of those and extract like the return types of all of them. And then just kind of like start using those inferred types in your client side code. There was no sense of like a router or anything. It wasn't kind of TRPC like where you had like an actual like router class that you can \n\n[00:15:39] kind of like add procedures onto with, you know, change method calls, you know, like dot route, whatever, you know, in case you can't tell from Zod's API, I like method calls, I like fluent APIs. His thing was a little more magical where you're just exporting these functions and then you've got like kind of a config file to, you know, tell it like how to handle \n\n[00:15:59] middleware and things like that. I basically thought it would be kind of a nice experience to have something that looks at least kind of familiar to like an Express user or a Cobo user. You actually have like this router, it's a little more declarative And you're just kind of like adding procedures onto it. And that was the birth of \n\n[00:16:19] TRPC v0. At the time I was still working on the startup. I was using my v0 version, you know, internally, like in production, as I built this app. But ultimately at the time Zod was getting more popular by a long shot than TRPC. And \n\n[00:16:39] it was kind of like the combination of working on the startup and trying to put more effort into Zod. Basically I just kind of didn't have bandwidth for TRPC, even though I like, believed in it and you know, thought that it like really ought to be, you know, like, used more widely like this pattern in general. And so I just tweeted out saying \n\n[00:17:00] like, yeah, I've got like, a handful of open source projects that I've been working on that I have internally that I don't really have time for. And I just, you know, you can still go see this tweet. TRPC was in a list of 4 projects that I kind of like had proofs of concept of. But then Alex, you know, messaged me back and said, like, \n\n[00:17:20] I actually have something pretty similar to that, that I've been working on myself. So a lot of these ideas were kind of in the air at the time. And then he was like, kind of took over TRPC and that repo and the branding of it and put together v1 really quickly and it was immediately way more mature, \n\n[00:17:40] way more feature complete. Alex gets basically all the credit for TRPC in its modern incarnation, especially with some of the major API changes in version 10 that I think are just like phenomenal and like really like made it what it is today. So yeah, all props \n\n[00:18:00] to Alice for TRPC, he's killed it. \n\n[00:18:02] Kent:\nYeah, yeah. Well, it's definitely gotten really, really popular and just the idea of end-to-end type safety is once you taste that fruit, you can't go back. Like it's just so, so nice. So yeah, thank you for your contributions on both of those. And shout \n\n[00:18:22] out to you, Alex, if you ever see this. Thank you. And all contributors, we all know open source is not built by a single person in Nebraska. It is, yeah, there's definitely a lot, a lot that goes into that. \n\n[00:18:39] Colin:\nAlthough sometimes, that guy in Nebraska, he really does, he is like the foundation for like, you know, billions of dollars in value for sure. It's the XKCD, the 1 little pillar that's supporting the entire ecosystem. That's some 4 person you've never heard of. \n\n[00:18:57] Kent:\nYeah, yeah. I remember when that was going around, Sean Larkin, co-maintainer of Webpack, lived in Nebraska at that time. \n\n[00:19:07] Colin:\nAnd I \n\n[00:19:08] Kent:\nalways thought that was kind of funny. So yeah, great. Thank you for sharing some of those motivating factors. I think that helps contextualize the ideas around these technologies that we use. In Remix, I have yet to find a use case for TRPC. \n\n[00:19:28] I don't know if you'd agree with me that there definitely could be some use cases for them, but for the most part, the loader action methodology around Remix kind of makes TRPC unnecessary. Is that right? From your perspective? \n\n[00:19:45] Colin:\nThat's, I think certainly the loader does for, you know, for reads. I can see a scenario where people might consider setting up TRPC for mutations if like they want to break out of, and forgive me, because I'm a little behind on some of the work in Remix on \n\n[00:20:05] like, kind of like, you know, nested JSON payloads for posts, like for writes, which I know is like, you know, some, I don't really know what the current status quo is on that. I know like form data kind of just doesn't lend itself super well to that kind of thing. And that's unfortunate, \n\n[00:20:26] but it lends itself extremely, extremely well to handling file uploads and things that, you know, you need to go through that form data attraction. And so it does seem, and we've discussed this on Twitter, that there's not really like currently a perfect, a perfect version where you're able to maybe have like, you know, a nicely validated \n\n[00:20:46] kind of like nested, you know, a form that kind of produces like a nicely validated nested JSON structure and then be able to like, just like send that over to your backend. I don't know, you can speak more. \n\n[00:20:58] Kent:\nYeah, yeah. So actually maybe We'll stick this segment of our interview right after we do the nested and dynamically, you know, arrays of form data. Cause yeah, in that exercise, I have this like big thing that explains why form data is so bad at this. And just cause it's super not designed \n\n[00:21:18] for that sort of thing. And Conform is the library that we use in the workshop by Edmund, and we're gonna have Edmund on these interviews too. But Conform is just brilliant and uses Zod, the Zod schema to enable these types of field sets. And so, \n\n[00:21:39] yeah, that is definitely a huge pain point. And in recent, like the last couple of months, that has been pretty well solved by Conform, which is just stellar. It's so nice. So I think, like, and then on top of that, like if you're okay going with the \n\n[00:21:59] TRPC, if that's what you want for, to solve that particular problem, you can actually still submit JSON using lower level or other APIs from Remix as well. So I do think that TRPC has a better place in other frameworks that haven't \n\n[00:22:19] quite embraced the forms or if that's not an important aspect of the web app that you're building. But Zod for sure has like just a beautiful place in the apps that I build anyway. So on this- \n\n[00:22:35] Colin:\nIt slots in, you know, really nicely, I would say, with Next.js, pretty app-tier. And then some of the other things that are a little more hands-off in terms of just like, you know, you've got to figure out the whole data layer for yourself, which was most frameworks really until like Next.js \n\n[00:22:56] to like a limited extent and then Remix is where it's like, you know, the loader concept and loaders and action concepts are like integrated into your, like, you know, the files system structure for the framework, you know, in a way that, like is really smart and like unlocks just like all the good stuff that Remix gives you. And so, yeah, \n\n[00:23:16] we'll see if more of these, whatever, like even next-gen frameworks that are coming out, get more or less opinionated in terms of how like data fetching or mutations happen. \n\n[00:23:29] Kent:\nYeah, you know, I think that TRPC had a role in the motivation behind what all these frameworks are doing. It's just like a very natural progression of, yeah, TypeScript's pretty cool. I sure wish that I had type safety over this network boundary. And that, so \n\n[00:23:49] that I think had a major influence there. So on the Zod subject, a couple weeks, maybe months ago, we had this new library come out called Valobot. At least, I'm not sure how they market themselves right now. I \n\n[00:24:09] should probably look, but when it came out, it was like smaller version of Zod and faster. And like, basically, I am Zod, but better. Which is always kind of a Funny feeling that I get when I see something marketed as like this but better but \n\n[00:24:30] I don't mind it so much if it comes from the author of the thing, but it feels kind of funny coming from somebody else. So yeah, I'd love to hear your take on Valobot. And I've got my own kind of opinions from what I've seen so far, but yeah, love to hear your take. \n\n[00:24:47] Colin:\nI'm very thrilled that Valobot exists. And I'd be way more annoyed. You know, when Zob came out, I would say the improvements that it provided were quite marginal on the status quo, marginal improvements over YUP, which had like a lot of weirdness in its \n\n[00:25:07] API, like things like when you declare an object schema, you know, all of your keys are optional by default, unless you do not require it on them or whatever. That's just like kind of like an incompatibility with the way we think about data modeling as TypeScript, you know, engineers. And so changing the API, you know, some little changes to \n\n[00:25:27] the API to bring it in line with the TypeScript ethos, you know, turned out to be like something that a lot of people were looking for. But ultimately, like, you know, the bones of the thing are like quite similar to to YUP or like, you know, the bones of Zod are quite similar to YUP or other existing options. I'm I love that Valobot exists because it's like a \n\n[00:25:47] dramatically different take. And it's like a very clean trade-off that was known to me when I was designing the API for Zod. It's truly a trade-off between what I would consider to be developer experience, like a trade-off between having a trainable fluent \n\n[00:26:08] API, that's like easier to learn and more discoverable and being tree shakable. And it's just like kind of 1 of these law of the universe things where, you know, I personally don't really like the idea of like importing, you know, having a separate import for like every single kind of like bit of functionality \n\n[00:26:28] that I need from a library. It's you know, it's common I think with monorepos to kind of like end up publishing different bits of functionality for your library to like different packages. This is not a great example, but you know, the like, at trpc slash client at trpc slash server \n\n[00:26:48] at trpc slash next. Like you kind of like have all these different packages and you have end up with a lot of TRPC related imports just to, you know, depending on what kind of bit of bits of functionality you need. I, For the most part, I've been building apps that are either all \n\n[00:27:08] server-side rendered or single-page applications where I kind of had already lost the bundle size fight or it was irrelevant. I haven't built like a blog or something recent that isn't like entirely statically generated or like SSR. \n\n[00:27:29] So things where like the bundle size of what you send to the client matters a lot. And these kinds of content driven sites that are common for users of Astro, for instance, they are in a scenario where 9 kilobytes to ship down all of Zod is like, \n\n[00:27:50] you know, not a worthwhile trade off, especially if you're trying to like, make sure that your site loads quickly for people who are on like, you know, 3G connections, things like that. Yeah, I'm like very sympathetic to that, but ultimately, if I redesign \n\n[00:28:10] Zod today, I would stick with the Kergan API, the Chainable API, Because I like the idea of importing everything as Z, even if I'm importing the whole package. I like the idea of, you know, if you have an instance of Zod, you know, a Zod schema instance, you know the full set of methods that are gonna be available on it. In your IDE, \n\n[00:28:30] you can press dot and then see them all listed and you can arrow through them. Yeah, discoverability. The discoverability with IntelliSense, like that feels like if you're optimizing for developer experience, which is, you know, Zod's whole thing, then that's kind of the only move. \n\n[00:28:50] I think it's basically extremely clever what Fabian did, Fabian Hiller, who also has contributed to Zod and sent me a pre-release version of Valobot and is very kind to shout out Zod on stocks and stuff. But it's very clever what he did where in Zod you would do \n\n[00:29:10] z.string to declare a string schema, and then you chain methods from there to add refinements or add a transform or make it optional, yada yada. For his API, you do z.string, that's a function, and then you pass in an array of your additional validations that you want to do \n\n[00:29:31] on that string schema. And a lot of those, like the names of, you know, you just pass in basically a bunch of little validators that you would import, you know, like have a separate import for. So something like, you know, ends with, or, you know, length or something. You can just kind of like import those in and do like z.string parentheses and then \n\n[00:29:51] pass into that your array of all your kind of sub-validations. And that lets you do the tree shaking because if you're not using the min-length validator, that gets stripped away when you do your final build just with tree shaking that's built into modern bundlers. Whereas for Zod, \n\n[00:30:12] you know, dot ends with it's like a method on the Zod string schema. And that's just all those method implementations are gonna get pulled in if you have any instance of ZodString anywhere in your code base. And then that actually gets compounded because a lot of the methods that people really rely on in \n\n[00:30:32] Zod are, they're on the base class that all schemas inherit from, things like .optional, .nullable, refine, transform, super refine, whatever, things like that. Those are on the base class and they return instances of subclasses. So like .optional returns a Zod optional instance. So \n\n[00:30:52] if you use any instance of any Zod schema, then the implementation of Zod optional is gonna get pulled in because it's used in the implementation of the dot optional method that's on the base class. So, you know, ultimately everything ends up getting pulled in. And, you know, the move for Zod is like, you know, try \n\n[00:31:12] to make the bundle size as small as possible. But, you know, that's always been a secondary concern for me after developer experience. But you know, by all means, like I think the more the merrier. I think all the tools that are out there that want to support, you know, I prefer when \n\n[00:31:32] tools don't, you know, rely exclusively on SOD, you know, third party ecosystem tools. I think it generally makes sense to try to, like TRPC does, support kind of like every possible validation library, you know, just like let people pass in any object with a dot parse method on it or something, you know, which is not dissimilar \n\n[00:31:52] from what TRPC does. And, you know, it's always good if you're going to be building something that requires runtime validation, you know, for your own user's sake, let them bring whatever they want to the table in terms of validation. \n\n[00:32:06] Kent:\nYeah, I think that's such a great take. So when I was working at PayPal, this story relates, but it's gonna be a little bit long. So when I was working at PayPal, I wanted to solve some CSS problems that we had. Long story short, I created Glamorous, which is a CSS and JS library inspired by \n\n[00:32:26] styled components. And they were different enough that it made sense for them both to exist. Then later on, a year or 2 down the road, somebody who helped me with Glamorous decided to rewrite the CSS and JS implementation, which was called Glamour, written by Sunil \n\n[00:32:47] Pai, decided he wanted to rewrite that from scratch and do something else, and then built effectively what was same thing as Glamourous but he packaged it all up into 1 thing called Emotion. And that library was smaller, faster, and better in every single way \n\n[00:33:07] to Glamorous. And so when I looked at that and I was thinking, okay, so what emotion can I adopt? And I just thought, there's not a single reason that Glamorous should exist because this emotion does everything that Glamorous can do. There's no trade-off here where Glamorous comes out on top. And so I deprecated Glamorous and I said, everybody move over to Emotion \n\n[00:33:28] and Tejas put together a code mod and the rest is history, it was great. But that's not the case for Zod and Valbot. There's actually like legitimate reasons for each of these to continue to exist. And I really appreciate your breakdown of the trade-offs there. So yeah, thank you for \n\n[00:33:48] that. For me, when I saw Valobot, I feel similar about the developer experience to you. And what really made me just stick with Zod, like this was, if for no other reason, this would be enough, Conform, my form library, only supports Zod, it doesn't support Valbot. \n\n[00:34:09] And so I'm like, that does it for me, because Conform is awesome, and Zod is great. When I first started with the Epic stack, I was trying to figure out, okay, how can I make sure that Zot is only a server side thing so that I don't bring in Zot into the client? And the longer I spent working on that, the more I realized that does not matter. \n\n[00:34:30] Like It is totally fine to bring Zot along for the ride. It's really not that big. And on top of that, when you have server rendering and the user sees the whole page while the JavaScript is loading in the background, like, so what? That's fine. Everything, especially with Conform, it's progressively enhanced, so the forms will still work and everything, \n\n[00:34:50] and the validation still runs on the server, like it's all gonna work just fine. So I don't mind so much that there's so much JavaScript in the client. And Zot, it really, it's not that much. So Anyway, I appreciate that breakdown of the trade-offs there. And I'm glad that Valobot exists for those same reasons. That makes a lot of sense. \n\n[00:35:10] Colin:\nAbsolutely, yeah. If you're trying to go 0 JS, you know, like GoHamp, Valobot's really good for it. Or like minimal JS, at least. But yeah, that's a really good point as well, where if you're, even if you are server-side rendering and then sending a bundle for hydration, the user's got something to look at as it comes \n\n[00:35:30] down. That's a good call. \n\n[00:35:32] Kent:\nYeah. Well, awesome. I've really enjoyed this chat, Colin. I think we're winding down to a close. Is there anything that we didn't talk about that you'd like to mention? \n\n[00:35:42] Colin:\nWell, something that I put in the form as I was scheduling this is that I'm far from a diehard, actually, but I did some research on this. I was, lived about a mile and a half away from the coworking space where I usually work, up until recently. And I was looking at my options for, you know, last mile electric transport. \n\n[00:36:03] And I know that you're a bit of an evangelist of the 1 wheel. And you were giving people lessons at RemixConf last year, which I thought was just fantastic. I was on my way to the airport with my suitcase and I see a gaggle of people getting, you know, 1 wheel lessons from Ken. And I was like, I've made \n\n[00:36:23] a huge mistake. I didn't make the points in my flight. But what I ended up getting was an EUC because unfortunately they win on basically all the metrics, you know, like all the specs, except they just look way lamer. \n\n[00:36:42] Kent:\nI a hundred percent agree. Yeah, that's funny. Like you can go way faster. I actually, when I think about that, so, okay, actually you continue. What kind of unicycle did you get? \n\n[00:36:55] Colin:\nI got the 1 that was at for sale at an insane price on Craigslist. I actually not even sure what the brand name is. I like taken it out 3 times and learned like, oh, I've got a lot of catching up to do because you need to actually have like a core strength and balance to ride in the UC, which is another actually huge \n\n[00:37:15] strike against it. You know, you got to have some sense of balance for 1 wheels. The EUC, it was not coming naturally to me immediately. \n\n[00:37:25] Kent:\nYeah, I've never ridden 1 before, I would like to sometime, but I know some of those things can go like 40, 50, maybe even 60 miles an hour. And it's just like, no thanks. \n\n[00:37:39] Colin:\nYeah, there's like an off-road community as well of people who are just like motorcycle helmet, like all pads everywhere, just going down like mountain biking trails and stuff. It's true madness. I think the range on mine is something like 40 miles. Yeah, that's nice. I could like, yeah, I'm in Seattle, I could do a loop around \n\n[00:37:59] all the way to Redmond, Bellevue, and across the bridge, all the way back around just on 1 charge, which is wild. \n\n[00:38:06] Kent:\nThat is super wild. \n\n[00:38:08] Colin:\nThis is me really just putting out a plea. I don't know if you have some contacts at the Onewheel company. We gotta get the 40 mile range version of the 1 you're going. \n\n[00:38:17] Kent:\nThat would be so nice. So I have the GT and it's fantastic. I can leave from my front doorstep and make it all the way to Ryan's house, which is about 25 to 27 miles apart. And I get to his house with 2%. Incredible. Yeah, it's \n\n[00:38:37] barely and I'm not going as fast as you are either so it does take me longer because I get up to about 20 miles an hour And that's about as fast as I can get. But, \n\n[00:38:48] Colin:\nThat's good though. That'll, Yeah, pretty fast. Yeah, that'll be a \n\n[00:38:52] Kent:\nlong time. I wouldn't want to go much \n\n[00:38:53] Colin:\nfaster. Exactly. \n\n[00:38:55] Kent:\nBut, yeah, that would be super nice to have that much more battery, so. \n\n[00:39:01] Colin:\nWe'll get there, we'll get there. \n\n[00:39:03] Kent:\nWe need better battery technology. Everybody's working on it. \n\n[00:39:07] Colin:\nThat's right. \n\n[00:39:08] Kent:\nYeah, well, Colin, thank you so much. This has just been such a pleasure to chat with you and from everybody watching and from me to you, just thank you for all your contributions in the web and especially your work on Bunn right now too. Super stoked about all that work, so thank you for that work too. And yeah, \n\n[00:39:28] keep up the good work. \n\n[00:39:30] Colin:\nThank you so much, Kent. And right back at you. So psyched for Epic Web Dev. So yeah, thanks for having me. \n\n[00:39:36] Kent:\nThank you so much. Oh, 1 last thing. What's the best way for people to get in contact with you? \n\n[00:39:43] Colin:\nTwitter still. I'm there, at Colin Hacks. Or Colin at ColinHacks.com. You know, good old-fashioned email. \n\n[00:39:51] Kent:\nAll right, solid. OK, hey, thanks a lot. We'll see everybody later. \n\n[00:39:57] Colin:\nBye, Ken."
          },
          "_type": "videoResource",
          "duration": 2398.6,
          "_createdAt": "2023-10-17T16:13:32Z",
          "muxAsset": {
            "muxPlaybackId": "HNhC1UHCfH2fr018PBCchFA7ZEIjZYRLDxIrrB44uWIo",
            "muxAssetId": "v5BAnwWJId5i01t18ItexbuYjdqn00H00Usn01zj5Cp6lR4",
            "_type": "muxAsset"
          },
          "_id": "B9MrGEg0NpGWTknnF7q5r5",
          "_updatedAt": "2024-03-19T20:25:49Z",
          "originalMediaUrl": "https://egghead-video-uploads.s3.amazonaws.com/epic-web/interviews/Colin+McDonnell.mp4",
          "state": "ready",
          "title": "Colin McDonnell.mp4"
        },
        "solution": null,
        "_type": "interview",
        "_updatedAt": "2023-10-17T22:53:47Z",
        "slug": "the-evolution-of-type-safety-with-colin-mcdonnell",
        "_id": "WBQDSVdErPwEcA4Fd0fVi9"
      },
      {
        "_type": "interview",
        "body": "Edmund Hung, steward of the Conform library and web developer at Delivery Heros, shares insights into Conform, a crucial part of the Epic tech stack specializing in form handling.\n\nConform is a library that is designed to handle the challenges of form management on the web. Edmund was influenced by Remix and various web APIs, which led him to study web specifications. He found that studying web specifications was invaluable, but also complex without a targeted use case.\n\nThere are several technical challenges with form management that are discussed, including the performance implications of using Redux, form validation, and the role of progressive enhancement in form management. Conform is spotlighted for its unique approach: it bypasses native browser validation systems in favor of its own.\n\nEdmund outlines his future plans for Conform, focusing on enhancements in state management through potential use of React context. He aims to centralize states to better synchronize forms and hooks and to enable server-side processing.\n\n## Resources\n\n- [Conform on GitHub](https://github.com/edmundhung/conform)\n- [Edmund Hung on Twitter](https://twitter.com/_edmundhung)",
        "videoResource": {
          "transcript": {
            "srt": "1\n00:00:00,480 --> 00:00:01,260\nHey everybody,\n\n2\n00:00:02,379 --> 00:00:05,240\nI'm excited to be joined by Edmund Hung\n\n3\n00:00:05,540 --> 00:00:06,560\nand say hi Edmund.\n\n4\n00:00:07,000 --> 00:00:07,500\nHello\n\n5\n00:00:08,679 --> 00:00:11,179\nEdmund is the creator of Conform\n\n6\n00:00:11,480 --> 00:00:17,580\nthe library that we're using in the Epic stack and through all the workshop exercises and everything.\n\n7\n00:00:18,600 --> 00:00:21,520\nConform touches pretty much everything that we do\n\n8\n00:00:21,960 --> 00:00:24,060\nas part of the Epic stack, whether you're doing\n\n9\n00:00:24,599 --> 00:00:29,279\nthe login form or a file upload or like just there's\n\n10\n00:00:29,599 --> 00:00:32,299\nthe forms are on pretty much every route, honestly.\n\n11\n00:00:32,980 --> 00:00:33,900\nOr like even\n\n12\n00:00:34,940 --> 00:00:38,920\nthe theme toggle, that is also powered by Conform. So\n\n13\n00:00:39,400 --> 00:00:41,820\njust a lot of cool stuff that\n\n14\n00:00:42,340 --> 00:00:44,660\nEdmund is helping, or\n\n15\n00:00:45,040 --> 00:00:46,740\nEdmund's library is helping us with.\n\n16\n00:00:47,080 --> 00:00:49,780\nIntegration with Zod as well. We talked\n\n17\n00:00:50,739 --> 00:00:52,540\nto Colin about Zod as well.\n\n18\n00:00:53,040 --> 00:00:55,780\nSo yeah, I met Edmund through\n\n19\n00:00:57,040 --> 00:00:59,160\nRemix. I think my first\n\n20\n00:01:00,220 --> 00:01:02,580\nclue into Edmund was the Remix.guide\n\n21\n00:01:03,420 --> 00:01:05,400\nwebsite that he put together\n\n22\n00:01:06,040 --> 00:01:07,700\na while back. And so,\n\n23\n00:01:08,520 --> 00:01:09,800\nyeah, and then Edmund\n\n24\n00:01:10,380 --> 00:01:12,440\nbuilt a form library and\n\n25\n00:01:13,660 --> 00:01:17,860\nI decided, or I was trying like every single 1 and finally\n\n26\n00:01:18,240 --> 00:01:23,860\nEdmund responded to all my requests and I said, hey, I don't like this, I don't like that. I would like it if it did this.\n\n27\n00:01:24,520 --> 00:01:31,520\nAnd Edmund didn't do everything exactly the way that I said which I think is good. Edmund is extremely thoughtful about his APIs\n\n28\n00:01:31,820 --> 00:01:43,520\nand what he's building, which I love. So anyway, that is how I know Edmund. Edmund, I think it'd be good for you to give yourself an intro to yourself or give us an intro to yourself. Yeah, sure.\n\n29\n00:01:43,940 --> 00:01:47,119\nSo hi everyone, I'm Edmund. I am a\n\n30\n00:01:47,520 --> 00:01:49,620\nsenior front-end developer for about\n\n31\n00:01:50,580 --> 00:01:54,140\n10 years, roughly 10 years, and I come from Hong Kong.\n\n32\n00:01:54,520 --> 00:01:56,180\nAnd I'm currently working actually\n\n33\n00:01:56,660 --> 00:01:59,540\nin Berlin in a company called Different Hero,\n\n34\n00:02:00,040 --> 00:02:01,820\nwhich is a parent company for many\n\n35\n00:02:02,840 --> 00:02:03,340\ndifferent,\n\n36\n00:02:04,420 --> 00:02:09,259\nfor different platform like DoorDash or Uber that you might heard of in US.\n\n37\n00:02:10,840 --> 00:02:16,740\nYeah, I, yeah, as Kent mentioned, I've been actually a kind of early adopter of Remix. I,\n\n38\n00:02:17,860 --> 00:02:18,720\nI built RemixGuy\n\n39\n00:02:19,200 --> 00:02:21,100\nand I have been maintaining\n\n40\n00:02:21,820 --> 00:02:23,460\nConform, I think since,\n\n41\n00:02:23,900 --> 00:02:24,400\nwell,\n\n42\n00:02:25,520 --> 00:02:30,220\nI think March last year. So it's like 1 and a half years now already, yeah.\n\n43\n00:02:32,140 --> 00:02:34,240\nWell, Yeah, awesome. It has been\n\n44\n00:02:34,760 --> 00:02:40,020\na wild ride with Remix and it's been cool to have you along for the ride the whole time.\n\n45\n00:02:40,680 --> 00:02:41,180\nSo\n\n46\n00:02:41,600 --> 00:02:47,860\nwith the company that you work at, are you using Remix there or is Remix just like a for fun thing for you?\n\n47\n00:02:48,940 --> 00:02:56,220\nI wish, actually the first, I actually just joined this company early last year and the first thing I do is actually the pushing for Remix.\n\n48\n00:02:56,820 --> 00:02:57,320\nAnd\n\n49\n00:02:57,980 --> 00:03:00,200\nyeah, unfortunately I didn't make it, but still\n\n50\n00:03:00,560 --> 00:03:06,500\nI think it was a very good ride because I kind of explained Remix to many people, talked to many people,\n\n51\n00:03:07,060 --> 00:03:11,780\nand at least tried to get more people knowing about Remix. And at the same time,\n\n52\n00:03:12,440 --> 00:03:19,780\nthe good thing is even without Remix, I can still use many of the cool ideas from Remix through web browsers, right? So\n\n53\n00:03:20,140 --> 00:03:20,640\nyeah.\n\n54\n00:03:21,500 --> 00:03:22,760\nNo, that's good. Yeah.\n\n55\n00:03:23,420 --> 00:03:23,920\nThat's\n\n56\n00:03:24,280 --> 00:03:29,640\n1 of the beautiful things about Remix and the focus on the platform is that the ideas are so transferable.\n\n57\n00:03:30,420 --> 00:03:31,660\nSo with the\n\n58\n00:03:32,380 --> 00:03:39,500\nEpic Web, a lot of people are asking me about like, okay, so why did you choose Remix for the framework\n\n59\n00:03:40,080 --> 00:03:43,240\nand why didn't you go with something more popular like Next.js?\n\n60\n00:03:44,180 --> 00:03:48,540\nFor 1, that is temporary. I'm pretty confident that Remix will\n\n61\n00:03:49,120 --> 00:03:52,260\nbe the most popular web framework in the world in the future.\n\n62\n00:03:52,740 --> 00:03:53,540\nBut secondly,\n\n63\n00:03:55,840 --> 00:03:59,700\nthe question that they're asking or what they're trying to get at is,\n\n64\n00:04:03,060 --> 00:04:06,580\nhow is this going to apply to me if I'm not using Remix?\n\n65\n00:04:07,040 --> 00:04:11,260\nAnd just like you said, the ideas of Remix are what are really powerful\n\n66\n00:04:11,600 --> 00:04:14,200\nand can apply whether you're using Remix or not.\n\n67\n00:04:14,540 --> 00:04:16,860\nSo Yeah, that's cool. Okay, so\n\n68\n00:04:17,680 --> 00:04:18,180\nyou\n\n69\n00:04:19,640 --> 00:04:20,140\nworked\n\n70\n00:04:20,800 --> 00:04:21,959\non Conform, like\n\n71\n00:04:22,420 --> 00:04:30,700\nbefore I started needing a form library solution. Well, I shouldn't say that. I've needed a form library solution the entire time I've been doing\n\n72\n00:04:31,100 --> 00:04:37,580\nforms on the web. Like the forms are a challenging thing if you're doing more than just like 2 fields for your whole app.\n\n73\n00:04:38,500 --> 00:04:39,220\nAnd so\n\n74\n00:04:41,100 --> 00:04:43,760\nwhat motivated you to build Conform?\n\n75\n00:04:45,060 --> 00:04:48,400\nSo I have to be honest, I didn't really\n\n76\n00:04:49,540 --> 00:04:51,800\nplan to actually make a form library at first.\n\n77\n00:04:52,920 --> 00:04:56,640\nI was just toying around with Remix a lot, I think early last year.\n\n78\n00:04:57,380 --> 00:05:02,860\nAnd I was kind of inspired by how Remix can utilize the web APIs, those platform,\n\n79\n00:05:03,280 --> 00:05:03,780\nto\n\n80\n00:05:04,700 --> 00:05:05,880\nintroduce kind of\n\n81\n00:05:06,720 --> 00:05:10,820\na model that is simple to understand, at the same time has a pretty good\n\n82\n00:05:11,600 --> 00:05:15,600\nmechanism to handle what we need. So I kind of just like, hey,\n\n83\n00:05:16,500 --> 00:05:19,180\nthere might be something I can find out about validation.\n\n84\n00:05:19,740 --> 00:05:22,620\nThen I basically just spend a weekend looking at the MDN,\n\n85\n00:05:23,160 --> 00:05:28,140\njust and I realized, oh, there's an API about the valid state, there's API about\n\n86\n00:05:29,100 --> 00:05:42,180\nthe invalid event. And that's kind of get me into the rabbit hole. Like, oh, maybe this, I just keep looking of the MDN docs and maybe sometimes even like, hey, maybe it's not enough. Let's go to check the XML\n\n87\n00:05:43,180 --> 00:05:43,680\nspec\n\n88\n00:05:44,100 --> 00:05:45,920\nand see if there's anything interesting.\n\n89\n00:05:46,380 --> 00:05:47,320\nAnd yeah,\n\n90\n00:05:48,300 --> 00:05:51,640\nand that's just how things happen. And I just kind of like, yeah,\n\n91\n00:05:52,200 --> 00:05:53,700\ntry paying around different ideas.\n\n92\n00:05:54,960 --> 00:05:57,680\nAnd then now it becomes what you see now.\n\n93\n00:05:58,440 --> 00:06:00,640\nCool, yeah. Yeah, you know, the\n\n94\n00:06:00,980 --> 00:06:12,940\nHTML spec or the, just the web spec documents, I find that they're difficult to read unless you have a specific use case in mind. And so if you're thinking about, oh, well I want to understand\n\n95\n00:06:13,940 --> 00:06:15,480\nhow validation works\n\n96\n00:06:16,060 --> 00:06:16,900\nand what order\n\n97\n00:06:17,460 --> 00:06:18,920\ndo these things happen, whatever.\n\n98\n00:06:20,140 --> 00:06:25,300\nIf you have a use case in mind, then going through the spec documents is actually pretty interesting.\n\n99\n00:06:25,760 --> 00:06:29,680\nAnd it definitely has a language of its own, like there's annotations\n\n100\n00:06:30,040 --> 00:06:31,900\nand different things that you have to understand, but\n\n101\n00:06:32,360 --> 00:06:35,640\nyeah, don't be afraid of the spec. That's a good thing, good call out.\n\n102\n00:06:36,420 --> 00:06:39,120\nOkay, so you talked about the validity API\n\n103\n00:06:39,640 --> 00:06:42,440\nin the browser. Is Conform using that?\n\n104\n00:06:45,040 --> 00:06:47,260\nI would say yes and no. So\n\n105\n00:06:48,040 --> 00:06:49,780\nthere's a lot of interest. I think\n\n106\n00:06:50,200 --> 00:06:57,320\nwhenever we talk about because enhancement in form validation, I think the first thing people would think of is those validation attributes, like required,\n\n107\n00:06:57,700 --> 00:06:58,440\nthe meaning,\n\n108\n00:06:58,820 --> 00:07:12,940\nall sorts of stuff. And so you do it then when we talk about this in terms of web APIs, it will become the valid state. And which is pretty cool. It's definitely pretty cool because it gives you a quick idea to like, hey, all kinds of validation being done by browsers.\n\n109\n00:07:14,700 --> 00:07:18,900\nBut at the same time, it's really hard to, it's not enough for\n\n110\n00:07:20,280 --> 00:07:28,480\nmost of the, well, it's not enough for like all sort of requirements that you might come up with because form validation is a really hard topic. And\n\n111\n00:07:29,480 --> 00:07:31,320\nso I Actually, when I start\n\n112\n00:07:32,620 --> 00:07:36,500\nlooking into this part, I think I spent 1 month trying to create\n\n113\n00:07:37,360 --> 00:07:39,640\nkind of a SAP-like API\n\n114\n00:07:40,080 --> 00:07:41,620\non top of this. And\n\n115\n00:07:41,940 --> 00:07:45,560\nit's just, to me, it's just too much to take care of. And\n\n116\n00:07:48,340 --> 00:07:51,140\nthe different experience we saw, it's just so good that\n\n117\n00:07:51,820 --> 00:07:57,680\nI end up thinking like, maybe I should not go for that route for now. I will come back to this later. And that's why\n\n118\n00:07:58,320 --> 00:08:15,600\nright now, Confirm doesn't really have a direct support on this part. But 1 interesting thing that we do right now is that we're utilizing the invalid event. So what happened is that Confirm is trying to disable the native browser validation and re-implement it.\n\n119\n00:08:16,020 --> 00:08:19,900\nSo that, and use the invalid event as a way to propagate errors to\n\n120\n00:08:20,460 --> 00:08:21,940\ndifferent places so that you can,\n\n121\n00:08:23,200 --> 00:08:26,100\nyour component will be re-rendered only when necessary.\n\n122\n00:08:27,800 --> 00:08:57,680\nYeah, that is definitely a concern that probably some people listening have experienced when they hook up all of the state of their application into Redux and now all of a sudden every key press is triggering a re-render of the whole app and lots of pain associated with that for sure. So yeah, that is cool. So you mentioned progressive enhancement. I had a timer for how long it took us to bring progressive enhancement up. I'm just kidding. But yeah, that's definitely a huge thing for you personally.\n\n123\n00:08:58,080 --> 00:08:59,740\nAnd I would like to,\n\n124\n00:09:00,660 --> 00:09:02,320\nif you could, kind of explain\n\n125\n00:09:02,700 --> 00:09:05,100\nwhat progressive enhancement is and\n\n126\n00:09:05,660 --> 00:09:07,500\nwhy you think it's so important.\n\n127\n00:09:09,100 --> 00:09:11,520\nWow, that's a really good question.\n\n128\n00:09:13,500 --> 00:09:14,000\nSo,\n\n129\n00:09:14,720 --> 00:09:16,520\nfirst of all, I think progressive enhancement,\n\n130\n00:09:16,880 --> 00:09:18,940\nthe idea of progressive Enhancement is so cool.\n\n131\n00:09:19,280 --> 00:09:20,180\nThat's actually\n\n132\n00:09:20,860 --> 00:09:21,360\nmaybe\n\n133\n00:09:21,680 --> 00:09:30,140\nthe first reason why I look into it. I think I actually heard about Progress Enhancement, the first time I heard about it, is not about JavaScript, but actually\n\n134\n00:09:30,480 --> 00:09:30,980\nabout\n\n135\n00:09:32,060 --> 00:09:33,900\nthe idea of having HTML,\n\n136\n00:09:34,700 --> 00:09:36,920\nCSS, and JavaScript separated, right?\n\n137\n00:09:37,800 --> 00:09:38,920\nAnd Pugliese Hansman,\n\n138\n00:09:39,480 --> 00:09:46,580\nwhen I first heard about it, is like, hey, you should have a semantics HTML so that when your CSS doesn't know, you still have something that\n\n139\n00:09:46,920 --> 00:09:49,580\nis easy, it can be readable by the users.\n\n140\n00:09:50,640 --> 00:09:54,980\nAnd yeah, I just find it actually very cool. And then,\n\n141\n00:09:55,680 --> 00:09:59,520\nyeah, but maybe, yeah, back to your question, sorry. So, ProcureHandsman\n\n142\n00:10:00,420 --> 00:10:07,820\nto me is basically a way that you utilize the platform to think about what the users, what the platform can provide the users\n\n143\n00:10:09,380 --> 00:10:10,880\nby just utilize HTML\n\n144\n00:10:11,540 --> 00:10:12,420\nand then\n\n145\n00:10:12,800 --> 00:10:15,260\nincrementally add the layers of complexity\n\n146\n00:10:15,660 --> 00:10:19,300\nby based on like whatever is available to the users\n\n147\n00:10:19,740 --> 00:10:20,560\nor the browsers.\n\n148\n00:10:22,440 --> 00:10:26,260\nAnd so that it has a very, it has an experience that\n\n149\n00:10:26,840 --> 00:10:27,340\nis,\n\n150\n00:10:28,860 --> 00:10:36,040\nyeah, I'm a bit out of things. Yeah, I like to say that progressive enhancement is about giving a baseline functional\n\n151\n00:10:36,400 --> 00:10:36,900\nexperience\n\n152\n00:10:37,280 --> 00:10:39,660\nand then layering on, as you were saying,\n\n153\n00:10:40,260 --> 00:10:41,340\nlayers of\n\n154\n00:10:42,180 --> 00:10:45,220\nimproved experience based on the capabilities of the device.\n\n155\n00:10:47,020 --> 00:10:47,800\nYeah, so\n\n156\n00:10:48,580 --> 00:10:55,380\nwhat is it about progressive enhancement that you think is so important and why do you focus so much time and attention on it?\n\n157\n00:10:57,740 --> 00:10:58,240\nSo\n\n158\n00:11:00,600 --> 00:11:01,100\nWell,\n\n159\n00:11:01,620 --> 00:11:03,120\nmaybe a little story.\n\n160\n00:11:03,820 --> 00:11:05,460\nSo as I mentioned earlier,\n\n161\n00:11:06,200 --> 00:11:07,240\nI grew up from\n\n162\n00:11:07,940 --> 00:11:16,920\nan international city, Hong Kong, which is a small city with many people. And we generally have pretty good internet. So we...\n\n163\n00:11:17,860 --> 00:11:18,360\nBut\n\n164\n00:11:19,320 --> 00:11:19,820\nwe...\n\n165\n00:11:22,100 --> 00:11:26,400\nSo many people in the city actually spend a lot of time commuting basically to the office.\n\n166\n00:11:26,880 --> 00:11:27,380\nAnd,\n\n167\n00:11:27,920 --> 00:11:28,640\nbut still,\n\n168\n00:11:29,060 --> 00:11:31,520\nwith such a good city, with such a good infrastructure,\n\n169\n00:11:31,860 --> 00:11:37,740\nit's actually very common to me to have struggle with like sometimes when I'm on a metro,\n\n170\n00:11:38,680 --> 00:11:41,780\non a subway, whenever you pass through maybe certain tunnels,\n\n171\n00:11:42,100 --> 00:11:43,820\nyou suddenly can't do anything.\n\n172\n00:11:44,540 --> 00:11:50,320\nAnd I think this is where like Progress Enhancement is 1 of the things that is kind of important because\n\n173\n00:11:50,900 --> 00:11:51,520\nit seems\n\n174\n00:11:52,060 --> 00:11:55,840\neveryone, when they talk about Progress Enhancement, they just think about, hey,\n\n175\n00:11:57,120 --> 00:11:59,680\nI don't think my users will disable JavaScript.\n\n176\n00:12:00,020 --> 00:12:02,720\nBut I think, yeah, a lot of people also mention,\n\n177\n00:12:03,780 --> 00:12:05,440\nwhat really matters here is\n\n178\n00:12:06,500 --> 00:12:11,920\nyour website before the JavaScript node has no JavaScript and you cannot do anything. And if we\n\n179\n00:12:12,740 --> 00:12:16,920\nare not trying to think in terms of progress enhancement, then it's very hard for,\n\n180\n00:12:17,520 --> 00:12:22,060\nthen users basically has nothing to do but has to wait. And what they end up is they just keep refreshing,\n\n181\n00:12:22,440 --> 00:12:25,580\ntrying to hope that, okay, you get back to what they want.\n\n182\n00:12:27,740 --> 00:12:29,480\nAnd I think if with,\n\n183\n00:12:30,780 --> 00:12:38,700\nFor example, with a good progress enhancement support on the farm, then your users will be able to continue to do what they do.\n\n184\n00:12:39,600 --> 00:12:44,260\nFor sure, there's still a chance that you fail, but it still gives them a more\n\n185\n00:12:45,380 --> 00:12:46,320\nsmooth experience,\n\n186\n00:12:46,680 --> 00:12:47,180\nhopefully,\n\n187\n00:12:47,540 --> 00:12:49,540\nthat they can complete what they're doing.\n\n188\n00:12:49,940 --> 00:12:51,240\nYeah. Yeah,\n\n189\n00:12:51,760 --> 00:12:55,240\nI agree with that. And I've experienced that myself. It's\n\n190\n00:12:55,760 --> 00:12:57,180\ndefinitely more pleasant\n\n191\n00:12:57,720 --> 00:12:58,220\nto\n\n192\n00:12:58,680 --> 00:13:00,640\nhave the UI work\n\n193\n00:13:01,060 --> 00:13:07,100\nthan to like press the button and nothing happens. And so I'm like, oh, okay, I guess I'll refresh like that just seems like a really\n\n194\n00:13:07,420 --> 00:13:08,580\nbad user experience.\n\n195\n00:13:09,160 --> 00:13:09,660\nAnd\n\n196\n00:13:10,840 --> 00:13:12,880\nwhat people will sometimes say is that\n\n197\n00:13:13,240 --> 00:13:14,080\nlike, well,\n\n198\n00:13:14,480 --> 00:13:14,980\nbut\n\n199\n00:13:15,360 --> 00:13:18,440\nthis only affects, you know, point 1% of users,\n\n200\n00:13:19,120 --> 00:13:26,060\nright, that this is going to be a thing we shouldn't dedicate so much of our time to it. But Ryan Florence\n\n201\n00:13:26,920 --> 00:13:27,840\nsays sometimes\n\n202\n00:13:28,360 --> 00:13:33,340\nthat this doesn't only affect 0.1% of users, this affects 100%\n\n203\n00:13:33,820 --> 00:13:36,060\nof users 0.1% of the time.\n\n204\n00:13:36,580 --> 00:13:37,080\nAnd\n\n205\n00:13:37,740 --> 00:13:42,380\nI think that kind of changes the calculus for me, at least a little bit to say,\n\n206\n00:13:42,860 --> 00:13:43,360\nhey,\n\n207\n00:13:43,740 --> 00:13:52,980\nevery 1 of my users is at some point going to have some kind of failure in loading the JavaScript. And so let's give them as positive an experience as possible\n\n208\n00:13:53,400 --> 00:13:54,360\nin that world.\n\n209\n00:13:54,720 --> 00:13:59,280\nThe other thing that I love about progressive enhancement is that the mental model is a lot simpler\n\n210\n00:14:00,040 --> 00:14:01,500\nas a developer, that development\n\n211\n00:14:01,880 --> 00:14:02,380\nexperience.\n\n212\n00:14:03,180 --> 00:14:06,900\nLike it's been years now that we've been using Remix and\n\n213\n00:14:08,000 --> 00:14:12,760\nI'm starting to forget how painful it was to manage application state.\n\n214\n00:14:13,380 --> 00:14:16,900\nAnd because I don't have to do that with Remix and that's because\n\n215\n00:14:17,360 --> 00:14:18,620\nof progressive enhancement.\n\n216\n00:14:19,640 --> 00:14:21,540\nAnd so yeah, I'm definitely\n\n217\n00:14:21,880 --> 00:14:27,080\nbullish on progressive enhancement. What are some of the challenges with, so I guess I should say,\n\n218\n00:14:28,060 --> 00:14:30,320\nConform and just forms in general\n\n219\n00:14:31,060 --> 00:14:35,820\nhave a huge role to play in progressive enhancement and making forms work\n\n220\n00:14:36,140 --> 00:14:37,000\nwhen the user\n\n221\n00:14:38,100 --> 00:14:43,700\nis using the app and the JavaScript fails or something like that, or is slow to load or something.\n\n222\n00:14:44,920 --> 00:14:45,660\nAnd So\n\n223\n00:14:46,020 --> 00:14:48,900\nthere's a lot to say about progressive enhancement with forms.\n\n224\n00:14:49,780 --> 00:14:53,380\nWhat would you say are the things that are like the most challenging\n\n225\n00:14:53,760 --> 00:14:54,520\nfor you\n\n226\n00:14:54,920 --> 00:14:58,500\nwhen you're trying to make sure that things are progressively enhanced?\n\n227\n00:14:59,600 --> 00:15:02,060\nWell, The most challenging 1 is definitely how\n\n228\n00:15:03,780 --> 00:15:07,160\nwe enable people to be able to manage a list\n\n229\n00:15:07,540 --> 00:15:08,760\nin a\n\n230\n00:15:09,240 --> 00:15:11,180\nkind of friendly way with their,\n\n231\n00:15:11,800 --> 00:15:16,760\nbecause my take sometimes with Procrastinant enhancement is like, yeah, as you mentioned, like it's,\n\n232\n00:15:18,280 --> 00:15:19,640\nit will happen like\n\n233\n00:15:19,980 --> 00:15:26,740\nsometimes, It's not like, you don't expect that it happens all the time but whenever you need it, it should be supported. And,\n\n234\n00:15:28,520 --> 00:15:29,520\nwhat was I saying?\n\n235\n00:15:30,060 --> 00:15:33,060\nYeah, you were talking about lists being really challenging to\n\n236\n00:15:33,480 --> 00:15:33,980\nimplement.\n\n237\n00:15:34,540 --> 00:15:35,520\nYeah, so,\n\n238\n00:15:37,620 --> 00:15:43,940\nin order to make this work, it actually has need to have some very special way. So actually, this is,\n\n239\n00:15:44,680 --> 00:15:46,920\nI've been, so how's that?\n\n240\n00:15:47,400 --> 00:15:55,180\nSo when I was first working on the list, I actually have been like trying to, really trying to look out, hey, how can I make this work\n\n241\n00:15:55,880 --> 00:15:57,260\nfrom the server? Because\n\n242\n00:15:57,880 --> 00:16:04,740\nthere's no way I can, because usually when you think of it, it's just like, oh, I have a use day. And then I click this, I append an object.\n\n243\n00:16:05,220 --> 00:16:15,540\nThat's how you would think of it in most of the cases. But when you want the server to be included, the first question is how do you tell the users that this happened?\n\n244\n00:16:17,220 --> 00:16:18,900\nAnd I think this actually has a very\n\n245\n00:16:19,400 --> 00:16:21,760\nhuge impact on the Confirm architecture\n\n246\n00:16:22,080 --> 00:16:23,040\nlater on because\n\n247\n00:16:23,860 --> 00:16:25,660\nthis is actually the first thing I realized.\n\n248\n00:16:27,340 --> 00:16:29,360\nThe intent, kind of the intent\n\n249\n00:16:30,580 --> 00:16:32,720\npattern that would have been kind of quite\n\n250\n00:16:33,420 --> 00:16:41,920\npopular in Vue Mix form is that so that you basically include, I think it's basically you include a name and value in your button so that when you click it, you can include some additional information\n\n251\n00:16:42,800 --> 00:16:43,780\nto your server.\n\n252\n00:16:44,680 --> 00:16:47,460\nAnd Conform has been kind of expanding this idea\n\n253\n00:16:48,160 --> 00:16:57,840\nto more stuff. So, and for example, in the case of this, we basically include the information of, hey, what the users, when the user, I said this is an add button, then when you click it,\n\n254\n00:16:58,180 --> 00:17:03,980\nthen Confirm will basically include this extra information to say, hey, this user's wanna add\n\n255\n00:17:04,339 --> 00:17:05,940\nmaybe a new role to\n\n256\n00:17:06,300 --> 00:17:07,859\nthe item on this\n\n257\n00:17:09,780 --> 00:17:13,099\npath, kind of the path. So yeah, and this path, and then\n\n258\n00:17:13,660 --> 00:17:25,780\nI would need, I need confirm to have a special handling to say, whenever he saw this, then it kind of processed the data that you sent out and then send back to the client so that the client can use it to be in his eyes.\n\n259\n00:17:27,839 --> 00:17:28,339\nYeah,\n\n260\n00:17:28,840 --> 00:17:30,400\nand then we pipe it through\n\n261\n00:17:30,720 --> 00:17:35,200\nuse form with the last submission. Is that how we get that populated? Yeah.\n\n262\n00:17:35,600 --> 00:17:39,180\nSo in the workshops, we have the file upload\n\n263\n00:17:39,840 --> 00:17:43,720\non a note, and you can add as many images as you like.\n\n264\n00:17:45,060 --> 00:17:45,560\nAnd\n\n265\n00:17:46,400 --> 00:17:46,900\nI\n\n266\n00:17:47,220 --> 00:17:51,860\nshow people, I turn off JavaScript, and like, look, I can add that. That's like, that is 100%\n\n267\n00:17:52,740 --> 00:17:53,540\na client-side\n\n268\n00:17:53,960 --> 00:17:55,220\noperation for people,\n\n269\n00:17:55,520 --> 00:18:06,500\nwhen they build it themselves. Like, there's no way that they would build a server round trip for that. And of course, when JavaScript is in the client, it's not a server round trip, it is all happening in the client, but\n\n270\n00:18:07,120 --> 00:18:07,760\nit just\n\n271\n00:18:08,080 --> 00:18:09,720\nis so, so cool\n\n272\n00:18:10,160 --> 00:18:21,760\nthat you put that much effort into making even that experience work. And what's cool about this is, let's say that you do go through a tunnel, you've got the HTML, but the JavaScript didn't load in time. And so then\n\n273\n00:18:22,060 --> 00:18:29,240\nyou choose your image, you set the alt text and all that stuff, and then you come out of the tunnel, and you say, oh, I want another image.\n\n274\n00:18:29,680 --> 00:18:33,100\nIt's gonna, you're gonna add that image, it's gonna do a full page refresh.\n\n275\n00:18:34,060 --> 00:18:41,820\nYou will lose the image, that 1 is, yeah, good luck with that. That would be a tough 1, I think. But at least\n\n276\n00:18:42,400 --> 00:18:47,580\nlike the, whatever else that you entered into that form is going to be there.\n\n277\n00:18:48,340 --> 00:18:49,780\nI just think that is\n\n278\n00:18:50,340 --> 00:18:51,220\nso cool.\n\n279\n00:18:51,820 --> 00:18:54,900\nAnd you'll have the same number of images there.\n\n280\n00:18:56,200 --> 00:18:57,600\nSo there are limitations\n\n281\n00:18:57,980 --> 00:18:59,560\nto progressive enhancement\n\n282\n00:19:00,320 --> 00:19:03,060\nand the level that you can take it.\n\n283\n00:19:03,740 --> 00:19:06,040\nBut I do think that it's just phenomenal\n\n284\n00:19:06,540 --> 00:19:14,700\nhow good you can make that. Yeah, and 1 thing I want to add is, so this is just 1 part. So as I mentioned, like Conform has been utilized as\n\n285\n00:19:15,060 --> 00:19:15,880\nintent patterns\n\n286\n00:19:16,320 --> 00:19:22,480\nfor actually a lot of the parts. So, and this is actually 1 of the reason why I think Progress Enhancement, we proved that Progress Enhancement\n\n287\n00:19:22,840 --> 00:19:23,540\ncan simplify\n\n288\n00:19:23,940 --> 00:19:24,980\na model because\n\n289\n00:19:25,640 --> 00:19:30,040\nthe way that the conform handle form is everything is about submission.\n\n290\n00:19:30,540 --> 00:19:33,480\nAnd it's just that every time based on the intention,\n\n291\n00:19:33,900 --> 00:19:38,500\nyou have a slightly different message being encoded together. So for example,\n\n292\n00:19:38,800 --> 00:19:41,260\nif you're thinking about a kind validation,\n\n293\n00:19:41,720 --> 00:19:45,860\nand let's say where you're typing something, you won't expect the Confirm to validate. And\n\n294\n00:19:46,340 --> 00:19:52,820\nfor sure you will update some options on the use form to make it work. But what actually would happen is that Conform basically\n\n295\n00:19:54,000 --> 00:19:58,220\njust helping you to check as a form submission with the corresponding valid intent.\n\n296\n00:19:58,620 --> 00:20:00,300\nThey say, hey, this user want\n\n297\n00:20:00,620 --> 00:20:01,500\nto do that.\n\n298\n00:20:02,080 --> 00:20:05,660\nAnd this actually enables some very cool additional features\n\n299\n00:20:06,040 --> 00:20:07,080\nis that\n\n300\n00:20:07,900 --> 00:20:14,200\nConfirm can work with server validation without kind because everything is, imagine, everything is on submission.\n\n301\n00:20:14,540 --> 00:20:15,040\nSo,\n\n302\n00:20:15,360 --> 00:20:15,860\nAnd\n\n303\n00:20:16,720 --> 00:20:20,780\nif you don't have any kind of validation, what happens in Confirm, we just simply say,\n\n304\n00:20:21,100 --> 00:20:30,360\nI don't know, just let the server handle it. And the server capture it, and server validate it, and then send it back. So that Confirm would basically allow you to\n\n305\n00:20:30,660 --> 00:20:31,620\nbe just utilized\n\n306\n00:20:31,980 --> 00:20:33,980\nfully on the server without,\n\n307\n00:20:35,380 --> 00:20:38,660\nespecially like sometimes you don't really need kind of validation, like\n\n308\n00:20:39,720 --> 00:20:40,580\nif you are\n\n309\n00:20:41,600 --> 00:20:45,460\nbuilding a form, maybe a login form, and you don't really\n\n310\n00:20:45,780 --> 00:20:53,980\nhave some very complex validation logic, Why do we borders? And you can just let the server do it. And server is a source of truth for everything, right? Mm-hmm.\n\n311\n00:20:54,780 --> 00:20:58,500\nYeah, that's very true. And I try to iterate that in\n\n312\n00:20:59,540 --> 00:21:02,420\nthe workshop, but I'm just gonna reiterate it.\n\n313\n00:21:03,080 --> 00:21:07,080\nThe server side is where you get your security and validation.\n\n314\n00:21:07,580 --> 00:21:13,220\nThe client side, the only reason you do client-side validation is for an enhanced user experience.\n\n315\n00:21:14,380 --> 00:21:17,860\nThat's all that it gives you. It does not give you any level of security.\n\n316\n00:21:18,840 --> 00:21:19,340\nBut\n\n317\n00:21:19,640 --> 00:21:20,460\nyeah, so\n\n318\n00:21:20,800 --> 00:21:22,820\nwhat's really cool about this though\n\n319\n00:21:23,560 --> 00:21:30,800\nis that you can share that validation logic on the client and the server. So anything that can go into the client will go in or\n\n320\n00:21:31,260 --> 00:21:32,860\nyou can put it in the client.\n\n321\n00:21:35,320 --> 00:21:41,260\nAnd this was the big promise of Node.js when it first, well, not when it first came out, but when people first started\n\n322\n00:21:42,180 --> 00:21:42,680\nwriting\n\n323\n00:21:43,260 --> 00:21:43,760\nJavaScript\n\n324\n00:21:44,100 --> 00:21:44,600\nthat\n\n325\n00:21:44,900 --> 00:21:50,420\ncould be shared between the 2, is they're like, oh, we can run the exact same code on both sides, it'll be amazing.\n\n326\n00:21:50,860 --> 00:21:54,060\nAnd Meteor tried to do something with that and that\n\n327\n00:21:54,520 --> 00:21:56,400\nto varying levels of success.\n\n328\n00:21:57,540 --> 00:22:03,360\nBut I feel like I never really experienced the reality of that promise until I started using Remix\n\n329\n00:22:04,280 --> 00:22:05,040\nand Conform\n\n330\n00:22:05,860 --> 00:22:06,780\nplus Zod\n\n331\n00:22:07,200 --> 00:22:16,280\nhas really given that to me. And like I not only get the server side validation and client side validation with Zod, but you also\n\n332\n00:22:16,640 --> 00:22:17,720\nare able to\n\n333\n00:22:19,160 --> 00:22:20,580\ngive me the progressive enhancement\n\n334\n00:22:21,100 --> 00:22:22,700\nattributes, like the HTML5\n\n335\n00:22:23,000 --> 00:22:37,220\nattributes on these inputs based on my Zod schema. So if I say dot optional on this thing, then required isn't gonna be on there. And I just think that is so legit. Like that, when I was looking for a good form library, that was a requirement is being able to have a schema\n\n336\n00:22:37,540 --> 00:22:41,900\nand then generate HTML attributes and ARIA attributes as well automatically.\n\n337\n00:22:42,800 --> 00:22:45,820\nSo yeah, I'm thrilled that Conform can do that.\n\n338\n00:22:46,880 --> 00:22:47,380\nNice.\n\n339\n00:22:47,720 --> 00:22:48,220\nYeah.\n\n340\n00:22:52,280 --> 00:22:55,060\nSo, another thing I wanted to ask you about was\n\n341\n00:22:55,920 --> 00:22:56,420\nabout\n\n342\n00:22:56,980 --> 00:22:58,040\nworking with\n\n343\n00:22:58,580 --> 00:23:01,360\nthat Zod schema. And sometimes\n\n344\n00:23:01,900 --> 00:23:03,140\nthere are things that,\n\n345\n00:23:03,740 --> 00:23:09,180\nlike validation that can run on the client like this, has a min length of 3 and a max length of 20.\n\n346\n00:23:09,840 --> 00:23:12,420\nBut there are some validations that can't\n\n347\n00:23:12,800 --> 00:23:14,360\nhappen on the client by themselves,\n\n348\n00:23:15,060 --> 00:23:16,740\nlike this username is unique.\n\n349\n00:23:17,980 --> 00:23:18,480\nSo\n\n350\n00:23:19,540 --> 00:23:22,860\nwhat we do in the workshop is we have a,\n\n351\n00:23:23,240 --> 00:23:29,940\njust add a dot super refine or a dot refine or a dot transform on the server side in the action. And that works really well.\n\n352\n00:23:30,900 --> 00:23:32,460\nBut is there a way\n\n353\n00:23:33,480 --> 00:23:34,460\nto do\n\n354\n00:23:34,860 --> 00:23:35,360\nthat,\n\n355\n00:23:35,740 --> 00:23:37,200\nlike those async validations\n\n356\n00:23:37,540 --> 00:23:38,420\non the client?\n\n357\n00:23:39,180 --> 00:23:40,680\nYep, definitely. So\n\n358\n00:23:41,040 --> 00:23:47,260\nI think this is another use case of proofing like the model that Confirm has is actually very interesting because\n\n359\n00:23:47,640 --> 00:23:48,940\nas I mentioned earlier,\n\n360\n00:23:49,820 --> 00:23:52,700\nthe way they confirm validate is when,\n\n361\n00:23:53,300 --> 00:23:55,020\nit's basically a checker form submission\n\n362\n00:23:55,840 --> 00:23:57,780\nwith maybe a valid intent.\n\n363\n00:23:58,320 --> 00:23:59,320\nAnd what happened,\n\n364\n00:24:00,040 --> 00:24:02,140\nSo imagine like when you have,\n\n365\n00:24:03,920 --> 00:24:06,260\nlet's say, a sound form and you wanna\n\n366\n00:24:06,680 --> 00:24:10,260\nhave a username field that you wanna check for uniqueness, as you said.\n\n367\n00:24:11,600 --> 00:24:12,420\nAnd you still,\n\n368\n00:24:13,380 --> 00:24:17,180\nwhen you have kind of that in place, for sure you still want to kind of to just\n\n369\n00:24:18,260 --> 00:24:21,160\ncheck whether let's say the users has profile,\n\n370\n00:24:21,600 --> 00:24:22,940\na name, has something.\n\n371\n00:24:23,300 --> 00:24:26,020\nAnd at the same time, maybe it has to follow a certain\n\n372\n00:24:26,400 --> 00:24:32,120\nbasic requirement. Let me put that meaning, there's some special characters that users cannot be using.\n\n373\n00:24:32,420 --> 00:24:34,160\nAnd you want all this in client,\n\n374\n00:24:34,640 --> 00:24:36,920\nbut you only want, but whenever\n\n375\n00:24:37,420 --> 00:24:39,940\neverything else is passed, you want the server\n\n376\n00:24:40,280 --> 00:24:41,180\nto do it.\n\n377\n00:24:41,820 --> 00:24:47,740\nAnd the way that Conform actually make it work is that Conform actually think about itself as a middleware.\n\n378\n00:24:48,080 --> 00:24:52,280\nThat's the way I think about it. It's actually like a middleware in your sub-mean handlers.\n\n379\n00:24:53,000 --> 00:24:55,260\nAnd because of the fact that Conform\n\n380\n00:24:55,760 --> 00:24:57,180\ncan work with both\n\n381\n00:24:58,480 --> 00:25:00,360\nserver validation and client validation,\n\n382\n00:25:01,980 --> 00:25:08,600\nit will be able to switch. So the way is that whenever the kind validation say, hey, I'm happy\n\n383\n00:25:09,340 --> 00:25:10,860\nwith the current username,\n\n384\n00:25:12,180 --> 00:25:16,600\nbut the kind validation doesn't know, this is for sure, it doesn't know how to check the\n\n385\n00:25:17,200 --> 00:25:19,840\nuniqueness so you tell conform, like, hey,\n\n386\n00:25:20,460 --> 00:25:22,940\nI'm happy, but there's something additional\n\n387\n00:25:23,720 --> 00:25:24,660\nI want to check.\n\n388\n00:25:25,280 --> 00:25:31,300\nI don't know. So let's, how about let the server do it? And Confirm will, Confirm do is, oh, I just don't call event.pmnd\n\n389\n00:25:31,620 --> 00:25:36,060\ndefault, and let we mix, capture it, and then it's being forwarded to the action\n\n390\n00:25:36,560 --> 00:25:41,700\nand then The server for sure you will have to where there's an object that check the uniqueness already\n\n391\n00:25:42,260 --> 00:25:42,760\nand\n\n392\n00:25:43,260 --> 00:25:51,400\nIn that case it well you pass it you get a sub you get a submission you send back client The kind get a submission with errors is populated\n\n393\n00:25:51,780 --> 00:25:52,480\nand done\n\n394\n00:25:53,220 --> 00:25:55,140\nYeah, yeah, I just love that.\n\n395\n00:25:55,760 --> 00:25:57,840\nI think that the model itself\n\n396\n00:25:58,520 --> 00:26:00,560\njust really speaks to\n\n397\n00:26:01,160 --> 00:26:02,460\nhow thoughtful you have\n\n398\n00:26:03,260 --> 00:26:16,340\nbeen about the API and the way that it works. I think it's pretty constraining for you to have to live inside of this box that you've kind of made for yourself. Like, these are my requirements,\n\n399\n00:26:17,220 --> 00:26:30,300\nBut as a user of Conform, it just drastically simplifies things. Because I can still, even with complex validation logic like that, I'm still not using useState or useEffect or any of that nonsense. It's amazing.\n\n400\n00:26:31,420 --> 00:26:33,840\nSo I mean, I'm sure that there's probably,\n\n401\n00:26:34,400 --> 00:26:39,740\nwell, I guess I'm not sure. Are you using useState inside of Conform? I'm guessing you are somewhere.\n\n402\n00:26:40,320 --> 00:26:40,820\nYes,\n\n403\n00:26:41,640 --> 00:26:46,620\nthis is, yeah, we have been, well, we have been kind of managing the errors in\n\n404\n00:26:47,100 --> 00:26:49,240\neach of the conform hooks for sure.\n\n405\n00:26:49,740 --> 00:26:53,860\nBut actually this is 1 thing that's gonna be changed in the future because I am,\n\n406\n00:26:57,720 --> 00:26:58,860\nso well,\n\n407\n00:26:59,200 --> 00:27:00,040\nI mean, Formalization\n\n408\n00:27:01,100 --> 00:27:11,880\nhas, to me has several areas, Formalization 1 part, but the other part is the management because a lot of people, error is just 1 part of the whole thing. There's a lot of information that people want.\n\n409\n00:27:12,180 --> 00:27:14,120\nAnd at the moment, I think Conform has\n\n410\n00:27:14,460 --> 00:27:14,960\nbeen\n\n411\n00:27:15,300 --> 00:27:17,580\nnot very good on this part.\n\n412\n00:27:17,900 --> 00:27:20,460\nAnd 1 thing I want to change and I want to improve\n\n413\n00:27:21,000 --> 00:27:21,500\nis\n\n414\n00:27:23,000 --> 00:27:23,760\nto centralize\n\n415\n00:27:24,520 --> 00:27:25,220\nthe state.\n\n416\n00:27:27,100 --> 00:27:30,700\nAnd there's also some extra benefit actually on this part is that,\n\n417\n00:27:32,720 --> 00:27:34,780\nso the idea is that you,\n\n418\n00:27:35,860 --> 00:27:36,680\nI will have\n\n419\n00:27:37,280 --> 00:27:39,780\nthe form handling, there's a,\n\n420\n00:27:41,540 --> 00:27:46,260\nokay, so maybe let me just explain how Conform works right now. I think that would be easier\n\n421\n00:27:46,640 --> 00:27:51,240\nto follow up. So the way that Confirm works right now is that,\n\n422\n00:27:52,540 --> 00:27:54,220\nwhenever there's a validation happen,\n\n423\n00:27:54,720 --> 00:27:56,080\nit's maybe elastic kind of validation,\n\n424\n00:27:56,980 --> 00:28:04,500\nsay no problem, then let's go to servers, and then the server try to validate, and server maybe say, oh, there's something went wrong. It's\n\n425\n00:28:04,840 --> 00:28:06,300\nreturned the submission\n\n426\n00:28:07,580 --> 00:28:15,520\nresult back to the client and the client pick it up. And then when confirm see, oh, there's some errors, it triggers the invalid event.\n\n427\n00:28:18,260 --> 00:28:23,540\nAnd each host that you're calling like use form, the use fields that this kind of folks who basically has a\n\n428\n00:28:24,000 --> 00:28:26,460\ninvalid event, this 1 is trying to capture\n\n429\n00:28:26,780 --> 00:28:27,540\nthis date.\n\n430\n00:28:28,320 --> 00:28:30,800\nAnd what happened is that we are actually using\n\n431\n00:28:31,400 --> 00:28:36,520\nthe DOM as a source of truth right now. So that every time whenever there's some updates,\n\n432\n00:28:38,140 --> 00:28:42,100\neach of the hooks is just kind of, okay, let me just read the DOM, read\n\n433\n00:28:42,740 --> 00:28:47,340\nthe message on the DOM, and then update the internal state and populate the users.\n\n434\n00:28:47,720 --> 00:28:54,740\nWhich works fine, works really fine for a while, but it becomes a bit limited in terms of how,\n\n435\n00:28:55,600 --> 00:28:58,760\nwhen the users want to capture some information\n\n436\n00:29:00,160 --> 00:29:01,500\nin some non-common\n\n437\n00:29:02,620 --> 00:29:03,120\ncases.\n\n438\n00:29:05,640 --> 00:29:07,080\nSo imagine like\n\n439\n00:29:07,880 --> 00:29:10,540\nmaybe you want to display the error message\n\n440\n00:29:11,040 --> 00:29:13,560\nnot next to your form, but in some place\n\n441\n00:29:13,980 --> 00:29:14,480\ndifferent.\n\n442\n00:29:15,060 --> 00:29:16,500\nAnd it would become very hard\n\n443\n00:29:16,800 --> 00:29:19,100\nfor you to get this information because\n\n444\n00:29:21,240 --> 00:29:22,860\nthe information is on\n\n445\n00:29:23,500 --> 00:29:24,620\nthe DOM, but\n\n446\n00:29:25,840 --> 00:29:28,340\nin a sense, in the world of focus enhancement,\n\n447\n00:29:28,820 --> 00:29:33,100\nyou don't have access to the DOM. You have to do it in the useEffect.\n\n448\n00:29:33,820 --> 00:29:34,320\nAnd\n\n449\n00:29:34,900 --> 00:29:37,320\nthis makes the things become very challenging.\n\n450\n00:29:37,900 --> 00:29:39,060\nAnd so what happened,\n\n451\n00:29:41,460 --> 00:29:43,600\nwhat I'm imagining right now is that basically\n\n452\n00:29:45,340 --> 00:29:46,920\nI have to utilize ReactContext,\n\n453\n00:29:47,560 --> 00:29:48,060\nunfortunately.\n\n454\n00:29:49,120 --> 00:29:53,420\nAnd so basically I have to- React context is for libraries. That's good. You're good.\n\n455\n00:29:53,960 --> 00:29:54,460\nYeah.\n\n456\n00:29:54,840 --> 00:30:04,540\nSo yeah, basically we centralize all this. So instead of picking the DOM as the source of truth, it would become, we use, we basically have a very simple store as the,\n\n457\n00:30:05,280 --> 00:30:14,000\nwhere we keep all the state and have each host subscribe to it. And the good thing with this approach is basically like, yeah, now we can allow\n\n458\n00:30:15,060 --> 00:30:15,560\nany\n\n459\n00:30:16,120 --> 00:30:22,060\ncomponent inside a tree to subscribe to it and reflect it in a progressive enhancement way.\n\n460\n00:30:23,400 --> 00:30:26,180\nYeah, 1 additional thing I want to share is that\n\n461\n00:30:27,840 --> 00:30:30,640\nin the next version, in the future version,\n\n462\n00:30:31,300 --> 00:30:32,700\nI'm also planning to\n\n463\n00:30:34,400 --> 00:30:35,580\nutilize useId\n\n464\n00:30:36,480 --> 00:30:38,280\nso that we can always generate\n\n465\n00:30:38,760 --> 00:30:42,540\na unique id for the form. And what it means is that,\n\n466\n00:30:42,980 --> 00:30:47,740\nbecause right now the way that Confirm works is it always has to know the\n\n467\n00:30:48,820 --> 00:30:52,700\nform element so that you can know that, okay, this change has been related to me.\n\n468\n00:30:53,760 --> 00:30:56,820\nAnd, but now with a unique ID, we always have a unique ID,\n\n469\n00:30:57,360 --> 00:31:00,080\nwe can totally make it flexible by,\n\n470\n00:31:00,520 --> 00:31:01,720\nSo imagine\n\n471\n00:31:02,960 --> 00:31:05,420\nif you always wanted things from the same tree\n\n472\n00:31:05,800 --> 00:31:22,700\nand you don't need to even pass ID. Everything you can pass down will have the ID included. But if you, let's say, if you want to access this information in somewhere, then all you need to do is just give an ID and then that will become the key in the store that which you can catch access directly outside\n\n473\n00:31:23,180 --> 00:31:24,100\nin any way.\n\n474\n00:31:25,840 --> 00:31:26,740\nYeah, yeah, okay.\n\n475\n00:31:27,120 --> 00:31:29,120\nSo this would just be\n\n476\n00:31:29,680 --> 00:31:32,940\nlike It sounds to me like this isn't necessarily required\n\n477\n00:31:34,020 --> 00:31:41,300\nto have that provider. Like people wouldn't have to have that by default. It's only necessary if you want to display error messages\n\n478\n00:31:42,840 --> 00:31:46,780\nin a different place from where the use form hook is called. Is that right?\n\n479\n00:31:48,900 --> 00:31:57,880\nYes and no. I guess there's some API I'm still experimenting and trying to get a good experience. So this is something I don't know yet.\n\n480\n00:31:58,660 --> 00:31:59,440\nOkay, okay, okay.\n\n481\n00:32:00,040 --> 00:32:02,260\nWell, if you can make it opt-in,\n\n482\n00:32:02,600 --> 00:32:06,640\nthen that's how I would prefer it personally. But I understand\n\n483\n00:32:07,120 --> 00:32:12,420\nif you need to require the provider. That's what Context is for. It's for libraries,\n\n484\n00:32:12,800 --> 00:32:15,020\nReact Router uses Context as well.\n\n485\n00:32:15,480 --> 00:32:17,360\nAnd in fact, in the workshops,\n\n486\n00:32:18,460 --> 00:32:19,240\nI have\n\n487\n00:32:19,780 --> 00:32:22,620\nan exercise on honeypot fields\n\n488\n00:32:23,620 --> 00:32:24,620\nand 1 on\n\n489\n00:32:25,200 --> 00:32:25,700\nauthenticity\n\n490\n00:32:26,040 --> 00:32:26,540\ntoken\n\n491\n00:32:26,920 --> 00:32:27,880\ninputs for\n\n492\n00:32:28,580 --> 00:32:30,560\ncross-site request forgery protection.\n\n493\n00:32:31,220 --> 00:32:35,280\nAnd both of those come from Remix Utils and they both require providers\n\n494\n00:32:36,100 --> 00:32:42,160\nbecause that's just how we do that, how we make those values available throughout the app. So,\n\n495\n00:32:43,100 --> 00:32:44,720\nyeah, that sounds interesting.\n\n496\n00:32:46,280 --> 00:32:54,840\nOkay, yeah, go ahead. Do you want, I just want to share a little bit more because I, so this, the idea of this centralizing state is not only\n\n497\n00:32:55,240 --> 00:32:55,740\nabout\n\n498\n00:32:56,040 --> 00:33:03,840\nmaking more things feasible, but actually it's also enabling some very, I think potentially some interesting use case in the future because I\n\n499\n00:33:04,140 --> 00:33:07,860\nwould right now I think it's already pretty good like we can support\n\n500\n00:33:09,140 --> 00:33:15,440\nsome of these operations in the progressive enhancement way but I don't want Conform to stop at this level\n\n501\n00:33:16,240 --> 00:33:16,740\nand\n\n502\n00:33:17,200 --> 00:33:19,240\nbecause there are all sort of\n\n503\n00:33:20,220 --> 00:33:26,540\nrequirements that people can come up with, and there's always cases like people might try to say, hey, can I do it in a progressive\n\n504\n00:33:27,040 --> 00:33:30,660\nway? But it's just so hard, usually, in most of the solutions, because\n\n505\n00:33:31,400 --> 00:33:33,140\nthere's so many things you need to manage.\n\n506\n00:33:33,900 --> 00:33:35,340\nAnd 1 thing that this,\n\n507\n00:33:37,420 --> 00:33:40,580\nby sending the states, what I want to enable is that we,\n\n508\n00:33:42,700 --> 00:33:43,820\nI want to actually\n\n509\n00:33:44,280 --> 00:33:46,300\nmove the state also to the server.\n\n510\n00:33:46,780 --> 00:33:49,820\nSo what happened right now is that whenever you do submission,\n\n511\n00:33:50,320 --> 00:33:52,340\nI am actually also sending\n\n512\n00:33:52,740 --> 00:33:53,760\nsome basic\n\n513\n00:33:54,140 --> 00:34:00,720\nadditional state of the current form to the server. So the server can utilize it to do additional processing\n\n514\n00:34:01,460 --> 00:34:04,300\nand send back. And at the same time, because it's centralized,\n\n515\n00:34:04,840 --> 00:34:08,860\nwe now have 1 single place that you can add additional logic\n\n516\n00:34:09,179 --> 00:34:10,820\non how things should be processed.\n\n517\n00:34:11,199 --> 00:34:11,699\nBecause,\n\n518\n00:34:12,739 --> 00:34:16,980\nas an example, 1 of the things that I don't like with the current implementation is that\n\n519\n00:34:17,780 --> 00:34:20,400\nit has been actually pretty challenging to implement\n\n520\n00:34:20,739 --> 00:34:21,679\nthe list\n\n521\n00:34:22,659 --> 00:34:25,020\naction in terms of the hooks because\n\n522\n00:34:26,920 --> 00:34:36,179\nthere's quite a fair amount of states within the, still in the useFieldList API which is trying to manage the keys and all sorts of stuff.\n\n523\n00:34:37,219 --> 00:34:45,639\nAnd when I try to, because I want to support both cases, like, hey, there's a Node.js cases, I want to support the cases when there's no,\n\n524\n00:34:46,020 --> 00:34:53,540\nthere's a kind.js, but you only want the server to validate. And at the same time, I want to support kind. And this is quite a bit of messy\n\n525\n00:34:53,860 --> 00:34:55,460\nlogic to trying to\n\n526\n00:34:55,760 --> 00:34:58,040\nmake the state in sync whenever\n\n527\n00:34:58,740 --> 00:35:02,460\na validation happens between the form and the hook itself.\n\n528\n00:35:04,220 --> 00:35:09,480\nAnd what happened with the changes that I'm thinking is that by centralizing state,\n\n529\n00:35:09,960 --> 00:35:18,340\nit just subscribes. So what happens is it's always a subscribe to centralize state. And in the future, I would love to have an API that people can\n\n530\n00:35:18,660 --> 00:35:19,940\ncreate their own intent\n\n531\n00:35:20,280 --> 00:35:20,780\nand\n\n532\n00:35:21,440 --> 00:35:22,580\nhave a kind of\n\n533\n00:35:23,100 --> 00:35:34,100\nlike a reducer, like you can think of it like a Redux store, like you can, you can, you get, you get a current state I have, you can tell how it's changed it. And what happens is that you just\n\n534\n00:35:35,800 --> 00:35:43,300\ntell the, how to parse it, so parse it on both client and server. And if the client doesn't know how to do it, again, let the server do it.\n\n535\n00:35:43,660 --> 00:35:46,940\nAnd then it gives a full cycle on how things\n\n536\n00:35:47,320 --> 00:35:47,820\nwork.\n\n537\n00:35:50,660 --> 00:35:55,080\nSo I love Conform in its current form. I think it's fabulous and amazing. And\n\n538\n00:35:56,140 --> 00:35:58,340\nI think it's awesome that you are\n\n539\n00:35:58,840 --> 00:35:59,720\nnot satisfied.\n\n540\n00:36:01,240 --> 00:36:07,320\nThat there are areas where you're like, this definitely could be improved and I want to make that happen. So\n\n541\n00:36:07,700 --> 00:36:09,880\nthank you for being so meticulous\n\n542\n00:36:11,320 --> 00:36:12,240\nabout this library\n\n543\n00:36:12,740 --> 00:36:14,440\nand for working on it.\n\n544\n00:36:15,300 --> 00:36:16,620\nIt's just been phenomenal.\n\n545\n00:36:17,660 --> 00:36:22,940\nWe're coming down to the end of our time. Is there anything that you wanted to talk about that we didn't really get to chat about yet?\n\n546\n00:36:27,900 --> 00:36:40,220\nI think no, I pretty much, yeah, I think. Cool, okay, good, good. Well, Edwin, what's the best way for people to support you and get in touch with you and keep up with stuff that you're working on?\n\n547\n00:36:42,720 --> 00:36:44,440\nYeah, I think the major way is\n\n548\n00:36:46,160 --> 00:36:47,140\nreally on...\n\n549\n00:36:50,560 --> 00:36:52,940\nYeah, I would actually love to have more people\n\n550\n00:36:53,740 --> 00:36:57,620\nwriting some tutorials, articles about how to use Conform because\n\n551\n00:36:58,480 --> 00:36:59,780\nI think 1 of the\n\n552\n00:37:00,200 --> 00:37:01,740\nbad ideas with\n\n553\n00:37:02,400 --> 00:37:10,900\nConform's naming is that it doesn't have remix in it. And I sort of realized it's become very challenging to get users because\n\n554\n00:37:11,600 --> 00:37:14,980\npeople when they're working with React, for sure they were looking for\n\n555\n00:37:15,420 --> 00:37:22,580\nsome common React libraries. But when they're working with Remix, they've searched for Remix and they didn't realize that Conform is actually working with Remix.\n\n556\n00:37:23,200 --> 00:37:28,760\nYeah, yeah, that makes sense. Yeah, so I think it would be actually really helpful if people, if they enjoy\n\n557\n00:37:29,080 --> 00:37:30,980\nworking with Conform, or even\n\n558\n00:37:31,340 --> 00:37:33,220\nif they don't like it, I'm actually happy\n\n559\n00:37:33,940 --> 00:37:36,100\nto get some feedback on sharing\n\n560\n00:37:36,740 --> 00:37:38,040\nhow they feel and\n\n561\n00:37:38,480 --> 00:37:41,020\nthis way, just a good way for me to improve.\n\n562\n00:37:42,180 --> 00:37:46,260\nWell, yeah, that sounds great. So get on it, folks. This is\n\n563\n00:37:46,560 --> 00:37:50,460\na very important thing to do for your own retention in learning,\n\n564\n00:37:51,160 --> 00:37:52,700\nto write the things that you\n\n565\n00:37:53,240 --> 00:38:03,540\nunderstand and that will solidify that understanding for you. So yeah, that sounds like a great idea. Is there a good way for people to keep it up with the stuff that you're working on?\n\n566\n00:38:06,140 --> 00:38:07,800\nYeah, so I think,\n\n567\n00:38:08,100 --> 00:38:12,680\nas I mentioned a lot of times, like there's some changes upcoming, and I probably,\n\n568\n00:38:13,660 --> 00:38:17,260\nso what happened with the coming changes, it'll probably be\n\n569\n00:38:18,240 --> 00:38:29,360\nV1, hopefully. So I think this is also a way for me to show that I am finally confident with my work. And I think it's time to give it a actual major version.\n\n570\n00:38:30,160 --> 00:38:33,480\nAnd, but before that happened, I'll probably go for\n\n571\n00:38:34,860 --> 00:38:46,660\na time of like half of release and beta release. So I'll probably do some announcement on the GitHub and sharing all the changes and trying to get some early feedback so that we can get a really good\n\n572\n00:38:47,120 --> 00:38:48,500\nshape before we release\n\n573\n00:38:49,120 --> 00:38:50,300\nthe first major version.\n\n574\n00:38:50,780 --> 00:38:52,840\nAwesome. Okay, so watch the releases\n\n575\n00:38:53,180 --> 00:38:54,880\non GitHub for Conform.\n\n576\n00:38:55,680 --> 00:39:01,180\nCool, well, thank you so much Edmund. I appreciate you giving us some of your time and everything else that you do.\n\n577\n00:39:01,480 --> 00:39:03,500\nHave a wonderful day. Thank you.\n\n578\n00:39:03,960 --> 00:39:04,700\nBye everybody.",
            "text": "[00:00:00] Kent:\nHey everybody, I'm excited to be joined by Edmund Hung and say hi Edmund. \n\n[00:00:07] Edmund:\nHello \n\n[00:00:08] Kent:\nEdmund is the creator of Conform the library that we're using in the Epic stack and through all the workshop exercises and everything. Conform touches pretty much everything that we do as part of the Epic stack, whether you're doing the login form or a file upload or like just \n\n[00:00:28] there's the forms are on pretty much every route, honestly. Or like even the theme toggle, that is also powered by Conform. So just a lot of cool stuff that Edmund is helping, or Edmund's library is helping us with. Integration with Zod as \n\n[00:00:48] well. We talked to Colin about Zod as well. So yeah, I met Edmund through Remix. I think my first clue into Edmund was the Remix.guide website that he put together a while back. And so, yeah, and \n\n[00:01:08] then Edmund built a form library and I decided, or I was trying like every single 1 and finally Edmund responded to all my requests and I said, hey, I don't like this, I don't like that. I would like it if it did this. And Edmund didn't do everything exactly the way that I said which I think is good. Edmund \n\n[00:01:28] is extremely thoughtful about his APIs and what he's building, which I love. So anyway, that is how I know Edmund. Edmund, I think it'd be good for you to give yourself an intro to yourself or give us an intro to yourself. \n\n[00:01:42] Edmund:\nYeah, sure. So hi everyone, I'm Edmund. I am a senior front-end developer for about 10 years, roughly 10 years, and I come from Hong Kong. And I'm currently working actually in Berlin in a company called Different Hero, which is a parent company for many \n\n[00:02:02] different, for different platform like DoorDash or Uber that you might heard of in US. Yeah, I, yeah, as Kent mentioned, I've been actually a kind of early adopter of Remix. I, I built RemixGuy and I have been maintaining Conform, I think \n\n[00:02:22] since, well, I think March last year. So it's like 1 and a half years now already, yeah. \n\n[00:02:32] Kent:\nWell, Yeah, awesome. It has been a wild ride with Remix and it's been cool to have you along for the ride the whole time. So with the company that you work at, are you using Remix there or is Remix just like a for fun thing for you? \n\n[00:02:48] Edmund:\nI wish, actually the first, I actually just joined this company early last year and the first thing I do is actually the pushing for Remix. And yeah, unfortunately I didn't make it, but still I think it was a very good ride because I kind of explained Remix to many people, talked to many people, and at least tried to get more people \n\n[00:03:09] knowing about Remix. And at the same time, the good thing is even without Remix, I can still use many of the cool ideas from Remix through web browsers, right? So yeah. \n\n[00:03:21] Kent:\nNo, that's good. Yeah. That's 1 of the beautiful things about Remix and the focus on the platform is that the ideas are so transferable. So with the Epic Web, a lot of people are asking me about like, okay, so why did you choose Remix for the framework and why didn't you go with \n\n[00:03:41] something more popular like Next.js? For 1, that is temporary. I'm pretty confident that Remix will be the most popular web framework in the world in the future. But secondly, the question that they're asking or what they're trying to get at is, \n\n[00:04:03] how is this going to apply to me if I'm not using Remix? And just like you said, the ideas of Remix are what are really powerful and can apply whether you're using Remix or not. So Yeah, that's cool. Okay, so you worked on Conform, like before I \n\n[00:04:23] started needing a form library solution. Well, I shouldn't say that. I've needed a form library solution the entire time I've been doing forms on the web. Like the forms are a challenging thing if you're doing more than just like 2 fields for your whole app. And so what motivated you to build \n\n[00:04:43] Conform? \n\n[00:04:45] Edmund:\nSo I have to be honest, I didn't really plan to actually make a form library at first. I was just toying around with Remix a lot, I think early last year. And I was kind of inspired by how Remix can utilize the web APIs, those platform, to introduce \n\n[00:05:05] kind of a model that is simple to understand, at the same time has a pretty good mechanism to handle what we need. So I kind of just like, hey, there might be something I can find out about validation. Then I basically just spend a weekend looking at the MDN, just and I realized, oh, there's an API \n\n[00:05:25] about the valid state, there's API about the invalid event. And that's kind of get me into the rabbit hole. Like, oh, maybe this, I just keep looking of the MDN docs and maybe sometimes even like, hey, maybe it's not enough. Let's go to check the XML spec and see if there's anything interesting. \n\n[00:05:46] And yeah, and that's just how things happen. And I just kind of like, yeah, try paying around different ideas. And then now it becomes what you see now. \n\n[00:05:58] Kent:\nCool, yeah. Yeah, you know, the HTML spec or the, just the web spec documents, I find that they're difficult to read unless you have a specific use case in mind. And so if you're thinking about, oh, well I want to understand how validation works and what order do these things happen, whatever. \n\n[00:06:20] If you have a use case in mind, then going through the spec documents is actually pretty interesting. And it definitely has a language of its own, like there's annotations and different things that you have to understand, but yeah, don't be afraid of the spec. That's a good thing, good call out. Okay, so you talked about the validity API in \n\n[00:06:40] the browser. Is Conform using that? \n\n[00:06:45] Edmund:\nI would say yes and no. So there's a lot of interest. I think whenever we talk about because enhancement in form validation, I think the first thing people would think of is those validation attributes, like required, the meaning, all sorts of stuff. And so you do it then when we talk about this in terms of web APIs, it will become \n\n[00:07:05] the valid state. And which is pretty cool. It's definitely pretty cool because it gives you a quick idea to like, hey, all kinds of validation being done by browsers. But at the same time, it's really hard to, it's not enough for most of the, well, it's not enough for like all sort of requirements that you might come up with \n\n[00:07:25] because form validation is a really hard topic. And so I Actually, when I start looking into this part, I think I spent 1 month trying to create kind of a SAP-like API on top \n\n[00:07:40] Kent:\nof this. \n\n[00:07:41] Edmund:\nAnd it's just, to me, it's just too much to take care of. And the different experience we saw, it's just so good that I end up thinking like, maybe I should not go for that route for now. I will come back to this later. And that's why right now, Confirm doesn't really have a direct \n\n[00:08:01] support on this part. But 1 interesting thing that we do right now is that we're utilizing the invalid event. So what happened is that Confirm is trying to disable the native browser validation and re-implement it. So that, and use the invalid event as a way to propagate errors to different places so that you \n\n[00:08:21] can, your component will be re-rendered only when necessary. \n\n[00:08:27] Kent:\nYeah, that is definitely a concern that probably some people listening have experienced when they hook up all of the state of their application into Redux and now all of a sudden every key press is triggering a re-render of the whole app and lots of pain associated with that for sure. So yeah, that is cool. So you mentioned \n\n[00:08:47] progressive enhancement. I had a timer for how long it took us to bring progressive enhancement up. I'm just kidding. But yeah, that's definitely a huge thing for you personally. And I would like to, if you could, kind of explain what progressive enhancement is and why you think it's so important. \n\n[00:09:09] Edmund:\nWow, that's a really good question. So, first of all, I think progressive enhancement, the idea of progressive Enhancement is so cool. That's actually maybe the first reason why I look into it. I think I actually heard about Progress Enhancement, the first time I heard about it, is not about JavaScript, \n\n[00:09:29] but actually about the idea of having HTML, CSS, and JavaScript separated, right? And Pugliese Hansman, when I first heard about it, is like, hey, you should have a semantics HTML so that when your CSS doesn't know, you still have something that is easy, it can be readable by the users. \n\n[00:09:50] And yeah, I just find it actually very cool. And then, yeah, but maybe, yeah, back to your question, sorry. So, ProcureHandsman to me is basically a way that you utilize the platform to think about what the users, what the platform can provide the users by just utilize HTML \n\n[00:10:11] and then incrementally add the layers of complexity by based on like whatever is available to the users or the browsers. And so that it has a very, it has an experience that is, yeah, I'm a bit out of things. \n\n[00:10:30] Kent:\nYeah, I like to say that progressive enhancement is about giving a baseline functional experience and then layering on, as you were saying, layers of improved experience based on the capabilities of the device. Yeah, so what is it about progressive enhancement that \n\n[00:10:50] you think is so important and why do you focus so much time and attention on it? \n\n[00:10:57] Edmund:\nSo Well, maybe a little story. So as I mentioned earlier, I grew up from an international city, Hong Kong, which is a small city with many people. And we generally have pretty good internet. So we... \n\n[00:11:17] But we... So many people in the city actually spend a lot of time commuting basically to the office. And, but still, with such a good city, with such a good infrastructure, it's actually very common to me to have struggle with like sometimes when I'm on a metro, \n\n[00:11:38] on a subway, whenever you pass through maybe certain tunnels, you suddenly can't do anything. And I think this is where like Progress Enhancement is 1 of the things that is kind of important because it seems everyone, when they talk about Progress Enhancement, they just think about, hey, I don't think my users will disable \n\n[00:11:59] JavaScript. But I think, yeah, a lot of people also mention, what really matters here is your website before the JavaScript node has no JavaScript and you cannot do anything. And if we are not trying to think in terms of progress enhancement, then it's very hard for, then users basically has nothing to do but \n\n[00:12:19] has to wait. And what they end up is they just keep refreshing, trying to hope that, okay, you get back to what they want. And I think if with, For example, with a good progress enhancement support on the farm, then your users will be able to continue to do what they do. \n\n[00:12:39] For sure, there's still a chance that you fail, but it still gives them a more smooth experience, hopefully, that they can complete what they're doing. Yeah. \n\n[00:12:50] Kent:\nYeah, I agree with that. And I've experienced that myself. It's definitely more pleasant to have the UI work than to like press the button and nothing happens. And so I'm like, oh, okay, I guess I'll refresh like that just seems like a really bad user experience. And \n\n[00:13:10] what people will sometimes say is that like, well, but this only affects, you know, point 1% of users, right, that this is going to be a thing we shouldn't dedicate so much of our time to it. But Ryan Florence says sometimes that this doesn't only affect 0.1% \n\n[00:13:31] of users, this affects 100% of users 0.1% of the time. And I think that kind of changes the calculus for me, at least a little bit to say, hey, every 1 of my users is at some point going to have some kind of failure in loading the JavaScript. And so let's give them as positive \n\n[00:13:51] an experience as possible in that world. The other thing that I love about progressive enhancement is that the mental model is a lot simpler as a developer, that development experience. Like it's been years now that we've been using Remix and I'm starting to forget how painful it was to manage \n\n[00:14:11] application state. And because I don't have to do that with Remix and that's because of progressive enhancement. And so yeah, I'm definitely bullish on progressive enhancement. What are some of the challenges with, so I guess I should say, Conform and just forms in general have a \n\n[00:14:31] huge role to play in progressive enhancement and making forms work when the user is using the app and the JavaScript fails or something like that, or is slow to load or something. And So there's a lot to say about progressive enhancement with forms. What would you say are the things that are \n\n[00:14:52] like the most challenging for you when you're trying to make sure that things are progressively enhanced? \n\n[00:14:59] Edmund:\nWell, The most challenging 1 is definitely how we enable people to be able to manage a list in a kind of friendly way with their, because my take sometimes with Procrastinant enhancement is like, yeah, as you mentioned, like it's, it will happen like \n\n[00:15:19] sometimes, It's not like, you don't expect that it happens all the time but whenever you need it, it should be supported. And, what was I saying? \n\n[00:15:30] Kent:\nYeah, you were talking about lists being really challenging to implement. \n\n[00:15:34] Edmund:\nYeah, so, in order to make this work, it actually has need to have some very special way. So actually, this is, I've been, so how's that? So when I was first working on the list, I actually have been like trying to, really trying to look out, hey, how can I make this \n\n[00:15:54] work from the server? Because there's no way I can, because usually when you think of it, it's just like, oh, I have a use day. And then I click this, I append an object. That's how you would think of it in most of the cases. But when you want the server to be included, the first question is how do you tell the users that \n\n[00:16:14] this happened? And I think this actually has a very huge impact on the Confirm architecture later on because this is actually the first thing I realized. The intent, kind of the intent pattern that would have been kind of quite popular in Vue Mix \n\n[00:16:34] form is that so that you basically include, I think it's basically you include a name and value in your button so that when you click it, you can include some additional information to your server. And Conform has been kind of expanding this idea to more stuff. So, and for example, in the case of this, we basically include the information of, hey, what the users, when the user, \n\n[00:16:54] I said this is an add button, then when you click it, then Confirm will basically include this extra information to say, hey, this user's wanna add maybe a new role to the item on this path, kind of the path. So yeah, and this path, and then I would need, I need confirm \n\n[00:17:15] to have a special handling to say, whenever he saw this, then it kind of processed the data that you sent out and then send back to the client so that the client can use it to be in his eyes. \n\n[00:17:27] Kent:\nYeah, and then we pipe it through use form with the last submission. Is that how we get that populated? Yeah. So in the workshops, we have the file upload on a note, and you can add as many images as you like. And I show people, \n\n[00:17:47] I turn off JavaScript, and like, look, I can add that. That's like, that is 100% a client-side operation for people, when they build it themselves. Like, there's no way that they would build a server round trip for that. And of course, when JavaScript is in the client, it's not a server round trip, it is all happening in the client, but it just \n\n[00:18:08] is so, so cool that you put that much effort into making even that experience work. And what's cool about this is, let's say that you do go through a tunnel, you've got the HTML, but the JavaScript didn't load in time. And so then you choose your image, you set the alt text and all that stuff, and then you come out of the tunnel, and you say, oh, \n\n[00:18:28] I want another image. It's gonna, you're gonna add that image, it's gonna do a full page refresh. You will lose the image, that 1 is, yeah, good luck with that. That would be a tough 1, I think. But at least like the, whatever else that you entered into that form is going to be there. \n\n[00:18:48] I just think that is so cool. And you'll have the same number of images there. So there are limitations to progressive enhancement and the level that you can take it. But I do think that it's just phenomenal how good you can make that. \n\n[00:19:08] Edmund:\nYeah, and 1 thing I want to add is, so this is just 1 part. So as I mentioned, like Conform has been utilized as intent patterns for actually a lot of the parts. So, and this is actually 1 of the reason why I think Progress Enhancement, we proved that Progress Enhancement can simplify a model because the way that the conform handle form \n\n[00:19:28] is everything is about submission. And it's just that every time based on the intention, you have a slightly different message being encoded together. So for example, if you're thinking about a kind validation, and let's say where you're typing something, you won't expect the Confirm to validate. And for sure you will update some options on the use \n\n[00:19:48] form to make it work. But what actually would happen is that Conform basically just helping you to check as a form submission with the corresponding valid intent. They say, hey, this user want to do that. And this actually enables some very cool additional features is that Confirm can work \n\n[00:20:08] with server validation without kind because everything is, imagine, everything is on submission. So, And if you don't have any kind of validation, what happens in Confirm, we just simply say, I don't know, just let the server handle it. And the server capture it, and server validate it, and then send it back. So that Confirm would \n\n[00:20:28] basically allow you to be just utilized fully on the server without, especially like sometimes you don't really need kind of validation, like if you are building a form, maybe a login form, and you don't really have some very complex validation logic, Why do \n\n[00:20:49] we borders? And you can just let the server do it. And server is a source of truth for everything, right? \n\n[00:20:53] Kent:\nMm-hmm. Yeah, that's very true. And I try to iterate that in the workshop, but I'm just gonna reiterate it. The server side is where you get your security and validation. The client side, the only reason you do client-side validation is for an enhanced user experience. \n\n[00:21:14] That's all that it gives you. It does not give you any level of security. But yeah, so what's really cool about this though is that you can share that validation logic on the client and the server. So anything that can go into the client will go in or you can put it in the client. \n\n[00:21:35] And this was the big promise of Node.js when it first, well, not when it first came out, but when people first started writing JavaScript that could be shared between the 2, is they're like, oh, we can run the exact same code on both sides, it'll be amazing. And Meteor tried to do something with that and that to varying levels \n\n[00:21:55] of success. But I feel like I never really experienced the reality of that promise until I started using Remix and Conform plus Zod has really given that to me. And like I not only get the server side validation and client side validation with Zod, but you \n\n[00:22:15] also are able to give me the progressive enhancement attributes, like the HTML5 attributes on these inputs based on my Zod schema. So if I say dot optional on this thing, then required isn't gonna be on there. And I just think that is so legit. Like that, when I was looking for a good form library, that was a requirement is being \n\n[00:22:35] able to have a schema and then generate HTML attributes and ARIA attributes as well automatically. So yeah, I'm thrilled that Conform can do that. \n\n[00:22:46] Edmund:\nNice. \n\n[00:22:47] Kent:\nYeah. So, another thing I wanted to ask you about was about working with that Zod schema. And sometimes there are things that, like validation that can run on the client like this, has a min length of 3 \n\n[00:23:07] and a max length of 20. But there are some validations that can't happen on the client by themselves, like this username is unique. So what we do in the workshop is we have a, just add a dot super refine or a dot refine or a dot transform on the server side in \n\n[00:23:27] the action. And that works really well. But is there a way to do that, like those async validations on the client? \n\n[00:23:39] Edmund:\nYep, definitely. So I think this is another use case of proofing like the model that Confirm has is actually very interesting because as I mentioned earlier, the way they confirm validate is when, it's basically a checker form submission with maybe a valid intent. And what happened, \n\n[00:24:00] So imagine like when you have, let's say, a sound form and you wanna have a username field that you wanna check for uniqueness, as you said. And you still, when you have kind of that in place, for sure you still want to kind of to just check whether let's say the users \n\n[00:24:20] has profile, a name, has something. And at the same time, maybe it has to follow a certain basic requirement. Let me put that meaning, there's some special characters that users cannot be using. And you want all this in client, but you only want, but whenever everything else is passed, you want the server to \n\n[00:24:40] do it. And the way that Conform actually make it work is that Conform actually think about itself as a middleware. That's the way I think about it. It's actually like a middleware in your sub-mean handlers. And because of the fact that Conform can work with both server validation and client validation, \n\n[00:25:01] it will be able to switch. So the way is that whenever the kind validation say, hey, I'm happy with the current username, but the kind validation doesn't know, this is for sure, it doesn't know how to check the uniqueness so you tell conform, like, hey, I'm happy, but there's something \n\n[00:25:22] additional I want to check. I don't know. So let's, how about let the server do it? And Confirm will, Confirm do is, oh, I just don't call event.pmnd default, and let we mix, capture it, and then it's being forwarded to the action and then The server for sure you will have to where there's an object that check the uniqueness already and \n\n[00:25:43] In that case it well you pass it you get a sub you get a submission you send back client The kind get a submission with errors is populated and done \n\n[00:25:53] Kent:\nYeah, yeah, I just love that. I think that the model itself just really speaks to how thoughtful you have been about the API and the way that it works. I think it's pretty constraining for you to have to live inside of this \n\n[00:26:13] box that you've kind of made for yourself. Like, these are my requirements, But as a user of Conform, it just drastically simplifies things. Because I can still, even with complex validation logic like that, I'm still not using useState or useEffect or any of that nonsense. It's amazing. So I mean, I'm sure that there's probably, \n\n[00:26:34] well, I guess I'm not sure. Are you using useState inside of Conform? I'm guessing you are somewhere. \n\n[00:26:40] Edmund:\nYes, this is, yeah, we have been, well, we have been kind of managing the errors in each of the conform hooks for sure. But actually this is 1 thing that's gonna be changed in the future because I am, so well, I mean, Formalization \n\n[00:27:01] has, to me has several areas, Formalization 1 part, but the other part is the management because a lot of people, error is just 1 part of the whole thing. There's a lot of information that people want. And at the moment, I think Conform has been not very good on this part. And 1 thing I want to change and I want to improve is \n\n[00:27:23] to centralize the state. And there's also some extra benefit actually on this part is that, so the idea is that you, I will have the form handling, there's a, okay, so maybe let me just explain \n\n[00:27:43] how Conform works right now. I think that would be easier to follow up. So the way that Confirm works right now is that, whenever there's a validation happen, it's maybe elastic kind of validation, say no problem, then let's go to servers, and then the server try to validate, and server maybe say, oh, there's something went wrong. \n\n[00:28:04] It's returned the submission result back to the client and the client pick it up. And then when confirm see, oh, there's some errors, it triggers the invalid event. And each host that you're calling like use form, the use fields that this kind of folks who basically has a \n\n[00:28:24] invalid event, this 1 is trying to capture this date. And what happened is that we are actually using the DOM as a source of truth right now. So that every time whenever there's some updates, each of the hooks is just kind of, okay, let me just read the DOM, read the message on the DOM, \n\n[00:28:44] and then update the internal state and populate the users. Which works fine, works really fine for a while, but it becomes a bit limited in terms of how, when the users want to capture some information in some non-common cases. \n\n[00:29:05] So imagine like maybe you want to display the error message not next to your form, but in some place different. And it would become very hard for you to get this information because the information is on the DOM, but \n\n[00:29:25] in a sense, in the world of focus enhancement, you don't have access to the DOM. \n\n[00:29:31] Kent:\nYou have to do it \n\n[00:29:32] Edmund:\nin the useEffect. And this makes the things become very challenging. And so what happened, what I'm imagining right now is that basically I have to utilize ReactContext, unfortunately. And so basically I have to- \n\n[00:29:50] Kent:\nReact context is for libraries. That's good. You're good. \n\n[00:29:53] Edmund:\nYeah. So yeah, basically we centralize all this. So instead of picking the DOM as the source of truth, it would become, we use, we basically have a very simple store as the, where we keep all the state and have each host subscribe to it. And the good thing with this approach is basically like, yeah, now we can allow \n\n[00:30:15] any component inside a tree to subscribe to it and reflect it in a progressive enhancement way. Yeah, 1 additional thing I want to share is that in the next version, in the future version, I'm also planning to utilize \n\n[00:30:35] useId so that we can always generate a unique id for the form. And what it means is that, because right now the way that Confirm works is it always has to know the form element so that you can know that, okay, this change has been related to me. And, but now with a unique \n\n[00:30:55] ID, we always have a unique ID, we can totally make it flexible by, So imagine if you always wanted things from the same tree and you don't need to even pass ID. Everything you can pass down will have the ID included. But if you, let's say, if you want to access this information in somewhere, then all \n\n[00:31:15] you need to do is just give an ID and then that will become the key in the store that which you can catch access directly outside in any way. \n\n[00:31:25] Kent:\nYeah, yeah, okay. So this would just be like It sounds to me like this isn't necessarily required to have that provider. Like people wouldn't have to have that by default. It's only necessary if you want to display error messages in a different place from where the use form hook is called. \n\n[00:31:45] Is that right? \n\n[00:31:48] Edmund:\nYes and no. I guess there's some API I'm still experimenting and trying to get a good experience. So this is something I don't know yet. \n\n[00:31:58] Kent:\nOkay, okay, okay. Well, if you can make it opt-in, then that's how I would prefer it personally. But I understand if you need to require the provider. That's what Context is for. It's for libraries, React Router uses Context as well. And in fact, in the workshops, I \n\n[00:32:18] have an exercise on honeypot fields and 1 on authenticity token inputs for cross-site request forgery protection. And both of those come from Remix Utils and they both require providers because that's just how we do that, how \n\n[00:32:38] we make those values available throughout the app. So, yeah, that sounds interesting. Okay, yeah, go ahead. \n\n[00:32:47] Edmund:\nDo you want, I just want to share a little bit more because I, so this, the idea of this centralizing state is not only about making more things feasible, but actually it's also enabling some very, I think potentially some interesting use case in the future because I would right now I think it's already pretty good like we can support \n\n[00:33:09] some of these operations in the progressive enhancement way but I don't want Conform to stop at this level and because there are all sort of requirements that people can come up with, and there's always cases like people might try to say, hey, can I do it in a progressive way? But it's just so hard, usually, \n\n[00:33:29] in most of the solutions, because there's so many things you need to manage. And 1 thing that this, by sending the states, what I want to enable is that we, I want to actually move the state also to the server. So what happened right now is that whenever you do submission, \n\n[00:33:50] I am actually also sending some basic additional state of the current form to the server. So the server can utilize it to do additional processing and send back. And at the same time, because it's centralized, we now have 1 single place that you can add additional logic on how things should be \n\n[00:34:10] processed. Because, as an example, 1 of the things that I don't like with the current implementation is that it has been actually pretty challenging to implement the list action in terms of the hooks because there's quite a fair amount of states within the, \n\n[00:34:30] still in the useFieldList API which is trying to manage the keys and all sorts of stuff. And when I try to, because I want to support both cases, like, hey, there's a Node.js cases, I want to support the cases when there's no, there's a kind.js, but you only want the server to validate. And at the same time, I want to \n\n[00:34:50] support kind. And this is quite a bit of messy logic to trying to make the state in sync whenever a validation happens between the form and the hook itself. And what happened with the changes that I'm thinking is that by centralizing state, it just subscribes. \n\n[00:35:11] So what happens is it's always a subscribe to centralize state. And in the future, I would love to have an API that people can create their own intent and have a kind of like a reducer, like you can think of it like a Redux store, like you can, you can, you get, you get a current state I have, you can tell how \n\n[00:35:31] it's changed it. And what happens is that you just tell the, how to parse it, so parse it on both client and server. And if the client doesn't know how to do it, again, let the server do it. And then it gives a full cycle on how things work. \n\n[00:35:50] Kent:\nSo I love Conform in its current form. I think it's fabulous and amazing. And I think it's awesome that you are not satisfied. That there are areas where you're like, this definitely could be improved and I want to make that happen. So thank you for being so meticulous \n\n[00:36:11] about this library and for working on it. It's just been phenomenal. We're coming down to the end of our time. Is there anything that you wanted to talk about that we didn't really get to chat about yet? \n\n[00:36:27] Edmund:\nI think no, I pretty much, yeah, I think. \n\n[00:36:30] Kent:\nCool, okay, good, good. Well, Edwin, what's the best way for people to support you and get in touch with you and keep up with stuff that you're working on? \n\n[00:36:42] Edmund:\nYeah, I think the major way is really on... Yeah, I would actually love to have more people writing some tutorials, articles about how to use Conform because I think 1 of the bad ideas with Conform's \n\n[00:37:02] naming is that it doesn't have remix in it. And I sort of realized it's become very challenging to get users because people when they're working with React, for sure they were looking for some common React libraries. But when they're working with Remix, they've searched for Remix and they didn't realize that Conform is actually working with Remix. \n\n[00:37:23] Kent:\nYeah, yeah, that makes sense. \n\n[00:37:24] Edmund:\nYeah, so I think it would be actually really helpful if people, if they enjoy working with Conform, or even if they don't like it, I'm actually happy to get some feedback on sharing how they feel and this way, just a good way for me to improve. \n\n[00:37:42] Kent:\nWell, yeah, that sounds great. So get on it, folks. This is a very important thing to do for your own retention in learning, to write the things that you understand and that will solidify that understanding for you. So yeah, that sounds like a great idea. Is there a good way for people to keep it up with the stuff \n\n[00:38:02] that you're working on? \n\n[00:38:06] Edmund:\nYeah, so I think, as I mentioned a lot of times, like there's some changes upcoming, and I probably, so what happened with the coming changes, it'll probably be V1, hopefully. So I think this is also a way for me to show that I am finally confident with my work. And I think it's \n\n[00:38:26] time to give it a actual major version. And, but before that happened, I'll probably go for a time of like half of release and beta release. So I'll probably do some announcement on the GitHub and sharing all the changes and trying to get some early feedback so that we can get a really good \n\n[00:38:47] shape before we release the first major version. \n\n[00:38:50] Kent:\nAwesome. Okay, so watch the releases on GitHub for Conform. Cool, well, thank you so much Edmund. I appreciate you giving us some of your time and everything else that you do. Have a wonderful day. \n\n[00:39:02] Edmund:\nThank you. \n\n[00:39:03] Kent:\nBye everybody."
          },
          "state": "ready",
          "_rev": "6LaeqP6n94P8FD3sVhYJnJ",
          "_type": "videoResource",
          "muxAsset": {
            "muxPlaybackId": "800keaCbLEZcuDPvVUYN02fAAm2evA6z01pq01GD4TE2iIw",
            "muxAssetId": "bCegIa02KONJZBr02tvxDa3FUEgsFlwMI502W00LClbt3Tc",
            "_type": "muxAsset"
          },
          "_updatedAt": "2024-03-19T20:25:45Z",
          "_createdAt": "2023-10-17T16:51:44Z",
          "originalMediaUrl": "https://egghead-video-uploads.s3.amazonaws.com/epic-web/interviews/Edmund+Hung.mp4",
          "duration": 2345.033333,
          "_id": "B9MrGEg0NpGWTknnF7teMJ",
          "title": "Edmund Hung.mp4"
        },
        "_id": "NS5Go30oWcGEvHRq8m766J",
        "_updatedAt": "2023-10-17T22:53:49Z",
        "title": "Simplifying Web Form Management with Edmund Hung",
        "description": "Edmund Hung, steward of Conform, an essential part of Epic's tech stack, dives into advanced form handling. Conform bypasses native validation for better control.",
        "slug": "simplifying-web-form-management-with-edmund-hung",
        "solution": null
      },
      {
        "_id": "B9MrGEg0NpGWTknnF8PN6t",
        "title": "Scalable Databases and Authentication with Iheanyi Ekechukwu",
        "description": "Iheanyi discuss database choices, authentication, and frontend-backend balance at PlanetScale. Vitess powers scalability.",
        "slug": "scalable-databases-and-authentication-with-iheanyi-ekechukwu",
        "videoResource": {
          "_id": "WBQDSVdErPwEcA4Fd0D7nv",
          "state": "ready",
          "duration": 1653.966667,
          "transcript": {
            "srt": "1\n00:00:00,359 --> 00:00:01,579\nWhat's up, everybody?\n\n2\n00:00:02,300 --> 00:00:12,940\nThis is your friend can't see dots and I'm joined by my friend a honey a kitchi-ku How are you doing, honey? All right doing all right. Yeah, it's good to be here. Did I get your name, right?\n\n3\n00:00:13,320 --> 00:00:18,580\nNo, but it's okay. I know it's e. Hi. You got the first name pretty good. Last name's Ekechukwu.\n\n4\n00:00:19,200 --> 00:00:20,240\nBut you know,\n\n5\n00:00:20,660 --> 00:00:33,480\nEkechukwu, it's hard, man. It's a lot of letters. It's intimidating. I get it. I know. But it's all good. So yeah. No, no, but like you spend your entire life correcting people on the pronunciation of your last name. So I am genuinely sorry. That's okay, man. I will do better.\n\n6\n00:00:33,800 --> 00:00:43,980\nIt's all good. I appreciate that. But yeah, I'm happy to be here, man. Thanks for having me. I'm super jazzed to have you here too. So, Ihani and I go back like quite a ways, honestly. So,\n\n7\n00:00:45,040 --> 00:00:49,580\nI had you as a panelist on JavaScript Air, the live broadcast podcast\n\n8\n00:00:50,020 --> 00:00:51,140\nback in 2015,\n\n9\n00:00:51,540 --> 00:00:55,580\nbut I feel like we knew each other before that as well, and I can't remember\n\n10\n00:00:55,960 --> 00:01:06,800\nexactly where we first met. Twitter, probably. Like, you know, I was doing a lot of React stuff back in, well, back in the day, still doing a lot of React stuff. And I think I'll just like, you know, back whenever the whole framework\n\n11\n00:01:07,200 --> 00:01:24,979\nwars were going on, with like Ember versus Angular versus React, you know, I was a huge Ember stan. I still am, I still use a good framework, but then I moved into React for like other jobs. And like, you know, React has kind of grown on me over the years, especially with like new frameworks popping up. So yeah, just like, you know, classic Twitter friendship.\n\n12\n00:01:25,520 --> 00:01:27,880\nYeah, yeah, those are good. Those are good.\n\n13\n00:01:28,180 --> 00:01:36,680\nWell, cool. So it's been awesome for me to get to know you over the years. Why don't you give us a little intro to yourself, like who you are and what you stand for, all that.\n\n14\n00:01:36,980 --> 00:01:38,660\nYeah, all right, well, bet.\n\n15\n00:01:39,380 --> 00:01:41,100\nSo yeah, once again, name's Ehii,\n\n16\n00:01:41,400 --> 00:01:42,740\nsoftware engineer at PlanetScale.\n\n17\n00:01:43,140 --> 00:01:48,020\nWe're trying to build the best database for developers on top of MySQL and Vitesse.\n\n18\n00:01:49,119 --> 00:01:51,800\nBasically, we wanna make it easy to make a database that's performant,\n\n19\n00:01:52,120 --> 00:01:52,620\nscalable,\n\n20\n00:01:53,360 --> 00:01:53,860\nand\n\n21\n00:01:54,720 --> 00:01:55,880\ncharitable, right?\n\n22\n00:01:57,900 --> 00:01:59,479\nI've been at PlantScale\n\n23\n00:01:59,820 --> 00:02:00,680\nsince November\n\n24\n00:02:01,100 --> 00:02:02,000\nof 2020,\n\n25\n00:02:02,980 --> 00:02:04,080\nand I work\n\n26\n00:02:04,400 --> 00:02:06,700\non the surfaces team, meaning\n\n27\n00:02:07,020 --> 00:02:08,500\neverything that the customer touches\n\n28\n00:02:08,860 --> 00:02:10,300\nis my team's responsibility.\n\n29\n00:02:10,759 --> 00:02:12,280\nSo whether that's the CLI,\n\n30\n00:02:12,720 --> 00:02:15,740\nthe admin dashboard that you see the AP and the API\n\n31\n00:02:16,640 --> 00:02:17,140\nSDK's,\n\n32\n00:02:17,600 --> 00:02:19,320\neven like the serverless\n\n33\n00:02:19,920 --> 00:02:21,140\ndriver that we have,\n\n34\n00:02:21,820 --> 00:02:22,720\nor the serverless\n\n35\n00:02:23,200 --> 00:02:27,840\nJavaScript database driver that we have, like my team works on all those.\n\n36\n00:02:28,260 --> 00:02:29,000\nAnd yeah.\n\n37\n00:02:29,680 --> 00:02:43,400\nCool, cool. And before that you were at GitHub? Yep, worked on GitHub Actions for a nice 2 and a half years from like alpha to like where it's at, like to like GA and like helping scale it up and stuff like that. So it's been fun. I like developer tools a lot.\n\n38\n00:02:43,780 --> 00:02:50,320\nYeah, yeah, obviously. Well, that's good because you've spent a lot of time doing it, so I'm glad you enjoy your work. Yeah, yeah, no, right?\n\n39\n00:02:51,020 --> 00:02:51,960\nCool, yeah,\n\n40\n00:02:52,460 --> 00:02:53,160\nso PlanetScale,\n\n41\n00:02:54,020 --> 00:02:58,400\nI first heard of PlanetScale back in, yeah, around 2020 as well,\n\n42\n00:02:58,940 --> 00:03:00,360\nwhen I was working on\n\n43\n00:03:00,940 --> 00:03:23,820\na rewrite of my website and I was deciding, okay, so where do I wanna host stuff? I was hosting on Netlify, but I wanted, I was using Remix or starting to use Remix at the time. And I wanted to go, you know, planet scale. I wanna deploy to multiple regions all over the world. And I quickly found out that if you, like you can deploy to multiple regions all over the world. And I quickly found out that if you, like you can deploy to multiple regions all over the world, but if your\n\n44\n00:03:24,520 --> 00:03:27,780\ndata is not in that same region,\n\n45\n00:03:28,220 --> 00:03:40,440\nlike next to where you're deployed to, then it doesn't do a ton of good. Like it is a little bit, gonna be a little bit better probably, but you gotta put your data and your authentication and alongside\n\n46\n00:03:41,800 --> 00:03:42,300\nyour\n\n47\n00:03:42,620 --> 00:03:48,040\ndeployed servers as well to make it better. Yeah, so speed of light is real, yeah. Yeah, yeah,\n\n48\n00:03:48,340 --> 00:03:49,160\nfor real.\n\n49\n00:03:50,140 --> 00:03:51,560\nAnd so, yeah,\n\n50\n00:03:51,980 --> 00:03:54,640\nPlanetScale was 1 of the ones that I looked at because\n\n51\n00:03:55,080 --> 00:04:01,560\nof you know that distributed nature of planet scale ultimately I went with fly because then I could do hosting\n\n52\n00:04:01,920 --> 00:04:11,260\nmy service, like my server alongside the Postgres cluster. And that ended up working out. And then eventually I went over to SQLite and it's been kind of interesting\n\n53\n00:04:11,600 --> 00:04:12,740\nhistory there. But\n\n54\n00:04:13,140 --> 00:04:21,380\nyeah, so PlanetScale has been doing some pretty cool stuff. And like, talk about 1 of the best names in the business to like right when it's like perfect.\n\n55\n00:04:22,280 --> 00:04:26,620\nSo yeah, yeah. So that's cool. What would you say is the most interesting\n\n56\n00:04:28,040 --> 00:04:29,040\nunique differentiator\n\n57\n00:04:29,380 --> 00:04:30,460\nof planet scale?\n\n58\n00:04:31,180 --> 00:04:32,340\nI think it's a\n\n59\n00:04:32,840 --> 00:04:36,700\nso hard. I think the main thing that I want to say is that,\n\n60\n00:04:38,000 --> 00:04:47,700\nwell, first things first, I think like the main differentiator is like, you know, the ability of scaling, right? Like I think in the last 3 plus years we've seen a like\n\n61\n00:04:49,220 --> 00:04:50,580\nrise of mad different\n\n62\n00:04:50,960 --> 00:05:12,180\nlike database startups, right? A lot of them are like, you know, you got like CockroachDB, which has been around longer than that, but now they like have like, you know, released like a serverless workflow. You have like, you know, Neon and Superbase and others. And then like this whole vector databases and all like that. I think the main thing is just like, you know, when it comes down to it, PlanetScale is kind of unique in the sense that like we're built\n\n63\n00:05:12,540 --> 00:05:19,120\non top of a test, which was used at like YouTube back in the day to help scale up their traffic, like back in\n\n64\n00:05:19,440 --> 00:05:20,420\nthe early 2010s.\n\n65\n00:05:22,260 --> 00:05:23,400\nAnd that's like battle-tested\n\n66\n00:05:24,140 --> 00:05:24,640\ntechnology.\n\n67\n00:05:25,080 --> 00:05:33,500\nI'm familiar with the test, cause we used it at, like GitHub is a heavy user of it as well, so I had used it there. And I think that's nice, because it sits\n\n68\n00:05:33,900 --> 00:05:39,640\nin front of MySQL, making it easier to scale. And also when it comes out to sharding, it just handles it for you. You don't have to\n\n69\n00:05:39,960 --> 00:05:50,880\nchange much. You don't have to change much application logic, if at all. It just works. And that's what I like about the core infrastructure level of it, but then we have other things built into the product like\n\n70\n00:05:51,600 --> 00:05:52,100\nnon-blocking\n\n71\n00:05:52,460 --> 00:05:53,340\nschema migrations.\n\n72\n00:05:53,800 --> 00:05:57,420\nSome people, like me, back whenever I was younger or doing a side project,\n\n73\n00:05:58,040 --> 00:06:09,120\nif I'm hosting something on Heroku or something, I would just apply to database migrations on top of like while deploying, right? But yeah, is that always, you know, in reality, that's not like a best practice at\n\n74\n00:06:09,720 --> 00:06:31,500\nbeer companies. Whenever we would do database migrations, we'd have to stage them separately and then like wait for database administrators. So apply to migration and then we can roll out our code changes after that's done. But we built this as a first-class-like product in the, or feature, rather, in the plant scale with deploy request. You can queue up, you can branch off your production database branch, and then you can apply a new schema to\n\n75\n00:06:32,360 --> 00:06:36,580\nthat copy of your database branch to update the schema, open a deploy request,\n\n76\n00:06:37,540 --> 00:06:47,460\nand then it's similar to a GitHub pull request. You get an approval from a teammate, and then with 1 click of a button, you can deploy changes. And that will deploy the schema changes to the\n\n77\n00:06:47,980 --> 00:06:52,000\nproduction branch with 0 downtime. Whereas in other databases, right?\n\n78\n00:06:53,180 --> 00:07:00,660\nLike Postgres, for example, if you try to do that, if it's a large database, you can deal with locking. And even in MySQL, you can deal with locking as well. But the underlying\n\n79\n00:07:01,220 --> 00:07:10,780\ninfrastructure and code that does this, does it in a way that like, lets it be copied data in real time to another table and then like swap it over without any downtime,\n\n80\n00:07:11,120 --> 00:07:40,540\nyou know? So you have like, yeah. So all of that's like non-blocking migrations and they can be long running. Like I've seen some migrations on like our largest tables take like 3 hours, right? But you can just come back to it and it works and you can like no downtime, 0 downtime whatsoever. And this is great. So I think we're like, like what I love about PlantScale and why I chose to work here is that, you know, we see all these areas of computing, like, getting better, right? Like, you know, a lot of, like, focus on edge computing. We're in this little\n\n81\n00:07:41,260 --> 00:07:41,760\nAI,\n\n82\n00:07:42,260 --> 00:07:43,340\nlike, renaissance.\n\n83\n00:07:43,740 --> 00:07:48,660\nBut I think, like, you know, It's funny you see startups for things like email. You see startups for things like\n\n84\n00:07:49,900 --> 00:07:57,260\nthe terminal or whatever. But databases really haven't gone through any innovation in a long time. And whenever people think databases, they don't think\n\n85\n00:07:58,060 --> 00:07:58,760\nlike developer-friendly\n\n86\n00:07:59,100 --> 00:07:59,600\nUX.\n\n87\n00:08:00,660 --> 00:08:08,540\nI don't know, man. I just like making developer tools and making things easy for people. So, it seemed like a good challenge to learn more about databases and just\n\n88\n00:08:09,020 --> 00:08:10,360\nbeing challenged, you know?\n\n89\n00:08:10,760 --> 00:08:12,180\nYeah, yeah. So, as\n\n90\n00:08:12,780 --> 00:08:14,480\na developer who\n\n91\n00:08:15,060 --> 00:08:16,900\nwas working in Ember and then React.\n\n92\n00:08:17,780 --> 00:08:19,200\nNow you're over at PlanetScale.\n\n93\n00:08:19,840 --> 00:08:30,740\nIt sounds like you're doing a lot of user or developer as your user, but like user facing stuff. Do you ever get like pretty deep into the database side of things too?\n\n94\n00:08:31,320 --> 00:08:38,980\nSometimes, like I know how, I know, I just learned that from like previous gigs, you know. The main thing is that like, you know, I do front end, I do back end.\n\n95\n00:08:39,720 --> 00:08:43,980\nThere's an orchestration layer, which is a Go service. And then it talks to a Kubernetes operator.\n\n96\n00:08:44,280 --> 00:09:08,100\nSometimes I go into the orchestration service with like, I know how to write Go as well. But usually that team is like on top of like is pretty on top of things. So I don't really have to. But yeah, yeah, we have database specialists. Like we have a lot of the test core maintainers that work at plant scale. So like I don't necessarily have to go deep into the weeds of things unless there's an interesting bug that's been reported to my team and we have to go and debug it ourselves\n\n97\n00:09:08,600 --> 00:09:09,100\nand\n\n98\n00:09:09,960 --> 00:09:14,640\nhelp open up an issue. But usually it's like we have specialists in the company that know\n\n99\n00:09:15,140 --> 00:09:16,600\nthat are just like MySQL\n\n100\n00:09:17,140 --> 00:09:17,640\ngeniuses.\n\n101\n00:09:18,820 --> 00:09:19,700\nYep, yep.\n\n102\n00:09:20,140 --> 00:09:22,540\nWe'd always appreciate those people for sure.\n\n103\n00:09:23,400 --> 00:09:29,660\nYeah, for real. So you've been there, when was the company started? Were you 1 of the first employees there?\n\n104\n00:09:30,060 --> 00:09:33,340\nFunny enough, no, but it feels like it. The company was actually started in 2018.\n\n105\n00:09:33,900 --> 00:09:35,420\nI was brought on by\n\n106\n00:09:36,180 --> 00:09:36,920\nthe CEO,\n\n107\n00:09:37,360 --> 00:09:39,260\nthe now CEO, to help\n\n108\n00:09:41,680 --> 00:09:44,400\nrebuild what is like PlanetScale of today.\n\n109\n00:09:45,520 --> 00:09:46,520\nYeah, so basically\n\n110\n00:09:47,460 --> 00:09:50,580\nit was like a pivot, still using like the same primitives\n\n111\n00:09:50,900 --> 00:09:51,400\nand\n\n112\n00:09:51,820 --> 00:09:56,420\nall that to make things amazing, right? But we built like a whole new product on top of it.\n\n113\n00:09:57,500 --> 00:09:58,880\nAnd yeah, it's been great.\n\n114\n00:09:59,540 --> 00:10:01,340\nYeah, cool. So as part of\n\n115\n00:10:03,180 --> 00:10:07,160\nthat building of a new product, I was told that you\n\n116\n00:10:07,720 --> 00:10:11,780\nworked on the authentication for that. And authentication is a\n\n117\n00:10:13,120 --> 00:10:14,620\nbig part of what I\n\n118\n00:10:15,040 --> 00:10:15,980\nteach in the Epic\n\n119\n00:10:16,400 --> 00:10:17,260\nweb workshops.\n\n120\n00:10:17,800 --> 00:10:18,580\nThat's actually,\n\n121\n00:10:19,160 --> 00:10:21,300\nso there are 5 workshop repos\n\n122\n00:10:21,900 --> 00:10:27,620\nand most workshop repos are like 10 to 15 exercises, something like that.\n\n123\n00:10:28,940 --> 00:10:30,860\nThe auth 1 is like 23\n\n124\n00:10:31,440 --> 00:10:40,300\nexercises or something like that. So it's like just so much stuff involved with that. Yeah. I'd like to hear a little bit about the auth that you built yourself\n\n125\n00:10:41,300 --> 00:10:46,420\nand why you built it yourself instead of going with the service or when services made sense for you.\n\n126\n00:10:47,040 --> 00:10:48,740\nYeah, so honestly and truly,\n\n127\n00:10:50,380 --> 00:10:50,880\nauthentication\n\n128\n00:10:51,200 --> 00:10:54,460\nis kind of a solved problem, and not kind of, it is\n\n129\n00:10:55,020 --> 00:11:03,460\na solved problem in Ruby on Rails. That's what the client scale API is built on top of, that's what we use for our internal admin panel, and that's what we use for our authentication.\n\n130\n00:11:03,920 --> 00:11:07,940\nThere's a gem in Ruby, there's a Ruby gem called Devise,\n\n131\n00:11:08,480 --> 00:11:10,580\nand that's kind of like the standard for\n\n132\n00:11:11,000 --> 00:11:11,500\nauthentication,\n\n133\n00:11:12,540 --> 00:11:18,540\nwhich is great. You just like install the gem, it also generates like the templates for you that you need for a login form.\n\n134\n00:11:19,080 --> 00:11:27,680\nToss that off to a designer and they work with it and they apply their little magic to it and it's pretty much done. And it handles session, like it handles\n\n135\n00:11:28,580 --> 00:11:32,380\nthe session management and all that good stuff as well.\n\n136\n00:11:34,540 --> 00:11:35,840\nPassword, like password\n\n137\n00:11:36,160 --> 00:11:36,660\nconfirmation,\n\n138\n00:11:37,740 --> 00:11:38,720\npassword reset,\n\n139\n00:11:39,240 --> 00:11:45,180\nforgot password, yeah, like forgot password flow. Like everything is built in out of the box with that, right?\n\n140\n00:11:46,240 --> 00:11:46,740\nAnd\n\n141\n00:11:47,140 --> 00:11:48,220\nevery single company,\n\n142\n00:11:48,540 --> 00:11:59,560\nnot every single company, but a lot of companies use Devise. It's been used for years. There's alternatives like RodAuth if you don't want to go the Devise route. But I just like Devise because 1, it's what we already knew.\n\n143\n00:12:00,020 --> 00:12:03,980\nLike GitHub runs on Ruby on Rails, right? So we have a lot of Rails specialists at the company.\n\n144\n00:12:06,100 --> 00:12:06,600\nAnd\n\n145\n00:12:06,900 --> 00:12:11,780\nit also plays nicely with other gems like OmniAuth, which is what we use for our GitHub authentication\n\n146\n00:12:13,180 --> 00:12:14,000\nvia OAuth.\n\n147\n00:12:15,060 --> 00:12:15,560\nAnd\n\n148\n00:12:16,020 --> 00:12:16,720\nthe plugin\n\n149\n00:12:17,380 --> 00:12:23,420\nfor device authorization grants that we use for the CLI to have that nice little login flow when you do PScale login.\n\n150\n00:12:24,440 --> 00:12:25,400\nYeah, yeah. So\n\n151\n00:12:26,300 --> 00:12:29,240\nit sounds like, or honestly, it sounds nice\n\n152\n00:12:30,040 --> 00:12:30,720\nfor a\n\n153\n00:12:31,060 --> 00:12:36,760\ndeveloper working primarily in the JavaScript ecosystem where we can't really agree on anything.\n\n154\n00:12:37,440 --> 00:12:38,460\nThat's the problem.\n\n155\n00:12:39,020 --> 00:12:39,520\nYeah,\n\n156\n00:12:41,000 --> 00:12:48,380\nhaving a 1 package that kind of does it all. I think that's part of what I'm hoping to be able to do with the Epic stack. I don't know if you've\n\n157\n00:12:48,740 --> 00:12:51,540\nseen me tweeting about the Epic stack, but it's just like this\n\n158\n00:12:53,000 --> 00:12:54,460\nstack of tools\n\n159\n00:12:54,800 --> 00:12:57,900\nor a starter project and a reference for people.\n\n160\n00:12:58,620 --> 00:13:05,720\nAnd there's a lot of code in there for managing the authentication stuff. And eventually I'm hoping to turn the auth stuff into\n\n161\n00:13:06,020 --> 00:13:07,700\na package that's like,\n\n162\n00:13:08,160 --> 00:13:11,540\nwhere implementing auth in a product like PlanetScale\n\n163\n00:13:12,240 --> 00:13:15,040\ncan be just as much a non-story\n\n164\n00:13:15,820 --> 00:13:18,280\nas it was for you when using Rails.\n\n165\n00:13:19,820 --> 00:13:21,920\nBut you mentioned also that\n\n166\n00:13:22,740 --> 00:13:23,660\nyou do support\n\n167\n00:13:24,520 --> 00:13:25,340\nsingle sign-on\n\n168\n00:13:25,760 --> 00:13:29,080\nand SAML and stuff, so do you want to talk a little bit about that?\n\n169\n00:13:29,440 --> 00:13:34,580\nI don't think that I've ever heard anybody say simple and SSO in the same sentence. So,\n\n170\n00:13:35,220 --> 00:13:44,440\nand that is comes to like, you know, when I believe in like, you know, build versus buy a lot of people want to like, I think the whole discussion that was on Twitter, like whenever\n\n171\n00:13:44,880 --> 00:13:55,540\nthis whole off topic was going on, I think people were talking about third party auth services to handle everything, like, you know, the user, like, you know, the user logins and all that other stuff, and like the user management,\n\n172\n00:13:55,960 --> 00:13:57,180\nthis, that, and the third.\n\n173\n00:13:57,560 --> 00:13:59,940\nAnd to me, I think that\n\n174\n00:14:00,740 --> 00:14:06,180\nthird party auth services have a time and a place, but not necessarily for the core authentication experience.\n\n175\n00:14:07,120 --> 00:14:08,000\nLike at least\n\n176\n00:14:08,560 --> 00:14:10,860\nat least when like, you know, languages like Ruby,\n\n177\n00:14:11,640 --> 00:14:12,140\nPython\n\n178\n00:14:12,860 --> 00:14:14,120\nand even like, you know,\n\n179\n00:14:15,060 --> 00:14:20,260\nframeworks like Laravel and PHP, like all of their, all these languages have like figured out the authentication\n\n180\n00:14:20,660 --> 00:14:29,180\naspect of it, right? And like, you want to store your users in a database, right? You want to be able to query what your users are doing and attaching it to them. And\n\n181\n00:14:30,060 --> 00:14:35,400\nOnce you outsource this to a third party service, you're beholden to their like uptime, their reliability.\n\n182\n00:14:35,840 --> 00:14:37,820\nAnd so many things can go wrong, right?\n\n183\n00:14:38,860 --> 00:14:42,680\nSo I like the hybrid approach that we have at PlanScale. We actually do SAML and SSO\n\n184\n00:14:43,000 --> 00:14:44,640\nfor our enterprise customers\n\n185\n00:14:45,480 --> 00:14:46,900\nthat is powered by WorkOS.\n\n186\n00:14:47,460 --> 00:14:55,080\nAnd what I like about WorkOS is that, it's funny, they do have like traditional path authentication methods, like I think, like username, password,\n\n187\n00:14:55,580 --> 00:14:56,180\nor like\n\n188\n00:14:58,480 --> 00:15:00,000\nmagic links over email.\n\n189\n00:15:00,480 --> 00:15:17,940\nBut we just use them for the SAML and SSO parts because SAML is not simple, but what I like about it is that we can still use device, but the way that WorkOS is architected, that we can just sprinkle that in on top of our authentication system, and it's not fully locked in vendor-wise to it, right? And it really thought through the flow of like making\n\n190\n00:15:18,280 --> 00:15:29,040\nSAML and SSO easy. And even we took it to the next level by using the directory sync product. So like basically whenever something changes in LDAP directory, the reflection of that is like reflected\n\n191\n00:15:30,280 --> 00:15:33,000\nin like the PlanetScale organization. You can map like\n\n192\n00:15:33,660 --> 00:15:35,720\ndirectory groups to teams in PlanetScale.\n\n193\n00:15:36,180 --> 00:15:42,180\nAnd this do a lot of us, like a lot for us that would be really difficult to do on our own. And like\n\n194\n00:15:42,500 --> 00:15:43,440\nhaving that technology\n\n195\n00:15:45,660 --> 00:15:49,780\nAnd given the fact that it's providing value to some of our highest paying customers,\n\n196\n00:15:50,220 --> 00:15:57,320\nmakes it a no brainer, right? Like it's just a really well thought out product and like doesn't get in the way. It's just like you can use it\n\n197\n00:15:57,700 --> 00:15:59,440\nno matter what else you're using, right?\n\n198\n00:16:00,120 --> 00:16:00,700\nYeah, yeah.\n\n199\n00:16:01,060 --> 00:16:03,360\nI agree with that. I think that like,\n\n200\n00:16:03,940 --> 00:16:08,000\neven if people do decide they want to use a auth service for\n\n201\n00:16:08,420 --> 00:16:13,420\nthe basic stuff, which I don't think that most people should, but even if you do,\n\n202\n00:16:14,060 --> 00:16:18,180\nyou should definitely keep your user data in your own user table.\n\n203\n00:16:18,580 --> 00:16:19,080\nLike\n\n204\n00:16:19,640 --> 00:16:21,000\nI can't imagine\n\n205\n00:16:21,460 --> 00:16:25,420\nrelying on a third party to get user data on every single request.\n\n206\n00:16:26,500 --> 00:16:29,800\nYep. Like that just sounds like a really, really bad idea.\n\n207\n00:16:30,520 --> 00:16:31,260\nAnd then\n\n208\n00:16:31,780 --> 00:16:35,340\nlike on top of that, there's the vendor lock-in and all that too, of course.\n\n209\n00:16:36,040 --> 00:16:37,620\nBut yeah, using\n\n210\n00:16:38,260 --> 00:16:42,080\na third party to manage the really complicated stuff like\n\n211\n00:16:42,440 --> 00:16:43,860\nSSO and SAML,\n\n212\n00:16:44,280 --> 00:16:49,340\nI think makes sense. There are some really sweet libraries coming out for\n\n213\n00:16:49,860 --> 00:16:50,820\ndoing SAML.\n\n214\n00:16:52,060 --> 00:16:58,120\nAnd there's a lot of enterprises are moving to OpenID Connect as well, which is a lot easier.\n\n215\n00:16:58,580 --> 00:17:00,980\nSo yeah, the future, I think,\n\n216\n00:17:01,460 --> 00:17:07,359\nthis is still a bit of a moving target when it comes to third party auth and stuff like that.\n\n217\n00:17:08,140 --> 00:17:09,220\nBut yeah, it's an\n\n218\n00:17:09,520 --> 00:17:20,180\ninteresting world there. Yeah, I'd like to say though, WorkOS has support for multiple languages, right? Like we use a Ruby gem, and it works like a, no pun intended, gem, or works like a charm.\n\n219\n00:17:21,599 --> 00:17:25,440\nBut yeah, they have Python support, JavaScript support, PHP support, all that.\n\n220\n00:17:26,760 --> 00:17:30,080\nBut yeah, it's pretty good. But I'm always interested in seeing what happens\n\n221\n00:17:31,440 --> 00:17:31,940\nwith\n\n222\n00:17:33,300 --> 00:17:38,400\nthe ecosystem. Because Sam 1 SSO is just like all the certificates and stuff that you have to manage and like, it's just so grimy.\n\n223\n00:17:38,860 --> 00:17:40,160\nYeah, it sounds awful.\n\n224\n00:17:40,960 --> 00:17:44,680\nYeah, no kidding. Well, and also LDAP support.\n\n225\n00:17:45,040 --> 00:17:46,700\nI didn't even think about that, but like,\n\n226\n00:17:49,020 --> 00:17:50,740\nthat's pretty, yeah, that's a couple engineers.\n\n227\n00:17:52,720 --> 00:18:01,260\nThat, you know, maybe 1 full-time engineer just dedicated to that, that you're saving by just paying WorkOS. I am the only 1 that like,\n\n228\n00:18:02,940 --> 00:18:17,860\na coworker of mine set up the initial like, connection for like SSO for WorkOS, and then I'm just like on the hook for all of the LDAP stuff, like the directory syncing, logic, how it interfaces and interacts in our product, and stuff like that. We actually dog food it and use it internally as well for\n\n229\n00:18:18,280 --> 00:18:30,780\nmapping to teams, for admin rights and stuff like that, and combined with other things like access request and Okta or whatever, this is a nice automated workflow and allows for really powerful things within a project.\n\n230\n00:18:31,120 --> 00:18:37,400\nYeah, yeah. Well, and without it, you wouldn't, like you said, you wouldn't have those big paying customers. Like that's where\n\n231\n00:18:37,860 --> 00:18:43,480\nso much of the money comes from for a B2B SaaS company like Plants. Correct, yeah, exactly.\n\n232\n00:18:44,100 --> 00:18:46,160\nSo may as well get it right.\n\n233\n00:18:46,640 --> 00:19:01,820\nIt's worth what it costs for that. But I will not back down on the don't use it for your basic auth stuff and like when you're just trying to get off the ground it just seems silly to me to pay a service for something like this. It can just be installed. I agree.\n\n234\n00:19:02,480 --> 00:19:03,840\nYeah, I agree.\n\n235\n00:19:04,220 --> 00:19:10,280\nIt seems like the only time I feel like it makes sense in this case is like some languages, right? Like\n\n236\n00:19:10,800 --> 00:19:22,320\nI'm gonna use Go as an example, even though I like love the language. It's hard building a web product and like using Go, right? Like you have to do ORMs really on our thing in the ecosystem or it's kind of like discouraged.\n\n237\n00:19:22,680 --> 00:19:27,540\nAnd I've written a lot of Go, like we use it at GitHub for like the actions, like\n\n238\n00:19:27,980 --> 00:19:48,300\nthe main action service I worked on. We use that plant scale for our orchestration layer. But it's like, you know, authentication with Go, like you have to do all the salting and like hashing of the password yourself, this, that, and the third. So I can understand why people would want like offload that or outsource that to like Auth0 or something else because like the story for Go is not really good for authentication,\n\n239\n00:19:48,760 --> 00:19:51,340\nlike in terms of like the packages and ecosystem.\n\n240\n00:19:51,740 --> 00:19:55,940\nBut other languages like, you know, Ruby on Rail or other frameworks like Ruby on Rails,\n\n241\n00:19:56,280 --> 00:19:56,780\nDjango,\n\n242\n00:19:57,100 --> 00:19:57,600\nLaravel,\n\n243\n00:19:58,260 --> 00:20:04,040\ndoesn't really necessarily make sense to me. I think like in JavaScript, the struggle comes within the same thing.\n\n244\n00:20:04,440 --> 00:20:05,640\nGo is such a\n\n245\n00:20:06,400 --> 00:20:06,900\nprimitive\n\n246\n00:20:09,020 --> 00:20:09,520\nlanguage,\n\n247\n00:20:09,900 --> 00:20:15,640\nand I think JavaScript or Node.js is kind of similar in that they didn't have... There's no\n\n248\n00:20:17,380 --> 00:20:17,880\nagreed-upon\n\n249\n00:20:18,720 --> 00:20:20,060\nRuby on Rails equivalent\n\n250\n00:20:20,980 --> 00:20:21,920\nfor JavaScript.\n\n251\n00:20:22,540 --> 00:20:25,020\nThere's no Django equivalent for JavaScript or Laravel.\n\n252\n00:20:26,000 --> 00:20:27,320\nSome frameworks might\n\n253\n00:20:28,180 --> 00:20:33,580\nclaim that they are, like a full stack web framework, you know? But at the same time, it's like,\n\n254\n00:20:33,960 --> 00:20:43,760\nI think of it like, whether it's like, you know, Remix or like Next or Nuxt or whatever, like, you know, whenever I think about full stack web frameworks, I think about like, you know, Django,\n\n255\n00:20:44,440 --> 00:20:50,040\nRuby on Rails, Laravel, handling database migrations for you. It comes built in with mailers,\n\n256\n00:20:50,860 --> 00:20:52,020\na templating system.\n\n257\n00:20:53,260 --> 00:20:57,340\nSome of them even come with their own job runners, like ActiveJob and stuff like that.\n\n258\n00:20:57,880 --> 00:20:59,340\nWhereas I think of more of these\n\n259\n00:20:59,640 --> 00:21:00,740\nfull stack frameworks,\n\n260\n00:21:01,100 --> 00:21:08,240\nsimilar to micro frameworks like Flask and Python or like Sinatra and Ruby, you know, because they really just handle like the templating\n\n261\n00:21:08,760 --> 00:21:27,760\nand the routing, right? And like the service side rendering. And that's pretty much like the, and then you have to bring in and build your own framework. And that's what you have to do with Flask and Sinatra as well. You don't have that whole ecosystem that makes it completely full stack. But I think they just use full stack into front end and back end sense. Like, oh, I can make an API route. I can also server-side render some HTML.\n\n262\n00:21:29,040 --> 00:21:30,680\nFull stack, yeah. Yeah,\n\n263\n00:21:31,620 --> 00:21:33,540\nI actually really appreciate that perspective\n\n264\n00:21:33,900 --> 00:21:35,040\nbecause I think\n\n265\n00:21:35,420 --> 00:21:44,180\nfor a lot of us who spend all of our, myself included, we spend all of our time in the JavaScript ecosystem only, we kind of forget that\n\n266\n00:21:44,540 --> 00:21:46,900\noutside of the JavaScript ecosystem are\n\n267\n00:21:47,400 --> 00:21:50,140\nframeworks that do way, way more for you\n\n268\n00:21:50,600 --> 00:21:51,100\nthat\n\n269\n00:21:51,600 --> 00:21:54,060\nwe just don't really have in the JavaScript ecosystem.\n\n270\n00:21:54,520 --> 00:22:00,320\nI'm hoping to change that with the Epic stack. Like I really do want to build like the Laravel for JavaScript.\n\n271\n00:22:00,940 --> 00:22:08,860\nI hope you're successful, man. But it's always funny because even if you do do that, somebody's always going to have a different opinion and try to build something else to make it better.\n\n272\n00:22:09,380 --> 00:22:10,580\nIs this like a never-ending\n\n273\n00:22:11,780 --> 00:22:12,280\ncycle?\n\n274\n00:22:13,180 --> 00:22:17,140\nThat's just the way the JavaScript ecosystem is. It's so interesting to me watching\n\n275\n00:22:17,860 --> 00:22:18,360\nit.\n\n276\n00:22:19,660 --> 00:22:20,640\nYep, yep, 100%.\n\n277\n00:22:21,940 --> 00:22:27,840\nYeah, so, you know, 1 other point that I want to make, and then I'd love to move off from auth to like other stuff,\n\n278\n00:22:28,280 --> 00:22:35,420\nbut other point that I wanted to make was, even if you do have an auth gem that you can install or just like came with the framework,\n\n279\n00:22:35,740 --> 00:22:36,720\nI think that it's,\n\n280\n00:22:38,100 --> 00:22:42,840\nyou'll be a lot more effective using those tools if you understand\n\n281\n00:22:43,180 --> 00:22:48,400\nthe like lower level primitives on what they're like, how they're built. So like understanding\n\n282\n00:22:48,840 --> 00:22:54,840\nhow cookies work and sessions work and everything will just make you a way, way more effective user of those technologies.\n\n283\n00:22:55,580 --> 00:22:56,300\nFor sure.\n\n284\n00:22:58,520 --> 00:23:03,900\nCool, yeah, so let's talk about other things that you've been working on PlanetScale because you mentioned to me that like,\n\n285\n00:23:04,340 --> 00:23:08,920\nI don't know man, Auth is like 1 of the smallest things that I've done here at PlanetScale.\n\n286\n00:23:10,240 --> 00:23:15,780\nSo what are some of the other more interesting things or things that you're more interested in that you worked on at PlanetScale?\n\n287\n00:23:16,900 --> 00:23:18,060\nMan, honestly,\n\n288\n00:23:18,780 --> 00:23:19,280\neverything.\n\n289\n00:23:19,700 --> 00:23:24,740\nI don't know, like I helped build like the most of the CLI. I helped build most of the Go SDK.\n\n290\n00:23:26,460 --> 00:23:29,160\nYeah, the CLI is written in Go. We did that because it can\n\n291\n00:23:29,720 --> 00:23:37,320\nbe compiled. Like the binaries can be compiled across like a different operating systems like mad easily and we just automate that in CI so it's kind of dope.\n\n292\n00:23:39,240 --> 00:23:41,340\nI helped work on deployer quest and\n\n293\n00:23:41,880 --> 00:23:48,460\nthe whole infrastructure diagram that you see whenever you go to a database overview page like I was part of the team that helped build that.\n\n294\n00:23:49,300 --> 00:23:55,380\nThe database branching feature. I also did that when I was like 1 of my early projects at client scale when I first joined.\n\n295\n00:23:57,120 --> 00:24:10,980\nMostly backend work for this stuff. Are you doing both the front end and backend for this? Both the front end and back end. I really shout out to our designer, Jason Long, because what I love about him as a designer is that not only is he a really good product designer, but usually\n\n296\n00:24:11,360 --> 00:24:12,240\nhe's like,\n\n297\n00:24:12,660 --> 00:24:27,340\ndanger enough in code to actually handle the routing and like making the static mockups in like, even like in React, cause he's next JS on the front end, Ruby on Rails in the back end. And then we just like, once he gets hits like a wall, he's like, okay, well, I want somebody,\n\n298\n00:24:27,940 --> 00:24:47,700\nthe UI is ready, I just need somebody to handle the like, you know, state management portions of it. And he has comments on what the state should be and how to interact, and it just makes my life so much easier. But usually I do, yeah. But usually if his hands are full, I can also do the front end stuff like spec. But usually he's pretty good about testing out his designs in the front end to make sure it feels right.\n\n299\n00:24:48,100 --> 00:24:49,440\nYeah, yeah, very cool.\n\n300\n00:24:50,740 --> 00:24:51,780\nYeah. Cool, well,\n\n301\n00:24:52,360 --> 00:24:56,500\nyeah, let's see. Is there anything else that you wanted to chat about that you think\n\n302\n00:24:57,240 --> 00:25:01,260\npeople wanting to build epic web apps would want to know about?\n\n303\n00:25:01,560 --> 00:25:02,740\nYeah, I mean, like,\n\n304\n00:25:04,540 --> 00:25:09,440\nif it's an Epic web app, you're probably going to be deploying it to, like, you know, your Vercel, your Netlify,\n\n305\n00:25:09,880 --> 00:25:10,940\nor maybe your Cloudflare\n\n306\n00:25:11,600 --> 00:25:16,820\nfor it, right, in the edge. And I just want to say, like, you know, PlantScale, like, has an edge compatible,\n\n307\n00:25:17,180 --> 00:25:19,400\nlike, or has an edge friendly\n\n308\n00:25:20,460 --> 00:25:25,940\nserverless driver for JavaScript. And it plugs in with like other frameworks like Drizzle and Keysley.\n\n309\n00:25:26,640 --> 00:25:35,140\nAnd I believe Netlify is working on supporting it as well. So highly recommend it. It like handles all like the connection caching and like reducing latency.\n\n310\n00:25:35,500 --> 00:25:40,620\nIt's really good in edge environment. So I had to like plug that. But other than that, like, you know,\n\n311\n00:25:40,920 --> 00:25:44,020\nI also work on that database driver as well. So\n\n312\n00:25:44,760 --> 00:25:49,660\nme and my coworker David. Yeah, so. Yeah, so the, with the Epic stack, we\n\n313\n00:25:50,020 --> 00:25:51,300\ndeploy to fly.io.\n\n314\n00:25:52,840 --> 00:26:01,500\nAnd so you can deploy it to multiple regions, but it can be a long running server. So like fly is kind of like a long running server, serverless platform. Yeah. And\n\n315\n00:26:02,780 --> 00:26:11,140\ndeploy to the edge and all of that too. It's not quite the, what is it like 300 regions that CloudFlare has. Yeah. It'll get there eventually.\n\n316\n00:26:11,580 --> 00:26:13,820\nYeah. Yeah. Well, and it's, it's good enough\n\n317\n00:26:14,180 --> 00:26:16,780\nfor what most people need as well.\n\n318\n00:26:17,179 --> 00:26:17,679\nSo,\n\n319\n00:26:18,080 --> 00:26:20,100\nbut yeah, being able to\n\n320\n00:26:22,200 --> 00:26:25,880\nmanage, like for a lot of people using serverless architecture,\n\n321\n00:26:28,080 --> 00:26:31,420\nwith short-lived functions and stuff like that, Being able to\n\n322\n00:26:31,940 --> 00:26:35,360\nconnection pool all of that stuff and not have to worry about it, that's\n\n323\n00:26:35,660 --> 00:26:38,500\npretty cool. Yeah, for sure, definitely, definitely.\n\n324\n00:26:40,080 --> 00:26:43,540\nWell, cool, honey, thank you so much for chatting. This has been awesome.\n\n325\n00:26:43,860 --> 00:26:54,740\nThank you for having me. Yeah, to visit with you again. What's the best place for people to keep up with you and what you're doing? Yeah, so for keeping up with me, you can hit me up on Twitter\n\n326\n00:26:55,080 --> 00:26:57,160\nor X, whatever we're calling it these days.\n\n327\n00:26:58,140 --> 00:27:00,460\nMy handle is at KWUCHU.\n\n328\n00:27:02,980 --> 00:27:08,980\nAnd yeah, if you have any questions, DMs are open, holler at me there, or hit me with an at, and yeah.\n\n329\n00:27:09,440 --> 00:27:13,220\nAnd also, if you wanna check out PlanetScale, our Twitter handle is at PlanetScale.\n\n330\n00:27:14,280 --> 00:27:15,740\nAll right, yeah, That's easy.\n\n331\n00:27:16,720 --> 00:27:19,060\nAnd again, man, that name is the best.\n\n332\n00:27:19,900 --> 00:27:23,980\nIt's brilliant. So yeah. Follow for a chance to win a database hat.\n\n333\n00:27:24,440 --> 00:27:33,720\nYeah, yeah. Dude, that hat is also very cool. Thank you. Thank you. All right. Hey, thanks a lot, man. You all take care. We'll chat with you all later. Later, y'all.",
            "text": "[00:00:00] Kent:\nWhat's up, everybody? This is your friend can't see dots and I'm joined by my friend a honey a kitchi-ku How are you doing, honey? \n\n[00:00:08] Iheanyi:\nAll right doing all right. Yeah, it's good to be here. \n\n[00:00:11] Kent:\nDid I get your name, right? \n\n[00:00:13] Iheanyi:\nNo, but it's okay. I know it's e. Hi. You got the first name pretty good. Last name's Ekechukwu. But you know, Ekechukwu, it's hard, man. It's a lot of letters. It's intimidating. I get it. I know. But it's all good. So yeah. \n\n[00:00:24] Kent:\nNo, no, but like you spend your entire life correcting people on the pronunciation of your last name. So I am genuinely sorry. That's okay, man. I will do \n\n[00:00:32] Iheanyi:\nbetter. It's all good. I appreciate that. But yeah, I'm happy to be here, man. Thanks for having me. \n\n[00:00:37] Kent:\nI'm super jazzed to have you here too. So, Ihani and I go back like quite a ways, honestly. So, I had you as a panelist on JavaScript Air, the live broadcast podcast back in 2015, but I feel like we knew each other before that as well, and I can't remember exactly where \n\n[00:00:56] Iheanyi:\nwe first met. Twitter, probably. Like, you know, I was doing a lot of React stuff back in, well, back in the day, still doing a lot of React stuff. And I think I'll just like, you know, back whenever the whole framework wars were going on, with like Ember versus Angular versus React, you know, I was a huge Ember stan. I still am, I still use a good framework, but then I moved into React for like other jobs. And like, \n\n[00:01:16] you know, React has kind of grown on me over the years, especially with like new frameworks popping up. So yeah, just like, you know, classic Twitter friendship. \n\n[00:01:25] Kent:\nYeah, yeah, those are good. Those are good. Well, cool. So it's been awesome for me to get to know you over the years. Why don't you give us a little intro to yourself, like who you are and what you stand for, all that. \n\n[00:01:36] Iheanyi:\nYeah, all right, well, bet. So yeah, once again, name's Ehii, software engineer at PlanetScale. We're trying to build the best database for developers on top of MySQL and Vitesse. Basically, we wanna make it easy to make a database that's performant, scalable, and charitable, right? \n\n[00:01:57] I've been at PlantScale since November of 2020, and I work on the surfaces team, meaning everything that the customer touches is my team's responsibility. So whether that's the CLI, the admin dashboard that you see the AP and the API SDK's, even like \n\n[00:02:18] the serverless driver that we have, or the serverless JavaScript database driver that we have, like my team works on all those. And yeah. \n\n[00:02:29] Kent:\nCool, cool. And before that you were at GitHub? \n\n[00:02:32] Iheanyi:\nYep, worked on GitHub Actions for a nice 2 and a half years from like alpha to like where it's at, like to like GA and like helping scale it up and stuff like that. So it's been fun. I like developer tools a lot. \n\n[00:02:43] Kent:\nYeah, yeah, obviously. Well, that's good because you've spent a lot of time doing it, so I'm glad you enjoy your work. \n\n[00:02:48] Iheanyi:\nYeah, yeah, no, right? \n\n[00:02:51] Kent:\nCool, yeah, so PlanetScale, I first heard of PlanetScale back in, yeah, around 2020 as well, when I was working on a rewrite of my website and I was deciding, okay, so where do I wanna host stuff? I was hosting on Netlify, but I wanted, I was using Remix or starting to use Remix at the \n\n[00:03:11] time. And I wanted to go, you know, planet scale. I wanna deploy to multiple regions all over the world. And I quickly found out that if you, like you can deploy to multiple regions all over the world. And I quickly found out that if you, like you can deploy to multiple regions all over the world, but if your data is not in that same region, like next to where you're deployed to, then it \n\n[00:03:31] doesn't do a ton of good. Like it is a little bit, gonna be a little bit better probably, but you gotta put your data and your authentication and alongside your deployed servers as well to make it better. \n\n[00:03:44] Iheanyi:\nYeah, so speed of light is real, yeah. \n\n[00:03:47] Kent:\nYeah, yeah, for real. And so, yeah, PlanetScale was 1 of the ones that I looked at because of you know that distributed nature of planet scale ultimately I went with fly because then I could do hosting my service, like my server alongside the Postgres cluster. And \n\n[00:04:07] that ended up working out. And then eventually I went over to SQLite and it's been kind of interesting history there. But yeah, so PlanetScale has been doing some pretty cool stuff. And like, talk about 1 of the best names in the business to like right when it's like perfect. \n\n[00:04:22] Iheanyi:\nSo \n\n[00:04:23] Kent:\nyeah, yeah. So that's cool. What would you say is the most interesting unique differentiator of planet scale? \n\n[00:04:31] Iheanyi:\nI think it's a so hard. I think the main thing that I want to say is that, well, first things first, I think like the main differentiator is like, you know, the ability of scaling, right? Like I think in the last 3 plus years we've seen a like rise of mad different like \n\n[00:04:51] database startups, right? A lot of them are like, you know, you got like CockroachDB, which has been around longer than that, but now they like have like, you know, released like a serverless workflow. You have like, you know, Neon and Superbase and others. And then like this whole vector databases and all like that. I think the main thing is just like, you know, when it comes down to it, PlanetScale is kind of unique in the sense that like \n\n[00:05:11] we're built on top of a test, which was used at like YouTube back in the day to help scale up their traffic, like back in the early 2010s. And that's like battle-tested technology. I'm familiar with the test, cause we used it at, like GitHub is a heavy user of it as well, so I had used it there. \n\n[00:05:31] And I think that's nice, because it sits in front of MySQL, making it easier to scale. And also when it comes out to sharding, it just handles it for you. You don't have to change much. You don't have to change much application logic, if at all. It just works. And that's what I like about the core infrastructure level of it, but then we have other things built into the product like \n\n[00:05:51] non-blocking schema migrations. Some people, like me, back whenever I was younger or doing a side project, if I'm hosting something on Heroku or something, I would just apply to database migrations on top of like while deploying, right? But yeah, is that always, you know, in reality, that's not like a best practice at beer companies. Whenever we would do database \n\n[00:06:11] migrations, we'd have to stage them separately and then like wait for database administrators. So apply to migration and then we can roll out our code changes after that's done. But we built this as a first-class-like product in the, or feature, rather, in the plant scale with deploy request. You can queue up, you can branch off your production database branch, and then you can apply a new schema to \n\n[00:06:32] that copy of your database branch to update the schema, open a deploy request, and then it's similar to a GitHub pull request. You get an approval from a teammate, and then with 1 click of a button, you can deploy changes. And that will deploy the schema changes to the production branch with 0 downtime. Whereas in other databases, right? \n\n[00:06:53] Like Postgres, for example, if you try to do that, if it's a large database, you can deal with locking. And even in MySQL, you can deal with locking as well. But the underlying infrastructure and code that does this, does it in a way that like, lets it be copied data in real time to another table and then like swap it over without any downtime, you know? So you have like, yeah. \n\n[00:07:13] So all of that's like non-blocking migrations and they can be long running. Like I've seen some migrations on like our largest tables take like 3 hours, right? But you can just come back to it and it works and you can like no downtime, 0 downtime whatsoever. And this is great. So I think we're like, like what I love about PlantScale and why I chose to work here is that, you know, we see \n\n[00:07:33] all these areas of computing, like, getting better, right? Like, you know, a lot of, like, focus on edge computing. We're in this little AI, like, renaissance. But I think, like, you know, It's funny you see startups for things like email. You see startups for things like the terminal or whatever. But databases really haven't gone through any innovation \n\n[00:07:53] in a long time. And whenever people think databases, they don't think like developer-friendly UX. I don't know, man. I just like making developer tools and making things easy for people. So, it seemed like a good challenge to learn more about databases and just being challenged, you know? \n\n[00:08:10] Kent:\nYeah, yeah. So, as a developer who was working in Ember and then React. Now you're over at PlanetScale. It sounds like you're doing a lot of user or developer as your user, but like user facing stuff. Do you ever get like pretty deep into the database side of things too? \n\n[00:08:31] Iheanyi:\nSometimes, like I know how, I know, I just learned that from like previous gigs, you know. The main thing is that like, you know, I do front end, I do back end. There's an orchestration layer, which is a Go service. And then it talks to a Kubernetes operator. Sometimes I go into the orchestration service with like, I know how to write Go as well. But usually that team is like on top of like is pretty \n\n[00:08:51] on top of things. So I don't really have to. But yeah, yeah, we have database specialists. Like we have a lot of the test core maintainers that work at plant scale. So like I don't necessarily have to go deep into the weeds of things unless there's an interesting bug that's been reported to my team and we have to go and debug it ourselves and help open up an issue. But \n\n[00:09:11] usually it's like we have specialists in the company that know that are just like MySQL geniuses. \n\n[00:09:18] Kent:\nYep, yep. We'd always appreciate those people for sure. Yeah, for real. So you've been there, when was the company started? Were you 1 of the first employees there? \n\n[00:09:30] Iheanyi:\nFunny enough, no, but it feels like it. The company was actually started in 2018. I was brought on by the CEO, the now CEO, to help rebuild what is like PlanetScale of today. Yeah, so basically \n\n[00:09:47] Kent:\nit \n\n[00:09:47] Iheanyi:\nwas like a pivot, still using like the same primitives and all that to make things amazing, right? But we built like a whole new product on top of it. And yeah, it's been great. \n\n[00:09:59] Kent:\nYeah, cool. So as part of that building of a new product, I was told that you worked on the authentication for that. And authentication is a big part of what I teach in the Epic web workshops. That's actually, so \n\n[00:10:19] there are 5 workshop repos and most workshop repos are like 10 to 15 exercises, something like that. The auth 1 is like 23 exercises or something like that. So it's like just so much stuff involved with that. Yeah. I'd like to hear a little bit about the auth that you \n\n[00:10:39] built yourself and why you built it yourself instead of going with the service or when services made sense for you. \n\n[00:10:47] Iheanyi:\nYeah, so honestly and truly, authentication is kind of a solved problem, and not kind of, it is a solved problem in Ruby on Rails. That's what the client scale API is built on top of, that's what we use for our internal admin panel, and that's what we use for our authentication. There's a gem in Ruby, there's a Ruby gem called \n\n[00:11:07] Devise, and that's kind of like the standard for authentication, which is great. You just like install the gem, it also generates like the templates for you that you need for a login form. Toss that off to a designer and they work with it and they apply their little magic to it and it's pretty much done. And it handles session, like it handles \n\n[00:11:28] the session management and all that good stuff as well. Password, like password confirmation, password reset, forgot password, yeah, like forgot password flow. Like everything is built in out of the box with that, right? And every single company, not \n\n[00:11:48] every single company, but a lot of companies use Devise. It's been used for years. There's alternatives like RodAuth if you don't want to go the Devise route. But I just like Devise because 1, it's what we already knew. Like GitHub runs on Ruby on Rails, right? So we have a lot of Rails specialists at the company. And it also plays nicely with other gems like \n\n[00:12:08] OmniAuth, which is what we use for our GitHub authentication via OAuth. And the plugin for device authorization grants that we use for the CLI to have that nice little login flow when you do PScale login. \n\n[00:12:24] Kent:\nYeah, yeah. So it sounds like, or honestly, it sounds nice for a developer working primarily in the JavaScript ecosystem where we can't really agree on anything. \n\n[00:12:37] Iheanyi:\nThat's the problem. \n\n[00:12:39] Kent:\nYeah, having a 1 package that kind of does it all. I think that's part of what I'm hoping to be able to do with the Epic stack. I don't know if you've seen me tweeting about the Epic stack, but it's just like this stack of tools or a starter project and a reference for people. And there's \n\n[00:12:59] a lot of code in there for managing the authentication stuff. And eventually I'm hoping to turn the auth stuff into a package that's like, where implementing auth in a product like PlanetScale can be just as much a non-story as it was for you when using Rails. \n\n[00:13:19] But you mentioned also that you do support single sign-on and SAML and stuff, so do you want to talk a little bit about that? I don't think that I've ever heard anybody say simple and SSO in the same sentence. So, \n\n[00:13:35] Iheanyi:\nand that is comes to like, you know, when I believe in like, you know, build versus buy a lot of people want to like, I think the whole discussion that was on Twitter, like whenever this whole off topic was going on, I think people were talking about third party auth services to handle everything, like, you know, the user, like, you know, the user logins and all that other stuff, and like the user management, \n\n[00:13:55] this, that, and the third. And to me, I think that third party auth services have a time and a place, but not necessarily for the core authentication experience. Like at least at least when like, you know, languages like Ruby, Python and even like, you know, frameworks like Laravel \n\n[00:14:15] and PHP, like all of their, all these languages have like figured out the authentication aspect of it, right? And like, you want to store your users in a database, right? You want to be able to query what your users are doing and attaching it to them. And Once you outsource this to a third party service, you're beholden to their like uptime, their reliability. And so \n\n[00:14:36] many things can go wrong, right? So I like the hybrid approach that we have at PlanScale. We actually do SAML and SSO for our enterprise customers that is powered by WorkOS. And what I like about WorkOS is that, it's funny, they do have like traditional path authentication methods, like I think, like username, password, or like \n\n[00:14:58] magic links over email. But we just use them for the SAML and SSO parts because SAML is not simple, but what I like about it is that we can still use device, but the way that WorkOS is architected, that we can just sprinkle that in on top of our authentication system, and it's not fully locked in vendor-wise to it, right? And it really thought through the flow of like making SAML \n\n[00:15:18] and SSO easy. And even we took it to the next level by using the directory sync product. So like basically whenever something changes in LDAP directory, the reflection of that is like reflected in like the PlanetScale organization. You can map like directory groups to teams in PlanetScale. And this do a lot of us, like a lot for us that would \n\n[00:15:38] be really difficult to do on our own. And like having that technology And given the fact that it's providing value to some of our highest paying customers, makes it a no brainer, right? Like it's just a really well thought out product and like doesn't get in the way. It's just like you can use it no matter what else you're using, \n\n[00:15:58] right? \n\n[00:16:00] Kent:\nYeah, yeah. I agree with that. I think that like, even if people do decide they want to use a auth service for the basic stuff, which I don't think that most people should, but even if you do, you should definitely keep your user data in your own user table. Like I can't \n\n[00:16:20] imagine relying on a third party to get user data on every single request. \n\n[00:16:26] Iheanyi:\nYep. \n\n[00:16:26] Kent:\nLike that just sounds like a really, really bad idea. And then like on top of that, there's the vendor lock-in and all that too, of course. But yeah, using a third party to manage the really complicated stuff like SSO and SAML, I think makes sense. There are some really \n\n[00:16:46] sweet libraries coming out for doing SAML. And there's a lot of enterprises are moving to OpenID Connect as well, which is a lot easier. So yeah, the future, I think, this is still a bit of a moving target when it comes to third party auth and stuff like that. \n\n[00:17:08] But yeah, it's an interesting world there. Yeah, I'd like to \n\n[00:17:12] Iheanyi:\nsay though, WorkOS has support for multiple languages, right? Like we use a Ruby gem, and it works like a, no pun intended, gem, or works like a charm. But yeah, they have Python support, JavaScript support, PHP support, all that. But yeah, it's pretty good. But I'm always interested in seeing what happens with \n\n[00:17:33] the ecosystem. Because Sam 1 SSO is just like all the certificates and stuff that you have to manage and like, it's just so grimy. \n\n[00:17:38] Kent:\nYeah, it sounds awful. \n\n[00:17:40] Iheanyi:\nYeah, no kidding. \n\n[00:17:42] Kent:\nWell, and also LDAP support. I didn't even think about that, but like, that's pretty, yeah, that's a couple engineers. That, you know, maybe 1 full-time engineer just dedicated to that, that you're saving by just paying WorkOS. \n\n[00:17:58] Iheanyi:\nI am the only 1 that like, a coworker of mine set up the initial like, connection for like SSO for WorkOS, and then I'm just like on the hook for all of the LDAP stuff, like the directory syncing, logic, how it interfaces and interacts in our product, and stuff like that. We actually dog food it and use it internally as well for mapping to teams, \n\n[00:18:19] for admin rights and stuff like that, and combined with other things like access request and Okta or whatever, this is a nice automated workflow and allows for really powerful things within a project. \n\n[00:18:31] Kent:\nYeah, yeah. Well, and without it, you wouldn't, like you said, you wouldn't have those big paying customers. Like that's where so much of the money comes from for a B2B SaaS company like Plants. \n\n[00:18:42] Iheanyi:\nCorrect, yeah, exactly. \n\n[00:18:44] Kent:\nSo may as well get it right. It's worth what it costs for that. But I will not back down on the don't use it for your basic auth stuff and like when you're just trying to get off the ground it just seems silly to me to pay a service for something like this. It can just be installed. \n\n[00:19:01] Iheanyi:\nI agree. Yeah, I agree. It seems like the only time I feel like it makes sense in this case is like some languages, right? Like I'm gonna use Go as an example, even though I like love the language. It's hard building a web product and like using Go, right? Like you have to do ORMs really on our thing in the ecosystem or it's \n\n[00:19:21] kind of like discouraged. And I've written a lot of Go, like we use it at GitHub for like the actions, like the main action service I worked on. We use that plant scale for our orchestration layer. But it's like, you know, authentication with Go, like you have to do all the salting and like hashing of the password yourself, this, that, and the third. So I can understand why people would want like \n\n[00:19:41] offload that or outsource that to like Auth0 or something else because like the story for Go is not really good for authentication, like in terms of like the packages and ecosystem. But other languages like, you know, Ruby on Rail or other frameworks like Ruby on Rails, Django, Laravel, doesn't really necessarily make sense to me. I think like in JavaScript, \n\n[00:20:02] the struggle comes within the same thing. Go is such a primitive language, and I think JavaScript or Node.js is kind of similar in that they didn't have... There's no agreed-upon Ruby on Rails equivalent for JavaScript. \n\n[00:20:22] There's no Django equivalent for JavaScript or Laravel. Some frameworks might claim that they are, like a full stack web framework, you know? But at the same time, it's like, I think of it like, whether it's like, you know, Remix or like Next or Nuxt or whatever, like, you know, whenever I think about full stack web frameworks, I think about \n\n[00:20:42] like, you know, Django, Ruby on Rails, Laravel, handling database migrations for you. It comes built in with mailers, a templating system. Some of them even come with their own job runners, like ActiveJob and stuff like that. Whereas I think of more of these full stack frameworks, similar to micro frameworks like \n\n[00:21:02] Flask and Python or like Sinatra and Ruby, you know, because they really just handle like the templating and the routing, right? And like the service side rendering. And that's pretty much like the, and then you have to bring in and build your own framework. And that's what you have to do with Flask and Sinatra as well. You don't have that whole ecosystem that makes it completely full stack. But I think they just use full stack into front \n\n[00:21:23] end and back end sense. Like, oh, I can make an API route. I can also server-side render some HTML. \n\n[00:21:29] Kent:\nFull stack, yeah. Yeah, I actually really appreciate that perspective because I think for a lot of us who spend all of our, myself included, we spend all of our time in the JavaScript ecosystem only, we kind of forget that outside of the JavaScript ecosystem are frameworks that do way, way \n\n[00:21:49] more for you that we just don't really have in the JavaScript ecosystem. I'm hoping to change that with the Epic stack. Like I really do want to build like the Laravel for JavaScript. \n\n[00:22:00] Iheanyi:\nI hope you're successful, man. But it's always funny because even if you do do that, somebody's always going to have a different opinion and try to build something else to make it better. Is this like a never-ending cycle? \n\n[00:22:13] Kent:\nThat's just the way the JavaScript ecosystem is. \n\n[00:22:15] Iheanyi:\nIt's so interesting to me watching it. \n\n[00:22:19] Kent:\nYep, yep, 100%. Yeah, so, you know, 1 other point that I want to make, and then I'd love to move off from auth to like other stuff, but other point that I wanted to make was, even if you do have an auth gem that you can install or just like came with the framework, I think that it's, you'll be a lot more \n\n[00:22:39] effective using those tools if you understand the like lower level primitives on what they're like, how they're built. So like understanding how cookies work and sessions work and everything will just make you a way, way more effective user of those technologies. \n\n[00:22:55] Iheanyi:\nFor sure. \n\n[00:22:58] Kent:\nCool, yeah, so let's talk about other things that you've been working on PlanetScale because you mentioned to me that like, I don't know man, Auth is like 1 of the smallest things that I've done here at PlanetScale. So what are some of the other more interesting things or things that you're more interested in that you worked on at PlanetScale? \n\n[00:23:16] Iheanyi:\nMan, honestly, everything. I don't know, like I helped build like the most of the CLI. I helped build most of the Go SDK. Yeah, the CLI is written in Go. We did that because it can be compiled. Like the binaries can be compiled across like a different operating systems like mad easily and we just automate that in CI so it's kind of dope. \n\n[00:23:39] I helped work on deployer quest and the whole infrastructure diagram that you see whenever you go to a database overview page like I was part of the team that helped build that. The database branching feature. I also did that when I was like 1 of my early projects at client scale when I first joined. \n\n[00:23:57] Kent:\nMostly backend work for this stuff. Are you doing both the front end and backend for this? \n\n[00:24:01] Iheanyi:\nBoth the front end and back end. I really shout out to our designer, Jason Long, because what I love about him as a designer is that not only is he a really good product designer, but usually he's like, danger enough in code to actually handle the routing and like making the static mockups in like, even like in React, cause he's next JS on the front end, Ruby on Rails \n\n[00:24:21] in the back end. And then we just like, once he gets hits like a wall, he's like, okay, well, I want somebody, the UI is ready, I just need somebody to handle the like, you know, state management portions of it. And he has comments on what the state should be \n\n[00:24:34] Kent:\nand \n\n[00:24:34] Iheanyi:\nhow to interact, and it just makes my life so much easier. But usually I do, yeah. But usually if his hands are full, I can also do the front end stuff like spec. But usually he's pretty good about testing out his designs in the front end to make sure it feels right. \n\n[00:24:48] Kent:\nYeah, yeah, very cool. Yeah. Cool, well, yeah, let's see. Is there anything else that you wanted to chat about that you think people wanting to build epic web apps would want to know about? \n\n[00:25:01] Iheanyi:\nYeah, I mean, like, if it's an Epic web app, you're probably going to be deploying it to, like, you know, your Vercel, your Netlify, or maybe your Cloudflare for it, right, in the edge. And I just want to say, like, you know, PlantScale, like, has an edge compatible, like, or has an edge friendly serverless driver \n\n[00:25:21] for JavaScript. And it plugs in with like other frameworks like Drizzle and Keysley. And I believe Netlify is working on supporting it as well. So highly recommend it. It like handles all like the connection caching and like reducing latency. It's really good in edge environment. So I had to like plug that. But other than that, like, you know, I also work on \n\n[00:25:41] that database driver as well. So me and my coworker David. Yeah, so. \n\n[00:25:47] Kent:\nYeah, so the, with the Epic stack, we deploy to fly.io. And so you can deploy it to multiple regions, but it can be a long running server. So like fly is kind of like a long running server, serverless platform. Yeah. And deploy to the edge and all of that too. It's not quite the, what is it like 300 \n\n[00:26:07] regions that CloudFlare has. \n\n[00:26:09] Iheanyi:\nYeah. It'll get there eventually. \n\n[00:26:11] Kent:\nYeah. Yeah. Well, and it's, it's good enough for what most people need as well. So, but yeah, being able to manage, like for a lot of people using serverless architecture, with short-lived functions and stuff like that, Being able to \n\n[00:26:31] connection pool all of that stuff and not have to worry about it, that's pretty cool. \n\n[00:26:36] Iheanyi:\nYeah, for sure, definitely, definitely. \n\n[00:26:40] Kent:\nWell, cool, honey, thank you so much for chatting. This has been awesome. \n\n[00:26:43] Iheanyi:\nThank you for having me. \n\n[00:26:45] Kent:\nYeah, to visit with you again. What's the best place for people to keep up with you and what you're doing? \n\n[00:26:50] Iheanyi:\nYeah, so for keeping up with me, you can hit me up on Twitter or X, whatever we're calling it these days. My handle is at KWUCHU. And yeah, if you have any questions, DMs are open, holler at me there, or hit me with an at, and yeah. And also, if you wanna check out PlanetScale, \n\n[00:27:11] our Twitter handle is at PlanetScale. \n\n[00:27:14] Kent:\nAll right, yeah, That's easy. And again, man, that name is the best. It's brilliant. \n\n[00:27:21] Iheanyi:\nSo yeah. Follow for a chance to win a database hat. \n\n[00:27:24] Kent:\nYeah, yeah. Dude, that hat is also very cool. \n\n[00:27:27] Iheanyi:\nThank you. Thank you. \n\n[00:27:28] Kent:\nAll right. Hey, thanks a lot, man. You all take care. We'll chat \n\n[00:27:31] Iheanyi:\nwith you all later. Later, y'all."
          },
          "originalMediaUrl": "https://egghead-video-uploads.s3.amazonaws.com/epic-web/interviews/Iheanyi+Ekechukwu.mp4",
          "_createdAt": "2023-10-17T17:07:50Z",
          "_rev": "6LaeqP6n94P8FD3sVhYJf2",
          "_type": "videoResource",
          "muxAsset": {
            "_type": "muxAsset",
            "muxPlaybackId": "oMZtyEw6W9rU2YkqRvNgel3FAnnv9Qlf46L8At1PkeY",
            "muxAssetId": "701FWoMjDb00Fj3tSvKweHwlYZi00Yx838UoZP3c3NhaCI"
          },
          "title": "Iheanyi Ekechukwu.mp4",
          "_updatedAt": "2024-03-19T20:25:43Z"
        },
        "solution": null,
        "_type": "interview",
        "_updatedAt": "2023-10-17T22:53:50Z",
        "body": "Kent and Iheanyi Ekechukwu, a software engineer at PlanetScale, dive into a discussion on database choices and hosting options. Initially, Kent favored Fly for its distributed features but later opted for SQLite. Iheanyi talks about PlanetScale's unique edge in scalability, built on Vitess technology that YouTube relies on.\n\nAuthentication emerges as a significant topic in their conversation. While Ruby on Rails receives praise for its powerful authentication capabilities, WorkOS emerges as a third-party service offering flexibility. Kent and Iheanyi agree that over-reliance on external services for core authentication functions could create complications, such as vendor lock-in.\n\nThe podcast also touches on the roles of frontend and backend in software development. Iheanyi shares his multifaceted involvement at PlanetScale, working on customer-facing aspects like the CLI, admin dashboard, API, and SDKs. His experience spans both frontend and backend, including specific projects like the CLI and Go SDK.\n\n## Resources\n\n- [Iheanyi on Twitter](https://twitter.com/kwuchu)\n- [PlanetScale](https://planetscale.com/)"
      },
      {
        "_updatedAt": "2023-10-17T22:53:52Z",
        "title": "Understanding Web Development with Jacob Paris",
        "description": "Jacob Paris, web dev and digital nomad in Bulgaria, shares insights on Remix and web development challenges. Proposes solutions for user preferences and time zones.",
        "videoResource": {
          "_updatedAt": "2024-03-19T20:25:55Z",
          "originalMediaUrl": "https://egghead-video-uploads.s3.amazonaws.com/epic-web/interviews/Jacob+Paris.mp4",
          "title": "Jacob Paris.mp4",
          "_createdAt": "2023-10-16T20:16:11Z",
          "_id": "BTJ7im1VRnY0IEyB0OkyC3",
          "transcript": {
            "srt": "1\n00:00:00,359 --> 00:00:03,919\nHello everybody. Hi Jacob. Thank you so much for coming.\n\n2\n00:00:04,900 --> 00:00:06,259\nYeah, thanks for having me.\n\n3\n00:00:06,819 --> 00:00:14,280\nSo Jacob, if you haven't run into Jacob yet, then this is a treat for you. Jacob has been posting\n\n4\n00:00:14,960 --> 00:00:22,860\nnonstop on his blog all about Remix and the stuff that he's working on. Jacob's currently working on a course of his own that is gonna be awesome.\n\n5\n00:00:23,760 --> 00:00:25,279\nThat dives into\n\n6\n00:00:25,680 --> 00:00:29,240\nbuilding a linear clone. I'll let him talk about that a little bit more too.\n\n7\n00:00:29,540 --> 00:00:35,580\nBut Yeah, to just get things going on our conversation, Jacob, why don't you give us an intro to who you are?\n\n8\n00:00:36,360 --> 00:00:37,400\nYeah, thanks Kent.\n\n9\n00:00:37,760 --> 00:00:50,780\nYeah, so my name's Jacob Paris, from Canada originally. I've been working as a web developer for 5 or 6 years now. And the last 3 years of that have been working remotely as a digital nomad.\n\n10\n00:00:51,820 --> 00:00:53,620\nYeah, so where are you at right now?\n\n11\n00:00:54,000 --> 00:00:56,400\nAt the moment I'm in Bansko Bulgaria,\n\n12\n00:00:56,720 --> 00:00:57,380\nwhich is\n\n13\n00:00:57,700 --> 00:00:59,440\nmy primary home base for\n\n14\n00:01:00,060 --> 00:01:04,860\nmost of the last 3 years. I'm only allowed 90 days at a time due to visa restrictions.\n\n15\n00:01:05,500 --> 00:01:09,460\nSo I'm usually here for 3 months and then I bounce out somewhere else.\n\n16\n00:01:09,960 --> 00:01:14,020\nAnd when my time up is there, I get to come back. It's pretty cool.\n\n17\n00:01:14,440 --> 00:01:17,420\nSo Of all the places you've been, what's your favorite?\n\n18\n00:01:18,900 --> 00:01:21,980\nIt's got to be either here in Bulgaria or\n\n19\n00:01:22,540 --> 00:01:23,200\nin Thailand.\n\n20\n00:01:24,860 --> 00:01:28,520\nThere's 1 really good co-working space in Koh Lanta, Thailand\n\n21\n00:01:29,160 --> 00:01:31,980\nthat I'll probably be heading back to at the end of this year.\n\n22\n00:01:32,380 --> 00:01:35,780\nAnd yeah, I just had a fantastic time there. So many great people,\n\n23\n00:01:36,220 --> 00:01:37,940\nlots of other remote workers,\n\n24\n00:01:38,400 --> 00:01:38,900\nand\n\n25\n00:01:39,520 --> 00:01:43,580\nit's nice to be super close to the beach and just be able to go out and chill out when I\n\n26\n00:01:43,940 --> 00:01:46,900\nget a little tired of staring at the screen all day.\n\n27\n00:01:49,640 --> 00:01:53,220\nYou don't get tired of staring at screens, come on. Just kidding.\n\n28\n00:01:53,760 --> 00:01:56,340\nYou gotta look out the window every once in a while at least.\n\n29\n00:01:56,820 --> 00:01:59,340\nYeah, yeah. Go touch grass as they say.\n\n30\n00:01:59,680 --> 00:02:00,520\nYeah, so\n\n31\n00:02:00,840 --> 00:02:02,920\ngreat. Well, Jacob, I wanted\n\n32\n00:02:03,480 --> 00:02:05,640\nto have you on here because\n\n33\n00:02:06,820 --> 00:02:08,000\nin the Epic stack,\n\n34\n00:02:08,419 --> 00:02:14,180\nI borrowed 1 of your ideas from 1 of your blog posts. I'm pretty sure I borrowed a couple other things, but the thing that comes to mind\n\n35\n00:02:14,640 --> 00:02:35,960\nis the way that we do client hints. Now in Epic Web, we don't have time to get into client hints. There's not really a good place to put in an exercise for that. And so I am planning on doing like a tutorial or something. So anybody who's watching this now, like just go look in the tutorials. I'll probably have something in there about kind hints. In fact, I actually do right now, but I'll have something a little bit more formal.\n\n36\n00:02:38,200 --> 00:02:41,640\nAnd yeah, so the idea here is there's\n\n37\n00:02:42,720 --> 00:02:43,440\na limitation\n\n38\n00:02:43,860 --> 00:02:46,300\non our ability to server render some stuff.\n\n39\n00:02:48,120 --> 00:02:51,980\nAnd Jacob, I'll let you kind of describe the solution, but I'll describe the problem first.\n\n40\n00:02:52,440 --> 00:02:54,340\nSo the limitation is\n\n41\n00:02:54,780 --> 00:03:04,780\nwe don't know what the theme preference for a user is, like whether they prefer light mode or dark mode. And if they haven't set their preference, then we just have to guess.\n\n42\n00:03:05,140 --> 00:03:10,460\nAnd that can lead to some problems. We also don't necessarily know their time zone preferences.\n\n43\n00:03:11,380 --> 00:03:17,860\nWe might know their locale or their language preferences. There are some headers for stuff like that. But yeah,\n\n44\n00:03:18,320 --> 00:03:22,140\nthe browser just by default doesn't send all of the user's preferences,\n\n45\n00:03:23,400 --> 00:03:30,320\nwhich some of which we might kind of depend on. And so there is a pseudo standard that's sort of being worked on\n\n46\n00:03:30,720 --> 00:03:32,720\nto help with this called client hints,\n\n47\n00:03:33,420 --> 00:03:33,920\nbut\n\n48\n00:03:34,380 --> 00:03:35,280\nthat is,\n\n49\n00:03:35,740 --> 00:03:43,760\nI mean, just like with standards, you never really know when that's gonna happen. And even when it does, you don't know how many of your users are gonna have a browser that supports them.\n\n50\n00:03:44,700 --> 00:03:45,560\nAnd Even\n\n51\n00:03:45,940 --> 00:03:47,860\nwith that in mind still,\n\n52\n00:03:48,420 --> 00:03:58,280\nthe client hints standard is a little bit limited compared to what we are able to do with the solution you have. So with all of that as the backdrop for\n\n53\n00:03:59,280 --> 00:04:03,300\nthe problem, Jacob, can you talk about the solution that you came up with?\n\n54\n00:04:04,020 --> 00:04:04,900\nYeah, yeah. So\n\n55\n00:04:05,580 --> 00:04:11,340\nit really is a tricky problem. The main reason that dealing with the time zones is so difficult\n\n56\n00:04:11,880 --> 00:04:14,660\nis you can't actually predict whether the user\n\n57\n00:04:15,060 --> 00:04:15,560\nis\n\n58\n00:04:17,360 --> 00:04:25,520\ngoing to be able to patch any of this on their client. So if JavaScript hasn't loaded, or if maybe they have JavaScript disabled,\n\n59\n00:04:27,440 --> 00:04:32,720\nthere's going to come a time when either the JavaScript loads and you can kick in your client-side\n\n60\n00:04:33,580 --> 00:04:35,140\nfallovers in order to\n\n61\n00:04:36,040 --> 00:04:37,540\nrender the client-side information.\n\n62\n00:04:38,100 --> 00:04:40,020\nOr maybe that just never happens.\n\n63\n00:04:42,260 --> 00:04:44,740\nAnd a user who doesn't have JavaScript\n\n64\n00:04:45,500 --> 00:04:46,000\nloaded,\n\n65\n00:04:46,460 --> 00:04:53,540\nthey have to rely strictly on the HTML that the server sends. So we need to come up with a solution that is going to let the server\n\n66\n00:04:54,020 --> 00:04:54,520\noutput\n\n67\n00:04:55,440 --> 00:04:58,340\neverything required for the client to be able to...\n\n68\n00:04:58,740 --> 00:05:01,900\nYeah, and not only that, but like if you\n\n69\n00:05:02,420 --> 00:05:08,900\nmake a guess and then the client comes in and says, oh, actually this is the time zone they're in, or this is their\n\n70\n00:05:09,320 --> 00:05:12,840\ncolor preference, the user is going to see that. They'll see\n\n71\n00:05:13,180 --> 00:05:20,820\nthe wrong guess first, and then it'll flash over to the proper thing, which is just a terrible user experience. And it's the reason that we get hydration warnings.\n\n72\n00:05:23,160 --> 00:05:24,440\nYeah, so I mean,\n\n73\n00:05:24,800 --> 00:05:30,560\nthe ideal situation here would be if the browser could send that information up front.\n\n74\n00:05:31,500 --> 00:05:34,660\nSo if every time the browser makes a request\n\n75\n00:05:35,080 --> 00:05:45,980\nyou could send, say, the time zone or the, you know, whether they want light mode or dark mode or whether they have JavaScript enabled or any information like that that the server can use\n\n76\n00:05:46,440 --> 00:05:47,860\nto form a more opinionated\n\n77\n00:05:50,860 --> 00:05:52,980\nserver-side vendor, then that would be great.\n\n78\n00:05:53,480 --> 00:05:53,980\nBut\n\n79\n00:05:54,560 --> 00:05:57,760\nour options in JavaScript itself are quite limited.\n\n80\n00:05:59,340 --> 00:06:07,480\nIf you're doing like a single-page application style where every request is coming through something like Fetch, then you might be able to add those as headers to your\n\n81\n00:06:08,040 --> 00:06:11,460\nFetch client and the server would have access that way.\n\n82\n00:06:11,960 --> 00:06:27,740\nBut for proper document requests, like you're just loading a page, you're navigating directly in the browser or clicking a link from some other page, that's going to be a document request from the browser and the only way to get that kind of information to the server is to send it in a cookie.\n\n83\n00:06:28,780 --> 00:06:33,860\nSo it's enough to set cookies on the client but the,\n\n84\n00:06:34,340 --> 00:06:44,340\nyou know, clients who have never been to your page before, they're not going to have those cookies set. And that's kind of the core of the issue that we really need to start, come up with a solution here where\n\n85\n00:06:45,940 --> 00:06:51,580\na brand new user is going to get this information set without seeing any flashes of unstyled content,\n\n86\n00:06:51,900 --> 00:06:52,660\nwithout seeing\n\n87\n00:06:53,680 --> 00:06:54,940\njust the wrong configuration\n\n88\n00:06:55,580 --> 00:06:56,820\nor anything like that.\n\n89\n00:06:58,080 --> 00:07:00,460\nYeah, so how do you get those cookies set then?\n\n90\n00:07:00,820 --> 00:07:06,100\nSo the method I came up with after trying a few options was to\n\n91\n00:07:06,720 --> 00:07:09,660\nsort of intercept the initial request from\n\n92\n00:07:10,600 --> 00:07:11,980\nthe user. So\n\n93\n00:07:13,940 --> 00:07:14,940\nif the user\n\n94\n00:07:15,300 --> 00:07:18,980\nmakes a request and it doesn't have that information available,\n\n95\n00:07:19,460 --> 00:07:28,460\nrather than sending them the whole document with the unstyled version of the page, we just inject a little script, just a tiny little JavaScript snippet,\n\n96\n00:07:28,840 --> 00:07:31,160\nthat will set the cookie\n\n97\n00:07:31,500 --> 00:07:35,100\nand then refresh the page. And that will automatically\n\n98\n00:07:35,540 --> 00:07:36,960\ncause the user to,\n\n99\n00:07:38,360 --> 00:07:38,960\nyou know,\n\n100\n00:07:39,480 --> 00:07:48,400\nto make the other request and then get the correct information. Usually this means all of a sudden their dark mode is working, their time zone information is in there if you have\n\n101\n00:07:49,300 --> 00:07:50,100\nthat all available.\n\n102\n00:07:51,200 --> 00:07:55,580\nAs a fallback, there is a 0 JavaScript solution you can use where\n\n103\n00:07:59,340 --> 00:08:01,320\nyou use the actual refresh headers for\n\n104\n00:08:04,900 --> 00:08:10,060\nthe service injects the JavaScript snippet with refresh headers that causes the browser to\n\n105\n00:08:11,240 --> 00:08:14,540\nautomatically refresh and reload. And that's a nice little fallback, so\n\n106\n00:08:15,060 --> 00:08:19,400\nif the user doesn't have JavaScript enabled, that they don't get stuck on that page forever.\n\n107\n00:08:20,060 --> 00:08:24,440\nYeah, that makes sense. Or can stop sending them that little snippet and\n\n108\n00:08:24,800 --> 00:08:25,940\nideally everything\n\n109\n00:08:26,640 --> 00:08:28,520\nshould move smoothly from then on.\n\n110\n00:08:29,680 --> 00:08:31,100\nYeah, yeah, Thank you for that.\n\n111\n00:08:31,560 --> 00:08:42,320\nSo when I was working on the same problem, on my personal website it actually still works this way. I have this really janky, hacky thing that I'm doing to make this work where\n\n112\n00:08:43,260 --> 00:08:46,060\nI have some theme components that will render\n\n113\n00:08:47,660 --> 00:08:50,040\nan element, a DOM element that I call\n\n114\n00:08:50,460 --> 00:08:51,920\nlike theme something.\n\n115\n00:08:52,820 --> 00:09:02,660\nLike I think I've got like theme light and theme dark and these renders HTML elements and before it hydrates it removes the ones that are not in the right spot. Like\n\n116\n00:09:02,960 --> 00:09:04,700\nit's a disaster. And so\n\n117\n00:09:05,020 --> 00:09:08,900\nlike it works well, but yeah, it's not my favorite for sure. And so\n\n118\n00:09:09,680 --> 00:09:15,780\nwhen I saw your approach, I took it and added it to the Epic stack. And the change that I made was,\n\n119\n00:09:16,980 --> 00:09:18,840\nI actually include that script\n\n120\n00:09:19,740 --> 00:09:20,880\non every page,\n\n121\n00:09:21,360 --> 00:09:23,660\nregardless of whether you've already set things.\n\n122\n00:09:24,240 --> 00:09:25,940\nAnd then I just check whether\n\n123\n00:09:26,260 --> 00:09:28,680\nwhat is in the cookie is the same as\n\n124\n00:09:29,840 --> 00:09:34,580\nwhat we're expecting it to be. And if it's not, then I'll update it in the cookie and trigger the refresh.\n\n125\n00:09:35,740 --> 00:09:51,760\nAnd so this will come with the benefit of, if they have JavaScript disabled, that doesn't run at all, and they'll still get the full page, and it'll just have the fallbacks, and that's fine. Like, you have defaults, and then, you know. If somebody's disabled JavaScript, they're expecting the web to work poorly for them anyway.\n\n126\n00:09:52,100 --> 00:09:52,600\nSo,\n\n127\n00:09:53,960 --> 00:10:02,060\nbut yeah, I think it's a really nice idea. And in fact, it actually, it resembles the way that the standard is planning on doing things where\n\n128\n00:10:02,440 --> 00:10:09,060\nthe browser sends a request and the server sends a response back that says, hey, I actually need some more information. So then the browser\n\n129\n00:10:09,720 --> 00:10:10,860\nrefreshes effectively\n\n130\n00:10:11,320 --> 00:10:13,440\nand sends the request with the information.\n\n131\n00:10:14,060 --> 00:10:16,600\nBut the nice thing about this is because it's a cookie,\n\n132\n00:10:17,080 --> 00:10:17,580\nNow\n\n133\n00:10:17,900 --> 00:10:20,880\nthat only happens once. And now we don't have to\n\n134\n00:10:21,400 --> 00:10:22,320\nhave the browser\n\n135\n00:10:23,260 --> 00:10:34,260\nget a response that says, hey, I need more information. Like every time that information is needed. So even when the standards implemented, I'm pretty sure we're gonna wanna keep this approach around, which is good.\n\n136\n00:10:35,080 --> 00:10:45,040\nYeah, it gives us more power if there's any additional features we want to pack in there. I've seen some people, I don't usually recommend it or do it in my own designs, but some people have separate\n\n137\n00:10:45,420 --> 00:10:46,780\nversions of their UI\n\n138\n00:10:48,540 --> 00:10:55,740\nfor mobile or for desktop that, you know, depending on the screen size, you may not want to send all those extra elements to the browser\n\n139\n00:10:56,940 --> 00:11:02,060\nif you have a dramatically different UI, depending on their screen size. So you could put some updated,\n\n140\n00:11:03,820 --> 00:11:04,480\nyou know,\n\n141\n00:11:05,280 --> 00:11:07,540\nlike some hints about the screen width here,\n\n142\n00:11:08,080 --> 00:11:12,340\nand then your server could use that information to render 1 UI or the other.\n\n143\n00:11:13,140 --> 00:11:14,360\nThat's really powerful. Yeah.\n\n144\n00:11:15,040 --> 00:11:20,880\nYou know, this actually reminds me, YouTube does something kind of similar to this as well, except\n\n145\n00:11:21,300 --> 00:11:22,700\nvery poorly, I think.\n\n146\n00:11:23,600 --> 00:11:31,720\nBut if you go to YouTube, and let's say that you're in dark mode, and so then you'll see YouTube in dark mode and everything, then close YouTube,\n\n147\n00:11:32,080 --> 00:11:34,700\nchange to light mode, and go to YouTube again,\n\n148\n00:11:35,200 --> 00:11:51,080\nand maybe throttle your network so you can observe this easier. But even on a relatively fast network, you can see this, where it will actually show you the dark mode, and then it will trigger a refresh. And I think actually in the query string, it will say like theme equals light or whatever, which is super weird.\n\n149\n00:11:51,600 --> 00:11:56,420\nSo YouTube is doing the same sort of thing of triggering a full page refresh, but we do it better.\n\n150\n00:11:57,440 --> 00:12:04,660\nI'm sure they have some constraints and old code, Like they've been around for longer than us. So we have the benefit of hindsight, but\n\n151\n00:12:05,380 --> 00:12:11,020\nyeah. So that was 1 thing that I borrowed from your blog, but your blog has got just an enormous\n\n152\n00:12:11,400 --> 00:12:18,500\nwealth of material on Remix. Is there anything else that you like find yourself referencing a lot when people ask questions?\n\n153\n00:12:20,280 --> 00:12:22,220\nYeah, probably the biggest 1 is\n\n154\n00:12:22,940 --> 00:12:26,540\nthe guide I did on how to solve hydration errors in Remix.\n\n155\n00:12:27,980 --> 00:12:29,200\nAnd that's helped\n\n156\n00:12:29,540 --> 00:12:32,300\nfolks working with Next.js as well because they're,\n\n157\n00:12:32,900 --> 00:12:37,580\nyou know, it's a slightly different subset of problems based on the way they hydrate the DOM,\n\n158\n00:12:38,040 --> 00:12:40,520\nbut it's the same, it's the same class of problems.\n\n159\n00:12:41,360 --> 00:12:54,520\nAnd so I built that as sort of a step-by-step guide where, hey, if you're running into these issues, start from the top of the guide, work all the way down, and you might find your case here. Maybe it's a Chrome extension that's causing it. 1 guy had his\n\n160\n00:12:55,240 --> 00:12:55,740\ncorporate\n\n161\n00:12:56,100 --> 00:12:56,600\nantivirus,\n\n162\n00:12:56,980 --> 00:12:59,240\nwhich wasn't even part of the browser,\n\n163\n00:13:00,780 --> 00:13:05,240\nAnd that was affecting modifying the page. So he would open it up in incognito mode\n\n164\n00:13:05,660 --> 00:13:07,320\nand nothing there would,\n\n165\n00:13:08,200 --> 00:13:13,500\nlike everything would be broken there as well. And there's no way I would have thought to debug that.\n\n166\n00:13:14,060 --> 00:13:19,260\nBut eventually he solved it himself. So I'm like, I need to add this to the guide just to be sure no 1 else.\n\n167\n00:13:20,140 --> 00:13:22,180\nThat's amazing. That's very interesting.\n\n168\n00:13:22,540 --> 00:13:23,040\nSo\n\n169\n00:13:24,060 --> 00:13:28,720\ncan you tell us why, like, I see this all the time, even from\n\n170\n00:13:29,700 --> 00:13:38,620\npeople who are producing content around this, that the solution is just suppress hydration error on the document or on the HTML element,\n\n171\n00:13:39,240 --> 00:13:41,660\nwhich certainly does suppress the hydration error.\n\n172\n00:13:42,040 --> 00:13:42,540\nBut\n\n173\n00:13:43,180 --> 00:13:47,940\nwhy is that not just the solution? Why can your blog post not just be like 1 code example that shows that?\n\n174\n00:13:48,680 --> 00:13:49,460\nYeah, so\n\n175\n00:13:49,900 --> 00:13:58,420\nI mean it does exactly what it says it's doing. If you're suppressing the warning, you're suppressing the warning. But that's kind of like treating an illness by not going to the doctor.\n\n176\n00:14:00,180 --> 00:14:02,460\nIt doesn't actually solve the underlying issue.\n\n177\n00:14:03,580 --> 00:14:06,300\nSo I guess for context, anyone who doesn't know,\n\n178\n00:14:06,700 --> 00:14:10,260\nhydration errors are caused by a mismatch between what\n\n179\n00:14:11,540 --> 00:14:12,180\nthe browser\n\n180\n00:14:12,860 --> 00:14:14,940\nis currently displaying in its HTML\n\n181\n00:14:15,480 --> 00:14:20,200\nand what React is trying to output as HTML on its first render.\n\n182\n00:14:20,600 --> 00:14:29,940\nSo when you are dealing with any sort of server-side rendering, the server is going to send a bunch of HTML to the client, and then the browser needs to render\n\n183\n00:14:30,280 --> 00:14:31,940\nall of React, and\n\n184\n00:14:32,380 --> 00:14:38,800\nideally, if everything works out, it should come up with the exact same result. And if that happens, it can swap out\n\n185\n00:14:40,680 --> 00:14:43,160\nthe server-side elements with the React-generated\n\n186\n00:14:43,660 --> 00:14:44,160\nelements,\n\n187\n00:14:45,060 --> 00:14:46,500\nand now they're interactive,\n\n188\n00:14:46,880 --> 00:14:56,820\nand you have the full power of React behind it all. If there's any mismatch there, which can happen for a number of reasons, you get just what's loosely called a hydration error.\n\n189\n00:14:58,200 --> 00:15:00,860\nThere are so many reasons this can\n\n190\n00:15:01,860 --> 00:15:09,620\nbe wrong. 1 is if your browser is relying on any information that the server doesn't have, like your time zones or\n\n191\n00:15:12,260 --> 00:15:14,700\nyour dark mode preference, anything like that.\n\n192\n00:15:15,060 --> 00:15:19,460\nSo the browser has set it to a value, but the server set it to something else.\n\n193\n00:15:19,820 --> 00:15:26,180\nIt could be screen size related if you're relying on that. If you're trying to render based on something from local storage,\n\n194\n00:15:26,520 --> 00:15:28,160\nthat's going to cause an issue.\n\n195\n00:15:28,840 --> 00:15:41,940\nBut sometimes it's even a little more abstract than that, you can have Chrome extensions that modify the HTML of the page before React has a chance to render. And then when React tries to compare its output with what's currently being displayed by the browser,\n\n196\n00:15:42,520 --> 00:15:43,980\nthat doesn't match up anymore.\n\n197\n00:15:44,280 --> 00:15:45,560\nSo Notoriously,\n\n198\n00:15:46,220 --> 00:15:48,840\nthere's a Chrome extension called Honey, which\n\n199\n00:15:49,280 --> 00:15:55,400\nfinds coupon codes for you. There's 1, the Grammarly has a Chrome extension that modifies your inputs\n\n200\n00:15:56,300 --> 00:15:57,540\nto spell check things.\n\n201\n00:15:57,900 --> 00:16:04,240\nThose are notorious for causing issues with this. And they tend to break React apps all across the web.\n\n202\n00:16:05,580 --> 00:16:10,140\nJust because of this issue here. Yeah, I think that it's important to\n\n203\n00:16:11,000 --> 00:16:11,500\nmention\n\n204\n00:16:12,180 --> 00:16:16,760\na couple of things about this. So anytime I talk or hear about hydration,\n\n205\n00:16:17,420 --> 00:16:28,780\npeople are gonna say, well, that's why you shouldn't hydrate your apps, right? And so like Astro and these islands, and if it's not interactive, don't even hydrate it. Or like Quick and its resumability.\n\n206\n00:16:29,760 --> 00:16:51,240\nBut those will have these same problems. Like the idea of it will be something different on the server and the client. If it's something different, then the client's probably right and the server was wrong. And so if you don't hydrate and you're just doing resumability or something, then what the user's looking at is probably wrong. And so like that is going to be a problem regardless of the framework or whether hydration is an issue.\n\n207\n00:16:51,740 --> 00:16:55,820\nAnd then the other aspect of it, the reason that you don't wanna just ignore the warning\n\n208\n00:16:56,240 --> 00:17:01,660\nis because when the hydration happens, the user's gonna see that flash of incorrect content\n\n209\n00:17:02,160 --> 00:17:02,660\nAnd\n\n210\n00:17:02,960 --> 00:17:15,900\nReact is actually gonna behave slightly differently. So when hydration is happening, React isn't changing the elements that were rendered by the server, that would be inefficient. So it's just using those elements and hooking up event handlers and things.\n\n211\n00:17:16,560 --> 00:17:25,680\nBut once it hits a difference, then it's like, whoa, okay, this is different from what I expected. I can't just attach event handlers. And so it has to re-render the whole page,\n\n212\n00:17:26,040 --> 00:17:27,859\nwhich is also very inefficient.\n\n213\n00:17:28,319 --> 00:17:31,260\nAnd so, yeah, we definitely don't want to just ignore\n\n214\n00:17:32,320 --> 00:17:33,060\nthese issues.\n\n215\n00:17:33,600 --> 00:17:34,900\nBut at the same time,\n\n216\n00:17:35,280 --> 00:17:44,780\nyou don't get to control the extensions that your users have. And so if that ends up being the problem, then the user's just gonna have that issue\n\n217\n00:17:45,100 --> 00:17:47,220\non every React site that they use.\n\n218\n00:17:47,640 --> 00:17:54,220\nAnd that is just the way of it. And that it's not the end of the world, but it's certainly something you want to avoid\n\n219\n00:17:54,520 --> 00:17:55,280\nfor avoidable\n\n220\n00:17:55,920 --> 00:17:56,420\nissues\n\n221\n00:17:57,180 --> 00:17:59,520\nlike time zones and stuff like that.\n\n222\n00:18:00,780 --> 00:18:01,580\nYeah, and\n\n223\n00:18:02,080 --> 00:18:03,900\nit can cause a fairly slow\n\n224\n00:18:04,860 --> 00:18:06,640\npage load experience as well.\n\n225\n00:18:07,120 --> 00:18:22,100\nBecause if React is running, or sorry, if Remix is running all of your loaders, fetching all the data it needs, server-side rendering HTML, and shipping that to the client. And then the client is in the middle of trying to display this when it encounters a hydration error and it says oh no Now we need to re-render client-side.\n\n226\n00:18:22,440 --> 00:18:27,280\nIt then needs to re-run those loaders again to fetch the data to load\n\n227\n00:18:27,980 --> 00:18:31,020\nTo send the JSON down to the client and render that client-side\n\n228\n00:18:31,840 --> 00:18:34,060\nSo you end up double dipping into your database\n\n229\n00:18:34,400 --> 00:18:36,400\nand the server side of things as well.\n\n230\n00:18:38,560 --> 00:18:42,940\nCertainly inefficient and something you wanna deal with and not just suppress the warning.\n\n231\n00:18:43,660 --> 00:18:50,700\nSo yeah, certainly not on your HTML element, my goodness. There are occasions where suppressing the warning might make sense.\n\n232\n00:18:51,260 --> 00:18:56,420\nLike if you've got a countdown timer or something, so you server render it,\n\n233\n00:18:56,760 --> 00:19:00,580\nand it's most certainly going to be different on the client,\n\n234\n00:19:01,000 --> 00:19:09,900\nthat would be like, suppress it on the little time element that you're rendering in it. And that's it, like, I can understand that, that's totally reasonable. So there's a reason that suppression\n\n235\n00:19:10,240 --> 00:19:14,020\nthing exists, but it's not for your HTML element, good grief.\n\n236\n00:19:15,060 --> 00:19:17,220\nOkay, yeah, so there are other things\n\n237\n00:19:18,040 --> 00:19:22,380\nthat you've written about and other things that you're working on with your linear clone\n\n238\n00:19:22,840 --> 00:19:25,420\ncourse. So let's hear about that a little bit.\n\n239\n00:19:26,520 --> 00:19:31,820\nYeah, so the kind of the idea behind this course was to demonstrate how to\n\n240\n00:19:32,140 --> 00:19:44,120\nbuild like some like nice optimistic UI into your apps because I I've looked at so many courses out there and they tend to give a Sort of a surface level knowledge like you learn the basic\n\n241\n00:19:44,440 --> 00:19:45,860\nthe basic CRUD operations\n\n242\n00:19:46,800 --> 00:19:49,320\nthat you can do. You learn to add,\n\n243\n00:19:50,340 --> 00:19:52,540\ncreate, remove, update, delete data.\n\n244\n00:19:53,080 --> 00:19:55,620\nBut then they usually abandon you there.\n\n245\n00:19:56,200 --> 00:19:57,760\nAnything related to\n\n246\n00:19:58,140 --> 00:20:02,220\nlike a nice user experience where you've got elements fading in and out,\n\n247\n00:20:02,800 --> 00:20:06,860\nyour optimistic UI, so you don't have to wait for the whole network boundary\n\n248\n00:20:07,580 --> 00:20:10,440\nin order to see the items that you've created,\n\n249\n00:20:11,280 --> 00:20:13,540\nso they can just smoothly appear in there,\n\n250\n00:20:13,860 --> 00:20:15,980\nanything related to multiplayer\n\n251\n00:20:16,700 --> 00:20:26,260\nuse cases, So you've got multiple users on a page, can you show them on there? Can you handle someone else updating the same element while it's on your page and\n\n252\n00:20:27,880 --> 00:20:29,440\nbeing able to react to that?\n\n253\n00:20:30,480 --> 00:20:33,280\nSo I was trying to find a good example project\n\n254\n00:20:33,600 --> 00:20:34,900\nwhere I could\n\n255\n00:20:35,340 --> 00:20:37,740\nbuild these out, play with these ideas\n\n256\n00:20:40,840 --> 00:20:44,700\nand try to demonstrate how you could build this in an effective way.\n\n257\n00:20:45,280 --> 00:20:52,360\nAnd Linear is 1 of the best user experiences out of most of the modern enterprise apps. And at its core,\n\n258\n00:20:52,900 --> 00:21:08,540\nit is just a CRUD system. Like you're creating issues, you're updating statuses on them, you've got a table of data. The ideas that are in that application are common to pretty much any enterprise software, like the vast majority of what the average developer is working on day to day at work,\n\n259\n00:21:08,860 --> 00:21:12,020\nis going to have a huge overlap with what's in there.\n\n260\n00:21:12,800 --> 00:21:15,560\nSo I sort of use that as a model project.\n\n261\n00:21:16,080 --> 00:21:16,580\nAnd\n\n262\n00:21:16,920 --> 00:21:22,400\nas I go through and as I build these, I keep running into issues where it's like there\n\n263\n00:21:22,840 --> 00:21:24,360\nis no canonical solution,\n\n264\n00:21:24,800 --> 00:21:27,760\nor at least I can't find good articles and resources\n\n265\n00:21:29,080 --> 00:21:35,260\nto solve these, so then I write them. And because of that, I've put out a ton of content over the past few months.\n\n266\n00:21:35,860 --> 00:21:47,540\nSometimes I end up going down weird rabbit holes where I'm trying to add icons to the app and all of a sudden I'm getting weird auto import issues from every icon library out there and\n\n267\n00:21:48,120 --> 00:21:51,720\nfreak out about it and decide to go straight to SVG sprites.\n\n268\n00:21:52,800 --> 00:21:56,340\nAnd then I built that little Sly CLI tool for importing\n\n269\n00:21:56,940 --> 00:22:01,420\nSVGs into your project. And I was able to contribute that backup stream to\n\n270\n00:22:02,920 --> 00:22:06,340\nthe Epic stack. So now everyone else can use that as well.\n\n271\n00:22:06,680 --> 00:22:18,540\nYeah, and that's fabulous. We don't actually dive into that in the workshop, but we are definitely using it. So as you're going through all of this, all the icons are on the page, thanks to the Sly CLI that Jacob built.\n\n272\n00:22:19,200 --> 00:22:25,240\nSo 1 thing I've been having a little bit of trouble sort of reconciling is like I keep building things and then\n\n273\n00:22:25,680 --> 00:22:33,780\nI'm thinking to myself, how would I teach this? How would I teach this in a course? And some things I think are just a little too complicated to properly,\n\n274\n00:22:34,460 --> 00:22:36,300\nyou know, to properly teach and communicate.\n\n275\n00:22:36,820 --> 00:22:40,340\nLike 1 that I was working on is having an interactive\n\n276\n00:22:41,340 --> 00:22:42,320\nfilter toolbar\n\n277\n00:22:43,480 --> 00:22:48,720\nwhere you can click and you can you can choose any parameter for these issues. So based on status or priority\n\n278\n00:22:49,020 --> 00:22:53,040\nit can equal any of the you know proper statuses or not equal.\n\n279\n00:22:53,360 --> 00:23:02,460\nIt can be greater than dates, it can be less than dates, and you have all these different parameters that are going to combine together and modify how you query your database.\n\n280\n00:23:03,420 --> 00:23:09,880\nSo I start building these out but it's some issues are surfacing like this needs to be a library that people use.\n\n281\n00:23:11,120 --> 00:23:15,180\nTrying to teach everyone to reimplement and rebuild this themselves is\n\n282\n00:23:16,100 --> 00:23:19,620\nI mean it's just not feasible but it's also it's kind of a waste of everyone's time.\n\n283\n00:23:20,240 --> 00:23:23,900\nNot everyone needs to know how to build all of this stuff.\n\n284\n00:23:25,440 --> 00:23:34,080\nAnd that sends me on further rabbit holes where I take a little break from the course and now I'm building out libraries and I'm not sure if I'm ever gonna finish this thing, but\n\n285\n00:23:36,880 --> 00:23:40,260\nYou know Jacob that that sounds so familiar I\n\n286\n00:23:40,960 --> 00:23:42,420\nThink I've told the story\n\n287\n00:23:43,100 --> 00:23:44,720\nseveral times in the past but\n\n288\n00:23:45,060 --> 00:23:47,460\nTesting library exists for that exact reason.\n\n289\n00:23:48,820 --> 00:23:50,140\nAnd so, yes,\n\n290\n00:23:50,540 --> 00:23:51,400\nand in fact,\n\n291\n00:23:52,360 --> 00:23:54,520\nlike I'm working on the web auth\n\n292\n00:23:54,860 --> 00:24:00,080\nworkshop right now, and there's a section in the web auth workshop where we do 2 factor authentication\n\n293\n00:24:00,400 --> 00:24:01,860\nand that requires generating\n\n294\n00:24:02,320 --> 00:24:03,340\n1 time passwords.\n\n295\n00:24:04,020 --> 00:24:08,660\nAnd yeah, built a library for that because I didn't want to teach people how to do that because\n\n296\n00:24:09,280 --> 00:24:13,340\nas valuable as that information would be, and it would, it would be very interesting,\n\n297\n00:24:14,300 --> 00:24:15,400\njust use the library\n\n298\n00:24:15,780 --> 00:24:17,680\nand move on with your life. So,\n\n299\n00:24:18,220 --> 00:24:18,720\nyes,\n\n300\n00:24:19,120 --> 00:24:25,320\nmany libraries have been created in the process of deciding, I don't want to teach this, I just want them to use it.\n\n301\n00:24:26,880 --> 00:24:28,480\nYeah, and there's been a lot\n\n302\n00:24:29,180 --> 00:24:30,280\nof people asking\n\n303\n00:24:31,180 --> 00:24:32,640\nin your Discord, like,\n\n304\n00:24:33,260 --> 00:24:34,700\nwhy is the Epic Stack\n\n305\n00:24:35,020 --> 00:24:36,400\nall this code? Why,\n\n306\n00:24:36,820 --> 00:24:42,780\nyou know, how do I pull upstream dependencies down? Why can't I just install the Epic Stack and,\n\n307\n00:24:43,140 --> 00:24:46,920\nyou know, subscribe to updates? And I think especially with your,\n\n308\n00:24:47,240 --> 00:24:49,380\nnow you've got Epic Web TOTP,\n\n309\n00:24:50,240 --> 00:24:53,160\nis a good example of that starting to happen where\n\n310\n00:24:53,860 --> 00:24:58,300\nas you build up the features, they become a little more feature complete and you turn them into libraries,\n\n311\n00:24:58,780 --> 00:25:11,700\npeople will just be able to install them and use them whether they're using the Epic stack or not. They'll still be able to take advantage, but now they can automatically update and use them in whichever projects they want. I think that's a fantastic way to take the project.\n\n312\n00:25:12,160 --> 00:25:12,660\nYeah,\n\n313\n00:25:13,440 --> 00:25:16,380\nthat's exactly what the goal is there. Yeah, totally.\n\n314\n00:25:17,100 --> 00:25:21,920\nSo there are definitely some libraries sitting around in the Epic stack right now. Like for example,\n\n315\n00:25:22,280 --> 00:25:26,560\nwhat we were talking about at the very start with the client hints, that is a library\n\n316\n00:25:27,100 --> 00:25:28,940\nthat will happen eventually for sure.\n\n317\n00:25:30,240 --> 00:25:31,440\nWell, awesome. So\n\n318\n00:25:32,220 --> 00:25:38,180\nis there anything else that you wanted to talk about as we kind of get toward the end of our chat here?\n\n319\n00:25:39,520 --> 00:25:42,840\nI guess I should give a shout out to the Molten Newsletter.\n\n320\n00:25:43,740 --> 00:25:44,780\nOh, yes, yes.\n\n321\n00:25:45,340 --> 00:25:48,120\nYeah, so that's, it was a project started a\n\n322\n00:25:48,480 --> 00:25:49,840\ncouple years ago actually\n\n323\n00:25:50,900 --> 00:25:57,480\nfor to be kind of the unofficial remix community newsletter showing what everyone is working on in the community and\n\n324\n00:25:58,860 --> 00:26:00,640\nyou know including all the\n\n325\n00:26:01,220 --> 00:26:03,640\nYou know all the tips and tricks the latest articles\n\n326\n00:26:04,620 --> 00:26:08,080\nYou know YouTube videos that are coming out, any relevant courses,\n\n327\n00:26:08,720 --> 00:26:11,140\nas well as any meetups, conferences,\n\n328\n00:26:11,780 --> 00:26:15,540\njust anything to do with people who are building cool things with Remix. And\n\n329\n00:26:16,690 --> 00:26:17,190\nas\n\n330\n00:26:18,340 --> 00:26:22,080\nof last month, I've had the opportunity to take over the responsibility\n\n331\n00:26:22,440 --> 00:26:24,520\nof curating and writing that newsletter.\n\n332\n00:26:26,320 --> 00:26:32,980\nSo, yeah, I guess for anyone, if you want to stay up to date on all the cool new things that are coming out with Remix.\n\n333\n00:26:34,600 --> 00:26:36,980\nThat's, yeah, that'll be the place to subscribe\n\n334\n00:26:37,760 --> 00:26:38,860\nand take a look at.\n\n335\n00:26:39,400 --> 00:26:46,680\nYeah, that is a great newsletter. I've been subscribed since day 1. Super jazzed that Jacob has taken the mantle of Moulton.\n\n336\n00:26:47,540 --> 00:26:48,040\nAnd\n\n337\n00:26:48,580 --> 00:26:58,040\nyeah, thank you so much for all that you do for the Remix community. You've just been super duper helpful and I'm looking forward to hearing more about your course in the future.\n\n338\n00:26:59,140 --> 00:27:08,640\nYeah, I really appreciate all the help you've done. I wouldn't be the developer I am today if it weren't for all of everything you've been teaching here. Oh well thank you Jacob,\n\n339\n00:27:09,120 --> 00:27:09,620\nawesome.\n\n340\n00:27:10,080 --> 00:27:13,340\nAll right, what's the best place for people to connect with you?\n\n341\n00:27:13,900 --> 00:27:18,120\nThat'll definitely be Twitter. So I'm at Jacob M Paris on Twitter and\n\n342\n00:27:18,940 --> 00:27:27,440\nI tweet a lot there You'll probably run into me if you don't if you don't search me directly. So, okay. Yeah, cool. What wait, what's Twitter? No, just kidding\n\n343\n00:27:31,100 --> 00:27:35,960\nEverybody knows everybody knows That's a inside joke that everybody's on.\n\n344\n00:27:36,900 --> 00:27:40,940\nSo hey, thanks again, and yeah, we'll connect with you later.\n\n345\n00:27:41,320 --> 00:27:43,920\nYeah, thanks for having me, Kent. Have a great day. Bye.",
            "text": "[00:00:00] Kent:\nHello everybody. Hi Jacob. Thank you so much for coming. \n\n[00:00:04] Jacob:\nYeah, thanks for having me. \n\n[00:00:06] Kent:\nSo Jacob, if you haven't run into Jacob yet, then this is a treat for you. Jacob has been posting nonstop on his blog all about Remix and the stuff that he's working on. Jacob's currently working on a course of his own that is gonna be awesome. That dives into building a linear clone. \n\n[00:00:26] I'll let him talk about that a little bit more too. But Yeah, to just get things going on our conversation, Jacob, why don't you give us an intro to who you are? \n\n[00:00:36] Jacob:\nYeah, thanks Kent. Yeah, so my name's Jacob Paris, from Canada originally. I've been working as a web developer for 5 or 6 years now. And the last 3 years of that have been working remotely as a digital nomad. \n\n[00:00:51] Kent:\nYeah, so where are you at right now? \n\n[00:00:54] Jacob:\nAt the moment I'm in Bansko Bulgaria, which is my primary home base for most of the last 3 years. I'm only allowed 90 days at a time due to visa restrictions. So I'm usually here for 3 months and then I bounce out somewhere else. And when my time up is there, I get to come back. \n\n[00:01:13] Kent:\nIt's pretty cool. So Of all the places you've been, what's your favorite? \n\n[00:01:18] Jacob:\nIt's got to be either here in Bulgaria or in Thailand. There's 1 really good co-working space in Koh Lanta, Thailand that I'll probably be heading back to at the end of this year. And yeah, I just had a fantastic time there. So many great people, lots of other remote workers, and \n\n[00:01:39] it's nice to be super close to the beach and just be able to go out and chill out when I get a little tired of staring at the screen all day. \n\n[00:01:49] Kent:\nYou don't get tired of staring at screens, come on. Just kidding. \n\n[00:01:53] Jacob:\nYou gotta look out the window every once in a while at least. \n\n[00:01:56] Kent:\nYeah, yeah. Go touch grass as they say. Yeah, so great. Well, Jacob, I wanted to have you on here because in the Epic stack, I borrowed 1 of your ideas from 1 of your blog posts. I'm pretty sure I borrowed a couple other things, but the thing that comes to mind is the way that we do client hints. \n\n[00:02:16] Now in Epic Web, we don't have time to get into client hints. There's not really a good place to put in an exercise for that. And so I am planning on doing like a tutorial or something. So anybody who's watching this now, like just go look in the tutorials. I'll probably have something in there about kind hints. In fact, I actually do right now, but I'll have something a little bit more formal. \n\n[00:02:38] And yeah, so the idea here is there's a limitation on our ability to server render some stuff. And Jacob, I'll let you kind of describe the solution, but I'll describe the problem first. So the limitation is we don't know what the theme preference for \n\n[00:02:58] a user is, like whether they prefer light mode or dark mode. And if they haven't set their preference, then we just have to guess. And that can lead to some problems. We also don't necessarily know their time zone preferences. We might know their locale or their language preferences. There are some headers for stuff like that. But yeah, the \n\n[00:03:18] browser just by default doesn't send all of the user's preferences, which some of which we might kind of depend on. And so there is a pseudo standard that's sort of being worked on to help with this called client hints, but that is, I mean, just like with standards, you never really know when that's \n\n[00:03:38] gonna happen. And even when it does, you don't know how many of your users are gonna have a browser that supports them. And Even with that in mind still, the client hints standard is a little bit limited compared to what we are able to do with the solution you have. So with all of that as the backdrop for \n\n[00:03:59] the problem, Jacob, can you talk about the solution that you came up with? \n\n[00:04:04] Jacob:\nYeah, yeah. So it really is a tricky problem. The main reason that dealing with the time zones is so difficult is you can't actually predict whether the user is going to be able to patch any of this on their client. So if JavaScript hasn't loaded, or if maybe \n\n[00:04:24] they have JavaScript disabled, there's going to come a time when either the JavaScript loads and you can kick in your client-side fallovers in order to render the client-side information. Or maybe that just never happens. And a user who doesn't have \n\n[00:04:44] JavaScript loaded, they have to rely strictly on the HTML that the server sends. So we need to come up with a solution that is going to let the server output everything required for the client to be able to... \n\n[00:04:58] Kent:\nYeah, and not only that, but like if you make a guess and then the client comes in and says, oh, actually this is the time zone they're in, or this is their color preference, the user is going to see that. They'll see the wrong guess first, and then it'll flash over to the proper thing, which is just a terrible user experience. And it's \n\n[00:05:18] the reason that we get hydration warnings. \n\n[00:05:23] Jacob:\nYeah, so I mean, the ideal situation here would be if the browser could send that information up front. So if every time the browser makes a request you could send, say, the time zone or the, you know, whether they want light mode or dark mode or whether they have JavaScript enabled \n\n[00:05:43] or any information like that that the server can use to form a more opinionated server-side vendor, then that would be great. But our options in JavaScript itself are quite limited. If you're doing like a single-page application style where every request is coming \n\n[00:06:03] through something like Fetch, then you might be able to add those as headers to your Fetch client and the server would have access that way. But for proper document requests, like you're just loading a page, you're navigating directly in the browser or clicking a link from some other page, that's going to be a document request from the browser and the only \n\n[00:06:23] way to get that kind of information to the server is to send it in a cookie. So it's enough to set cookies on the client but the, you know, clients who have never been to your page before, they're not going to have those cookies set. And that's kind of the core of the issue that we really need to start, come up with a solution here \n\n[00:06:43] where a brand new user is going to get this information set without seeing any flashes of unstyled content, without seeing just the wrong configuration or anything like that. \n\n[00:06:58] Kent:\nYeah, so how do you get those cookies set then? \n\n[00:07:00] Jacob:\nSo the method I came up with after trying a few options was to sort of intercept the initial request from the user. So if the user makes a request and it doesn't have that information available, rather than sending them the \n\n[00:07:20] whole document with the unstyled version of the page, we just inject a little script, just a tiny little JavaScript snippet, that will set the cookie and then refresh the page. And that will automatically cause the user to, you know, to make the other request \n\n[00:07:40] and then get the correct information. Usually this means all of a sudden their dark mode is working, their time zone information is in there if you have that all available. As a fallback, there is a 0 JavaScript solution you can use where you use the actual refresh headers for \n\n[00:08:04] the service injects the JavaScript snippet with refresh headers that causes the browser to automatically refresh and reload. And that's a nice little fallback, so if the user doesn't have JavaScript enabled, that they don't get stuck on that page forever. \n\n[00:08:20] Kent:\nYeah, that makes sense. \n\n[00:08:21] Jacob:\nOr can stop sending them that little snippet and ideally everything should move smoothly from then on. \n\n[00:08:29] Kent:\nYeah, yeah, Thank you for that. So when I was working on the same problem, on my personal website it actually still works this way. I have this really janky, hacky thing that I'm doing to make this work where I have some theme components that will render an element, a DOM element that I call \n\n[00:08:50] like theme something. Like I think I've got like theme light and theme dark and these renders HTML elements and before it hydrates it removes the ones that are not in the right spot. Like it's a disaster. And so like it works well, but yeah, it's not my favorite for sure. And so when I saw \n\n[00:09:10] your approach, I took it and added it to the Epic stack. And the change that I made was, I actually include that script on every page, regardless of whether you've already set things. And then I just check whether what is in the cookie is the same as what we're expecting \n\n[00:09:30] it to be. And if it's not, then I'll update it in the cookie and trigger the refresh. And so this will come with the benefit of, if they have JavaScript disabled, that doesn't run at all, and they'll still get the full page, and it'll just have the fallbacks, and that's fine. Like, you have defaults, and then, you know. If somebody's disabled JavaScript, they're expecting the web to work poorly \n\n[00:09:50] for them anyway. So, but yeah, I think it's a really nice idea. And in fact, it actually, it resembles the way that the standard is planning on doing things where the browser sends a request and the server sends a response back that says, hey, I actually need some more information. So then the browser refreshes effectively \n\n[00:10:11] and sends the request with the information. But the nice thing about this is because it's a cookie, Now that only happens once. And now we don't have to have the browser get a response that says, hey, I need more information. Like every time that information is needed. So even when the standards implemented, I'm pretty sure we're gonna wanna keep \n\n[00:10:31] this approach around, which is good. \n\n[00:10:35] Jacob:\nYeah, it gives us more power if there's any additional features we want to pack in there. I've seen some people, I don't usually recommend it or do it in my own designs, but some people have separate versions of their UI for mobile or for desktop that, you know, depending on the screen size, you may not want to send all those extra elements to \n\n[00:10:55] the browser if you have a dramatically different UI, depending on their screen size. So you could put some updated, you know, like some hints about the screen width here, and then your server could use that information to render 1 UI or the other. That's really powerful. \n\n[00:11:13] Kent:\nYeah. You know, this actually reminds me, YouTube does something kind of similar to this as well, except very poorly, I think. But if you go to YouTube, and let's say that you're in dark mode, and so then you'll see YouTube in dark mode and everything, then close YouTube, change to light mode, and go to YouTube \n\n[00:11:34] again, and maybe throttle your network so you can observe this easier. But even on a relatively fast network, you can see this, where it will actually show you the dark mode, and then it will trigger a refresh. And I think actually in the query string, it will say like theme equals light or whatever, which is super weird. So YouTube is doing the same sort of thing of triggering a full \n\n[00:11:54] page refresh, but we do it better. I'm sure they have some constraints and old code, Like they've been around for longer than us. So we have the benefit of hindsight, but yeah. So that was 1 thing that I borrowed from your blog, but your blog has got just an enormous wealth of material on Remix. Is there anything else that \n\n[00:12:14] you like find yourself referencing a lot when people ask questions? \n\n[00:12:20] Jacob:\nYeah, probably the biggest 1 is the guide I did on how to solve hydration errors in Remix. And that's helped folks working with Next.js as well because they're, you know, it's a slightly different subset of problems based on the way they hydrate the DOM, but it's the same, it's the same class of problems. \n\n[00:12:41] And so I built that as sort of a step-by-step guide where, hey, if you're running into these issues, start from the top of the guide, work all the way down, and you might find your case here. Maybe it's a Chrome extension that's causing it. 1 guy had his corporate antivirus, which wasn't even part of the browser, And that was \n\n[00:13:01] affecting modifying the page. So he would open it up in incognito mode and nothing there would, like everything would be broken there as well. And there's no way I would have thought to debug that. But eventually he solved it himself. So I'm like, I need to add this to the guide just to be sure no 1 else. \n\n[00:13:20] Kent:\nThat's amazing. That's very interesting. So can you tell us why, like, I see this all the time, even from people who are producing content around this, that the solution is just suppress hydration error on the document or on the HTML element, which certainly does \n\n[00:13:40] suppress the hydration error. But why is that not just the solution? Why can your blog post not just be like 1 code example that shows that? \n\n[00:13:48] Jacob:\nYeah, so I mean it does exactly what it says it's doing. If you're suppressing the warning, you're suppressing the warning. But that's kind of like treating an illness by not going to the doctor. It doesn't actually solve the underlying issue. So I guess for context, anyone who doesn't know, hydration errors are caused by a mismatch \n\n[00:14:09] between what the browser is currently displaying in its HTML and what React is trying to output as HTML on its first render. So when you are dealing with any sort of server-side rendering, the server is going to send a bunch of HTML to the client, and then the browser needs to \n\n[00:14:29] render all of React, and ideally, if everything works out, it should come up with the exact same result. And if that happens, it can swap out the server-side elements with the React-generated elements, and now they're interactive, and you have the full power of React behind it all. \n\n[00:14:49] If there's any mismatch there, which can happen for a number of reasons, you get just what's loosely called a hydration error. There are so many reasons this can be wrong. 1 is if your browser is relying on any information that the server doesn't have, like your time zones or \n\n[00:15:12] your dark mode preference, anything like that. So the browser has set it to a value, but the server set it to something else. It could be screen size related if you're relying on that. If you're trying to render based on something from local storage, that's going to cause an issue. But sometimes it's even a little more abstract than that, you can have Chrome extensions \n\n[00:15:32] that modify the HTML of the page before React has a chance to render. And then when React tries to compare its output with what's currently being displayed by the browser, that doesn't match up anymore. So Notoriously, there's a Chrome extension called Honey, which finds coupon codes for you. There's 1, the Grammarly has \n\n[00:15:53] a Chrome extension that modifies your inputs to spell check things. Those are notorious for causing issues with this. And they tend to break React apps all across the web. Just because of this issue here. \n\n[00:16:07] Kent:\nYeah, I think that it's important to mention a couple of things about this. So anytime I talk or hear about hydration, people are gonna say, well, that's why you shouldn't hydrate your apps, right? And so like Astro and these islands, and if it's not interactive, don't even hydrate it. Or like Quick \n\n[00:16:27] and its resumability. But those will have these same problems. Like the idea of it will be something different on the server and the client. If it's something different, then the client's probably right and the server was wrong. And so if you don't hydrate and you're just doing resumability or something, then what the user's looking at is probably wrong. And so like that is going to be a problem regardless \n\n[00:16:48] of the framework or whether hydration is an issue. And then the other aspect of it, the reason that you don't wanna just ignore the warning is because when the hydration happens, the user's gonna see that flash of incorrect content And React is actually gonna behave slightly differently. So when hydration is happening, React isn't \n\n[00:17:08] changing the elements that were rendered by the server, that would be inefficient. So it's just using those elements and hooking up event handlers and things. But once it hits a difference, then it's like, whoa, okay, this is different from what I expected. I can't just attach event handlers. And so it has to re-render the whole page, which is also very inefficient. And so, \n\n[00:17:28] yeah, we definitely don't want to just ignore these issues. But at the same time, you don't get to control the extensions that your users have. And so if that ends up being the problem, then the user's just gonna have that issue on every React site that they use. And that is just \n\n[00:17:49] the way of it. And that it's not the end of the world, but it's certainly something you want to avoid for avoidable issues like time zones and stuff like that. \n\n[00:18:00] Jacob:\nYeah, and it can cause a fairly slow page load experience as well. Because if React is running, or sorry, if Remix is running all of your loaders, fetching all the data it needs, server-side rendering HTML, and shipping that to the client. And then the client is in the middle of trying to display this when it encounters a hydration error and it says oh no Now we need \n\n[00:18:20] to re-render client-side. It then needs to re-run those loaders again to fetch the data to load To send the JSON down to the client and render that client-side So you end up double dipping into your database and the server side of things as well. \n\n[00:18:38] Kent:\nCertainly inefficient and something you wanna deal with and not just suppress the warning. So yeah, certainly not on your HTML element, my goodness. There are occasions where suppressing the warning might make sense. Like if you've got a countdown timer or something, so you server render it, and it's most certainly going to \n\n[00:18:58] be different on the client, that would be like, suppress it on the little time element that you're rendering in it. And that's it, like, I can understand that, that's totally reasonable. So there's a reason that suppression thing exists, but it's not for your HTML element, good grief. Okay, yeah, so there are other things that you've written \n\n[00:19:18] about and other things that you're working on with your linear clone course. So let's hear about that a little bit. \n\n[00:19:26] Jacob:\nYeah, so the kind of the idea behind this course was to demonstrate how to build like some like nice optimistic UI into your apps because I I've looked at so many courses out there and they tend to give a Sort of a surface level knowledge like you learn the basic the basic CRUD operations \n\n[00:19:46] that you can do. You learn to add, create, remove, update, delete data. But then they usually abandon you there. Anything related to like a nice user experience where you've got elements fading in and out, your optimistic UI, so you don't have to wait for the whole network boundary \n\n[00:20:07] in order to see the items that you've created, so they can just smoothly appear in there, anything related to multiplayer use cases, So you've got multiple users on a page, can you show them on there? Can you handle someone else updating the same element while it's on your page and \n\n[00:20:27] being able to react to that? So I was trying to find a good example project where I could build these out, play with these ideas and try to demonstrate how you could build this in an effective way. And Linear is 1 of the best user experiences \n\n[00:20:48] out of most of the modern enterprise apps. And at its core, it is just a CRUD system. Like you're creating issues, you're updating statuses on them, you've got a table of data. The ideas that are in that application are common to pretty much any enterprise software, like the vast majority of what the average developer is working on day to day at work, \n\n[00:21:08] is going to have a huge overlap with what's in there. So I sort of use that as a model project. And as I go through and as I build these, I keep running into issues where it's like there is no canonical solution, or at least I can't find good articles and resources \n\n[00:21:29] to solve these, so then I write them. And because of that, I've put out a ton of content over the past few months. Sometimes I end up going down weird rabbit holes where I'm trying to add icons to the app and all of a sudden I'm getting weird auto import issues from every icon library out there and freak out about it \n\n[00:21:49] and decide to go straight to SVG sprites. And then I built that little Sly CLI tool for importing SVGs into your project. And I was able to contribute that backup stream to the Epic stack. So now everyone else can use that as well. \n\n[00:22:06] Kent:\nYeah, and that's fabulous. We don't actually dive into that in the workshop, but we are definitely using it. So as you're going through all of this, all the icons are on the page, thanks to the Sly CLI that Jacob built. \n\n[00:22:19] Jacob:\nSo 1 thing I've been having a little bit of trouble sort of reconciling is like I keep building things and then I'm thinking to myself, how would I teach this? How would I teach this in a course? And some things I think are just a little too complicated to properly, you know, to properly teach and communicate. Like 1 that I was working on \n\n[00:22:39] is having an interactive filter toolbar where you can click and you can you can choose any parameter for these issues. So based on status or priority it can equal any of the you know proper statuses or not equal. It can be greater than dates, it can be less than dates, and you have all these different parameters that are going to combine together \n\n[00:22:59] and modify how you query your database. So I start building these out but it's some issues are surfacing like this needs to be a library that people use. Trying to teach everyone to reimplement and rebuild this themselves is I mean it's just not feasible but it's also it's kind of a waste of everyone's time. \n\n[00:23:20] Not everyone needs to know how to build all of this stuff. And that sends me on further rabbit holes where I take a little break from the course and now I'm building out libraries and I'm not sure if I'm ever gonna finish this thing, but \n\n[00:23:36] Kent:\nYou know Jacob that that sounds so familiar I Think I've told the story several times in the past but Testing library exists for that exact reason. And so, yes, and in fact, like I'm working on the web auth workshop right now, and there's a \n\n[00:23:56] section in the web auth workshop where we do 2 factor authentication and that requires generating 1 time passwords. And yeah, built a library for that because I didn't want to teach people how to do that because as valuable as that information would be, and it would, it would be very interesting, just use the library and move on with your life. \n\n[00:24:17] So, yes, many libraries have been created in the process of deciding, I don't want to teach this, I just want them to use it. \n\n[00:24:26] Jacob:\nYeah, and there's been a lot of people asking in your Discord, like, why is the Epic Stack all this code? Why, you know, how do I pull upstream dependencies down? Why can't I just install the Epic Stack and, you know, subscribe to updates? And I think especially with your, \n\n[00:24:47] now you've got Epic Web TOTP, is a good example of that starting to happen where as you build up the features, they become a little more feature complete and you turn them into libraries, people will just be able to install them and use them whether they're using the Epic stack or not. They'll still be able to take advantage, but now they can automatically update and \n\n[00:25:07] use them in whichever projects they want. I think that's a fantastic way to take the project. \n\n[00:25:12] Kent:\nYeah, that's exactly what the goal is there. Yeah, totally. So there are definitely some libraries sitting around in the Epic stack right now. Like for example, what we were talking about at the very start with the client hints, that is a library that will happen eventually for sure. Well, awesome. So \n\n[00:25:32] is there anything else that you wanted to talk about as we kind of get toward the end of our chat here? \n\n[00:25:39] Jacob:\nI guess I should give a shout out to the Molten Newsletter. \n\n[00:25:43] Kent:\nOh, yes, yes. \n\n[00:25:45] Jacob:\nYeah, so that's, it was a project started a couple years ago actually for to be kind of the unofficial remix community newsletter showing what everyone is working on in the community and you know including all the You know all the tips and tricks the latest articles You know YouTube videos \n\n[00:26:05] that are coming out, any relevant courses, as well as any meetups, conferences, just anything to do with people who are building cool things with Remix. And as of last month, I've had the opportunity to take over the responsibility of curating and writing that newsletter. \n\n[00:26:26] So, yeah, I guess for anyone, if you want to stay up to date on all the cool new things that are coming out with Remix. That's, yeah, that'll be the place to subscribe and take a look at. \n\n[00:26:39] Kent:\nYeah, that is a great newsletter. I've been subscribed since day 1. Super jazzed that Jacob has taken the mantle of Moulton. And yeah, thank you so much for all that you do for the Remix community. You've just been super duper helpful and I'm looking forward to hearing more about your course in the future. \n\n[00:26:59] Jacob:\nYeah, I really appreciate all the help you've done. I wouldn't be the developer I am today if it weren't for all of everything you've been teaching here. \n\n[00:27:07] Kent:\nOh well thank you Jacob, awesome. All right, what's the best place for people to connect with you? \n\n[00:27:13] Jacob:\nThat'll definitely be Twitter. So I'm at Jacob M Paris on Twitter and I tweet a lot there You'll probably run into me if you don't if you don't search me directly. So, \n\n[00:27:24] Kent:\nokay. Yeah, cool. What wait, what's Twitter? No, just kidding Everybody knows everybody knows That's a inside joke that everybody's on. So hey, thanks again, and yeah, we'll connect with you later. \n\n[00:27:41] Jacob:\nYeah, thanks for having me, Kent. Have a \n\n[00:27:43] Kent:\ngreat day. Bye."
          },
          "_rev": "9CeTKuUcQZRsVUft8VleYA",
          "_type": "videoResource",
          "muxAsset": {
            "muxPlaybackId": "ACB2vVYvVssTLa02dbiltthpEgRfEo00JWu4XQOlpXzXk",
            "muxAssetId": "vPqwUtDS02ln2Ky01R5B1Rrkl01E2d00whDaY013XFd01rC6c",
            "_type": "muxAsset"
          },
          "state": "ready",
          "duration": 1664.066667
        },
        "_id": "NS5Go30oWcGEvHRq8m76KL",
        "_type": "interview",
        "body": "Jacob Paris, a Canadian web developer and digital nomad residing in Bansko, Bulgaria, opens up about his work on Remix.\n\nThe lack of access to user preferences and time zones in server rendering is a significant challenge. Jacob proposes a solution called \"Client Hints\" and a more comprehensive alternative.\n\nManaging time zones is a significant hurdle in web development. Jacob emphasizes the importance of servers outputting all the necessary information for correct client rendering. This is especially crucial when users might have JavaScript disabled on their browsers.\n\nJacob and Kent also address the difficulties in teaching complex web development concepts. One solution considered is the packaging of some functionalities into libraries to make the learning curve less steep.\n\nAs a final note, mentions his role in curating the Moulten Newsletter, a resource for the Remix community. Jacob expresses his gratitude for community contributions and recommends that those interested connect with him on Twitter.\n\n## Resources\n\n- [Jacob Paris on Twitter](https://twitter.com/jacobmparis)\n- [Moulton Newsletter](https://www.readmoulton.com/)",
        "slug": "understanding-web-development-with-jacob-paris",
        "solution": null
      },
      {
        "body": "Jessica Sachs, software engineer at Ionic and expert in testing and QA, discusses her unique journey into the field of software testing.\n\nKent and Jessica initiate the conversation by dissecting different testing paradigms. They cover a range of approaches from Test-Driven Development to component-driven and end-to-end testing. A notable point is the \"testing trophy,\" a concept that stresses the importance of balancing different types of tests.\n\nThey both express reservations about shallow rendering and advocate for tests that closely mimic user interactions.\n\nBoth Kent and Jessica recommend TypeScript and static analysis tools, emphasizing their role in elevating code quality and developer productivity. They introduce an interesting perspective on \"use case coverage,\" urging the testing of real-world scenarios rather than just achieving high code coverage metrics.\n\n## Resources\n\n- [Jessica Sachs on Twitter](https://twitter.com/_JessicaSachs)\n- [Jessica's Discord server](https://discord.com/invite/8pzeBVgWnZ)",
        "slug": "the-depth-of-software-testing-with-jessica-sachs",
        "_updatedAt": "2023-10-17T22:53:53Z",
        "title": "The Depth of Software Testing with Jessica Sachs",
        "description": "Jessica Sachs, Ionic software engineer, and QA expert, dives into testing paradigms. Emphasis on balanced testing approaches and realistic use case coverage. Advocates for TypeScript and static analysis tools.",
        "videoResource": {
          "_id": "B9MrGEg0NpGWTknnF7wNup",
          "originalMediaUrl": "https://egghead-video-uploads.s3.amazonaws.com/epic-web/interviews/Jessica+Sachs.mp4",
          "transcript": {
            "srt": "1\n00:00:00,220 --> 00:00:05,700\nHey everybody, I'm super excited to be joined by my friend Jess. Say hi Jess. Hello.\n\n2\n00:00:06,480 --> 00:00:08,880\nSo Jess and I go way back.\n\n3\n00:00:09,440 --> 00:00:11,880\nMy goodness, we have known each other for a while.\n\n4\n00:00:12,780 --> 00:00:15,940\nI always try to think of like, where did we meet and how did that\n\n5\n00:00:16,320 --> 00:00:19,220\nrelationship start? I think we probably go back to like 2015,\n\n6\n00:00:19,540 --> 00:00:20,720\n16 timeframe.\n\n7\n00:00:21,220 --> 00:00:22,860\nYeah, that's been a minute.\n\n8\n00:00:23,180 --> 00:00:23,680\nYeah,\n\n9\n00:00:24,320 --> 00:00:25,220\nit's been great.\n\n10\n00:00:25,520 --> 00:00:28,160\nAnd it's just been a pleasure to know you and\n\n11\n00:00:28,580 --> 00:00:40,340\nkeep up with all the developments in your career and what you're doing to make the dev world a better place. So thank you for everything you do. I'd like for you to give a little intro to yourself and\n\n12\n00:00:41,040 --> 00:00:43,220\nso people know who you are. Cool.\n\n13\n00:00:43,620 --> 00:00:45,860\nMy name is Jessica Sax. I've been\n\n14\n00:00:46,200 --> 00:00:48,420\nin the testing space and doing\n\n15\n00:00:48,740 --> 00:00:50,220\nQA in various forms,\n\n16\n00:00:50,739 --> 00:00:53,100\nall the way from manual iPad testing,\n\n17\n00:00:53,400 --> 00:00:56,739\nthrough working at Cypress and shipping Cypress component testing.\n\n18\n00:00:57,280 --> 00:00:59,840\nI led the E2E team there for a brief moment\n\n19\n00:01:01,240 --> 00:01:04,860\nand have been really interested in how people work\n\n20\n00:01:05,160 --> 00:01:07,360\nin general. And testing is a big part of that.\n\n21\n00:01:07,900 --> 00:01:09,840\nYeah, awesome, awesome.\n\n22\n00:01:10,320 --> 00:01:14,120\nSo pretty, like not just I test at work,\n\n23\n00:01:14,440 --> 00:01:16,720\nbut I built a testing framework.\n\n24\n00:01:18,140 --> 00:01:18,640\nSo.\n\n25\n00:01:19,520 --> 00:01:20,119\nI think\n\n26\n00:01:20,540 --> 00:01:23,000\ncontributing to V-test was like my fourth\n\n27\n00:01:23,840 --> 00:01:24,340\n1.\n\n28\n00:01:24,660 --> 00:01:29,940\nLike I think I got, I was number 1 on stack overflow back when that was like cool\n\n29\n00:01:30,860 --> 00:01:34,940\nfor Appium, which is the mobile Selenium test driver for like 3 years.\n\n30\n00:01:35,500 --> 00:01:36,500\nThat was my achievement.\n\n31\n00:01:36,980 --> 00:01:38,080\nWow, yeah.\n\n32\n00:01:38,640 --> 00:01:40,460\nSo you're kind of into this.\n\n33\n00:01:40,940 --> 00:01:43,940\nWhat is it that draws you so much to testing?\n\n34\n00:01:44,680 --> 00:01:46,600\nI accidentally got good at it.\n\n35\n00:01:47,860 --> 00:01:49,540\nYes, I can relate. I accidentally got good at it. Yes, I can relate.\n\n36\n00:01:50,500 --> 00:02:02,780\nI accidentally got good at it. I started Wicked Young. I started when I was 16 doing manual QA, like full-time. I dropped out of high school, got a job when I was 16. And so this has been thinking like a user\n\n37\n00:02:03,180 --> 00:02:03,680\nand\n\n38\n00:02:04,060 --> 00:02:05,240\nmanaging risk.\n\n39\n00:02:06,060 --> 00:02:11,180\nThat has been intuitive to me because I started very early in my career. So\n\n40\n00:02:11,600 --> 00:02:13,880\nI'm accidentally good at it, I guess.\n\n41\n00:02:14,820 --> 00:02:18,220\nWell, do you enjoy it? Or is it just like, I can't leave?\n\n42\n00:02:21,100 --> 00:02:21,600\nI\n\n43\n00:02:22,160 --> 00:02:25,280\nenjoy teaching people about it. I enjoy\n\n44\n00:02:26,040 --> 00:02:26,760\nthe satisfaction\n\n45\n00:02:27,900 --> 00:02:28,400\nof...\n\n46\n00:02:30,720 --> 00:02:39,520\nI enjoy a little bit of the satisfaction. I've never really liked TDD is 1 weird thing about me. I guess like... Yeah, we share that actually. That's pretty interesting.\n\n47\n00:02:39,860 --> 00:02:41,260\nYeah, I don't really like TDD,\n\n48\n00:02:42,080 --> 00:02:43,140\nbut I\n\n49\n00:02:44,280 --> 00:02:45,360\nalso like,\n\n50\n00:02:45,660 --> 00:02:46,500\nI don't know.\n\n51\n00:02:47,100 --> 00:02:48,900\nI like making testing as\n\n52\n00:02:49,440 --> 00:02:52,660\nunapparent as possible. I don't like shifting workflows.\n\n53\n00:02:53,460 --> 00:02:55,140\nI like building naturally\n\n54\n00:02:55,900 --> 00:02:56,780\nfor a problem.\n\n55\n00:02:57,180 --> 00:03:00,720\nAnd testing is something that has to be done for many kinds of applications.\n\n56\n00:03:02,720 --> 00:03:03,220\nSo\n\n57\n00:03:03,520 --> 00:03:08,800\nI enjoy a bit about it. I don't know. I enjoy component driven development more than I enjoy testing.\n\n58\n00:03:09,340 --> 00:03:09,840\nYeah.\n\n59\n00:03:11,460 --> 00:03:13,880\nYeah. Actually, I'd love to talk about that for sure.\n\n60\n00:03:14,800 --> 00:03:15,520\nI think\n\n61\n00:03:18,220 --> 00:03:19,020\nwhat sometimes\n\n62\n00:03:20,100 --> 00:03:37,980\npeople miss or especially when they're just getting into testing, the thing that is a light bulb moment for people is when they realize, oh wait, so like writing, there's nothing special about tests, it's just like any other kind of software that we write. We're just automating a process, which is what we, that's what software is for, is automating processes.\n\n63\n00:03:38,740 --> 00:03:39,520\nAnd so,\n\n64\n00:03:40,520 --> 00:03:41,620\nyeah, I think\n\n65\n00:03:41,920 --> 00:03:53,760\nwhether it's writing tests so you don't have to manually check things or writing a feature so you don't have to manually keep a record of all the users who bought, you know, your stuffed koala, whatever it is.\n\n66\n00:03:54,760 --> 00:03:57,840\nI think it's, it's all just writing software, which is fun.\n\n67\n00:03:58,500 --> 00:04:06,060\nAnd yeah, so let's talk about component driven development then. So if we're not doing test-driven development, then what is component-driven\n\n68\n00:04:06,660 --> 00:04:08,580\ndevelopment then? So component-driven\n\n69\n00:04:08,940 --> 00:04:09,440\ndevelopment\n\n70\n00:04:09,960 --> 00:04:10,460\nis,\n\n71\n00:04:12,540 --> 00:04:14,560\nI would say that we\n\n72\n00:04:15,140 --> 00:04:22,700\nbuild a lot of components day-to-day. That's like kind of the main thing that front end developers tend to do at this point is they think in components.\n\n73\n00:04:23,440 --> 00:04:23,940\nYeah.\n\n74\n00:04:25,640 --> 00:04:29,920\nComponent driven development is isolating the contract, both styles,\n\n75\n00:04:31,100 --> 00:04:31,600\nmarkup\n\n76\n00:04:32,280 --> 00:04:33,560\nand props\n\n77\n00:04:33,980 --> 00:04:36,360\nevents. Maybe if you're using a different framework.\n\n78\n00:04:36,980 --> 00:04:38,500\nI come from a Vue background,\n\n79\n00:04:39,620 --> 00:04:40,540\nso we have events.\n\n80\n00:04:41,640 --> 00:04:44,720\nWe also have things like slots, which are like children,\n\n81\n00:04:45,060 --> 00:04:55,860\nand that I like to think of as a function almost, like a rendering function that you would pass in. So component-driven development allows me to architect the contract of the component both from a style perspective,\n\n82\n00:04:56,200 --> 00:04:59,280\nfrom a market perspective, and an accessibility perspective.\n\n83\n00:05:00,360 --> 00:05:02,140\nYou generally develop in a sandbox.\n\n84\n00:05:03,700 --> 00:05:04,200\nYeah.\n\n85\n00:05:05,080 --> 00:05:10,420\nCool. And so, yeah, so what is it about component-driven development that helps you be so productive?\n\n86\n00:05:13,040 --> 00:05:13,880\nI would say,\n\n87\n00:05:16,400 --> 00:05:17,080\nthe styling.\n\n88\n00:05:18,140 --> 00:05:22,980\nMm-hmm. Understanding the boundaries of styling the same way that you would understand the boundaries of an API.\n\n89\n00:05:23,360 --> 00:05:24,340\nI think people\n\n90\n00:05:26,660 --> 00:05:29,960\nunderstand functions and things that do logic\n\n91\n00:05:31,780 --> 00:05:39,360\nfairly easily. You don't really need to, you might not need to think of the contract that heavily ahead of time, but things like styling,\n\n92\n00:05:40,840 --> 00:05:43,920\nnobody really thinks about the contract between parent and child\n\n93\n00:05:45,060 --> 00:05:46,820\nwhen it comes to visual stuff.\n\n94\n00:05:48,480 --> 00:05:49,100\nI think\n\n95\n00:05:51,460 --> 00:05:52,700\nwith components,\n\n96\n00:05:53,240 --> 00:05:55,140\nbecause like you said, it's a sandbox,\n\n97\n00:05:55,580 --> 00:06:00,040\nit makes it easier to not have to have the entire application in your head.\n\n98\n00:06:00,520 --> 00:06:03,360\nYou can just focus on the area that you're in.\n\n99\n00:06:03,680 --> 00:06:07,460\nSo what is, yeah, go ahead. You can also start to see some\n\n100\n00:06:08,000 --> 00:06:11,500\nthings creep in. So for example, if you're trying to render\n\n101\n00:06:12,180 --> 00:06:13,760\na very simple presentational\n\n102\n00:06:14,540 --> 00:06:15,040\ndialogue,\n\n103\n00:06:15,720 --> 00:06:20,940\nyou might notice that you're mocking a network request and you ask yourself at that point,\n\n104\n00:06:21,580 --> 00:06:23,160\nit's annoying to write,\n\n105\n00:06:23,560 --> 00:06:25,420\nfor example, mock service worker\n\n106\n00:06:25,920 --> 00:06:27,540\nnetwork request stub.\n\n107\n00:06:27,900 --> 00:06:32,620\nLike that's annoying. Why am I doing that when all I want to check is if the X button\n\n108\n00:06:33,120 --> 00:06:33,620\nfires\n\n109\n00:06:34,400 --> 00:06:35,040\na callback.\n\n110\n00:06:35,500 --> 00:06:42,940\nRight? Like that's weird. Why am I stubbing this very domain specific network call? You ask yourself questions when you break it down like that.\n\n111\n00:06:43,260 --> 00:06:45,140\nYeah, yeah, I think that makes sense. So\n\n112\n00:06:45,560 --> 00:06:53,040\nwhat, I guess that kind of leads into the next question I want to ask you about, and that's what does component-driven development have to do with testing?\n\n113\n00:06:53,760 --> 00:06:55,060\nSo both of them produce\n\n114\n00:06:55,440 --> 00:06:56,300\na sandbox.\n\n115\n00:06:58,660 --> 00:07:01,880\nBoth environments require you to fixture your application\n\n116\n00:07:03,100 --> 00:07:04,800\nand its components therein\n\n117\n00:07:05,140 --> 00:07:08,800\nsuch that they can be rendered in environments that are not your app.\n\n118\n00:07:11,000 --> 00:07:13,400\nThat's where people struggle the most in testing.\n\n119\n00:07:13,820 --> 00:07:17,460\nSo when you do component driven development, you're getting the workflow\n\n120\n00:07:18,080 --> 00:07:26,560\nof building an isolation in a playground, you're getting some gains there. And then when it comes time to test, you've already done all the hard work of mocking.\n\n121\n00:07:28,260 --> 00:07:28,880\nYou just,\n\n122\n00:07:29,380 --> 00:07:31,620\nyeah. Yeah, that makes a lot of sense. So\n\n123\n00:07:32,040 --> 00:07:33,380\nwhen you're working\n\n124\n00:07:34,120 --> 00:07:36,720\nwith that kind of a workflow, are you typically using\n\n125\n00:07:37,500 --> 00:07:40,860\na tool that facilitates the isolation, like Storybook or something?\n\n126\n00:07:41,420 --> 00:07:44,560\nSo there are many tools that facilitate the isolation\n\n127\n00:07:45,040 --> 00:07:45,840\nof components.\n\n128\n00:07:48,900 --> 00:07:49,940\nThere are like\n\n129\n00:07:50,900 --> 00:07:52,320\nones that do it with iframes.\n\n130\n00:07:53,300 --> 00:07:56,100\nThere are ones that do it by rendering your entire application.\n\n131\n00:07:57,440 --> 00:07:58,120\nThe first\n\n132\n00:07:58,940 --> 00:08:03,900\nthing I ever built was actually, the first test runner I ever built just loaded a browser\n\n133\n00:08:04,200 --> 00:08:06,860\nand changed routes for every component.\n\n134\n00:08:07,360 --> 00:08:15,140\nIt was a very weird, interesting idea. It's called the feather test. I don't know if I've hidden it from my repo or my profile out of embarrassment,\n\n135\n00:08:15,620 --> 00:08:15,780\nbut,\n\n136\n00:08:17,380 --> 00:08:20,700\nbasically all you need is a window object that's\n\n137\n00:08:21,340 --> 00:08:21,840\nsanitized.\n\n138\n00:08:22,960 --> 00:08:26,500\nIt's the same thing that you would need in a test or a test environment.\n\n139\n00:08:27,120 --> 00:08:29,020\nFrom there, there are\n\n140\n00:08:30,720 --> 00:08:33,760\n3 to 4 vendors, I would think, Storybook\n\n141\n00:08:34,400 --> 00:08:36,919\nbeing very presentational component heavy,\n\n142\n00:08:38,640 --> 00:08:41,500\nand Cypress and Playwright being very application\n\n143\n00:08:43,919 --> 00:08:50,400\nfacilitating, right? They were built as end-to-end test runners, so they have all the primitives necessary to drive the application,\n\n144\n00:08:51,600 --> 00:08:55,120\nas well as tell you information about it. They have retryability,\n\n145\n00:08:56,260 --> 00:08:57,320\nis a big thing.\n\n146\n00:08:57,900 --> 00:08:58,400\nYeah.\n\n147\n00:08:59,960 --> 00:09:00,460\nCool.\n\n148\n00:09:02,860 --> 00:09:03,500\nSo with\n\n149\n00:09:04,200 --> 00:09:04,700\ncomponent-driven\n\n150\n00:09:05,100 --> 00:09:06,640\ndevelopment and like component-level\n\n151\n00:09:07,000 --> 00:09:07,500\ntests,\n\n152\n00:09:09,600 --> 00:09:13,300\ndo you find that you end up writing most of your application\n\n153\n00:09:13,660 --> 00:09:14,160\ntests\n\n154\n00:09:15,060 --> 00:09:17,220\nat that level of the component?\n\n155\n00:09:18,400 --> 00:09:22,840\nI do. I think that's a side effect of the way that I build applications\n\n156\n00:09:23,160 --> 00:09:24,560\nis not very page-based.\n\n157\n00:09:25,600 --> 00:09:27,840\nI might only build single-page applications.\n\n158\n00:09:28,780 --> 00:09:33,620\nIf I was working in a more meta-framework sense, I would probably find myself\n\n159\n00:09:34,300 --> 00:09:35,420\nleaning towards\n\n160\n00:09:37,120 --> 00:09:39,140\nleaning towards more end-to-end tests\n\n161\n00:09:39,720 --> 00:09:42,480\nor being very comfortable mocking out\n\n162\n00:09:43,320 --> 00:09:44,280\nfull-page navigation.\n\n163\n00:09:45,460 --> 00:09:53,100\nSo I would lean towards something like playwright in Cyprus where it's very simple to go between the contexts of I'm rendering something Presentational\n\n164\n00:09:53,680 --> 00:09:55,220\nthat's a button that doesn't\n\n165\n00:09:55,760 --> 00:09:59,980\nNavigate, you know, it's not a submit button within a form basically, right\n\n166\n00:10:00,280 --> 00:10:02,140\nwhen you get into multi route navigation\n\n167\n00:10:02,600 --> 00:10:03,740\npage level testing,\n\n168\n00:10:04,540 --> 00:10:07,620\ndepending on your meta framework, things get a little weird.\n\n169\n00:10:08,480 --> 00:10:11,820\nYeah, yeah, that is, things can get weird.\n\n170\n00:10:12,440 --> 00:10:13,700\nYeah, so\n\n171\n00:10:14,130 --> 00:10:14,630\nI\n\n172\n00:10:15,060 --> 00:10:20,440\nthink that's actually really consistent to the way that I typically develop. So when I was at\n\n173\n00:10:20,920 --> 00:10:23,220\nPayPal, 1 of the last things that I started\n\n174\n00:10:24,020 --> 00:10:26,140\nworking on was a component library,\n\n175\n00:10:26,880 --> 00:10:27,940\nand we used Storybook,\n\n176\n00:10:28,320 --> 00:10:34,060\nand everything that I was doing was component tests, because of course, I'm not building an app, I'm building components now.\n\n177\n00:10:36,040 --> 00:10:37,260\nBut especially with\n\n178\n00:10:37,600 --> 00:10:39,680\nRemix, I have found myself,\n\n179\n00:10:40,460 --> 00:10:44,540\nso I made the testing trophy concept where integration tests is like the main\n\n180\n00:10:45,660 --> 00:10:50,400\namount of stuff that you're writing. And I would put component tests into there.\n\n181\n00:10:51,760 --> 00:10:59,780\nThey're kind of sit between integration and unit. They're certainly not a unit test, but they're not quite an integration test. So I'll just lump them in with integration.\n\n182\n00:11:01,100 --> 00:11:01,600\nSo\n\n183\n00:11:01,980 --> 00:11:02,480\nanyway,\n\n184\n00:11:02,860 --> 00:11:05,820\nwe're integrating with a framework if we wanna be.\n\n185\n00:11:06,760 --> 00:11:11,760\nPeople are coming up on the word integration. They like always like to label the kind of test and it's like,\n\n186\n00:11:13,860 --> 00:11:18,000\nYeah. It depends. I honestly like, even as the creator of the testing trophy idea,\n\n187\n00:11:19,060 --> 00:11:23,160\nI don't actually care too much about the distinction between these different types of tests.\n\n188\n00:11:24,100 --> 00:11:26,540\nBut I would say that with the meta frameworks,\n\n189\n00:11:26,980 --> 00:11:32,060\nI have found my trophy getting a little top heavy and I do write a lot more\n\n190\n00:11:32,560 --> 00:11:35,820\nend-to-end tests than I used to. Just because\n\n191\n00:11:36,680 --> 00:11:43,780\nnot only is it simpler because I don't wanna just worry about 1 side or the other, I'm doing full stack rendering and everything.\n\n192\n00:11:45,060 --> 00:11:46,940\nBut our tools have gotten better too.\n\n193\n00:11:47,540 --> 00:11:50,240\nAnd so yeah, I would say that I'm along with you.\n\n194\n00:11:50,820 --> 00:11:56,260\nIf my deliverable is components, then yeah, of course I'm gonna be doing a lot more component testing. If my deliverable\n\n195\n00:11:56,580 --> 00:11:57,420\nis an application,\n\n196\n00:11:58,100 --> 00:12:01,760\nI'll component test the complicated stuff that's very domain specific,\n\n197\n00:12:02,720 --> 00:12:16,660\nyou know, components, but for the rest of my components, they're pretty like Lego blocks that were already tested elsewhere. And so I ended up just covering those as part of the end to end test. Something that I think you've written about before that\n\n198\n00:12:17,480 --> 00:12:19,420\nin the quality exchange,\n\n199\n00:12:20,320 --> 00:12:22,080\nquality engineer stack exchange\n\n200\n00:12:23,100 --> 00:12:26,700\ngroup was very common is if your technology,\n\n201\n00:12:27,100 --> 00:12:29,320\nyour underlying technology changes,\n\n202\n00:12:30,040 --> 00:12:32,460\nbut your tests also have to change,\n\n203\n00:12:33,080 --> 00:12:34,620\nthat's not great.\n\n204\n00:12:35,080 --> 00:12:37,460\nAnd clearly your tests will give you security\n\n205\n00:12:39,280 --> 00:12:41,900\nwithout needing a major rewrite, right? So if you're-\n\n206\n00:12:42,440 --> 00:12:45,140\nYeah, you know- Oh, sorry, I interrupted you.\n\n207\n00:12:45,640 --> 00:12:48,300\nIf you're thinking about things like, I'm building\n\n208\n00:12:48,640 --> 00:12:54,820\nin Next or Nuxt, and therefore I need to mock the next image tag to be an image,\n\n209\n00:12:55,400 --> 00:12:58,440\nwhich is what has to happen for things like Storybook\n\n210\n00:12:59,540 --> 00:13:01,680\nand Cypress component testing because\n\n211\n00:13:02,140 --> 00:13:06,840\nwe're not thinking in terms of the meta framework, we're thinking in terms of bundling,\n\n212\n00:13:07,680 --> 00:13:10,820\nwhich is such a front end concept, like the user\n\n213\n00:13:11,200 --> 00:13:13,140\ndoesn't even know what bundling is,\n\n214\n00:13:13,780 --> 00:13:18,740\nlike at all. But the user does know what, you know, open this URL\n\n215\n00:13:19,320 --> 00:13:22,580\nand enter the form data and click submit means.\n\n216\n00:13:22,900 --> 00:13:27,320\nAnd at the end of the day, that's what your project manager or product owner cares about.\n\n217\n00:13:28,260 --> 00:13:30,720\nTechnically, you shouldn't be coupled to those\n\n218\n00:13:31,340 --> 00:13:31,840\nideas.\n\n219\n00:13:32,720 --> 00:13:33,220\nYeah,\n\n220\n00:13:33,680 --> 00:13:34,180\n100%.\n\n221\n00:13:35,140 --> 00:13:36,080\nIn the workshops,\n\n222\n00:13:37,220 --> 00:13:38,300\nthe very first\n\n223\n00:13:38,680 --> 00:13:46,040\nexercise in the testing workshop is writing your first end-to-end test, and I started out by telling people, you should\n\n224\n00:13:47,060 --> 00:13:55,680\nwrite, whenever you're thinking about writing a test, you should pretend you're a product manager telling a manual tester what steps to do to verify things are working.\n\n225\n00:13:56,980 --> 00:13:59,120\nBecause the manual tester isn't gonna understand,\n\n226\n00:13:59,960 --> 00:14:03,360\nor maybe they understand it, like manual testers are very smart, but\n\n227\n00:14:03,900 --> 00:14:06,600\nthey shouldn't have to understand the actual implementation.\n\n228\n00:14:07,440 --> 00:14:09,640\nAnd if you follow that pattern,\n\n229\n00:14:10,120 --> 00:14:11,700\nthen you can keep your detail.\n\n230\n00:14:12,180 --> 00:14:14,100\nI like to say your test should be\n\n231\n00:14:14,820 --> 00:14:17,440\nimplementation detail free and refactor friendly.\n\n232\n00:14:18,820 --> 00:14:19,640\nAnd that's...\n\n233\n00:14:20,460 --> 00:14:22,000\nI like that. Yeah.\n\n234\n00:14:22,500 --> 00:14:23,060\nI remember,\n\n235\n00:14:24,060 --> 00:14:25,520\nI guess back in the day,\n\n236\n00:14:26,380 --> 00:14:27,540\nAround the time\n\n237\n00:14:27,840 --> 00:14:32,220\nRuby was really popular in a few years like Rails was really popular in a few years before,\n\n238\n00:14:34,080 --> 00:14:37,040\nthere was this concept, actually, this is earlier, this is like 2004,\n\n239\n00:14:37,420 --> 00:14:39,860\nthere's this word called Gherkin.\n\n240\n00:14:40,240 --> 00:14:42,080\nWe're talking about expressing\n\n241\n00:14:42,880 --> 00:14:43,380\nideas\n\n242\n00:14:43,980 --> 00:14:47,940\nand tests as if they were English to make them very\n\n243\n00:14:48,760 --> 00:14:49,260\nunderstandable\n\n244\n00:14:49,780 --> 00:14:51,100\nand to think\n\n245\n00:14:51,960 --> 00:14:52,460\noutside\n\n246\n00:14:53,140 --> 00:14:54,300\nof technical implementation.\n\n247\n00:14:55,520 --> 00:14:57,380\nAnd so back in the day, around 2004,\n\n248\n00:14:58,260 --> 00:14:58,760\nthere,\n\n249\n00:14:59,220 --> 00:15:00,600\nplease fact check me.\n\n250\n00:15:01,620 --> 00:15:06,260\nI was writing a talk called the history of modern front-end testing recently. So I was googling,\n\n251\n00:15:07,480 --> 00:15:10,020\nmaybe I'm thinking of particular language binding, but\n\n252\n00:15:11,660 --> 00:15:13,680\nthe idea is that you have given\n\n253\n00:15:14,700 --> 00:15:15,560\nthis scenario\n\n254\n00:15:16,320 --> 00:15:16,820\nwhen\n\n255\n00:15:17,300 --> 00:15:18,620\nthe person does this,\n\n256\n00:15:19,740 --> 00:15:21,240\ngiven when, then.\n\n257\n00:15:22,360 --> 00:15:26,920\nThen something should happen. So in the given state, you define a scenario,\n\n258\n00:15:27,540 --> 00:15:30,220\nwhen actions occur from the user,\n\n259\n00:15:30,620 --> 00:15:31,120\nideally,\n\n260\n00:15:31,680 --> 00:15:37,700\nthen an assertion should be made. And it looks like English. You know, it reads like a sentence.\n\n261\n00:15:38,160 --> 00:15:39,840\nAnd I found that very fascinating.\n\n262\n00:15:40,380 --> 00:15:42,080\nIt is brittle for other reasons.\n\n263\n00:15:42,700 --> 00:15:50,580\nIt's not brittle, it's difficult to debug for specific reasons. But the concept kind of stuck with me. It's like, wow, you could hypothetically\n\n264\n00:15:51,380 --> 00:15:54,440\nwrite English that outputted a requirements\n\n265\n00:15:54,920 --> 00:15:58,280\nCSV doc that you could hand to some healthcare agency.\n\n266\n00:15:58,620 --> 00:15:59,120\nAnd\n\n267\n00:16:00,060 --> 00:16:06,780\nThat's actually 1 of the benefits of using something like Gherkin. It's impossible to debug. I do not recommend it. Yeah.\n\n268\n00:16:07,240 --> 00:16:09,640\nYeah, we actually did something similar to that\n\n269\n00:16:10,020 --> 00:16:13,540\nat my first job, first developer job called Domo.\n\n270\n00:16:15,040 --> 00:16:15,980\nThe QA engineers\n\n271\n00:16:16,480 --> 00:16:18,140\nwrote up a bunch of Gherkin\n\n272\n00:16:18,480 --> 00:16:23,820\ntests that were just like, just the, not the implementation of the test, but just the given when then.\n\n273\n00:16:24,440 --> 00:16:25,820\nAnd then every release,\n\n274\n00:16:26,800 --> 00:16:27,480\nthey would\n\n275\n00:16:28,040 --> 00:16:28,540\nlike,\n\n276\n00:16:29,440 --> 00:16:30,320\nthey would just\n\n277\n00:16:30,660 --> 00:16:33,580\ndivvy out all of the tests of people and we do it manually.\n\n278\n00:16:34,600 --> 00:16:35,720\nAnd then over time,\n\n279\n00:16:36,280 --> 00:16:40,180\nthey would write the implementation of these and so we'd have to do fewer and fewer manually.\n\n280\n00:16:40,520 --> 00:16:43,880\nIt was awful, I hated it, but like it was\n\n281\n00:16:44,380 --> 00:16:45,560\nnecessary because\n\n282\n00:16:45,920 --> 00:16:46,420\notherwise\n\n283\n00:16:47,060 --> 00:16:50,200\nwe wouldn't have had any tests probably. So.\n\n284\n00:16:50,900 --> 00:16:52,580\nIt's the automating of processes\n\n285\n00:16:52,900 --> 00:16:57,640\nthat you're talking about is when, and I think people who started with teams that\n\n286\n00:16:58,220 --> 00:17:05,460\nonly had budget for manual QA, This was much more common before developers took ownership of the testing stack.\n\n287\n00:17:06,339 --> 00:17:07,500\nPeople who transferred\n\n288\n00:17:08,700 --> 00:17:10,660\nwere the seam between\n\n289\n00:17:11,240 --> 00:17:18,480\nuser requirements and making sure, validating that they worked, and developers that did the code, there was this big gap between the 2.\n\n290\n00:17:19,060 --> 00:17:22,619\nAs we got more mixture, I think people started to understand,\n\n291\n00:17:24,160 --> 00:17:25,260\ninstead of just\n\n292\n00:17:25,960 --> 00:17:27,900\nchecking that the list handles\n\n293\n00:17:28,940 --> 00:17:30,400\nusers with these particular\n\n294\n00:17:30,860 --> 00:17:31,360\nfields,\n\n295\n00:17:31,920 --> 00:17:37,280\nan admin user, instead of just manually logging in as the user's name was Steve Silver.\n\n296\n00:17:37,860 --> 00:17:41,680\nSteve Silver to make sure the app doesn't crash when it handles 10,000 accounts,\n\n297\n00:17:42,180 --> 00:17:46,900\nwe could just automate that. Technically at that point, it wasn't possible to automate,\n\n298\n00:17:47,220 --> 00:17:50,460\nwhich is the other thing that was interesting in the early\n\n299\n00:17:52,800 --> 00:17:53,300\n2010s,\n\n300\n00:17:54,100 --> 00:17:55,960\naround when Appium was released,\n\n301\n00:17:57,020 --> 00:17:59,440\nit was impossible to automate iOS app\n\n302\n00:17:59,840 --> 00:18:02,060\ntesting. That's why you had a lot of testers.\n\n303\n00:18:03,420 --> 00:18:06,860\nYeah, that makes a lot of sense. 1 thing that you said earlier\n\n304\n00:18:08,160 --> 00:18:09,380\nthat I thought was pretty\n\n305\n00:18:10,080 --> 00:18:11,180\ninteresting was\n\n306\n00:18:11,680 --> 00:18:19,540\nsomething about like your test shouldn't know about what framework you're using under the hood and you should be able to swap out the framework and the test should still run.\n\n307\n00:18:21,040 --> 00:18:28,280\nAnd that actually is a big part of what made the testing library take off so much, or as much as it did, was because\n\n308\n00:18:29,220 --> 00:18:29,940\nabout it,\n\n309\n00:18:31,060 --> 00:18:35,200\nTesting library had been out for about a year, I think, maybe 2.\n\n310\n00:18:35,940 --> 00:18:40,620\nAnd it was definitely gaining popularity, but a lot of people were happy just sticking with Enzyme.\n\n311\n00:18:41,120 --> 00:18:43,520\nAnd then React Hooks came out,\n\n312\n00:18:43,840 --> 00:18:48,480\nand that's just an implementation. So your tests with testing library,\n\n313\n00:18:48,900 --> 00:19:03,120\nthey would work either way. You could refactor from classes to hooks and your tests should still pass. And in fact, the idea is that the test verifies that you didn't break anything in that transition. So it's a huge benefit. But Enzyme, because it's so\n\n314\n00:19:04,200 --> 00:19:05,880\nimplementation detail specific,\n\n315\n00:19:07,080 --> 00:19:09,940\nthat's just like the design around it,\n\n316\n00:19:10,240 --> 00:19:18,680\nnobody could use their Enzyme tests and upgrade to Hooks. In fact, I don't think Enzyme even still works with hooks and that's because nobody's really working on it now but\n\n317\n00:19:19,540 --> 00:19:21,360\nworking on it I met him the other day\n\n318\n00:19:22,360 --> 00:19:28,400\nyeah I asked him I asked him what the feature is about enzyme that keeps him maintaining it\n\n319\n00:19:29,280 --> 00:19:37,320\nwhat is that it is shallow mount It is the exact thing that has the problem that you're talking about. Yeah. It's a benefit. It's a very interesting.\n\n320\n00:19:38,480 --> 00:19:43,040\nYou will also see GitLab's codebase almost exclusively uses shallow mount.\n\n321\n00:19:44,440 --> 00:19:49,820\nView test details promoted it heavily after because it was written around when Enzyme was written.\n\n322\n00:19:50,340 --> 00:19:52,380\nAnd that's no longer the case. I think\n\n323\n00:19:53,180 --> 00:19:59,960\nLachlan and I, who both worked at Cypress to create Cypress component testing, very much were like, shallow mount is not great\n\n324\n00:20:01,220 --> 00:20:02,060\nfor refactorability.\n\n325\n00:20:03,120 --> 00:20:03,620\nRight.\n\n326\n00:20:04,740 --> 00:20:06,640\nYeah, I have a blog post titled,\n\n327\n00:20:07,060 --> 00:20:13,760\nWhy Shallow Rendering? Or, Never Use Shallow Rendering, or something like that. Very, very strongly. I used it once,\n\n328\n00:20:14,180 --> 00:20:16,560\nlong enough to realize this is a terrible idea,\n\n329\n00:20:16,920 --> 00:20:18,460\nand never used it again.\n\n330\n00:20:19,460 --> 00:20:24,740\nI came to component development fairly late in the game. I spent a lot of time in vanilla JavaScript development.\n\n331\n00:20:25,460 --> 00:20:28,680\nSo there was a lot of time, I think, until\n\n332\n00:20:30,580 --> 00:20:31,700\n2016 or 17,\n\n333\n00:20:32,380 --> 00:20:34,820\nwhere I didn't even know what a component was.\n\n334\n00:20:35,320 --> 00:20:36,600\nAnd mind you, this is\n\n335\n00:20:38,300 --> 00:20:40,420\nlike 6 years in my career, and\n\n336\n00:20:40,840 --> 00:20:48,840\nI don't know what components are or component testing is. There's still A lot of people like that in our dev world right now. Yeah.\n\n337\n00:20:49,360 --> 00:21:05,880\nAnd I'm thinking about things in this user perspective. And I'm like, well, if you change the tests at the same time as you change the source code, how can you know? Yeah. Like, how can you know? So the best test in the hypothetical, I always think in the hypothetical, right? If you can have the best stuff.\n\n338\n00:21:06,660 --> 00:21:17,940\nBest test is your product owner that knows everything about the app telling you this is perfect. Well, the best, best test is testing and production, which is something I want to talk about. Yeah.\n\n339\n00:21:20,460 --> 00:21:23,600\nWhich is a valid strategy depending on your company. 100%.\n\n340\n00:21:24,000 --> 00:21:25,240\nIt's super weird, but\n\n341\n00:21:25,580 --> 00:21:26,620\nI've done it\n\n342\n00:21:28,040 --> 00:21:28,760\nto success.\n\n343\n00:21:30,380 --> 00:21:42,480\nWhen it comes to the hypothetical best test, you want to change as little test code alongside your source code, and shallow rendering prevents that entirely because it's, by design, you're passing in mocked functions\n\n344\n00:21:44,440 --> 00:21:47,300\ninto each prop, basically, if you think of it in that context.\n\n345\n00:21:49,020 --> 00:21:51,060\nYeah. Yeah. So don't do it, folks.\n\n346\n00:21:52,280 --> 00:21:54,660\nIf people tell you to unit test your components\n\n347\n00:21:56,180 --> 00:21:57,040\ndon't don't\n\n348\n00:21:57,620 --> 00:22:11,780\nbecause it doesn't matter if the unit of the component test works it matters if the user sees it on the page and can click on it. That's the thing. Yeah, now wait, so where does that mean unit tests are worthless or where do they make sense?\n\n349\n00:22:13,160 --> 00:22:16,300\nUnit tests make sense when your user is a developer.\n\n350\n00:22:18,060 --> 00:22:19,340\nThat's what I would say.\n\n351\n00:22:21,000 --> 00:22:22,760\nIn which case you can\n\n352\n00:22:23,180 --> 00:22:24,120\nwrite both\n\n353\n00:22:25,940 --> 00:22:27,080\ncomponent or integration-y\n\n354\n00:22:27,740 --> 00:22:31,780\ntests that test the side effect of rendering the component, which is the DOM updating\n\n355\n00:22:32,440 --> 00:22:38,180\nor, or, and depending, you can also test a shallow rendered component\n\n356\n00:22:38,520 --> 00:22:42,260\nfor unit coverage. But remember that unit coverage doesn't actually\n\n357\n00:22:42,800 --> 00:22:44,940\ngive extra value to the user.\n\n358\n00:22:45,540 --> 00:22:47,300\nThat thing that gives extra value.\n\n359\n00:22:47,980 --> 00:22:54,020\nThe only thing that matters to the bottom line is can the user hit submit when they're trying to give you payment information\n\n360\n00:22:54,920 --> 00:22:55,620\nat PayPal.\n\n361\n00:22:56,140 --> 00:22:56,640\nYeah.\n\n362\n00:22:57,660 --> 00:22:59,360\nYeah, you know, I would say that\n\n363\n00:23:00,040 --> 00:23:01,700\nThere's not really a really\n\n364\n00:23:02,040 --> 00:23:03,580\ngreat use case for\n\n365\n00:23:03,900 --> 00:23:06,560\nwhat I would call a unit test for a component.\n\n366\n00:23:07,120 --> 00:23:07,980\nBecause like,\n\n367\n00:23:08,640 --> 00:23:11,080\nif we're gonna be dogmatic or\n\n368\n00:23:12,180 --> 00:23:16,440\npedantic about this, then to unit test a component, you're mocking the framework.\n\n369\n00:23:17,120 --> 00:23:20,580\nThat's the only way you do it. So terrible idea, don't do that.\n\n370\n00:23:20,900 --> 00:23:28,820\nBut- Don't do that. Java background people will be tempted to do that through heavy usage of Mockito and stuff like that. So depending on your background,\n\n371\n00:23:29,380 --> 00:23:30,300\nyou might also\n\n372\n00:23:31,320 --> 00:23:32,460\nhave a few influences\n\n373\n00:23:32,840 --> 00:23:35,520\nwhere it's fashionable to mock everything, but\n\n374\n00:23:35,840 --> 00:23:37,540\ndon't do it. Yeah.\n\n375\n00:23:39,000 --> 00:23:43,280\nBut where I find unit testing to be very valuable is lower level\n\n376\n00:23:43,660 --> 00:23:52,980\nutility functions that are pretty complex and stuff like that. Especially when it comes to pure functions and stuff, like really like unit testing that stuff. But even\n\n377\n00:23:53,480 --> 00:23:53,980\nun-pure\n\n378\n00:23:54,280 --> 00:24:02,340\nthings, so like things that depend on the date, for example, like if you're generating a one-time password, I have unit tests on\n\n379\n00:24:02,920 --> 00:24:14,120\nmy library for that. Stuff like that can be really very useful for that kind of thing. When you have to mock something that's not guaranteed to be consistent over multiple runs of the component or function,\n\n380\n00:24:14,540 --> 00:24:15,040\nsorry,\n\n381\n00:24:15,660 --> 00:24:18,540\nof the subject under test is the jargon that you might\n\n382\n00:24:18,960 --> 00:24:20,200\nhear. S-U-T\n\n383\n00:24:20,560 --> 00:24:21,360\nfor people\n\n384\n00:24:22,220 --> 00:24:24,660\nwho don't spend time in QASAC exchange.\n\n385\n00:24:27,260 --> 00:24:36,300\nYeah, so things that you have no control over because you don't own the whole system and you shouldn't. Your code doesn't care if it's on a Linux box. That gives you a UTC time zone.\n\n386\n00:24:36,820 --> 00:24:38,400\nYeah, yeah. So\n\n387\n00:24:38,860 --> 00:24:41,780\na lot of people, when they started adopting TypeScript\n\n388\n00:24:42,740 --> 00:24:45,560\nand like these static testing tools like TypeScript,\n\n389\n00:24:46,560 --> 00:24:51,840\nit start to feel like testing is much less valuable. What is your take on that?\n\n390\n00:24:53,100 --> 00:24:53,600\nOkay,\n\n391\n00:24:57,040 --> 00:24:57,680\nit depends.\n\n392\n00:25:00,060 --> 00:25:05,580\nIt depends on who your user is and what kind of code you're writing. So if you're writing code to be consumed\n\n393\n00:25:06,360 --> 00:25:06,860\nby,\n\n394\n00:25:07,500 --> 00:25:09,640\nso there's 2, there's 2 benefits.\n\n395\n00:25:09,960 --> 00:25:11,700\nThere's many more benefits to TypeScript.\n\n396\n00:25:12,260 --> 00:25:17,120\n2 major, 2 major benefits are selfish. 1 is your own productivity\n\n397\n00:25:17,420 --> 00:25:18,280\nand your teammates.\n\n398\n00:25:18,740 --> 00:25:20,520\nThe other is user\n\n399\n00:25:20,900 --> 00:25:21,920\nbenefit of TypeScript.\n\n400\n00:25:22,280 --> 00:25:25,420\nSo the user benefit for TypeScript is what you're gonna tell your boss.\n\n401\n00:25:25,840 --> 00:25:29,280\nSelfish benefit is what you're gonna say, like it will improve velocity.\n\n402\n00:25:30,260 --> 00:25:35,280\nSo from a quality perspective, static analysis tools such as linters and\n\n403\n00:25:36,460 --> 00:25:37,860\nTypeScript, for example,\n\n404\n00:25:38,640 --> 00:25:40,420\nlive on the base of your\n\n405\n00:25:41,040 --> 00:25:41,820\ntesting trophy.\n\n406\n00:25:42,180 --> 00:25:42,680\nMm-hmm.\n\n407\n00:25:44,340 --> 00:25:44,840\nYeah.\n\n408\n00:25:45,180 --> 00:25:48,220\nLive on the base of your testing trophy. I could go on about that.\n\n409\n00:25:49,600 --> 00:25:50,100\nAnd\n\n410\n00:25:50,540 --> 00:25:53,180\nthey prevent your users from accidentally\n\n411\n00:25:53,800 --> 00:25:57,540\nputting in bad data, depending on how you're using it.\n\n412\n00:25:58,320 --> 00:25:59,760\nSo application developers\n\n413\n00:26:02,020 --> 00:26:07,860\ncan rely on TypeScript for a large portion of quality by using different kinds of schema validators.\n\n414\n00:26:10,200 --> 00:26:10,880\nIt depends\n\n415\n00:26:11,540 --> 00:26:17,420\non the tooling that you're going to use to leverage the full power of TypeScript for type safety, like true safety.\n\n416\n00:26:19,940 --> 00:26:21,400\nThe other side of the coin\n\n417\n00:26:21,820 --> 00:26:25,380\nis JavaScript library authors whose users may not be using TypeScript.\n\n418\n00:26:25,680 --> 00:26:35,520\nThey have to do a lot of, have to, they really should do a lot of runtime checks to make sure the data types you're passing in aren't wrong and the schema you're passing in isn't wrong.\n\n419\n00:26:36,420 --> 00:26:40,340\nBut for application developers, I think you gain a lot of safety\n\n420\n00:26:41,940 --> 00:26:42,940\nby using TypeScript.\n\n421\n00:26:43,380 --> 00:26:45,260\nYeah, I do think that\n\n422\n00:26:46,260 --> 00:26:50,500\nWhat TypeScript did for me was it eliminated a bunch of tests that I wasn't writing anyway.\n\n423\n00:26:51,220 --> 00:26:52,500\nSo, like,\n\n424\n00:26:53,360 --> 00:26:58,580\nif I was making a theoretical sum function that's taking 2 numbers and adding them together,\n\n425\n00:26:59,440 --> 00:27:12,540\nI would write a test that ensures that the value returned is correct, but I probably wouldn't write a test to say, well, what happens if they pass a symbol or what happens if they pass an object? I wouldn't have written that test.\n\n426\n00:27:13,080 --> 00:27:13,580\nYeah.\n\n427\n00:27:14,320 --> 00:27:18,500\nWhat is it? A QA engineer walks into a bar and orders a beer\n\n428\n00:27:18,820 --> 00:27:20,340\nor does 999 beers\n\n429\n00:27:20,740 --> 00:27:21,960\norders a goat\n\n430\n00:27:22,540 --> 00:27:23,400\nsomething like that.\n\n431\n00:27:24,520 --> 00:27:29,320\nSo many flavors of that joke and I picked the 1 that was off the top of my head. Yeah,\n\n432\n00:27:29,720 --> 00:27:30,520\nthat's funny.\n\n433\n00:27:31,860 --> 00:27:32,940\nBut yeah, just\n\n434\n00:27:33,300 --> 00:27:42,100\nusing your code that you know how it's intended to be used in completely wildly incorrect ways, like you would never do that. So by setting strict types, you like eliminate that entire class of problems.\n\n435\n00:27:43,000 --> 00:27:43,940\nYeah, 100%.\n\n436\n00:27:44,880 --> 00:27:46,100\nSomething I was going to say,\n\n437\n00:27:46,680 --> 00:27:47,420\nI find\n\n438\n00:27:47,800 --> 00:27:54,000\n1 of my favorite types of bugs to catch using TypeScript, this is universal for all web developers,\n\n439\n00:27:54,560 --> 00:27:55,060\nis\n\n440\n00:27:55,620 --> 00:27:56,860\nicon names.\n\n441\n00:28:00,220 --> 00:28:02,380\nSo 1 of the tools I use is called Iconify.\n\n442\n00:28:03,480 --> 00:28:04,120\nIt uses\n\n443\n00:28:04,860 --> 00:28:05,360\nclass-based\n\n444\n00:28:06,960 --> 00:28:08,200\nnames to say,\n\n445\n00:28:08,600 --> 00:28:09,100\nI-MDI-arrowup.\n\n446\n00:28:12,900 --> 00:28:13,400\nCool.\n\n447\n00:28:13,940 --> 00:28:23,540\nThey also have component versions of those. The implementation doesn't matter. The point is that I can write a TypeScript type literal that says I'm looking for any of\n\n448\n00:28:24,580 --> 00:28:29,280\nthe valid keys in this JSON enum of valid icon names.\n\n449\n00:28:29,720 --> 00:28:38,140\nYou can generate that really easily and it eliminates icon typos, which are actually extremely difficult to catch and very brittle.\n\n450\n00:28:38,760 --> 00:28:40,320\nThe only way you can catch those\n\n451\n00:28:40,640 --> 00:28:44,340\nmost of the time is by taking a picture of the entire UI.\n\n452\n00:28:45,320 --> 00:28:47,140\nAnd you're dealing with things like\n\n453\n00:28:47,500 --> 00:28:50,360\nis the Chevron up or down and did I type Chevron\n\n454\n00:28:50,760 --> 00:28:51,540\nup and\n\n455\n00:28:51,960 --> 00:28:57,600\nyou know Instead I went like Chevron down that I did I put the order etc, etc\n\n456\n00:28:58,780 --> 00:29:02,860\nAnd so I have to interact with the component twice and take photos twice\n\n457\n00:29:03,240 --> 00:29:04,580\nversus using a type.\n\n458\n00:29:05,140 --> 00:29:08,300\nYeah, yeah. And actually the Epic stack does exactly that\n\n459\n00:29:09,100 --> 00:29:09,600\nwith\n\n460\n00:29:10,240 --> 00:29:12,420\nhaving a list of valid icons.\n\n461\n00:29:13,740 --> 00:29:15,860\nSo yeah, This has been\n\n462\n00:29:16,220 --> 00:29:23,500\na really fun conversation with you, Jess. We're coming close to the end of our time. Is there anything that you really wanted to talk about that we haven't gotten to yet?\n\n463\n00:29:24,920 --> 00:29:28,760\nI'm curious what your take on code coverage is. I get that question all the time.\n\n464\n00:29:29,060 --> 00:29:33,140\nYeah, that is a good question. So code coverage for those who, the uninitiated\n\n465\n00:29:33,480 --> 00:29:34,560\nis where\n\n466\n00:29:36,560 --> 00:29:41,220\nyou do something special to the code that is evaluated during tests\n\n467\n00:29:41,740 --> 00:29:43,120\nso that you can track\n\n468\n00:29:43,700 --> 00:29:47,980\nthe code that was run during your test. And the object here\n\n469\n00:29:48,640 --> 00:29:49,620\nis to know\n\n470\n00:29:50,200 --> 00:30:09,060\nwhich parts of your code you're actually evaluating during your test. And make sure you didn't miss any use cases and things. And that's precisely where I think it's valuable, is thinking about the use cases. I find if you're very focused on code coverage, then you're looking at lines of code and you're thinking, oh, okay, now I need to pass\n\n471\n00:30:09,400 --> 00:30:12,840\na 9 as an argument here to make sure I end up in that\n\n472\n00:30:13,360 --> 00:30:14,740\nplace there, where\n\n473\n00:30:15,040 --> 00:30:27,260\nyou should really be thinking about, okay, so in what situation would a 9 end up going through that? And let's think the test title that you write to cover that should resemble a use case rather than some part of the implementation.\n\n474\n00:30:28,660 --> 00:30:30,880\nBecause what sometimes can happen\n\n475\n00:30:31,220 --> 00:30:31,720\nis\n\n476\n00:30:32,300 --> 00:30:36,220\nmaybe your code is capable. I actually have a blog post about this called\n\n477\n00:30:36,900 --> 00:30:42,480\nhow to know what to test that goes into detail about use case coverage. But you can sometimes\n\n478\n00:30:43,100 --> 00:30:52,420\nwrite your tests, even if you're trying to stay free of implementation details, you can write your tests and the titles of the tests in a way that kind of references the implementation.\n\n479\n00:30:53,100 --> 00:30:55,220\nAnd then when the implementation changes,\n\n480\n00:30:55,960 --> 00:31:00,960\nmaybe your test doesn't change as much, but because you weren't focused on use case,\n\n481\n00:31:01,560 --> 00:31:03,240\nyou are going to preserve\n\n482\n00:31:03,540 --> 00:31:09,720\nthat test continuing to run, even if no part of your application cares about that particular thing anymore.\n\n483\n00:31:10,680 --> 00:31:13,380\nAnd so, yeah, anyway, I...\n\n484\n00:31:15,300 --> 00:31:18,540\nYou allow people to have code that's not valuable\n\n485\n00:31:19,060 --> 00:31:22,780\nbecause you're just thinking about, oh, these lines of code have to execute\n\n486\n00:31:23,200 --> 00:31:26,400\nbecause of numbers, like code coverage needs to be 100%,\n\n487\n00:31:26,980 --> 00:31:30,140\nbut you haven't stopped to think, wait, does 9 happen anymore?\n\n488\n00:31:31,520 --> 00:31:41,340\nThat's kind of what I'm thinking, Taking away from what you just said. Yeah, that's exactly what I mean. Yep, and so I want, there's not really a metric for use case coverage.\n\n489\n00:31:41,980 --> 00:31:50,420\nThere's no way to automate that. Like you'd have to ask your product manager, what are all the use cases, and then every time you run the test, make sure those are covered.\n\n490\n00:31:50,740 --> 00:31:55,020\nSo it's, yeah, hard to measure that. But that's what you should be targeting.\n\n491\n00:31:57,200 --> 00:31:58,720\nAnd code coverage I find\n\n492\n00:31:59,440 --> 00:32:04,840\nin a library, yeah, 100% cover all those lines, I think that makes a lot of sense. In an application,\n\n493\n00:32:06,100 --> 00:32:06,600\nI\n\n494\n00:32:07,200 --> 00:32:11,200\ndon't really ever give a percent that I think is reasonable for an application,\n\n495\n00:32:12,180 --> 00:32:15,220\nexcept I will say that 100% is probably not.\n\n496\n00:32:15,860 --> 00:32:17,060\nUnless you're writing\n\n497\n00:32:17,380 --> 00:32:20,640\ncode for autopilot on a car or an airplane,\n\n498\n00:32:22,500 --> 00:32:24,220\nthen I think 100%\n\n499\n00:32:25,080 --> 00:32:27,100\nleads to really poorly written tests.\n\n500\n00:32:28,580 --> 00:32:30,140\nI definitely agree with that.\n\n501\n00:32:31,640 --> 00:32:35,420\nDo you want to hear a fun fact I learned this last year? Yeah, I'd love to.\n\n502\n00:32:35,860 --> 00:32:39,500\nSo I took a break from Cypress before going to Ionic.\n\n503\n00:32:39,920 --> 00:32:43,680\nI took a nine-month break to work in a healthcare startup.\n\n504\n00:32:44,060 --> 00:32:48,580\nWhat I learned at the healthcare startup is that quality is obviously very important.\n\n505\n00:32:49,220 --> 00:32:50,040\nNot surprising.\n\n506\n00:32:51,580 --> 00:33:00,540\nI introduced the tool I had just written at Cypress, Cypress component testing. And I found out that their quality process is to download the entire repository onto a USB stick,\n\n507\n00:33:01,160 --> 00:33:03,060\nmail the USB stick,\n\n508\n00:33:03,920 --> 00:33:08,800\nall repositories that they consider source code, which is a little fuzzy when it gets to open source code, you're like,\n\n509\n00:33:10,840 --> 00:33:15,560\nBut everything that they consider your code, you put on a USB stick and you mail it to the FDA.\n\n510\n00:33:16,680 --> 00:33:20,880\nAnd the FDA will review your tests and they will review your tests,\n\n511\n00:33:21,760 --> 00:33:22,260\nlike\n\n512\n00:33:22,740 --> 00:33:25,740\ngo line by line and probably have Ken C. Dodds'\n\n513\n00:33:26,320 --> 00:33:31,120\nbest testing practices on the left side and their editor on the right with your code and say,\n\n514\n00:33:31,720 --> 00:33:34,700\nI don't think you should be looking for this specific ID\n\n515\n00:33:35,080 --> 00:33:43,220\non a div to test, to test something. They will give you comments and the FDA will give you code feedback on how good your tests are.\n\n516\n00:33:43,600 --> 00:33:49,700\nThat is crazy. Yeah. It's, it's wicked interesting. And I thought to myself, I was like, I don't know how I'm gonna feel\n\n517\n00:33:50,440 --> 00:33:53,460\nif someone tells me I'm Cypress component testing incorrectly\n\n518\n00:33:54,720 --> 00:33:56,140\nby reading my own content.\n\n519\n00:33:57,440 --> 00:34:01,660\nAnd I was like, I would have done a bad job by not adhering to\n\n520\n00:34:02,160 --> 00:34:03,040\nmy own advice.\n\n521\n00:34:03,380 --> 00:34:06,440\nThat is so funny. Oh my goodness. That is so interesting.\n\n522\n00:34:07,360 --> 00:34:09,560\nBut yes, there are some industries where\n\n523\n00:34:09,880 --> 00:34:14,120\ncode quality matters a lot more than others. And I have a blog post about,\n\n524\n00:34:14,460 --> 00:34:18,219\ncalled, Should I Fix the Bag or write the test? Or something like that.\n\n525\n00:34:18,520 --> 00:34:20,639\nWhere the idea is how do you prioritize\n\n526\n00:34:21,440 --> 00:34:23,540\nwriting tests and writing new features?\n\n527\n00:34:23,940 --> 00:34:24,440\nAnd\n\n528\n00:34:26,400 --> 00:34:30,540\nthe outcome there is just, it's gonna be different depending on\n\n529\n00:34:31,020 --> 00:34:33,120\nthe world you're living in. Because they,\n\n530\n00:34:34,540 --> 00:34:41,420\nwriting new features and shipping new features and writing tests, they require the same currency, and that currency is our time.\n\n531\n00:34:42,040 --> 00:34:47,300\nAnd so if you're spending time working on tests, you can't be spending that time working on features.\n\n532\n00:34:48,080 --> 00:34:50,139\nAnd depending on your environment,\n\n533\n00:34:50,460 --> 00:34:56,260\nlike the stage of your startup or like the industry your startup is in or your enterprise, whatever,\n\n534\n00:34:57,380 --> 00:35:00,040\nthe return on that investment is gonna be different.\n\n535\n00:35:00,440 --> 00:35:00,940\nSo\n\n536\n00:35:01,460 --> 00:35:04,240\nvery contextual. Sorry, it's not a science, it's art.\n\n537\n00:35:05,740 --> 00:35:06,300\nYeah. Yeah.\n\n538\n00:35:06,900 --> 00:35:14,740\nWell, cool. Jess, this has been so fun to chat with you. Thank you for giving us some of your time. What's the best way for people to keep up with the stuff you're working on? Sure,\n\n539\n00:35:15,040 --> 00:35:17,780\nI'm very active on Twitter or X under\n\n540\n00:35:18,160 --> 00:35:21,140\nmy tag name, which you will probably link,\n\n541\n00:35:21,980 --> 00:35:26,060\nif I'm guessing, yeah, underscore Jessica Sacks. So my name as a private variable.\n\n542\n00:35:27,440 --> 00:35:32,740\nAnd then I have a domain if you wanna join my Discord. It's my name is a shell script\n\n543\n00:35:33,740 --> 00:35:34,540\nit's Jess.sh.\n\n544\n00:35:36,180 --> 00:35:38,540\nNice. And you can find the discord link there\n\n545\n00:35:38,900 --> 00:35:40,880\nfor more, for faster feedback.\n\n546\n00:35:41,520 --> 00:35:42,020\nAwesome,\n\n547\n00:35:42,340 --> 00:35:48,420\nwell thank you Jess and it's always a pleasure to visit with you. Thanks everybody for watching and we'll see you all later.",
            "text": "[00:00:00] Kent:\nHey everybody, I'm super excited to be joined by my friend Jess. Say hi Jess. Hello. So Jess and I go way back. My goodness, we have known each other for a while. I always try to think of like, where did we meet and how did that relationship start? I think we probably go back to like 2015, 16 \n\n[00:00:20] timeframe. \n\n[00:00:21] Jessica:\nYeah, that's been a minute. \n\n[00:00:23] Kent:\nYeah, it's been great. And it's just been a pleasure to know you and keep up with all the developments in your career and what you're doing to make the dev world a better place. So thank you for everything you do. I'd like for you to give a little intro to yourself and so people know who you are. \n\n[00:00:42] Jessica:\nCool. My name is Jessica Sax. I've been in the testing space and doing QA in various forms, all the way from manual iPad testing, through working at Cypress and shipping Cypress component testing. \n\n[00:00:57] Kent:\nI \n\n[00:00:57] Jessica:\nled the E2E team there for a brief moment and have been really interested in how people work in general. And testing is a big part of that. \n\n[00:01:07] Kent:\nYeah, awesome, awesome. So pretty, like not just I test at work, but I built a testing framework. So. \n\n[00:01:19] Jessica:\nI think contributing to V-test was like my fourth 1. Like I think I got, I was number 1 on stack overflow back when that was like cool for Appium, which is the mobile Selenium test driver for like 3 years. That was my achievement. \n\n[00:01:36] Kent:\nWow, yeah. So you're kind of into this. What is it that draws you so much to testing? \n\n[00:01:44] Jessica:\nI accidentally got good at it. Yes, I can relate. I accidentally got \n\n[00:01:48] Kent:\ngood at it. Yes, I can relate. \n\n[00:01:50] Jessica:\nI accidentally got good at it. I started Wicked Young. I started when I was 16 doing manual QA, like full-time. I dropped out of high school, got a job when I was 16. And so this has been thinking like a user and managing risk. That has been intuitive to me because I started very early in my career. \n\n[00:02:10] So I'm accidentally good at it, I guess. \n\n[00:02:14] Kent:\nWell, do you enjoy it? Or is it just like, I can't leave? \n\n[00:02:21] Jessica:\nI enjoy teaching people about it. I enjoy the satisfaction of... I enjoy a little bit of the satisfaction. I've never really liked TDD is 1 weird thing about me. I guess like... \n\n[00:02:36] Kent:\nYeah, we share that actually. That's pretty interesting. \n\n[00:02:39] Jessica:\nYeah, I don't really like TDD, but I also like, I don't know. I like making testing as unapparent as possible. I don't like shifting workflows. I like building naturally for a problem. And testing is something that has to be done for many kinds \n\n[00:03:00] of applications. So I enjoy a bit about it. I don't know. I enjoy component driven development more than I enjoy testing. \n\n[00:03:09] Kent:\nYeah. Yeah. Actually, I'd love to talk about that for sure. I think what sometimes people miss or especially when they're just getting into testing, the thing that is a light bulb moment for people is when they realize, oh wait, so like writing, there's \n\n[00:03:29] nothing special about tests, it's just like any other kind of software that we write. We're just automating a process, which is what we, that's what software is for, is automating processes. And so, yeah, I think whether it's writing tests so you don't have to manually check things or writing a feature so you don't have to manually keep a record \n\n[00:03:49] of all the users who bought, you know, your stuffed koala, whatever it is. I think it's, it's all just writing software, which is fun. And yeah, so let's talk about component driven development then. So if we're not doing test-driven development, then what is component-driven development then? \n\n[00:04:07] Jessica:\nSo component-driven development is, I would say that we build a lot of components day-to-day. That's like kind of the main thing that front end developers tend to do at this point is they think in components. \n\n[00:04:23] Kent:\nYeah. \n\n[00:04:25] Jessica:\nComponent driven development is isolating the contract, both styles, markup and props events. Maybe if you're using a different framework. I come from a Vue background, so we have events. We also have things like slots, which are like children, and that I \n\n[00:04:45] like to think of as a function almost, like a rendering function that you would pass in. So component-driven development allows me to architect the contract of the component both from a style perspective, from a market perspective, and an accessibility perspective. You generally develop in a sandbox. Yeah. \n\n[00:05:05] Kent:\nCool. And so, yeah, so what is it about component-driven development that helps you be so productive? \n\n[00:05:13] Jessica:\nI would say, the styling. Mm-hmm. Understanding the boundaries of styling the same way that you would understand the boundaries of an API. I think people understand functions and things that do logic fairly easily. You \n\n[00:05:33] don't really need to, you might not need to think of the contract that heavily ahead of time, but things like styling, nobody really thinks about the contract between parent and child when it comes to visual stuff. \n\n[00:05:48] Kent:\nI think with components, because like you said, it's a sandbox, it makes it easier to not have to have the entire application in your head. You can just focus on the area that you're in. So what is, yeah, go ahead. \n\n[00:06:05] Jessica:\nYou can also start to see some things creep in. So for example, if you're trying to render a very simple presentational dialogue, you might notice that you're mocking a network request and you ask yourself at that point, it's annoying to write, for example, mock service worker \n\n[00:06:25] network request stub. Like that's annoying. Why am I doing that when all I want to check is if the X button fires a callback. Right? Like that's weird. Why am I stubbing this very domain specific network call? You ask yourself questions when you break it down like that. \n\n[00:06:43] Kent:\nYeah, yeah, I think that makes sense. So what, I guess that kind of leads into the next question I want to ask you about, and that's what does component-driven development have to do with testing? \n\n[00:06:53] Jessica:\nSo both of them produce a sandbox. Both environments require you to fixture your application and its components therein such that they can be rendered in environments that are not your app. That's where people struggle the most in testing. \n\n[00:07:13] So when you do component driven development, you're getting the workflow of building an isolation in a playground, you're getting some gains there. And then when it comes time to test, you've already done all the hard work of mocking. You just, yeah. \n\n[00:07:30] Kent:\nYeah, that makes a lot of sense. So when you're working with that kind of a workflow, are you typically using a tool that facilitates the isolation, like Storybook or something? \n\n[00:07:41] Jessica:\nSo there are many tools that facilitate the isolation of components. There are like ones that do it with iframes. There are ones that do it by rendering your entire application. The first thing I ever built was actually, the first test \n\n[00:08:01] runner I ever built just loaded a browser and changed routes for every component. It was a very weird, interesting idea. It's called the feather test. I don't know if I've hidden it from my repo or my profile out of embarrassment, but, basically all you need is a window object that's sanitized. \n\n[00:08:22] It's the same thing that you would need in a test or a test environment. From there, there are 3 to 4 vendors, I would think, Storybook being very presentational component heavy, and Cypress and Playwright being very application \n\n[00:08:43] facilitating, right? They were built as end-to-end test runners, so they have all the primitives necessary to drive the application, as well as tell you information about it. They have retryability, is a big thing. \n\n[00:08:57] Kent:\nYeah. Cool. So with component-driven development and like component-level tests, do you find that you end up writing most of your application tests at that level of the component? \n\n[00:09:18] Jessica:\nI do. I think that's a side effect of the way that I build applications is not very page-based. I might only build single-page applications. If I was working in a more meta-framework sense, I would probably find myself leaning towards leaning towards more end-to-end \n\n[00:09:38] tests or being very comfortable mocking out full-page navigation. So I would lean towards something like playwright in Cyprus where it's very simple to go between the contexts of I'm rendering something Presentational that's a button that doesn't Navigate, you know, it's not a submit button within a form \n\n[00:09:58] basically, right when you get into multi route navigation page level testing, depending on your meta framework, things get a little weird. \n\n[00:10:08] Kent:\nYeah, yeah, that is, things can get weird. Yeah, so I think that's actually really consistent to the way that I typically develop. So when I was at PayPal, 1 of the last things that I started working on was a component library, and we used Storybook, and \n\n[00:10:28] everything that I was doing was component tests, because of course, I'm not building an app, I'm building components now. But especially with Remix, I have found myself, so I made the testing trophy concept where integration tests is like the main amount of stuff that you're writing. And I would put component \n\n[00:10:48] tests into there. They're kind of sit between integration and unit. They're certainly not a unit test, but they're not quite an integration test. So I'll just lump them in with integration. So anyway, we're integrating with a framework if we wanna be. \n\n[00:11:06] Jessica:\nPeople are coming up on the word integration. They like always like to label the kind of test and it's like, Yeah. \n\n[00:11:14] Kent:\nIt depends. I honestly like, even as the creator of the testing trophy idea, I don't actually care too much about the distinction between these different types of tests. But I would say that with the meta frameworks, I have found my trophy getting a little top heavy and I do write a lot more end-to-end tests than I used \n\n[00:11:34] to. Just because not only is it simpler because I don't wanna just worry about 1 side or the other, I'm doing full stack rendering and everything. But our tools have gotten better too. And so yeah, I would say that I'm along with you. If my deliverable is components, then yeah, of course I'm gonna be doing a lot more \n\n[00:11:54] component testing. If my deliverable is an application, I'll component test the complicated stuff that's very domain specific, you know, components, but for the rest of my components, they're pretty like Lego blocks that were already tested elsewhere. And so I ended up just covering those as part of the end to end test. \n\n[00:12:13] Jessica:\nSomething that I think you've written about before that in the quality exchange, quality engineer stack exchange group was very common is if your technology, your underlying technology changes, but your tests also have to change, that's not \n\n[00:12:34] great. And clearly your tests will give you security without needing a major rewrite, right? So if you're- Yeah, you \n\n[00:12:43] Kent:\nknow- Oh, sorry, I interrupted you. \n\n[00:12:45] Jessica:\nIf you're thinking about things like, I'm building in Next or Nuxt, and therefore I need to mock the next image tag to be an image, which is what has to happen for things like Storybook and Cypress component testing because we're not thinking in terms of the meta framework, we're thinking in terms \n\n[00:13:05] of bundling, which is such a front end concept, like the user doesn't even know what bundling is, like at all. But the user does know what, you know, open this URL and enter the form data and click submit means. And at the end of the day, that's what your project manager or \n\n[00:13:25] product owner cares about. Technically, you shouldn't be coupled to those ideas. \n\n[00:13:32] Kent:\nYeah, 100%. In the workshops, the very first exercise in the testing workshop is writing your first end-to-end test, and I started out by telling people, you should write, whenever you're thinking about writing a test, you should pretend you're a product manager telling a manual tester \n\n[00:13:52] what steps to do to verify things are working. Because the manual tester isn't gonna understand, or maybe they understand it, like manual testers are very smart, but they shouldn't have to understand the actual implementation. And if you follow that pattern, then you can keep your detail. I like to say \n\n[00:14:12] your test should be implementation detail free and refactor friendly. And that's... \n\n[00:14:20] Jessica:\nI like that. Yeah. I remember, I guess back in the day, Around the time Ruby was really popular in a few years like Rails was really popular in a few years before, there was this concept, actually, this is earlier, this is like 2004, there's this word called Gherkin. We're \n\n[00:14:40] talking about expressing ideas and tests as if they were English to make them very understandable and to think outside of technical implementation. And so back in the day, around 2004, there, please fact check me. \n\n[00:15:01] I was writing a talk called the history of modern front-end testing recently. So I was googling, maybe I'm thinking of particular language binding, but the idea is that you have given this scenario when the person does this, given when, then. \n\n[00:15:22] Then something should happen. So in the given state, you define a scenario, when actions occur from the user, ideally, then an assertion should be made. And it looks like English. You know, it reads like a sentence. And I found that very fascinating. It is brittle for other reasons. \n\n[00:15:42] It's not brittle, it's difficult to debug for specific reasons. But the concept kind of stuck with me. It's like, wow, you could hypothetically write English that outputted a requirements CSV doc that you could hand to some healthcare agency. And That's actually 1 of the benefits of using something \n\n[00:16:02] like Gherkin. It's impossible to debug. I do not recommend it. \n\n[00:16:06] Kent:\nYeah. Yeah, we actually did something similar to that at my first job, first developer job called Domo. The QA engineers wrote up a bunch of Gherkin tests that were just like, just the, not the implementation of the test, but just the given when then. And then every release, \n\n[00:16:26] they would like, they would just divvy out all of the tests of people and we do it manually. And then over time, they would write the implementation of these and so we'd have to do fewer and fewer manually. It was awful, I hated it, but like it was necessary because otherwise \n\n[00:16:47] we wouldn't have had any tests probably. So. \n\n[00:16:50] Jessica:\nIt's the automating of processes that you're talking about is when, and I think people who started with teams that only had budget for manual QA, This was much more common before developers took ownership of the testing stack. People who transferred were the seam between \n\n[00:17:11] user requirements and making sure, validating that they worked, and developers that did the code, there was this big gap between the 2. As we got more mixture, I think people started to understand, instead of just checking that the list handles users with these particular fields, \n\n[00:17:31] an admin user, instead of just manually logging in as the user's name was Steve Silver. Steve Silver to make sure the app doesn't crash when it handles 10,000 accounts, we could just automate that. Technically at that point, it wasn't possible to automate, which is the other thing that was interesting in the early \n\n[00:17:52] 2010s, around when Appium was released, it was impossible to automate iOS app testing. That's why you had a lot of testers. \n\n[00:18:03] Kent:\nYeah, that makes a lot of sense. 1 thing that you said earlier that I thought was pretty interesting was something about like your test shouldn't know about what framework you're using under the hood and you should be able to swap out the framework and the test should still run. And that actually is a big part of \n\n[00:18:23] what made the testing library take off so much, or as much as it did, was because about it, Testing library had been out for about a year, I think, maybe 2. And it was definitely gaining popularity, but a lot of people were happy just sticking with Enzyme. And then React Hooks came out, \n\n[00:18:43] and that's just an implementation. So your tests with testing library, they would work either way. You could refactor from classes to hooks and your tests should still pass. And in fact, the idea is that the test verifies that you didn't break anything in that transition. So it's a huge benefit. But Enzyme, because it's so \n\n[00:19:04] implementation detail specific, that's just like the design around it, nobody could use their Enzyme tests and upgrade to Hooks. In fact, I don't think Enzyme even still works with hooks and that's because nobody's really working on it now but \n\n[00:19:19] Jessica:\nworking on it I met him the other day yeah I asked him I asked him what the feature is about enzyme that keeps him maintaining it \n\n[00:19:29] Kent:\nwhat is that \n\n[00:19:30] Jessica:\nit is shallow mount It is the exact thing that has the problem that you're talking about. Yeah. It's a benefit. It's a very interesting. You will also see GitLab's codebase almost exclusively uses shallow mount. View test details promoted it heavily after because it was written around when Enzyme was written. \n\n[00:19:50] And that's no longer the case. I think Lachlan and I, who both worked at Cypress to create Cypress component testing, very much were like, shallow mount is not great for refactorability. \n\n[00:20:03] Kent:\nRight. Yeah, I have a blog post titled, Why Shallow Rendering? Or, Never Use Shallow Rendering, or something like that. Very, very strongly. I used it once, long enough to realize this is a terrible idea, and never used it again. \n\n[00:20:19] Jessica:\nI came to component development fairly late in the game. I spent a lot of time in vanilla JavaScript development. So there was a lot of time, I think, until 2016 or 17, where I didn't even know what a component was. And mind you, this is like 6 years in my \n\n[00:20:39] career, and I don't know what components are or component testing is. \n\n[00:20:44] Kent:\nThere's still A lot of people like that in our dev world right now. Yeah. \n\n[00:20:49] Jessica:\nAnd I'm thinking about things in this user perspective. And I'm like, well, if you change the tests at the same time as you change the source code, how can you know? Yeah. Like, how can you know? So the best test in the hypothetical, I always think in the hypothetical, right? If you can have the best stuff. Best test is your product owner that \n\n[00:21:09] knows everything about the app telling you this is perfect. Well, the best, best test is testing and production, which is something I want to talk about. Yeah. Which is a valid strategy depending on your company. \n\n[00:21:23] Kent:\n100%. \n\n[00:21:24] Jessica:\nIt's super weird, but I've done it to success. When it comes to the hypothetical best test, you want to change as little test code alongside your source code, and shallow rendering prevents that entirely because it's, by design, you're passing in mocked functions \n\n[00:21:44] into each prop, basically, if you think of it in that context. \n\n[00:21:49] Kent:\nYeah. Yeah. So don't do it, folks. \n\n[00:21:52] Jessica:\nIf people tell you to unit test your components don't don't because it doesn't matter if the unit of the component test works it matters if the user sees it on the page and can click on it. That's the thing. \n\n[00:22:06] Kent:\nYeah, now wait, so where does that mean unit tests are worthless or where do they make sense? \n\n[00:22:13] Jessica:\nUnit tests make sense when your user is a developer. That's what I would say. In which case you can write both component or integration-y tests that test the side effect of rendering the component, which is the DOM updating or, \n\n[00:22:33] or, and depending, you can also test a shallow rendered component for unit coverage. But remember that unit coverage doesn't actually give extra value to the user. That thing that gives extra value. The only thing that matters to the bottom line is can the user hit submit when they're trying to give you \n\n[00:22:53] payment information at PayPal. \n\n[00:22:56] Kent:\nYeah. Yeah, you know, I would say that There's not really a really great use case for what I would call a unit test for a component. Because like, if we're gonna be dogmatic or pedantic about this, then to unit test a component, you're mocking the framework. \n\n[00:23:17] That's the only way you do it. So terrible idea, don't do that. But- Don't \n\n[00:23:21] Jessica:\ndo that. Java background people will be tempted to do that through heavy usage of Mockito and stuff like that. So depending on your background, you might also have a few influences where it's fashionable to mock everything, but don't do it. \n\n[00:23:37] Kent:\nYeah. But where I find unit testing to be very valuable is lower level utility functions that are pretty complex and stuff like that. Especially when it comes to pure functions and stuff, like really like unit testing that stuff. But even un-pure things, so like things that depend on the date, \n\n[00:23:57] for example, like if you're generating a one-time password, I have unit tests on my library for that. Stuff like that can be really very useful for that kind \n\n[00:24:07] Jessica:\nof thing. When you have to mock something that's not guaranteed to be consistent over multiple runs of the component or function, sorry, of the subject under test is the jargon that you might hear. S-U-T for people who don't spend time in QASAC exchange. Yeah, \n\n[00:24:27] so things that you have no control over because you don't own the whole system and you shouldn't. Your code doesn't care if it's on a Linux box. That gives you a UTC time zone. \n\n[00:24:36] Kent:\nYeah, yeah. So a lot of people, when they started adopting TypeScript and like these static testing tools like TypeScript, it start to feel like testing is much less valuable. What is your take on that? Okay, \n\n[00:24:57] Jessica:\nit depends. It depends on who your user is and what kind of code you're writing. So if you're writing code to be consumed by, so there's 2, there's 2 benefits. There's many more benefits to TypeScript. 2 major, 2 major benefits are selfish. 1 is your own productivity \n\n[00:25:17] and your teammates. The other is user benefit of TypeScript. So the user benefit for TypeScript is what you're gonna tell your boss. Selfish benefit is what you're gonna say, like it will improve velocity. So from a quality perspective, static analysis tools such as linters and TypeScript, for example, \n\n[00:25:38] live on the base of your testing trophy. Mm-hmm. Yeah. Live on the base of your testing trophy. I could go on about that. And they prevent your users from accidentally putting in bad data, depending on how you're using it. So \n\n[00:25:58] application developers can rely on TypeScript for a large portion of quality by using different kinds of schema validators. It depends on the tooling that you're going to use to leverage the full power of TypeScript for type safety, like true safety. \n\n[00:26:19] The other side of the coin is JavaScript library authors whose users may not be using TypeScript. They have to do a lot of, have to, they really should do a lot of runtime checks to make sure the data types you're passing in aren't wrong and the schema you're passing in isn't wrong. But for application developers, I think you gain a lot of safety \n\n[00:26:41] by using TypeScript. \n\n[00:26:43] Kent:\nYeah, I do think that What TypeScript did for me was it eliminated a bunch of tests that I wasn't writing anyway. So, like, if I was making a theoretical sum function that's taking 2 numbers and adding them together, I would write a test that ensures that the value returned is correct, \n\n[00:27:04] but I probably wouldn't write a test to say, well, what happens if they pass a symbol or what happens if they pass an object? I wouldn't have written that test. Yeah. What is it? \n\n[00:27:14] Jessica:\nA QA engineer walks into a bar and orders a beer or does 999 beers orders a goat something like that. So many flavors of that joke and I picked the 1 that was off the top of my head. \n\n[00:27:28] Kent:\nYeah, that's \n\n[00:27:30] Jessica:\nfunny. But yeah, just using your code that you know how it's intended to be used in completely wildly incorrect ways, like you would never do that. So by setting strict types, you like eliminate that entire class of problems. \n\n[00:27:43] Kent:\nYeah, 100%. \n\n[00:27:44] Jessica:\nSomething I was going to say, I find 1 of my favorite types of bugs to catch using TypeScript, this is universal for all web developers, is icon names. So 1 of the tools I use is called Iconify. It uses class-based \n\n[00:28:06] names to say, I-MDI-arrowup. Cool. They also have component versions of those. The implementation doesn't matter. The point is that I can write a TypeScript type literal that says I'm looking for any of the valid keys in this JSON \n\n[00:28:27] enum of valid icon names. You can generate that really easily and it eliminates icon typos, which are actually extremely difficult to catch and very brittle. The only way you can catch those most of the time is by taking a picture of the entire UI. And you're dealing with things like \n\n[00:28:47] is the Chevron up or down and did I type Chevron up and you know Instead I went like Chevron down that I did I put the order etc, etc And so I have to interact with the component twice and take photos twice versus using a type. \n\n[00:29:05] Kent:\nYeah, yeah. And actually the Epic stack does exactly that with having a list of valid icons. So yeah, This has been a really fun conversation with you, Jess. We're coming close to the end of our time. Is there anything that you really wanted to talk about that we haven't gotten to yet? \n\n[00:29:24] Jessica:\nI'm curious what your take on code coverage is. I get that question all the time. \n\n[00:29:29] Kent:\nYeah, that is a good question. So code coverage for those who, the uninitiated is where you do something special to the code that is evaluated during tests so that you can track the code that was run during your test. And the object here is to \n\n[00:29:49] know which parts of your code you're actually evaluating during your test. And make sure you didn't miss any use cases and things. And that's precisely where I think it's valuable, is thinking about the use cases. I find if you're very focused on code coverage, then you're looking at lines of code and you're thinking, oh, okay, now I need to pass \n\n[00:30:09] a 9 as an argument here to make sure I end up in that place there, where you should really be thinking about, okay, so in what situation would a 9 end up going through that? And let's think the test title that you write to cover that should resemble a use case rather than some part of the implementation. Because what \n\n[00:30:29] sometimes can happen is maybe your code is capable. I actually have a blog post about this called how to know what to test that goes into detail about use case coverage. But you can sometimes write your tests, even if you're trying to stay free of implementation details, you can write your tests and the titles of the tests \n\n[00:30:49] in a way that kind of references the implementation. And then when the implementation changes, maybe your test doesn't change as much, but because you weren't focused on use case, you are going to preserve that test continuing to run, even if no part of your application cares about that particular thing anymore. \n\n[00:31:10] And so, yeah, anyway, I... \n\n[00:31:15] Jessica:\nYou allow people to have code that's not valuable because you're just thinking about, oh, these lines of code have to execute because of numbers, like code coverage needs to be 100%, but you haven't stopped to think, wait, does 9 happen anymore? That's kind of what I'm thinking, Taking away from what you just said. \n\n[00:31:34] Kent:\nYeah, that's exactly what I mean. Yep, and so I want, there's not really a metric for use case coverage. There's no way to automate that. Like you'd have to ask your product manager, what are all the use cases, and then every time you run the test, make sure those are covered. So it's, yeah, hard to measure that. But that's what you should be targeting. \n\n[00:31:57] And code coverage I find in a library, yeah, 100% cover all those lines, I think that makes a lot of sense. In an application, I don't really ever give a percent that I think is reasonable for an application, except I will say that 100% is probably not. Unless you're writing \n\n[00:32:17] code for autopilot on a car or an airplane, then I think 100% leads to really poorly written tests. \n\n[00:32:28] Jessica:\nI definitely agree with that. Do you want to hear a fun fact I learned this last year? \n\n[00:32:34] Kent:\nYeah, I'd love to. \n\n[00:32:35] Jessica:\nSo I took a break from Cypress before going to Ionic. I took a nine-month break to work in a healthcare startup. What I learned at the healthcare startup is that quality is obviously very important. Not surprising. I introduced the tool I had just written at Cypress, Cypress component testing. And I found out \n\n[00:32:56] that their quality process is to download the entire repository onto a USB stick, mail the USB stick, all repositories that they consider source code, which is a little fuzzy when it gets to open source code, you're like, But everything that they consider your code, you put on a USB stick and you mail it to the FDA. \n\n[00:33:16] And the FDA will review your tests and they will review your tests, like go line by line and probably have Ken C. Dodds' best testing practices on the left side and their editor on the right with your code and say, I don't think you should be looking for this specific ID on a div to test, \n\n[00:33:36] to test something. They will give you comments and the FDA will give you code feedback on how good your tests are. \n\n[00:33:43] Kent:\nThat is crazy. \n\n[00:33:44] Jessica:\nYeah. It's, it's wicked interesting. And I thought to myself, I was like, I don't know how I'm gonna feel if someone tells me I'm Cypress component testing incorrectly by reading my own content. And I was like, I would have done a bad job by not adhering to my own advice. \n\n[00:34:03] Kent:\nThat is so funny. Oh my goodness. That is so interesting. But yes, there are some industries where code quality matters a lot more than others. And I have a blog post about, called, Should I Fix the Bag or write the test? Or something like that. Where the idea is how do you prioritize writing tests and writing new features? \n\n[00:34:23] And the outcome there is just, it's gonna be different depending on the world you're living in. Because they, writing new features and shipping new features and writing tests, they require the same currency, and that currency is our time. And so if you're spending \n\n[00:34:43] time working on tests, you can't be spending that time working on features. And depending on your environment, like the stage of your startup or like the industry your startup is in or your enterprise, whatever, the return on that investment is gonna be different. So very contextual. Sorry, it's not a science, it's art. \n\n[00:35:05] Yeah. Yeah. Well, cool. Jess, this has been so fun to chat with you. Thank you for giving us some of your time. What's the best way for people to keep up with the stuff you're working on? \n\n[00:35:14] Jessica:\nSure, I'm very active on Twitter or X under my tag name, which you will probably link, if I'm guessing, yeah, underscore Jessica Sacks. So my name as a private variable. And then I have a domain if you wanna join my Discord. It's my name is a shell script it's Jess.sh. \n\n[00:35:36] Kent:\nNice. And \n\n[00:35:36] Jessica:\nyou can find the discord link there for more, for faster feedback. \n\n[00:35:41] Kent:\nAwesome, well thank you Jess and it's always a pleasure to visit with you. Thanks everybody for watching and we'll see you all later."
          },
          "title": "Jessica Sachs.mp4",
          "_rev": "6LaeqP6n94P8FD3sVhYJZW",
          "_updatedAt": "2024-03-19T20:25:41Z",
          "duration": 2149.133333,
          "state": "ready",
          "_createdAt": "2023-10-17T17:28:46Z",
          "_type": "videoResource",
          "muxAsset": {
            "muxPlaybackId": "uOjuXV7uPMezWKAmESE01ceq3WDK022t3V2wF3Gbv4VYc",
            "muxAssetId": "DmMvHzmGlL01CefkGxce3Svw5LNDZGBJiXt3701N5j4Vs",
            "_type": "muxAsset"
          }
        },
        "solution": null,
        "_id": "NS5Go30oWcGEvHRq8m76YN",
        "_type": "interview"
      },
      {
        "_id": "WBQDSVdErPwEcA4Fd0fWQO",
        "_updatedAt": "2023-10-17T22:53:55Z",
        "description": "Jocelyn Harper, tech lead at The New York Times, shares insights on platform engineering and system design. Career tips, networking, learning, work ethic.",
        "body": "Jocelyn Harper, known as Josie, joins the podcast to discuss her journey and current role in the tech industry. Currently serving as a tech lead at The New York Times, she specializes in platform engineering.\n\nJosie and Kent revisit their shared experience at PayPal, underscoring the critical role of backend optimization. The conversation soon pivots to platform engineering, Josie's current focus. She sheds light on her role in updating legacy systems at The New York Times and spearheading greenfield initiatives.\n\nThe talk transitions into the realm of system design. Josie and Kent both stress the multilayered considerations that go into effective system design, from business needs to scalability and technology selection. They agree on the imperative of flexibility when choosing technologies and assert that well-maintained documentation can be a game-changer.\n\nThe final segment serves as a treasure trove of career advice. Networking, perpetual learning, and a strong work ethic are pinpointed as cornerstones for success. Josie and the host also explore the tension between work-life balance and the intensive nature of tech careers.\n\nJosie is in the process of creating a course on system design titled \"Conquer System Design.\"\n\n## Resources\n\n- [@Javitch on Twitter](https://twitter.com/Javitch)",
        "solution": null,
        "_type": "interview",
        "title": "Platform Engineering with Jocelyn Harper",
        "slug": "platform-engineering-with-jocelyn-harper",
        "videoResource": {
          "state": "ready",
          "originalMediaUrl": "https://egghead-video-uploads.s3.amazonaws.com/epic-web/interviews/Jocelyn+Harper.mp4",
          "_createdAt": "2023-10-17T17:50:51Z",
          "_rev": "9CeTKuUcQZRsVUft8VldJu",
          "_type": "videoResource",
          "title": "Jocelyn Harper.mp4",
          "duration": 2287.133333,
          "transcript": {
            "srt": "1\n00:00:00,199 --> 00:00:08,580\nWhat is up everybody? So I'm excited to be joined by Jocelyn Harper. Jocelyn, you go by Josie, right? I do, yeah, I do. Okay,\n\n2\n00:00:08,940 --> 00:00:10,420\ndoes anybody call you Jocelyn?\n\n3\n00:00:12,040 --> 00:00:16,860\nClose friends, it's very funny because I feel like Josie has become like my online\n\n4\n00:00:17,200 --> 00:00:17,700\ntech\n\n5\n00:00:18,340 --> 00:00:19,779\npersona like name.\n\n6\n00:00:20,320 --> 00:00:26,020\nPeople in real life call me Jocelyn, yeah. Yeah, I actually can relate to that. So\n\n7\n00:00:26,900 --> 00:00:29,520\nyears and years ago, I bought the domain kentcdots.com\n\n8\n00:00:30,060 --> 00:00:35,920\nAnd then I made my email address me at Kent C Dodds calm and when I was still in school I had classmates\n\n9\n00:00:36,220 --> 00:00:37,760\nor a classmate in particular\n\n10\n00:00:38,360 --> 00:00:40,620\nJake Lingwall if you're listening Jake\n\n11\n00:00:41,040 --> 00:00:42,000\nHow are you doing?\n\n12\n00:00:42,660 --> 00:00:43,160\nYeah\n\n13\n00:00:43,860 --> 00:00:46,020\nSo Jake he started calling me\n\n14\n00:00:46,699 --> 00:00:52,060\nKent C Dodds just like everywhere because of my email address. And so all my other classmates\n\n15\n00:00:52,420 --> 00:01:07,380\npicked up on Kent C. Dodds and then we actually worked together as well. So everybody at work picked up on Kent C. Dodds and then it just became a thing. And So I am Kent C. Dodds in the tech world. And then in like regular life world, I'm just Kent Dodds. And it's kind of funny.\n\n16\n00:01:08,640 --> 00:01:11,260\nNo, it's great. I love how like branding,\n\n17\n00:01:11,960 --> 00:01:14,020\nlike not by on purpose,\n\n18\n00:01:14,340 --> 00:01:14,840\njust\n\n19\n00:01:15,280 --> 00:01:16,120\nthat's hilarious.\n\n20\n00:01:16,840 --> 00:01:21,100\nYeah, Yeah, totally. It's not like there are a lot of other Kent Dodds's in the world, but\n\n21\n00:01:22,000 --> 00:01:23,540\nYeah, now now I'm very\n\n22\n00:01:24,060 --> 00:01:25,220\ndistinguished or differentiated\n\n23\n00:01:26,520 --> 00:01:29,440\nYes, Kent C Dodds. That is how I know you\n\n24\n00:01:31,880 --> 00:01:37,100\nWell, yeah, actually I always like to start these conversations off talking about how we met.\n\n25\n00:01:38,640 --> 00:01:41,540\nAnd so Josie and I just met right now.\n\n26\n00:01:42,979 --> 00:01:45,660\nSo we were introduced by our co-friend,\n\n27\n00:01:46,400 --> 00:01:46,900\nJoel,\n\n28\n00:01:47,580 --> 00:01:48,300\nJoel Hooks.\n\n29\n00:01:49,340 --> 00:01:58,760\nAnd Joel said, hey, you gotta talk to Josie. She's got some really awesome experience. I think that she would have a lot of cool things to share with the Epic Web Dev folks. And so here we are.\n\n30\n00:01:59,180 --> 00:02:03,900\nSo Josie, why don't, You just kind of introduced yourself to me, so we're gonna pretend that didn't happen.\n\n31\n00:02:05,080 --> 00:02:11,260\nAnd so that you can have a second to introduce yourself to the audience here. Yeah, sure. Hi everyone.\n\n32\n00:02:11,640 --> 00:02:15,040\nMy name is Jocelyn Harper. I am currently a\n\n33\n00:02:15,660 --> 00:02:20,820\nstaff software engineer at the New York Times and tech lead of a platforms team.\n\n34\n00:02:21,540 --> 00:02:24,940\nI have been in the industry for about 8 years now.\n\n35\n00:02:25,600 --> 00:02:27,880\nBefore the New York Times is primarily FinTech.\n\n36\n00:02:28,280 --> 00:02:30,300\nSo I worked at JP Morgan Chase,\n\n37\n00:02:30,940 --> 00:02:33,920\nCapital 1, PayPal, and then the New York Times.\n\n38\n00:02:34,600 --> 00:02:35,100\nAnd\n\n39\n00:02:35,660 --> 00:02:39,580\nit's kind of amazing and wild that I've been here this far.\n\n40\n00:02:40,120 --> 00:02:41,860\nI'm pretty boring, actually.\n\n41\n00:02:42,180 --> 00:02:43,940\nI was just like, get this.\n\n42\n00:02:44,380 --> 00:02:50,880\nI'm like, I have my cat Luna, I play video games, and then I just kind of keep to myself for the most part. Yeah.\n\n43\n00:02:51,260 --> 00:02:53,460\nAll right, what video games do you play?\n\n44\n00:02:54,400 --> 00:02:58,340\nRight now, I'm really into first-person shooters. I feel like that's like\n\n45\n00:02:58,940 --> 00:02:59,640\na thing.\n\n46\n00:03:00,140 --> 00:03:02,380\nSo I've been playing a lot of Apex Legends.\n\n47\n00:03:03,220 --> 00:03:06,860\nI played this auto chess game called Team Fight Tactics\n\n48\n00:03:07,200 --> 00:03:07,980\nby Riot,\n\n49\n00:03:08,640 --> 00:03:09,980\nwho makes League of Legends.\n\n50\n00:03:10,840 --> 00:03:14,320\nAnd then I've also been playing Baldur's Gate 3.\n\n51\n00:03:15,060 --> 00:03:17,900\nSo I sank about 40 hours into that\n\n52\n00:03:18,420 --> 00:03:20,280\nfor the last 2 weeks.\n\n53\n00:03:20,660 --> 00:03:26,900\nSo yeah, those are the games that I typically play or am playing right now. All right, cool. Yeah, I can relate to\n\n54\n00:03:27,720 --> 00:03:31,200\nthinking about how much time you've put into a video game. Like, oh.\n\n55\n00:03:32,140 --> 00:03:42,040\nI know, it came up, like, you know how steam will say, like, you've spent this, and I'm like, oh my God, I spent that long playing this video game. Holy moly, but. Worth it. Yeah.\n\n56\n00:03:42,520 --> 00:03:50,100\nYou know, when it was, so when I was a kid, I was very much addicted to video games. And I would wake up at like 6 in the morning\n\n57\n00:03:50,660 --> 00:03:54,680\nand go over to the computer and play Age of Empires. And I would do a whole campaign\n\n58\n00:03:55,080 --> 00:04:05,180\non like a Saturday morning. And I would do a whole campaign, it would be like a 6 hour thing. And so like you get to the end screen and it gives you all the stats and in the corner it says how long you played\n\n59\n00:04:05,580 --> 00:04:26,260\nand right below that it says start new game and you press that button. And so I would look at that and be like wow I spent 6 hours playing this. I haven't even had breakfast yet. And then I would hit start new game. Right exactly you're like oh yeah well time to go. Yeah it's definitely like just a series of you. There's no concept of time when you're starting a game that you really like.\n\n60\n00:04:27,920 --> 00:04:30,120\nSo yeah, my favorite is when\n\n61\n00:04:30,480 --> 00:04:36,760\nsoftware feels that way. Like not always do I feel like I'm sucked in like that with developing software,\n\n62\n00:04:37,120 --> 00:04:41,680\nbut when you have a task and you know what you're going to do with it, and like,\n\n63\n00:04:42,040 --> 00:04:43,480\nand you're just cruising,\n\n64\n00:04:44,140 --> 00:04:52,500\nthat is just the best feeling ever. And then when- I feel like it's a feeling that we chase too, right? Yeah. Like we do chase that feeling as developers. Yes.\n\n65\n00:04:53,140 --> 00:04:57,280\nYeah. And then when you're done, you look back on it and you're like, you don't feel guilty\n\n66\n00:04:57,720 --> 00:05:07,580\nfor the amount of time that you spent in it. Not at all. Because it's passing, you got that green check or it's working, you're just like, yeah, worth it. Absolutely worth it.\n\n67\n00:05:08,940 --> 00:05:09,440\nYeah.\n\n68\n00:05:10,400 --> 00:05:11,880\nWell, great. Now,\n\n69\n00:05:12,540 --> 00:05:17,920\nI want to ask you a little bit about your work history, because I also worked at PayPal\n\n70\n00:05:19,020 --> 00:05:20,320\na few years ago.\n\n71\n00:05:20,860 --> 00:05:21,780\nYeah, so\n\n72\n00:05:22,420 --> 00:05:28,060\nI was at PayPal. Did we overlap? Maybe. So I went into PayPal December of 2015,\n\n73\n00:05:28,940 --> 00:05:33,160\nand then I left 3 years later in like February of\n\n74\n00:05:34,540 --> 00:05:35,040\n2019.\n\n75\n00:05:35,940 --> 00:05:37,400\nSo did we overlap?\n\n76\n00:05:38,480 --> 00:05:44,740\nHold on, I need to pull up a calendar. This is so funny. I think that we may have left at the exact same time.\n\n77\n00:05:45,520 --> 00:05:46,760\nSo we did overlap.\n\n78\n00:05:48,080 --> 00:05:55,520\nOh, now I'm going to have to think about PayPal and what I did there. What was the org? What org were you in? So I was in peer-to-peer.\n\n79\n00:05:56,640 --> 00:05:58,300\nSo I did cross border\n\n80\n00:05:58,940 --> 00:06:00,120\nmostly. And then\n\n81\n00:06:00,860 --> 00:06:06,420\nI worked with Checkout a little bit too, not a lot, but a bit there. Okay, so I was in Checkout.\n\n82\n00:06:07,200 --> 00:06:08,080\nOkay. Yeah.\n\n83\n00:06:09,020 --> 00:06:11,240\nWhen did I start? I think I started,\n\n84\n00:06:12,560 --> 00:06:13,560\noh my goodness.\n\n85\n00:06:15,040 --> 00:06:19,580\nI have to look at my resume, this is so funny. I'm like, when did I exactly start?\n\n86\n00:06:19,960 --> 00:06:20,460\nYeah,\n\n87\n00:06:21,340 --> 00:06:22,500\nlet's see. Very cool.\n\n88\n00:06:23,000 --> 00:06:24,620\nYeah, so I worked on\n\n89\n00:06:25,520 --> 00:06:26,300\ncross border\n\n90\n00:06:26,920 --> 00:06:30,780\nwas where I started and then went to more general peer to peer.\n\n91\n00:06:31,280 --> 00:06:32,740\nAnd then I started\n\n92\n00:06:33,520 --> 00:06:35,220\na web infra team,\n\n93\n00:06:36,000 --> 00:06:40,860\nnot the backend infra that they already had for Node, but like for the front end stuff.\n\n94\n00:06:42,400 --> 00:06:43,940\nAnd so that's where I developed\n\n95\n00:06:44,440 --> 00:06:45,360\nPayPal scripts\n\n96\n00:06:45,900 --> 00:06:47,700\nthat PayPal is still using now,\n\n97\n00:06:48,900 --> 00:06:51,140\nAnd PP React, the component library\n\n98\n00:06:51,480 --> 00:06:53,800\nas well. You probably didn't use\n\n99\n00:06:54,440 --> 00:06:57,280\nPP React. That was like 1 of the last things I did.\n\n100\n00:06:57,840 --> 00:06:58,780\nOkay, so\n\n101\n00:06:59,540 --> 00:07:01,840\nI actually joined August 2019.\n\n102\n00:07:02,320 --> 00:07:10,240\nSo... Oh, okay, So we did not overlap. We were close. We were very close though. Very, very close. So I did work in checkout.\n\n103\n00:07:11,320 --> 00:07:11,820\nSo\n\n104\n00:07:12,380 --> 00:07:16,240\nI didn't say this when I introduced myself, but I am a Java engineer by trade.\n\n105\n00:07:16,640 --> 00:07:19,860\nBut lately I've just kind of been focusing on infrastructure,\n\n106\n00:07:20,240 --> 00:07:25,580\nDevOps, platform engineering, things like that, because those are the things that I'm really interested in. Cool.\n\n107\n00:07:26,040 --> 00:07:27,540\nSo upon getting hired,\n\n108\n00:07:28,660 --> 00:07:30,180\nVenmo was implementing\n\n109\n00:07:30,940 --> 00:07:32,420\nbuying and selling cryptocurrency.\n\n110\n00:07:33,620 --> 00:07:38,340\nOh, okay. Yeah, because PayPal had just launched it and they wanted to launch it in Venmo,\n\n111\n00:07:39,240 --> 00:07:39,980\nfirst quarter.\n\n112\n00:07:40,380 --> 00:07:46,700\nSo because, I guess PayPal doesn't have a lot of Java engineers, so I got pulled off of my team and pulled onto the Venmo team.\n\n113\n00:07:47,020 --> 00:07:50,240\nSo that was 1 of the first projects that I worked on when I was there.\n\n114\n00:07:51,600 --> 00:07:54,560\nAnd then when that was done, I got pulled onto,\n\n115\n00:07:55,860 --> 00:08:01,060\nthere was a latency issue. I, I use PayPal, but I use the web now. I don't really use,\n\n116\n00:08:01,760 --> 00:08:03,780\nthrough third-party websites that much anymore.\n\n117\n00:08:05,240 --> 00:08:05,740\nBut\n\n118\n00:08:06,040 --> 00:08:15,200\nI was pulled on to help kind of go through, again, system design. It's very funny to like client go through their code to see where they were having\n\n119\n00:08:15,520 --> 00:08:21,760\nefficiency issues and things like that. We shaved like sub 7 seconds off of the actual\n\n120\n00:08:22,500 --> 00:08:29,580\ntime to actually pull up PayPal on third party, which was really cool. Yeah, that's great. Yeah, really, really cool stuff.\n\n121\n00:08:30,780 --> 00:08:31,420\nAnd then\n\n122\n00:08:31,860 --> 00:08:42,380\nother than that, just making sure that everything stayed up. So basically for people that didn't work at PayPal, Chaka essentially handles like the majority of the money that's coming through\n\n123\n00:08:42,799 --> 00:08:43,299\nPayPal.\n\n124\n00:08:43,620 --> 00:08:47,260\nIt's kind of important. It's kind of very, very important. Like\n\n125\n00:08:47,880 --> 00:08:48,580\nthe pressure,\n\n126\n00:08:49,000 --> 00:08:56,020\nlike they didn't make you feel the pressure, but just knowing like how much money it's handling every day. You're like, okay, this is kind of serious.\n\n127\n00:08:57,100 --> 00:09:00,260\nBut yeah, so essentially I was on that team and just making sure everything\n\n128\n00:09:00,800 --> 00:09:02,120\nran smoothly there.\n\n129\n00:09:02,720 --> 00:09:06,600\nWe were full, I was a full stack engineer on that 1, but I primarily worked\n\n130\n00:09:07,160 --> 00:09:11,300\non Java things and on like our CI, CD, things like that.\n\n131\n00:09:11,760 --> 00:09:13,760\nYeah. Yeah. Cool, yeah. You know,\n\n132\n00:09:15,060 --> 00:09:20,340\nIt's amazing to me how much effort we put into the front end to make things fast, when\n\n133\n00:09:20,660 --> 00:09:26,700\na lot of the time putting that much effort into the back end to make things fast will make a much bigger impact.\n\n134\n00:09:27,080 --> 00:09:34,700\nRight? Like you sound like you shaved a lot of time off and that was probably on backend stuff. Yeah, it absolutely is. And\n\n135\n00:09:35,020 --> 00:09:37,840\nI think that looking at your APIs\n\n136\n00:09:38,300 --> 00:09:40,080\nand what is going on,\n\n137\n00:09:40,680 --> 00:09:42,860\n1 of the major, major things is,\n\n138\n00:09:43,460 --> 00:09:51,080\nrepeat calls or redundant calls to things that you no longer need, or you're pulling in information from a service that you don't need, like\n\n139\n00:09:51,540 --> 00:09:52,240\nthat are\n\n140\n00:09:53,100 --> 00:10:00,360\nseconds, but I mean, those seconds do add up, so it's really important to first look at your backend before you even\n\n141\n00:10:00,780 --> 00:10:06,180\nlook at the front end for the most cases. I feel like that the front end isn't really\n\n142\n00:10:07,440 --> 00:10:08,820\nfocused on the overall\n\n143\n00:10:09,280 --> 00:10:09,780\nperformance\n\n144\n00:10:10,120 --> 00:10:13,580\nof it. Like, yes, how fast something renders and everything, but\n\n145\n00:10:13,940 --> 00:10:24,560\nsometimes people don't realize that the front end is waiting on the information to come from the back end. And that's really where the bulk of the load is, is like, why is this taking so long? So, yeah. 100%.\n\n146\n00:10:25,080 --> 00:10:28,300\nLike you can cache everything and do all this nonsense\n\n147\n00:10:28,660 --> 00:10:35,980\nto make things seem fast. But at some point, that cache is stale and you've got to update it and that you want to make fast.\n\n148\n00:10:36,560 --> 00:10:40,240\nExactly, there's not enough caching in the world to make up for\n\n149\n00:10:40,640 --> 00:10:45,920\na really, really slow backend system. Not enough caching in the world, so. Yeah, 100%,\n\n150\n00:10:46,260 --> 00:10:48,000\nI completely agree. So\n\n151\n00:10:48,700 --> 00:10:53,400\nthat's actually interesting. When I was at PayPal, it was the checkout team that was spearheading,\n\n152\n00:10:54,000 --> 00:10:55,260\nactually, checkout spearheaded\n\n153\n00:10:55,580 --> 00:10:56,080\nTypeScript\n\n154\n00:10:56,420 --> 00:10:56,920\nadoption,\n\n155\n00:10:57,280 --> 00:10:57,940\nbut also\n\n156\n00:10:59,120 --> 00:10:59,880\nthey spearheaded\n\n157\n00:11:00,420 --> 00:11:02,560\nGraphQL adoption because at PayPal,\n\n158\n00:11:02,940 --> 00:11:09,780\nwe got like thousands of services that you need to integrate with and get data from. So when you were there, was GraphQL\n\n159\n00:11:10,240 --> 00:11:15,360\nstill like a big and important aspect of everything? Oh yeah, absolutely. So I was actually really excited\n\n160\n00:11:15,840 --> 00:11:16,920\nthat there was TypeScript\n\n161\n00:11:17,800 --> 00:11:19,540\nbecause I'm not much of a\n\n162\n00:11:19,900 --> 00:11:21,540\nJa- like a vanilla JavaScript\n\n163\n00:11:21,880 --> 00:11:25,340\nenjoyer because it just makes me anxious. I like, I like,\n\n164\n00:11:26,440 --> 00:11:35,260\nI like type structured thing, obviously as a Java engineer, but I had never worked with GraphQL before. So that was a really cool part for me to learn.\n\n165\n00:11:36,260 --> 00:11:46,540\nGraphQL is amazing. I can't say enough, great things about it, but yeah, even though like we still had that GraphQL layer, there was still just really, really old Java code that\n\n166\n00:11:47,080 --> 00:11:48,180\nneeded to be\n\n167\n00:11:48,700 --> 00:11:49,200\nfixed,\n\n168\n00:11:49,740 --> 00:11:51,480\nessentially, even with GraphQL.\n\n169\n00:11:51,780 --> 00:11:52,280\nSo,\n\n170\n00:11:52,900 --> 00:11:58,780\nbut yeah, GraphQL was a huge proponent in Checkout, huge. And I actually really appreciate it. I feel like Checkout was\n\n171\n00:11:59,120 --> 00:12:02,740\nvery like ahead of the curve on a lot of technical implementations,\n\n172\n00:12:03,440 --> 00:12:08,100\nwhich was interesting for me, especially with such a large company as PayPal.\n\n173\n00:12:08,800 --> 00:12:14,740\nYeah. Yeah. I think there were a couple of key people over there that were just always trying to push the envelope\n\n174\n00:12:15,180 --> 00:12:16,440\nand make things better.\n\n175\n00:12:16,920 --> 00:12:20,640\nSo yeah, I worked with a couple of those folks. It was good times.\n\n176\n00:12:21,040 --> 00:12:22,280\nBut you're not there anymore,\n\n177\n00:12:22,660 --> 00:12:23,800\nspeaking of times.\n\n178\n00:12:24,260 --> 00:12:24,760\nSo.\n\n179\n00:12:26,740 --> 00:12:27,840\nYeah, so why don't\n\n180\n00:12:29,080 --> 00:12:31,300\nyou tell us about the work that you're doing now?\n\n181\n00:12:31,800 --> 00:12:32,960\nSure, so\n\n182\n00:12:33,620 --> 00:12:35,120\nthe New York Times, woohoo.\n\n183\n00:12:35,900 --> 00:12:39,940\nI am a tech lead for a platform team, so it's Care Platforms.\n\n184\n00:12:40,720 --> 00:12:42,660\nAnd Care is the org that handles\n\n185\n00:12:43,580 --> 00:12:50,400\nand builds the platforms that our care agents talk, like, use and talk to customers with. So essentially,\n\n186\n00:12:51,400 --> 00:12:55,960\nanytime you are talking to somebody through our chat or calling in,\n\n187\n00:12:57,180 --> 00:13:03,740\nyou are talking to somebody that's using the system that I am working on and I'm in charge of making sure that it never goes down.\n\n188\n00:13:04,540 --> 00:13:06,260\nSo yeah, so it's really interesting.\n\n189\n00:13:07,680 --> 00:13:08,180\nBasically\n\n190\n00:13:08,720 --> 00:13:10,120\nplatforms and platforms.\n\n191\n00:13:10,680 --> 00:13:12,640\nEngineering in general is like a really,\n\n192\n00:13:13,680 --> 00:13:20,280\nI want to say it's been around for like 3 years. So new, new in term of like other companies kind of catching on\n\n193\n00:13:20,600 --> 00:13:22,400\nand using those teams.\n\n194\n00:13:23,560 --> 00:13:29,140\nEssentially, I'm in charge of making sure that our services stay up, that they stay up to date,\n\n195\n00:13:29,600 --> 00:13:43,140\nthat we address any needs for like our other devs that are doing feature work to make sure that they have the tools that they need, anything to make their lives easier in implementing things. That's what myself and my team is in charge of.\n\n196\n00:13:43,980 --> 00:13:51,140\nSo recently we actually just got done going through a, an entire quarter work worth of work,\n\n197\n00:13:52,120 --> 00:13:55,820\ndesigning a new system, which was super exciting because I feel like,\n\n198\n00:13:57,260 --> 00:14:03,980\nat the companies that I worked for before, I never really had a chance to greenfield a project and design it from the floor up,\n\n199\n00:14:04,440 --> 00:14:06,220\nwhich is really super cool.\n\n200\n00:14:06,580 --> 00:14:10,340\nBasically, just like a scheduling platform for a lot of different\n\n201\n00:14:10,680 --> 00:14:11,180\norgs\n\n202\n00:14:12,040 --> 00:14:14,360\nand programs in the company to use,\n\n203\n00:14:14,760 --> 00:14:16,800\nbecause the 1 that we're using right now,\n\n204\n00:14:19,020 --> 00:14:20,320\nhow do I put this?\n\n205\n00:14:21,300 --> 00:14:23,300\n1 engineer did it. So\n\n206\n00:14:23,920 --> 00:14:24,620\nit was\n\n207\n00:14:25,320 --> 00:14:25,820\ndefinitely,\n\n208\n00:14:27,160 --> 00:14:39,440\ndon't blame this engineer for that at all. Somebody is just like, you need to build this and you're the only 1 that can do it. It's definitely difficult, but of course there's pitfalls in that because you're building something fast\n\n209\n00:14:39,760 --> 00:14:43,360\nand business is on you to do it. So our job was to,\n\n210\n00:14:44,440 --> 00:14:54,100\nmodernize that, with an event driven system, which was, which was, and is super cool. So we pretty much spearheaded that and\n\n211\n00:14:55,160 --> 00:15:02,860\nyeah, now we're going to start building it, which is very exciting because when you spend 3 months on something, it's like now I can actually start coding. So.\n\n212\n00:15:03,280 --> 00:15:03,780\nYes.\n\n213\n00:15:04,200 --> 00:15:04,700\nYeah.\n\n214\n00:15:05,020 --> 00:15:08,740\nOkay. So that is actually all really interesting. So\n\n215\n00:15:09,800 --> 00:15:11,180\nto make sure that I understand\n\n216\n00:15:11,540 --> 00:15:12,460\nwhat you,\n\n217\n00:15:13,900 --> 00:15:16,380\nI'm guessing what you spend most of your time doing\n\n218\n00:15:17,020 --> 00:15:19,120\ninvolves like DevOps work,\n\n219\n00:15:19,540 --> 00:15:20,200\nlike configuring\n\n220\n00:15:20,540 --> 00:15:21,040\nthe\n\n221\n00:15:21,560 --> 00:15:25,140\nclusters of, you know, whatever you've got running over there.\n\n222\n00:15:25,760 --> 00:15:28,600\nAnd then like lots of logging and monitoring\n\n223\n00:15:28,980 --> 00:15:29,480\nrelated\n\n224\n00:15:29,860 --> 00:15:30,900\nstuff as well.\n\n225\n00:15:32,180 --> 00:15:38,820\nBut then you mentioned you also keep yourself up to date, so I'm guessing you keep track of all of the dependencies\n\n226\n00:15:39,140 --> 00:15:43,780\nthat your different projects have and keep those things up to date. Is it like\n\n227\n00:15:44,620 --> 00:15:55,660\nmore high level dependency or I guess low level dependencies, like the version of Java that you're running and stuff like that, that you're focused on? It honestly goes across the entire spectrum.\n\n228\n00:15:57,440 --> 00:16:09,440\nIt's interesting because there comes with platform engineering, especially with a team that is as new as mine. Essentially I was brought on and the team was around for maybe a couple of months before I was brought on as tech lead.\n\n229\n00:16:10,160 --> 00:16:11,520\nSo very, very new.\n\n230\n00:16:12,380 --> 00:16:15,560\nSo yeah, there's the high level aspect of making sure,\n\n231\n00:16:17,020 --> 00:16:18,980\nknowing our ecosystem in and out,\n\n232\n00:16:20,220 --> 00:16:20,720\nrealizing\n\n233\n00:16:21,140 --> 00:16:23,940\nlike the pitfalls of all the services that we have,\n\n234\n00:16:24,320 --> 00:16:27,420\nfor us right now, we are in the middle of\n\n235\n00:16:27,980 --> 00:16:28,480\ndecomming\n\n236\n00:16:28,860 --> 00:16:30,660\na very old, very\n\n237\n00:16:32,780 --> 00:16:35,140\ncurmudgeon, let's just put it that way, system\n\n238\n00:16:35,540 --> 00:16:36,280\nthat likes\n\n239\n00:16:37,840 --> 00:16:39,360\nto cause us a lot of trouble\n\n240\n00:16:40,240 --> 00:16:42,280\nin terms of for our care\n\n241\n00:16:42,980 --> 00:16:43,480\nagents.\n\n242\n00:16:44,340 --> 00:16:49,180\nAnd we have a dedicated feature team that is building a whole new thing from the ground up.\n\n243\n00:16:50,020 --> 00:16:53,140\nOur leadership decided that we should just implement and like\n\n244\n00:16:54,660 --> 00:16:55,160\nactually\n\n245\n00:16:56,000 --> 00:17:05,240\ninvest in just building this platform instead of relying on something that's not doing what we need to do, especially since a lot of the things that they, we need to update it are deprecated.\n\n246\n00:17:05,859 --> 00:17:08,280\nNot a lot of time. Yeah. So,\n\n247\n00:17:08,859 --> 00:17:12,859\nour job is to, and especially my job as the tech lead is to know\n\n248\n00:17:14,060 --> 00:17:17,980\nwhat these pitfalls are, what's going on in the systems, making sure that,\n\n249\n00:17:19,020 --> 00:17:25,680\nthe resiliency of the system and the reliability of the system is up, you know, classic DevOps up. As you said,\n\n250\n00:17:26,460 --> 00:17:39,780\nalso if it comes down to like our database needing to be updated in a version, which it was actually a ticket that we had this sprint. You know, we're the ones that are doing that, while the feature team is focused on doing what they can.\n\n251\n00:17:40,640 --> 00:17:46,460\nSo yeah, I feel like we're like the watchers of the system to make sure that everything is going right.\n\n252\n00:17:47,060 --> 00:17:59,700\nLuckily that's not something that we have to do all ourselves. We do have a great infrastructure team at the New York Times, our DV team that I work really closely with in implementing things and helping with the clusters.\n\n253\n00:18:00,060 --> 00:18:02,140\nAnd right now we're going through some migrations\n\n254\n00:18:03,260 --> 00:18:04,500\nwith all of our services.\n\n255\n00:18:05,920 --> 00:18:10,020\nSo it's a pretty big undertaking, but it's really cool and awesome.\n\n256\n00:18:10,520 --> 00:18:14,160\nAnd I love being able to get in there and see everything.\n\n257\n00:18:16,780 --> 00:18:24,840\nMonitoring included, observability included. It's just really cool. And it's probably why I like system design so much because it kind of incorporates all of those things.\n\n258\n00:18:25,200 --> 00:18:29,280\nYeah, okay, so I've got a question for you. Since you're operating at a\n\n259\n00:18:29,820 --> 00:18:32,020\npretty big scale, so you've got\n\n260\n00:18:32,740 --> 00:18:39,260\nan infrastructure team, a team dedicated to that. And you've got like DevOps and your platform team and all of that. So\n\n261\n00:18:41,260 --> 00:18:43,160\nif you were to build a new\n\n262\n00:18:43,660 --> 00:18:44,160\nproduct,\n\n263\n00:18:44,820 --> 00:18:48,300\nbrand new, like different separate companies, your own company, whatever.\n\n264\n00:18:48,860 --> 00:18:52,760\nMaybe you're a solo dev, maybe you've got 3 or 4 other people on the team.\n\n265\n00:18:53,960 --> 00:18:59,180\nAt what point in the development process of that product would you start including\n\n266\n00:19:00,600 --> 00:19:01,100\nthe\n\n267\n00:19:01,580 --> 00:19:02,120\nlike level\n\n268\n00:19:02,500 --> 00:19:03,000\nof\n\n269\n00:19:03,540 --> 00:19:05,100\ntooling and other\n\n270\n00:19:06,440 --> 00:19:08,940\nsoftware that you're using at\n\n271\n00:19:09,280 --> 00:19:10,540\nthe times right now?\n\n272\n00:19:11,000 --> 00:19:14,680\nOoh, that's a great question. So I think it,\n\n273\n00:19:15,940 --> 00:19:22,320\nFor me personally, I think that those things should be questioned and thought about and brought into in the system design process.\n\n274\n00:19:22,840 --> 00:19:28,860\nI like to think you don't have to necessarily implement it right away, but you definitely need to start having those conversations\n\n275\n00:19:29,200 --> 00:19:30,120\nabout how\n\n276\n00:19:30,480 --> 00:19:39,440\nyou are going to scale those things. I think that being optimistic and positive about the growth of whatever you're building is the best way forward.\n\n277\n00:19:40,580 --> 00:19:41,760\nIt's about being,\n\n278\n00:19:42,100 --> 00:19:45,620\ninstead of being reactive, being proactive in that sense, it's like, okay,\n\n279\n00:19:46,120 --> 00:19:50,420\nwhen we get to that point, when we need to start doing clusters and things, should we be using\n\n280\n00:19:51,100 --> 00:19:51,600\nKubernetes?\n\n281\n00:19:52,200 --> 00:20:02,000\nLike it kind of even comes down to like, when you start thinking about, okay, so are we going to use AWS? Are we going to use Google Cloud Platform? Are we going to use Azure? Like all of those conversations\n\n282\n00:20:02,300 --> 00:20:03,480\nneeds to be held,\n\n283\n00:20:04,060 --> 00:20:09,100\nduring the system design process and I can't say that I've, I've ever worked for\n\n284\n00:20:09,720 --> 00:20:20,180\nmyself building anything because with me, I'm just going to code and then I'll figure it out at some point, like I have those ideas. So I don't have to like do a collaboration or talk to other people. But when there's definitely other people involved,\n\n285\n00:20:20,540 --> 00:20:24,360\nyou want to have those conversations because maybe those other people aren't necessarily\n\n286\n00:20:25,160 --> 00:20:32,540\ncoding with you, but those are going to be costs later down the line that they're going to need to know, okay, so why are we investing\n\n287\n00:20:33,340 --> 00:20:40,820\nX amount of time into doing this for what reason? So it's just very, like, just to have everything laid out upfront is good.\n\n288\n00:20:41,320 --> 00:20:43,100\nThere might be a chance that you\n\n289\n00:20:43,520 --> 00:20:48,140\ndon't even need to do certain things, like certain levels of software technology. But,\n\n290\n00:20:49,200 --> 00:20:51,440\nI feel as though when you're doing\n\n291\n00:20:51,820 --> 00:20:53,640\ngood system design, right?\n\n292\n00:20:54,220 --> 00:21:04,620\nThat you need to think of all of those aspects and it's not a lot of the time, it's not just technology. It's also like the business aspect and the monetary aspects as well. And I feel like,\n\n293\n00:21:06,180 --> 00:21:10,620\nI feel like when we're talking about system design or when we go through courses of system design,\n\n294\n00:21:10,920 --> 00:21:23,040\nlike we do like the back of the envelope kind of like calculations of like, oh, it's approximately like going to cost this much, but like, no, when you're really building that, those things come into focus quickly because\n\n295\n00:21:23,500 --> 00:21:30,040\nbusiness is like, okay, so why are we spending this amount of money for that reason? Especially when it comes down to cutting costs.\n\n296\n00:21:30,420 --> 00:21:31,660\nSo Definitely in the beginning.\n\n297\n00:21:32,500 --> 00:21:33,680\nYeah, okay, so\n\n298\n00:21:34,120 --> 00:21:36,660\nif I summarize your answer, I would say\n\n299\n00:21:38,040 --> 00:21:42,540\nyou want to make sure you're not doing anything to paint yourself in a corner, but you don't necessarily\n\n300\n00:21:43,840 --> 00:21:47,380\nimplement all of those things right from the get-go, because you might not need them\n\n301\n00:21:47,980 --> 00:21:52,760\never in the future. Yeah, absolutely. Yeah. And you know, like even\n\n302\n00:21:53,180 --> 00:21:53,680\ntechnology\n\n303\n00:21:54,220 --> 00:22:13,680\nis just changing all the time anyway. If you get to a point where you get to that point, whatever you were thinking about implementing in in the beginning doesn't even exist anymore. Right. Yeah, it's like deprecated, like the thing you're decomming right now. Yes, exactly. So it's just like, you know, but at least have that thought process into like, okay, why did we choose that technology?\n\n304\n00:22:14,340 --> 00:22:15,080\nAnd then\n\n305\n00:22:15,380 --> 00:22:23,220\ngo to find something similar, maybe something is better that has replaced it and you just don't know. Yeah, you just have to be proactive about it.\n\n306\n00:22:23,680 --> 00:22:26,260\nYeah, I think that makes a lot of sense.\n\n307\n00:22:26,640 --> 00:22:32,940\nWith this Epic stack, that's the stack or a starter project that I put together\n\n308\n00:22:34,340 --> 00:22:37,940\nthat includes like all of the things you typically need in a typical app.\n\n309\n00:22:38,460 --> 00:22:48,020\n1 of the deliverables, I guess, of that is a series of decision documents that explain why I made different decisions that I have.\n\n310\n00:22:48,700 --> 00:22:51,680\nAnd it evolves too, like there was 1 decision on\n\n311\n00:22:52,060 --> 00:22:58,340\nwhy we went with this email service provider and we switched to a different 1 and explained the whole process. So it's like a historical\n\n312\n00:22:59,340 --> 00:23:00,360\nseries of documents.\n\n313\n00:23:00,720 --> 00:23:07,080\nAnd I think that like, especially early on when you're making those kinds of decisions, that makes a lot of sense to have to,\n\n314\n00:23:07,580 --> 00:23:20,300\nit encourages having those conversations and then it makes it easier for you to kind of think back, okay, why did we do this? Oh, that's not true anymore. So we can make a different decision now, stuff like that. Yeah, I have to say, by the way, that is just genius.\n\n315\n00:23:22,080 --> 00:23:41,100\nThe decision documentation, I just love documentation anyway, and to be able to like actually physically go back and go, oh, that was the reasoning why we did this. Oh, it's kind of just like, you know, just preparing yourself for, you know, maybe you're not there that day or you're not able to come to a meeting to talk about it, but at least the reasoning's there.\n\n316\n00:23:41,960 --> 00:23:42,680\nYeah, yeah, totally.\n\n317\n00:23:43,220 --> 00:23:46,980\nSo Josie, another thing that I wanted to ask you about,\n\n318\n00:23:47,720 --> 00:23:53,940\nso subject change a little bit. You mentioned that it was like 8 years ago or so you went through a bootcamp,\n\n319\n00:23:54,440 --> 00:23:56,560\nand now you're a staff level engineer,\n\n320\n00:23:57,400 --> 00:23:58,240\nworking on\n\n321\n00:23:59,700 --> 00:24:00,520\nsystem design\n\n322\n00:24:01,500 --> 00:24:10,820\nat a big company, at a big scale and everything. I'm sure there are some people listening right now who are maybe in a similar situation. Maybe they're using Epic Web as kind of their bootcamp\n\n323\n00:24:12,620 --> 00:24:23,540\nand are kind of wanting to go in a similar direction or at least have that level of success in their career. What are a couple of tips that you would give to those people as they're just getting started in the industry?\n\n324\n00:24:24,140 --> 00:24:25,020\nYeah, sure.\n\n325\n00:24:25,460 --> 00:24:27,740\nSo the very first thing I wanna say that\n\n326\n00:24:28,380 --> 00:24:29,620\nI approve self-learning,\n\n327\n00:24:30,200 --> 00:24:35,480\nobviously be at a bootcamp or through Ken's amazing courses, but you know,\n\n328\n00:24:36,600 --> 00:24:38,600\nI am a huge proponent of it. Actually.\n\n329\n00:24:39,280 --> 00:24:44,340\nI think that boot camps may have the only thing actually that boot camps have up\n\n330\n00:24:44,640 --> 00:24:45,140\nand\n\n331\n00:24:45,940 --> 00:24:56,380\nI don't know, Twitter is a thing and I think Twitter is a great way to actually like communicate with people and to network. It's just the networking aspect for jobs. I think that's the most important part.\n\n332\n00:24:57,380 --> 00:25:04,900\nSo I was in a position with my bootcamp where I very luckily went for free because of my financial situation at the time.\n\n333\n00:25:05,900 --> 00:25:09,740\nSo that was a no brainer for me to be able to do that.\n\n334\n00:25:10,640 --> 00:25:12,280\nSo I think that,\n\n335\n00:25:12,800 --> 00:25:20,040\nwhen you're investing in something, realize that you're investing in yourself. And when you are doing this, you definitely have to go full throttle.\n\n336\n00:25:21,280 --> 00:25:28,240\nFor me, I was in a position where I told myself that I cannot fail, like this is what I want to do. And\n\n337\n00:25:29,600 --> 00:25:33,980\nI think the bootcamp was for 3 months And when I say that I was coding, probably\n\n338\n00:25:34,440 --> 00:25:42,100\nwe had like a computer lab we can go to. I was in there probably 70 to 90 hours a week. Whoa. Just going out. Grinding.\n\n339\n00:25:42,440 --> 00:25:49,700\nYeah. I know. I think that, you know, people are like, oh no, grinding, et cetera, et cetera. But granted, I was in a position where\n\n340\n00:25:50,020 --> 00:25:51,340\nI didn't have a job.\n\n341\n00:25:51,660 --> 00:25:54,780\nLike, I didn't have any other responsibilities other than myself.\n\n342\n00:25:55,160 --> 00:26:01,580\nSo I was able to devote that time into that. I'm definitely not telling people that have other responsibilities\n\n343\n00:26:01,960 --> 00:26:03,480\nand like, you know, like,\n\n344\n00:26:03,820 --> 00:26:08,220\nlike having balance in that sense, but that's what I had to do. And,\n\n345\n00:26:08,940 --> 00:26:14,680\nit's very much a situation where as much work as you put in is what you get out of it.\n\n346\n00:26:15,360 --> 00:26:17,860\nSo when it came down to me getting\n\n347\n00:26:18,400 --> 00:26:18,900\ninterviews,\n\n348\n00:26:20,460 --> 00:26:25,960\nI think I was in a really good position because I had been grinding and studying all of these things.\n\n349\n00:26:27,380 --> 00:26:32,420\nSo that's the 1 thing. And then number 2 is that you never stop learning\n\n350\n00:26:33,420 --> 00:26:34,140\nat all.\n\n351\n00:26:35,200 --> 00:26:35,700\nSo\n\n352\n00:26:36,580 --> 00:26:57,220\nI think that there's like this disparity. Well, I don't think there is, cause usually it pops up on tech Twitter, like every quarter, you know, like, Do you go to a bootcamp or do you go to a university? I personally think that there's nothing wrong with either 1 of them. It's about how much work you put in while you're doing those things.\n\n353\n00:26:58,480 --> 00:26:58,980\nAnd\n\n354\n00:26:59,280 --> 00:27:03,220\nthat will get you the results that you want when you come out of those things.\n\n355\n00:27:03,900 --> 00:27:11,180\nAnd 1 of the things that will set you apart from anyone, it doesn't matter what their background of getting into the industry is, is\n\n356\n00:27:11,680 --> 00:27:19,040\nknowing that the learning doesn't stop. I started as a Java engineer and I feel as though I would\n\n357\n00:27:19,440 --> 00:27:23,300\nstill be able to get jobs because Java is not going away because of just infrastructure\n\n358\n00:27:23,940 --> 00:27:25,460\nand older companies. Right.\n\n359\n00:27:25,840 --> 00:27:28,600\nBut I don't think I would be nearly as successful\n\n360\n00:27:29,180 --> 00:27:34,940\nas I am right now if I wasn't constantly learning new things or the willingness to learn new things.\n\n361\n00:27:35,380 --> 00:27:43,180\nAnd you can do that learning on the job or you can do both where I learned on the job and I also am picking up books or podcasts or constantly\n\n362\n00:27:43,940 --> 00:27:45,060\nlearning. So\n\n363\n00:27:46,120 --> 00:27:48,980\nI think that's it. It's just like, make sure that you're\n\n364\n00:27:49,700 --> 00:27:52,040\nhungry for it, I think, in the beginning.\n\n365\n00:27:52,800 --> 00:27:54,460\nThat hunger really kind of\n\n366\n00:27:54,940 --> 00:27:56,080\npushes you along.\n\n367\n00:27:57,440 --> 00:27:59,540\nYeah. You know, I wanna\n\n368\n00:28:00,360 --> 00:28:04,140\nspeak sensitively about this, about the grinding culture.\n\n369\n00:28:06,580 --> 00:28:10,940\nI am definitely a person, like I have a wife and almost 5 kids.\n\n370\n00:28:14,540 --> 00:28:19,800\nSaying Almost 5 kids sounds funny. I have 4 kids and 1 on the way. And 1 on the way. Yeah, so\n\n371\n00:28:20,140 --> 00:28:21,880\nI very much care about\n\n372\n00:28:22,360 --> 00:28:26,780\nwork-life balance. My first 2 kids were born before I even graduated from\n\n373\n00:28:27,100 --> 00:28:31,120\nuniversity and started professionally. So it's always been a thing for me.\n\n374\n00:28:32,040 --> 00:28:33,180\nAnd so I want to,\n\n375\n00:28:33,820 --> 00:28:36,240\nyou got to take care of the things that are most important.\n\n376\n00:28:37,080 --> 00:28:38,180\nAll of that said,\n\n377\n00:28:38,680 --> 00:28:41,020\nI cannot say don't grind\n\n378\n00:28:41,380 --> 00:28:43,220\nor like you can make it without\n\n379\n00:28:44,060 --> 00:28:45,920\nthe grind culture or whatever,\n\n380\n00:28:46,360 --> 00:28:52,660\nbecause I don't really know because I grinded hard. Like I worked my rear end off getting started.\n\n381\n00:28:53,100 --> 00:28:53,800\nAnd so\n\n382\n00:28:55,240 --> 00:29:02,380\nI kind of wish that it didn't have to be that way. And maybe like for some people it doesn't, but I can't say that you can reach\n\n383\n00:29:02,680 --> 00:29:07,660\neither 1 of our levels of success in this industry without the grind because we both did it.\n\n384\n00:29:08,260 --> 00:29:12,600\nAnd so like that, you gotta put in the work. Those reps are important.\n\n385\n00:29:13,920 --> 00:29:16,040\nYeah, yeah, I definitely think that like,\n\n386\n00:29:16,360 --> 00:29:22,700\nas you said, work-life balance. Now that I have a job, I'm very much like I work from 10 to 5 at 05:00,\n\n387\n00:29:23,000 --> 00:29:24,820\nmy machine is closed. Right.\n\n388\n00:29:26,320 --> 00:29:30,520\nSo I get it. But yeah, when you're trying to break into the industry, I think that.\n\n389\n00:29:32,060 --> 00:29:34,940\nI think that if we had an industry where\n\n390\n00:29:35,700 --> 00:29:36,640\nputting in\n\n391\n00:29:36,980 --> 00:29:46,040\nthe, I don't even know what would be like the acclimated amount of hours that would be like proper to be putting into like learning how to code, right?\n\n392\n00:29:46,780 --> 00:29:53,740\nLet's just say 40, like you don't have anything else And it's like 40 hours a week, like a job or something. If that was the case, then.\n\n393\n00:29:54,340 --> 00:30:02,540\nYou know, that would be something different, but I think that where we have been seeing, or at least I have been for, oh my God, it's almost 10 years. So weird.\n\n394\n00:30:03,480 --> 00:30:08,920\nLike the last decade, what the, what, what it is, is that the people that are\n\n395\n00:30:09,560 --> 00:30:10,060\ngrinding,\n\n396\n00:30:10,640 --> 00:30:12,000\nright, or well-connected\n\n397\n00:30:12,340 --> 00:30:29,240\nalready, like they already have their networking and everything. Again, I don't want to, networking is extremely important, but also having the skill and that drive is also a part of it. But yeah, those are extremely important to not only get into the industry, but as Kent said, get to the level of success you see\n\n398\n00:30:30,560 --> 00:30:31,060\nourselves\n\n399\n00:30:31,380 --> 00:30:36,520\nand like, you know, other people on other social media platforms, getting to those levels. It's like\n\n400\n00:30:36,960 --> 00:30:40,740\nwe, you don't understand how much we're working or how much we're grinding\n\n401\n00:30:41,500 --> 00:30:45,400\nbehind the scenes in order to get to where we are. So, yeah. Yeah.\n\n402\n00:30:46,020 --> 00:30:52,000\nI it's, It's true and it's sad, but it is what it is. And I also really appreciate what you said about\n\n403\n00:30:52,420 --> 00:30:54,040\nnever stop learning\n\n404\n00:30:54,380 --> 00:30:55,500\nnew things and pivoting.\n\n405\n00:30:57,380 --> 00:30:59,880\nLike at the time that I had joined the industry,\n\n406\n00:31:00,240 --> 00:31:00,960\nI was\n\n407\n00:31:01,320 --> 00:31:03,460\ndoing all of the latest and everything.\n\n408\n00:31:03,820 --> 00:31:06,660\nIf I was still doing that, I would not be\n\n409\n00:31:08,300 --> 00:31:09,160\nvery successful\n\n410\n00:31:09,480 --> 00:31:10,220\nright now.\n\n411\n00:31:10,920 --> 00:31:15,780\nLike I was doing Backbone JS and, you know, that was like latest stuff.\n\n412\n00:31:16,360 --> 00:31:17,340\nWow, Backbone,\n\n413\n00:31:17,640 --> 00:31:18,800\nholy smokes.\n\n414\n00:31:19,140 --> 00:31:20,880\nYeah. What a throwback.\n\n415\n00:31:21,900 --> 00:31:22,400\nYeah.\n\n416\n00:31:23,800 --> 00:31:24,560\nFor real.\n\n417\n00:31:25,840 --> 00:31:33,840\nTimes change, especially in the web world. I feel like maybe in, I don't really know, I'm not very well connected in other\n\n418\n00:31:34,200 --> 00:31:34,700\nsoftware\n\n419\n00:31:35,740 --> 00:31:51,560\ncommunities, but in the web community, like things are changing constantly. And so, yeah, staying on top of all of that, it can be overwhelming, but that's part of the job. I really enjoy it actually. So that's, I agree with you. Yeah. I, I love learning.\n\n420\n00:31:52,680 --> 00:32:00,780\nI actually wanted to go into art history in college. That was the thing that I wanted to do because I was just like, wow, I could just learn about this forever.\n\n421\n00:32:02,460 --> 00:32:05,900\nDo go on about art history in my other time, but yeah, that's cool.\n\n422\n00:32:06,400 --> 00:32:09,900\nYeah. About software engineering that I really, really like is just the,\n\n423\n00:32:10,380 --> 00:32:15,460\nthere's not a moment where you, you're not learning about some new\n\n424\n00:32:15,900 --> 00:32:16,400\nculture.\n\n425\n00:32:16,720 --> 00:32:23,940\nLike what's the, what is it? What is it called now? The bun? Is it bun IO? Is that what you're using? Yeah, yeah. Bun run time.\n\n426\n00:32:24,440 --> 00:32:27,780\nYes. I was just like, what is this cute thing called bun?\n\n427\n00:32:29,240 --> 00:32:31,780\nI'm not, and I'm not primarily like even,\n\n428\n00:32:32,680 --> 00:32:45,260\nusing TypeScript a lot. We do have it in our stack though. And just because I was like in the middle of designing the system, I was like, wait a minute, this sounds really cool. I'm like, I'm going to keep an eye on this to see where it goes. So,\n\n429\n00:32:45,920 --> 00:32:51,640\nit's just about being connected and, and enjoying what you do to some extent that you want\n\n430\n00:32:52,360 --> 00:32:58,600\nto know other things because it doesn't feel like work when you're learning about other things like that if you enjoy it.\n\n431\n00:32:58,920 --> 00:33:01,020\nYeah, very much. Very, very true.\n\n432\n00:33:01,400 --> 00:33:07,980\nNow, Josie, we're getting down toward the end of our time. Is there anything else that you wanted to talk about we didn't get to touch on?\n\n433\n00:33:11,520 --> 00:33:19,840\nI wanna talk about the importance of just like, when it comes to system design, about the discovery part, because I feel like people don't touch on that much.\n\n434\n00:33:20,280 --> 00:33:25,280\nYeah, that's fine. Yeah, so I think that it's a really important part\n\n435\n00:33:25,640 --> 00:33:26,140\nof\n\n436\n00:33:26,520 --> 00:33:29,520\ngetting to higher levels as an individual contributor.\n\n437\n00:33:30,940 --> 00:33:31,440\nSo\n\n438\n00:33:32,420 --> 00:33:42,740\nsystem design in general, like people say, yeah, you need to know the components of the system and how to scale like vertically, horizontally. Yeah. Those things, sure. But I think that there's 1 skill that,\n\n439\n00:33:43,580 --> 00:33:46,500\nI've noticed that has taken me a lot farther is,\n\n440\n00:33:47,440 --> 00:33:48,220\nmy ability\n\n441\n00:33:49,320 --> 00:33:53,300\nand honestly, like my excitement, like I said, I just like digging into things,\n\n442\n00:33:54,020 --> 00:33:58,040\nabout being able to go through a system and being able to pinpoint\n\n443\n00:33:59,340 --> 00:34:00,660\nfail points or to,\n\n444\n00:34:01,020 --> 00:34:03,580\nI don't want to say quickly, but to earnestly\n\n445\n00:34:03,940 --> 00:34:10,620\nknow a system in and out and to be able to assess, because like I said earlier, there's not a lot of opportunity,\n\n446\n00:34:11,580 --> 00:34:19,900\nwithin larger companies to build something from the ground up. That's kind of like a unicorn in terms of just software engineering at a larger company,\n\n447\n00:34:20,219 --> 00:34:24,179\nbut you're always going to have a company that's going to have older systems\n\n448\n00:34:25,020 --> 00:34:28,719\nand at some point it's going to come down to a refactorization\n\n449\n00:34:29,380 --> 00:34:39,300\nor a rebuild of the system And I just want to let people know that if you're the person that can go through a system and figure it out and\n\n450\n00:34:39,620 --> 00:34:43,980\nknow the ins and out of that system, that is going to take you very, very far.\n\n451\n00:34:45,040 --> 00:34:50,860\nAnd also being able to lead discussion and also teach others about it as well is equally important.\n\n452\n00:34:51,280 --> 00:34:54,739\nSo, that's... Yeah, those are great skills. I think\n\n453\n00:34:55,080 --> 00:34:56,219\nlearning how to communicate\n\n454\n00:34:57,180 --> 00:34:58,020\nthe technical\n\n455\n00:34:58,900 --> 00:35:04,260\nthings to somebody who maybe has a little bit of knowledge around it, but has limited exposure\n\n456\n00:35:04,600 --> 00:35:10,620\nand being able to effectively communicate those things, super, super valuable skill. How do you develop that skill?\n\n457\n00:35:12,980 --> 00:35:14,640\nIt's 1 of those things that\n\n458\n00:35:16,460 --> 00:35:19,900\nFor me, it was definitely, I learned in practice\n\n459\n00:35:21,220 --> 00:35:27,320\nat work, because, I mean, you get immediate feedback, like if you're explaining something and the person's looking at you like,\n\n460\n00:35:27,660 --> 00:35:30,740\nI have no idea what you just said, what are you talking about?\n\n461\n00:35:32,100 --> 00:35:37,320\nBecause then you have to like, okay, how can I talk about this in a way that this person will understand?\n\n462\n00:35:38,560 --> 00:35:39,740\nBut then there's also\n\n463\n00:35:40,120 --> 00:36:10,140\nanother really great way, like, it's almost like if you're studying for a system design interview or something, if you look over what you have written out plainly, it's like, okay, so this is how I would say it now, but how can I make that easier to understand to somebody else without the level of technical knowledge that I have? And that's not to say like, that's not a brag or anything. That's just like true. We just have varying degrees of knowledge and it's just like, you want to share that. So yeah. Yeah, I agree. I think practice\n\n464\n00:36:10,680 --> 00:36:12,600\nhelps a ton and\n\n465\n00:36:13,080 --> 00:36:16,000\nlike when I worked at Remix\n\n466\n00:36:16,700 --> 00:36:19,120\non they have Remix sign back here\n\n467\n00:36:19,540 --> 00:36:21,480\nWhen I was working at Remix\n\n468\n00:36:21,820 --> 00:36:23,820\nand trying to figure out how to\n\n469\n00:36:24,480 --> 00:36:28,400\nanswer the question, like, what makes Remix so special or whatever? I found\n\n470\n00:36:28,940 --> 00:36:29,440\nthat\n\n471\n00:36:30,040 --> 00:36:35,240\nThe more I did it, the easier it became. Like you just, you gotta figure out how to form those words\n\n472\n00:36:35,660 --> 00:36:36,980\nproperly. And so,\n\n473\n00:36:37,900 --> 00:36:39,300\nbut then in general,\n\n474\n00:36:40,080 --> 00:36:41,060\nthe more you\n\n475\n00:36:41,360 --> 00:36:41,860\npractice\n\n476\n00:36:42,540 --> 00:36:47,140\nexplaining technical things, the better you get at that skill as well. So it's just a practice\n\n477\n00:36:47,620 --> 00:36:52,400\nand learning skill. Don't be afraid to look silly sometimes or sound silly sometimes.\n\n478\n00:36:53,260 --> 00:36:54,300\nThat's how you grow.\n\n479\n00:36:54,780 --> 00:36:55,820\nYeah, awesome.\n\n480\n00:36:56,520 --> 00:36:59,740\nWell, Josie, this has been great. Thank you so much for all of your insights\n\n481\n00:37:00,040 --> 00:37:01,500\nas an expert in the industry.\n\n482\n00:37:02,720 --> 00:37:13,300\nIf anybody wants to keep up with you and what you're doing, what's the best way for them to do that? Yeah, sure. Definitely go ahead and follow me on Twitter slash X. I'm always gonna call it Twitter, by the way.\n\n483\n00:37:15,060 --> 00:37:16,500\nI'm at Java, which\n\n484\n00:37:17,280 --> 00:37:20,140\nis with 2 V's instead of a W. So J-A-V-E-I-T-C-H.\n\n485\n00:37:22,120 --> 00:37:23,160\nYeah, definitely.\n\n486\n00:37:23,500 --> 00:37:32,900\nAwesome. And you mentioned to me before we started recording that you're working on a course. You've been working on it for a while. Do you want to mention that? I am working on a\n\n487\n00:37:33,820 --> 00:37:36,420\nsystem design course called Conquer System Design.\n\n488\n00:37:36,760 --> 00:37:43,440\nI'm really passionate about it and I want other people to be passionate about it because I really do think it is a\n\n489\n00:37:43,840 --> 00:37:45,920\nkey pillar in people going\n\n490\n00:37:46,780 --> 00:37:50,860\nfrom senior to staff and beyond. And so I wanna help people out.\n\n491\n00:37:51,180 --> 00:37:57,680\nIf you go to my Twitter, I do have a link tree and there's a link to sign up to my newsletter there which will give you updates on the course.\n\n492\n00:37:58,440 --> 00:38:00,520\nSick, all right, go grab it.\n\n493\n00:38:01,500 --> 00:38:05,650\nAll right, thank you so much, Josie. We'll see you around. Goodbye, everybody. Bye.",
            "text": "[00:00:00] Kent:\nWhat is up everybody? So I'm excited to be joined by Jocelyn Harper. Jocelyn, you go by Josie, right? \n\n[00:00:06] Jocelyn:\nI do, yeah, I do. \n\n[00:00:08] Kent:\nOkay, does anybody call you Jocelyn? \n\n[00:00:12] Jocelyn:\nClose friends, it's very funny because I feel like Josie has become like my online tech persona like name. People in real life call me Jocelyn, yeah. \n\n[00:00:22] Kent:\nYeah, I actually can relate to that. So years and years ago, I bought the domain kentcdots.com And then I made my email address me at Kent C Dodds calm and when I was still in school I had classmates or a classmate in particular Jake Lingwall if you're listening Jake How are you doing? Yeah \n\n[00:00:43] So Jake he started calling me Kent C Dodds just like everywhere because of my email address. And so all my other classmates picked up on Kent C. Dodds and then we actually worked together as well. So everybody at work picked up on Kent C. Dodds and then it just became a thing. And So I am Kent C. Dodds in the tech world. And then in like regular \n\n[00:01:04] life world, I'm just Kent Dodds. And it's kind of funny. \n\n[00:01:08] Jocelyn:\nNo, it's great. I love how like branding, like not by on purpose, just that's hilarious. \n\n[00:01:16] Kent:\nYeah, Yeah, totally. It's not like there are a lot of other Kent Dodds's in the world, but Yeah, now now I'm very distinguished or differentiated \n\n[00:01:26] Jocelyn:\nYes, Kent C Dodds. That is how I know you \n\n[00:01:31] Kent:\nWell, yeah, actually I always like to start these conversations off talking about how we met. And so Josie and I just met right now. So we were introduced by our co-friend, Joel, Joel Hooks. And Joel said, hey, you gotta talk to Josie. She's got \n\n[00:01:51] some really awesome experience. I think that she would have a lot of cool things to share with the Epic Web Dev folks. And so here we are. So Josie, why don't, You just kind of introduced yourself to me, so we're gonna pretend that didn't happen. And so that you can have a second to introduce yourself to the audience here. \n\n[00:02:09] Jocelyn:\nYeah, sure. Hi everyone. My name is Jocelyn Harper. I am currently a staff software engineer at the New York Times and tech lead of a platforms team. I have been in the industry for about 8 years now. Before the New York Times is primarily FinTech. So I worked at JP Morgan \n\n[00:02:29] Chase, Capital 1, PayPal, and then the New York Times. And it's kind of amazing and wild that I've been here this far. I'm pretty boring, actually. I was just like, get this. I'm like, I have my cat Luna, I play video games, and then I just kind of keep to myself for the most part. \n\n[00:02:50] Yeah. \n\n[00:02:51] Kent:\nAll right, what video games do you play? \n\n[00:02:54] Jocelyn:\nRight now, I'm really into first-person shooters. I feel like that's like a thing. So I've been playing a lot of Apex Legends. I played this auto chess game called Team Fight Tactics by Riot, \n\n[00:03:08] Kent:\nwho \n\n[00:03:08] Jocelyn:\nmakes League of Legends. And then I've also been playing Baldur's Gate 3. So I sank about 40 hours into that for the last 2 weeks. So yeah, those are the games that I typically play or am playing right now. \n\n[00:03:24] Kent:\nAll right, cool. Yeah, I can relate to thinking about how much time you've put into a video game. Like, oh. \n\n[00:03:32] Jocelyn:\nI know, it came up, like, you know how steam will say, like, you've spent this, and I'm like, oh my God, I spent that long playing this video game. Holy moly, but. Worth it. \n\n[00:03:41] Kent:\nYeah. You know, when it was, so when I was a kid, I was very much addicted to video games. And I would wake up at like 6 in the morning and go over to the computer and play Age of Empires. And I would do a whole campaign on like a Saturday morning. And I would do a whole campaign, it would be like a 6 hour thing. And so like you get to the end screen \n\n[00:04:01] and it gives you all the stats and in the corner it says how long you played and right below that it says start new game and you press that button. And so I would look at that and be like wow I spent 6 hours playing this. I haven't even had breakfast yet. And then I would hit start new game. \n\n[00:04:16] Jocelyn:\nRight exactly you're like oh yeah well time to go. Yeah it's definitely like just a series of you. There's no concept of time when you're starting a game that you really like. \n\n[00:04:27] Kent:\nSo yeah, my favorite is when software feels that way. Like not always do I feel like I'm sucked in like that with developing software, but when you have a task and you know what you're going to do with it, and like, and you're just cruising, that is just the best feeling ever. And then when- \n\n[00:04:47] Jocelyn:\nI feel like it's a feeling that we chase too, right? Yeah. Like we do chase that feeling as developers. \n\n[00:04:52] Kent:\nYes. Yeah. And then when you're done, you look back on it and you're like, you don't feel guilty for the amount of time that you spent in it. \n\n[00:05:00] Jocelyn:\nNot at all. Because it's passing, you got that green check or it's working, you're just like, yeah, worth it. Absolutely worth it. \n\n[00:05:08] Kent:\nYeah. Well, great. Now, I want to ask you a little bit about your work history, because I also worked at PayPal a few years ago. Yeah, so I was at PayPal. Did we overlap? Maybe. So I went into PayPal December of 2015, \n\n[00:05:28] and then I left 3 years later in like February of 2019. So did we overlap? \n\n[00:05:38] Jocelyn:\nHold on, I need to pull up a calendar. This is so funny. I think that we may have left at the exact same time. So we did overlap. Oh, now I'm going to have to think about PayPal and what I did there. What was the org? What org were you in? \n\n[00:05:54] Kent:\nSo I was in peer-to-peer. So I did cross border mostly. And then I worked with Checkout a little bit too, not a lot, but a bit there. \n\n[00:06:04] Jocelyn:\nOkay, so I was in Checkout. \n\n[00:06:07] Kent:\nOkay. \n\n[00:06:07] Jocelyn:\nYeah. When did I start? I think I started, oh my goodness. I have to look at my resume, this is so funny. I'm like, when did I exactly start? Yeah, let's see. \n\n[00:06:21] Kent:\nVery cool. Yeah, so I worked on cross border was where I started and then went to more general peer to peer. And then I started a web infra team, not the backend infra that they already had for Node, but like for the front end stuff. \n\n[00:06:42] And so that's where I developed PayPal scripts that PayPal is still using now, And PP React, the component library as well. You probably didn't use PP React. That was like 1 of the last things I did. \n\n[00:06:57] Jocelyn:\nOkay, so I actually joined August 2019. So... \n\n[00:07:02] Kent:\nOh, okay, So we did not overlap. We were close. \n\n[00:07:05] Jocelyn:\nWe were very close though. Very, very close. So I did work in checkout. So I didn't say this when I introduced myself, but I am a Java engineer by trade. But lately I've just kind of been focusing on infrastructure, DevOps, platform engineering, things like that, because those are the things that I'm really interested in. \n\n[00:07:25] Kent:\nCool. \n\n[00:07:26] Jocelyn:\nSo upon getting hired, Venmo was implementing buying and selling cryptocurrency. \n\n[00:07:33] Kent:\nOh, okay. \n\n[00:07:34] Jocelyn:\nYeah, because PayPal had just launched it and they wanted to launch it in Venmo, first quarter. So because, I guess PayPal doesn't have a lot of Java engineers, so I got pulled off of my team and pulled onto the Venmo team. So that was 1 of the first projects that I worked on when I was there. And then when that was done, I got pulled onto, \n\n[00:07:55] there was a latency issue. I, I use PayPal, but I use the web now. I don't really use, through third-party websites that much anymore. But I was pulled on to help kind of go through, again, system design. It's very funny to like client go through their code to see where they were having efficiency \n\n[00:08:16] issues and things like that. We shaved like sub 7 seconds off of the actual time to actually pull up PayPal on third party, which was really cool. \n\n[00:08:26] Kent:\nYeah, that's great. \n\n[00:08:27] Jocelyn:\nYeah, really, really cool stuff. And then other than that, just making sure that everything stayed up. So basically for people that didn't work at PayPal, Chaka essentially handles like the majority of the money that's coming through PayPal. \n\n[00:08:43] Kent:\nIt's kind of important. \n\n[00:08:44] Jocelyn:\nIt's kind of very, very important. Like the pressure, like they didn't make you feel the pressure, but just knowing like how much money it's handling every day. You're like, okay, this is kind of serious. But yeah, so essentially I was on that team and just making sure everything ran smoothly there. We were full, I was a full stack engineer on that \n\n[00:09:05] 1, but I primarily worked on Java things and on like our CI, CD, things like \n\n[00:09:10] Kent:\nthat. Yeah. Yeah. Cool, yeah. You know, It's amazing to me how much effort we put into the front end to make things fast, when a lot of the time putting that much effort into the back end to make things fast will make a much bigger impact. Right? Like you sound like you shaved a lot of time off and that was probably \n\n[00:09:31] on backend stuff. \n\n[00:09:32] Jocelyn:\nYeah, it absolutely is. And I think that looking at your APIs and what is going on, 1 of the major, major things is, repeat calls or redundant calls to things that you no longer need, or you're pulling in information from a service that you don't need, like that are \n\n[00:09:53] seconds, but I mean, those seconds do add up, so it's really important to first look at your backend before you even look at the front end for the most cases. I feel like that the front end isn't really focused on the overall performance of it. Like, yes, how fast something renders and everything, but \n\n[00:10:13] sometimes people don't realize that the front end is waiting on the information to come from the back end. And that's really where the bulk of the load is, is like, why is this taking so long? So, \n\n[00:10:23] Kent:\nyeah. 100%. Like you can cache everything and do all this nonsense to make things seem fast. But at some point, that cache is stale and you've got to update it and that you want to make fast. \n\n[00:10:36] Jocelyn:\nExactly, there's not enough caching in the world to make up for a really, really slow backend system. Not enough caching in the world, so. \n\n[00:10:45] Kent:\nYeah, 100%, I completely agree. So that's actually interesting. When I was at PayPal, it was the checkout team that was spearheading, actually, checkout spearheaded TypeScript adoption, but also they spearheaded GraphQL adoption because at PayPal, we got like thousands of services \n\n[00:11:05] that you need to integrate with and get data from. So when you were there, was GraphQL still like a big and important aspect of everything? \n\n[00:11:12] Jocelyn:\nOh yeah, absolutely. So I was actually really excited that there was TypeScript because I'm not much of a Ja- like a vanilla JavaScript enjoyer because it just makes me anxious. I like, I like, I like type structured thing, obviously as a Java engineer, but I had never worked with GraphQL before. So that was a really \n\n[00:11:32] cool part for me to learn. GraphQL is amazing. I can't say enough, great things about it, but yeah, even though like we still had that GraphQL layer, there was still just really, really old Java code that needed to be fixed, essentially, even with GraphQL. So, but \n\n[00:11:53] yeah, GraphQL was a huge proponent in Checkout, huge. And I actually really appreciate it. I feel like Checkout was very like ahead of the curve on a lot of technical implementations, which was interesting for me, especially with such a large company as PayPal. \n\n[00:12:08] Kent:\nYeah. Yeah. I think there were a couple of key people over there that were just always trying to push the envelope and make things better. So yeah, I worked with a couple of those folks. It was good times. But you're not there anymore, speaking of times. So. Yeah, so why \n\n[00:12:27] Jocelyn:\ndon't you \n\n[00:12:29] Kent:\ntell us about the work that you're doing now? \n\n[00:12:31] Jocelyn:\nSure, so the New York Times, woohoo. I am a tech lead for a platform team, so it's Care Platforms. And Care is the org that handles and builds the platforms that our care agents talk, like, use and talk to customers with. So essentially, anytime \n\n[00:12:52] you are talking to somebody through our chat or calling in, you are talking to somebody that's using the system that I am working on and I'm in charge of making sure that it never goes down. So yeah, so it's really interesting. Basically platforms and platforms. Engineering in general is like a really, \n\n[00:13:13] I want to say it's been around for like 3 years. So new, new in term of like other companies kind of catching on and using those teams. Essentially, I'm in charge of making sure that our services stay up, that they stay up to date, that we address any needs for like our other devs that are doing feature \n\n[00:13:33] work to make sure that they have the tools that they need, anything to make their lives easier in implementing things. That's what myself and my team is in charge of. So recently we actually just got done going through a, an entire quarter work worth of work, designing a new system, which was super \n\n[00:13:54] exciting because I feel like, at the companies that I worked for before, I never really had a chance to greenfield a project and design it from \n\n[00:14:02] Kent:\nthe \n\n[00:14:03] Jocelyn:\nfloor up, which is really super cool. Basically, just like a scheduling platform for a lot of different orgs and programs in the company to use, because the 1 that we're using right now, how do I put this? 1 engineer did it. So \n\n[00:14:23] it was definitely, don't blame this engineer for that at all. Somebody is just like, you need to build this and you're the only 1 that can do it. It's definitely difficult, but of course there's pitfalls in that because you're building something fast and business is on you to do it. So our job was to, \n\n[00:14:44] modernize that, with an event driven system, which was, which was, and is super cool. So we pretty much spearheaded that and yeah, now we're going to start building it, which is very exciting because when you spend 3 months on something, it's like now I can actually start coding. So. \n\n[00:15:03] Kent:\nYes. Yeah. Okay. So that is actually all really interesting. So to make sure that I understand what you, I'm guessing what you spend most of your time doing involves like DevOps work, like configuring the clusters of, you know, whatever \n\n[00:15:23] you've got running over there. And then like lots of logging and monitoring related stuff as well. But then you mentioned you also keep yourself up to date, so I'm guessing you keep track of all of the dependencies that your different projects have and keep those things up to date. Is it like \n\n[00:15:44] more high level dependency or I guess low level dependencies, like the version of Java that you're running and stuff like that, that you're focused on? \n\n[00:15:52] Jocelyn:\nIt honestly goes across the entire spectrum. It's interesting because there comes with platform engineering, especially with a team that is as new as mine. Essentially I was brought on and the team was around for maybe a couple of months before I was brought on as tech lead. So very, very new. So \n\n[00:16:12] yeah, there's the high level aspect of making sure, knowing our ecosystem in and out, realizing like the pitfalls of all the services that we have, for us right now, we are in the middle of decomming a very old, very \n\n[00:16:32] curmudgeon, let's just put it that way, system that likes to cause us a lot of trouble in terms of for our care agents. And we have a dedicated feature team that is building a whole new thing from the ground up. Our leadership decided that we should just implement and like \n\n[00:16:54] actually invest in just building this platform instead of relying on something that's not doing what we need to do, especially since a lot of the things that they, we need to update it are deprecated. Not a lot of time. Yeah. So, our job is to, and especially my job as the tech lead is to know what these pitfalls \n\n[00:17:15] are, what's going on in the systems, making sure that, the resiliency of the system and the reliability of the system is up, you know, classic DevOps up. As you said, also if it comes down to like our database needing to be updated in a version, which it was actually a ticket that we had this sprint. You know, we're the ones \n\n[00:17:35] that are doing that, while the feature team is focused on doing what they can. So yeah, I feel like we're like the watchers of the system to make sure that everything is going right. Luckily that's not something that we have to do all ourselves. We do have a great infrastructure team at the New York Times, our DV team that \n\n[00:17:55] I work really closely with in implementing things and helping with the clusters. And right now we're going through some migrations with all of our services. So it's a pretty big undertaking, but it's really cool and awesome. And I love being able to get in there and see everything. \n\n[00:18:16] Monitoring included, observability included. It's just really cool. And it's probably why I like system design so much because it kind of incorporates all of those things. \n\n[00:18:25] Kent:\nYeah, okay, so I've got a question for you. Since you're operating at a pretty big scale, so you've got an infrastructure team, a team dedicated to that. And you've got like DevOps and your platform team and all of that. So if you were to build a new product, brand new, \n\n[00:18:45] like different separate companies, your own company, whatever. Maybe you're a solo dev, maybe you've got 3 or 4 other people on the team. At what point in the development process of that product would you start including the like level of tooling and other \n\n[00:19:06] software that you're using at the times right now? \n\n[00:19:11] Jocelyn:\nOoh, that's a great question. So I think it, For me personally, I think that those things should be questioned and thought about and brought into in the system design process. I like to think you don't have to necessarily implement it right away, but you definitely need to start having those conversations about how you are going \n\n[00:19:31] to scale those things. I think that being optimistic and positive about the growth of whatever you're building is the best way forward. It's about being, instead of being reactive, being proactive in that sense, it's like, okay, when we get to that point, when we need to start doing clusters and things, should we be using Kubernetes? \n\n[00:19:52] Like it kind of even comes down to like, when you start thinking about, okay, so are we going to use AWS? Are we going to use Google Cloud Platform? Are we going to use Azure? Like all of those conversations needs to be held, during the system design process and I can't say that I've, I've ever worked for myself building anything because with me, I'm just going to code \n\n[00:20:12] and then I'll figure it out at some point, like I have those ideas. So I don't have to like do a collaboration or talk to other people. But when there's definitely other people involved, you want to have those conversations because maybe those other people aren't necessarily coding with you, but those are going to be costs later down the line that they're going to need to know, okay, so why are we investing \n\n[00:20:33] X amount of time into doing this for what reason? So it's just very, like, just to have everything laid out upfront is good. There might be a chance that you don't even need to do certain things, like certain levels of software technology. But, I feel as though when you're doing good system design, right? \n\n[00:20:54] That you need to think of all of those aspects and it's not a lot of the time, it's not just technology. It's also like the business aspect and the monetary aspects as well. And I feel like, I feel like when we're talking about system design or when we go through courses of system design, like we do like the back of the envelope kind of like calculations \n\n[00:21:14] of like, oh, it's approximately like going to cost this much, but like, no, when you're really building that, those things come into focus quickly because business is like, okay, so why are we spending this amount of money for that reason? Especially when it comes down to cutting costs. So Definitely in the beginning. \n\n[00:21:32] Kent:\nYeah, okay, so if I summarize your answer, I would say you want to make sure you're not doing anything to paint yourself in a corner, but you don't necessarily implement all of those things right from the get-go, because you might not need them ever in the future. \n\n[00:21:49] Jocelyn:\nYeah, absolutely. Yeah. And you know, like even technology is just changing all the time anyway. If you get to a point where you get to that point, whatever you were thinking about implementing in in the beginning doesn't even exist anymore. \n\n[00:22:03] Kent:\nRight. Yeah, it's like deprecated, like the thing you're decomming right now. \n\n[00:22:07] Jocelyn:\nYes, exactly. So it's just like, you know, but at least have that thought process into like, okay, why did we choose that technology? And then go to find something similar, maybe something is better that has replaced it and you just don't know. \n\n[00:22:20] Kent:\nYeah, you just have \n\n[00:22:21] Jocelyn:\nto be proactive about it. \n\n[00:22:23] Kent:\nYeah, I think that makes a lot of sense. With this Epic stack, that's the stack or a starter project that I put together that includes like all of the things you typically need in a typical app. 1 of the deliverables, I guess, of that is a series of decision documents \n\n[00:22:44] that explain why I made different decisions that I have. And it evolves too, like there was 1 decision on why we went with this email service provider and we switched to a different 1 and explained the whole process. So it's like a historical series of documents. And I think that like, especially early on when you're making those kinds \n\n[00:23:04] of decisions, that makes a lot of sense to have to, it encourages having those conversations and then it makes it easier for you to kind of think back, okay, why did we do this? Oh, that's not true anymore. So we can make a different decision now, stuff like that. \n\n[00:23:17] Jocelyn:\nYeah, I have to say, by the way, that is just genius. The decision documentation, I just love documentation anyway, and to be able to like actually physically go back and go, oh, that was the reasoning why we did this. Oh, it's kind of just like, you know, just preparing yourself for, you know, maybe you're not there that day or you're not able to \n\n[00:23:37] come to a meeting to talk about it, but at least the reasoning's there. \n\n[00:23:41] Kent:\nYeah, yeah, totally. So Josie, another thing that I wanted to ask you about, so subject change a little bit. You mentioned that it was like 8 years ago or so you went through a bootcamp, and now you're a staff level engineer, working on system design at a big \n\n[00:24:02] company, at a big scale and everything. I'm sure there are some people listening right now who are maybe in a similar situation. Maybe they're using Epic Web as kind of their bootcamp and are kind of wanting to go in a similar direction or at least have that level of success in their career. What are a couple of tips that you would give to those people as they're just getting \n\n[00:24:22] started in the industry? \n\n[00:24:24] Jocelyn:\nYeah, sure. So the very first thing I wanna say that I approve self-learning, obviously be at a bootcamp or through Ken's amazing courses, but you know, I am a huge proponent of it. Actually. I think that boot camps may have the only thing actually that boot camps have up \n\n[00:24:44] and I don't know, Twitter is a thing and I think Twitter is a great way to actually like communicate with people and to network. It's just the networking aspect for jobs. I think that's the most important part. So I was in a position with my bootcamp where I very luckily went for free because of my financial situation at the time. \n\n[00:25:05] So that was a no brainer for me to be able to do that. So I think that, when you're investing in something, realize that you're investing in yourself. And when you are doing this, you definitely have to go full throttle. For me, I was in a position where I told myself that I cannot fail, like \n\n[00:25:25] this is what I want to do. And I think the bootcamp was for 3 months And when I say that I was coding, probably we had like a computer lab we can go to. I was in there probably 70 to 90 hours a week. \n\n[00:25:39] Kent:\nWhoa. Just going out. Grinding. \n\n[00:25:42] Jocelyn:\nYeah. I know. I think that, you know, people are like, oh no, grinding, et cetera, et cetera. But granted, I was in a position where I didn't have a job. Like, I didn't have any other responsibilities other than myself. So I was able to devote that time into that. I'm definitely not telling people that have other responsibilities and like, \n\n[00:26:02] you know, like, like having balance in that sense, but that's what I had to do. And, it's very much a situation where as much work as you put in is what you get out of it. So when it came down to me getting interviews, I think I was in a really good position \n\n[00:26:22] because I had been grinding and studying all of these things. So that's the 1 thing. And then number 2 is that you never stop learning at all. So I think that there's like this disparity. Well, I don't think there is, cause usually it pops up on tech Twitter, like \n\n[00:26:42] every quarter, you know, like, Do you go to a bootcamp or do you go to a university? I personally think that there's nothing wrong with either 1 of them. It's about how much work you put in while you're doing those things. And that will get you the results that you want when you come out of those things. \n\n[00:27:03] And 1 of the things that will set you apart from anyone, it doesn't matter what their background of getting into the industry is, is knowing that the learning doesn't stop. I started as a Java engineer and I feel as though I would still be able to get jobs because Java is not going away because of just infrastructure \n\n[00:27:23] and older companies. Right. But I don't think I would be nearly as successful as I am right now if I wasn't constantly learning new things or the willingness to learn new things. And you can do that learning on the job or you can do both where I learned on the job and I also am picking up books or podcasts or constantly \n\n[00:27:43] learning. So I think that's it. It's just like, make sure that you're hungry for it, I think, in the beginning. That hunger really kind of pushes you along. \n\n[00:27:57] Kent:\nYeah. You know, I wanna speak sensitively about this, about the grinding culture. I am definitely a person, like I have a wife and almost 5 kids. Saying Almost 5 kids sounds funny. I have 4 kids and 1 on the \n\n[00:28:17] way. \n\n[00:28:17] Jocelyn:\nAnd 1 on the way. \n\n[00:28:19] Kent:\nYeah, so I very much care about work-life balance. My first 2 kids were born before I even graduated from university and started professionally. So it's always been a thing for me. And so I want to, you got to take care of the things that are most important. All of that said, I cannot \n\n[00:28:39] say don't grind or like you can make it without the grind culture or whatever, because I don't really know because I grinded hard. Like I worked my rear end off getting started. And so I kind of wish that it didn't have to be that way. And maybe like for some people it doesn't, \n\n[00:28:59] but I can't say that you can reach either 1 of our levels of success in this industry without the grind because we both did it. And so like that, you gotta put in the work. Those reps are important. \n\n[00:29:13] Jocelyn:\nYeah, yeah, I definitely think that like, as you said, work-life balance. Now that I have a job, I'm very much like I work from 10 to 5 at 05:00, my machine is closed. Right. So I get it. But yeah, when you're trying to break into the industry, I think that. I think that if we had an industry \n\n[00:29:34] where putting in the, I don't even know what would be like the acclimated amount of hours that would be like proper to be putting into like learning how to code, right? Let's just say 40, like you don't have anything else And it's like 40 hours a week, like a job or something. If that was the case, then. You \n\n[00:29:54] know, that would be something different, but I think that where we have been seeing, or at least I have been for, oh my God, it's almost 10 years. So weird. Like the last decade, what the, what, what it is, is that the people that are grinding, right, or well-connected already, like they already have their networking and \n\n[00:30:14] everything. Again, I don't want to, networking is extremely important, but also having the skill and that drive is also a part of it. But yeah, those are extremely important to not only get into the industry, but as Kent said, get to the level of success you see ourselves and like, you know, other people on other social media platforms, \n\n[00:30:34] getting to those levels. It's like we, you don't understand how much we're working or how much we're grinding behind the scenes in order to get to where we are. So, \n\n[00:30:44] Kent:\nyeah. Yeah. I it's, It's true and it's sad, but it is what it is. And I also really appreciate what you said about never stop learning new things and pivoting. Like at the time that I had joined the industry, I was doing all of the latest and everything. If I was still \n\n[00:31:04] doing that, I would not be very successful right now. Like I was doing Backbone JS and, you know, that was like latest stuff. \n\n[00:31:16] Jocelyn:\nWow, Backbone, holy smokes. Yeah. What a throwback. Yeah. For \n\n[00:31:24] Kent:\nreal. Times change, especially in the web world. I feel like maybe in, I don't really know, I'm not very well connected in other software communities, but in the web community, like things are changing constantly. And so, yeah, staying on top of all of that, it can be overwhelming, but that's part \n\n[00:31:44] of the job. I really enjoy it actually. So that's, I agree with you. \n\n[00:31:49] Jocelyn:\nYeah. I, I love learning. I actually wanted to go into art history in college. That was the thing that I wanted to do because I was just like, wow, I could just learn about this forever. Do go on about art history in my other time, but yeah, that's cool. Yeah. About software engineering that I really, really like is just \n\n[00:32:09] the, there's not a moment where you, you're not learning about some new culture. Like what's the, what is it? What is it called now? The bun? Is it bun IO? Is that what \n\n[00:32:22] Kent:\nyou're using? Yeah, yeah. Bun run time. \n\n[00:32:24] Jocelyn:\nYes. I was just like, what is this cute thing called bun? I'm not, and I'm not primarily like even, using TypeScript a lot. We do have it in our stack though. And just because I was like in the middle of designing the system, I was like, wait a minute, this sounds really cool. I'm like, I'm going to keep an eye on this to see where it goes. \n\n[00:32:44] So, it's just about being connected and, and enjoying what you do to some extent that you want to know other things because it doesn't feel like work when you're learning about other things like that if you enjoy it. \n\n[00:32:58] Kent:\nYeah, very much. Very, very true. Now, Josie, we're getting down toward the end of our time. Is there anything else that you wanted to talk about we didn't get to touch on? \n\n[00:33:11] Jocelyn:\nI wanna talk about the importance of just like, when it comes to system design, about the discovery part, because I feel like people don't touch on that much. Yeah, that's fine. Yeah, so I think that it's a really important part of getting to higher levels as an individual contributor. So \n\n[00:33:32] system design in general, like people say, yeah, you need to know the components of the system and how to scale like vertically, horizontally. Yeah. Those things, sure. But I think that there's 1 skill that, I've noticed that has taken me a lot farther is, my ability and honestly, like my excitement, like I said, I just like digging \n\n[00:33:52] into things, about being able to go through a system and being able to pinpoint fail points or to, I don't want to say quickly, but to earnestly know a system in and out and to be able to assess, because like I said earlier, there's not a lot of opportunity, within larger companies \n\n[00:34:12] to build something from the ground up. That's kind of like a unicorn in terms of just software engineering at a larger company, but you're always going to have a company that's going to have older systems and at some point it's going to come down to a refactorization or a rebuild of the system And I just want to let people \n\n[00:34:33] know that if you're the person that can go through a system and figure it out and know the ins and out of that system, that is going to take you very, very far. And also being able to lead discussion and also teach others about it as well is equally important. So, that's... \n\n[00:34:52] Kent:\nYeah, those are great skills. I think learning how to communicate the technical things to somebody who maybe has a little bit of knowledge around it, but has limited exposure and being able to effectively communicate those things, super, super valuable skill. How do you develop that skill? \n\n[00:35:12] Jocelyn:\nIt's 1 of those things that For me, it was definitely, I learned in practice at work, because, I mean, you get immediate feedback, like if you're explaining something and the person's looking at you like, I have no idea what you just said, what are you talking about? Because then you have to \n\n[00:35:32] like, okay, how can I talk about this in a way that this person will understand? But then there's also another really great way, like, it's almost like if you're studying for a system design interview or something, if you look over what you have written out plainly, it's like, okay, so this is how I would say it now, but how can I make \n\n[00:35:53] that easier to understand to somebody else without the level of technical knowledge that I have? And that's not to say like, that's not a brag or anything. That's just like true. We just have varying degrees of knowledge and it's just like, you want to share that. So yeah. \n\n[00:36:07] Kent:\nYeah, I agree. I think practice helps a ton and like when I worked at Remix on they have Remix sign back here When I was working at Remix and trying to figure out how to answer the question, like, what makes Remix so special or whatever? \n\n[00:36:27] I found that The more I did it, the easier it became. Like you just, you gotta figure out how to form those words properly. And so, but then in general, the more you practice explaining technical things, the better you get at that skill as well. So it's just a practice and \n\n[00:36:47] learning skill. \n\n[00:36:48] Jocelyn:\nDon't be afraid to look silly sometimes or sound silly sometimes. That's how you grow. \n\n[00:36:54] Kent:\nYeah, awesome. Well, Josie, this has been great. Thank you so much for all of your insights as an expert in the industry. If anybody wants to keep up with you and what you're doing, what's the best way for them to do that? \n\n[00:37:06] Jocelyn:\nYeah, sure. Definitely go ahead and follow me on Twitter slash X. I'm always gonna call it Twitter, by the way. I'm at Java, which is with 2 V's instead of a W. So J-A-V-E-I-T-C-H. Yeah, definitely. \n\n[00:37:23] Kent:\nAwesome. And you mentioned to me before we started recording that you're working on a course. You've been working on it for a while. Do you want to mention that? \n\n[00:37:31] Jocelyn:\nI am working on a system design course called Conquer System Design. I'm really passionate about it and I want other people to be passionate about it because I really do think it is a key pillar in people going from senior to staff and beyond. And so I wanna help people out. \n\n[00:37:51] If you go to my Twitter, I do have a link tree and there's a link to sign up to my newsletter there which will give you updates on the course. \n\n[00:37:58] Kent:\nSick, all right, go grab it. All right, thank you so much, Josie. We'll see you around. Goodbye, everybody. Bye."
          },
          "muxAsset": {
            "muxPlaybackId": "oCZhcmhEVFd0101P54kU2xYmgtuSGN3QoYciGrcgwA3Vs",
            "muxAssetId": "O3WLmQVjdRSSNNCeHfABM1x3KNl8efsCNg8VNOkJuhY",
            "_type": "muxAsset"
          },
          "_updatedAt": "2024-03-19T20:25:39Z",
          "_id": "WBQDSVdErPwEcA4Fd0Gutw"
        }
      },
      {
        "_type": "interview",
        "_updatedAt": "2023-10-18T14:03:34Z",
        "description": "Debbie Playwright advocate at Microsoft, shares insights on fostering a thriving community.Playwright's adaptability and versatility in testing are game changer",
        "solution": null,
        "_id": "umRzgEK3x2YA3YfFYGrovL",
        "title": "Navigating the Testing Terrain with Debbie O'Brien",
        "body": "Debbie O'Brien, a community advocate for Playwright at Microsoft, opens up about her role in fostering a community around Playwright and how the tool has evolved. The conversation with Kent offers valuable insights into Playwright's advantages, its adaptability for various testing needs, and its future prospects.\n\nThe importance of adaptability in testing frameworks is a recurring theme throughout the conversation. Debbie highlights Playwright's versatility, which allows it to be used for a wide range of testing scenarios. She also discusses the challenges of testing in complex environments, such as PayPal, and how Playwright can help overcome them.\n\nPlaywright is versatile, but it is a part of a larger ecosystem of tools. GitHub Actions and various types of tests such as end-to-end, unit, and component tests are discussed.\n\nLooking forward, Debbie shares that Microsoft's investment will make Playwright even more feature-rich and versatile. The company sees significant value in Playwright for testing their range of applications like VSCode, Bing, and Teams.\n\n## Resources\n\n- [Debbie on Twitter](https://twitter.com/debs_obrien?ref_src=twsrc%5Egoogle%7Ctwcamp%5Eserp%7Ctwgr%5Eauthor)\n- [Playwright](https://playwright.dev/)",
        "slug": "navigating-the-testing-terrain-with-debbie-obrien",
        "videoResource": {
          "_createdAt": "2023-10-17T16:28:43Z",
          "_updatedAt": "2024-03-19T20:25:47Z",
          "transcript": {
            "text": "[00:00:00] Kent:\nHey everybody, welcome. This is my friend Debbie. Say hi Debbie. \n\n[00:00:04] Debbie:\nHi everyone. \n\n[00:00:06] Kent:\nSo Debbie O'Brien is, you live in Spain, right? \n\n[00:00:10] Debbie:\nMallorca, yes. \n\n[00:00:11] Kent:\nMallorca, yes. So Debbie lives in Spain. I met Debbie in person. I think the first time we met in person was in Croatia last year, where we went swimming together in the Mediterranean, which was fun. And actually, like, you pushed me, not like physically pushed me, but like you pushed me beyond what I normally \n\n[00:00:31] would have done. Like normally when I go traveling and I'm by a big body of water, I like to jump in just to say, I have been in the Pacific Ocean or I've been, you know, wherever. And you like actually started swimming out And I'm like, Oh, okay, I guess we're gonna, we're gonna swim out there a little ways. And, and, it was actually really refreshing. It was \n\n[00:00:51] Debbie:\nso nice. \n\n[00:00:52] Kent:\nYeah, it was really great. And like that, the, conference in Croatia is called Infobip Shift and it's just really great conference. Are you going again this year? That's like coming up. \n\n[00:01:03] Debbie:\nNo, unfortunately not, but it is a great conference. And so diversity as well. \n\n[00:01:08] Kent:\nYeah, a hundred percent. I love that conference. That was my second time there. And I would like to go this year, but it's yeah, Just challenging. \n\n[00:01:16] Debbie:\nWe'll go next year and go for a swim again. \n\n[00:01:18] Kent:\nYes, yes, let's do it. Okay, so Debbie works at Microsoft on the Playwright team. So, Debbie, can you give us an intro to yourself? You can be as personal or professional as you like. \n\n[00:01:30] Debbie:\nOh, gosh. Yeah, so basically I work at Microsoft advocating for Playwright. So my job is to try and build the Playwright community, make sure that everyone out there knows how to use it, is comfortable using it, and listen to the feedback of those users and take that on board and bring it back to the engineers so they can create a better product for our users. And it's a really cool \n\n[00:01:50] job because it's open source and I've always been working in open source for the last 4 years. So to get to work with open source again, and also testing is something I've been passionate about. I've been forcing companies to do testing for many years when I worked, you know, in the agencies and stuff. So it's like so nice to kind of say, yes, come on, testing everyone. Come on, let's, let's get testing. \n\n[00:02:10] Kent:\nThat is awesome. Yeah. And you know, you've done such a marvelous job since you joined the team. I feel like Playwright has been very thoughtful of users. And so you've just done a really good job of that. I especially appreciated being involved in the new locators API. \n\n[00:02:31] That just, that changed everything for me, honestly. I was really into Cypress, and Cypress is still a great tool. There are people who even prefer it over Playwright, and that's fine, that's great. But Once the locators were added that resemble the testing library locators, then that \n\n[00:02:51] was a huge plus for me. And then you came in and made the UI mode. And I was like, I don't know why I would use Cypress anymore. Like this is just so good. So yeah, do you wanna talk about some of the process for making some of those changes? \n\n[00:03:07] Debbie:\nWell, I will say I remember in the conference in Croatia where we sat down and you said, right, okay, show me Playwright. And I watched you use it and I watched you struggle with certain things. And that was 1 of the things you struggled with, right? It was like, why can I not get testing library, these roles and things like that? So just watching how you're trying to do stuff \n\n[00:03:28] is like, oh, this is how Kent or any other user is probably trying to use Playwright. \n\n[00:03:32] Kent:\nAnd how \n\n[00:03:33] Debbie:\ncan we then, and that basically took back to the team and said, right, this is what Ken's trying to do. How can we improve on this? And then obviously the engineers come up with their magic and put things to great work, right? \n\n[00:03:45] Kent:\nYes, yes. Actually, that is a testament for conferences, right? It's like, it's only at an in-person conference do you have that type of an experience where it's like, let's sit down together and we can see each other and like body language and all of that just feels so natural. And I remember that very well too because there were a number of things \n\n[00:04:05] that you surprised me and I'm like, whoa, it can do that. Like that's very cool. \n\n[00:04:08] Debbie:\nLike the default web server, you're like installing a package and I just like, I'll go to wait, I'm gonna watch, I'll watch. And then like, Why don't you just use the config file and just uncomment? Oh my God, this is already built in. \n\n[00:04:19] Kent:\nYes, yes, yes. I really, I like that feature a lot as well. So, yeah, the folks who are going through the workshops will be using Playwright. I'm not going to be showing them how to configure Playwright because I've tried it before and configuration \n\n[00:04:39] exercises are the most boring thing I can imagine because it's literally just like, here are the docs and now configure this. The main thing is it's not that it's boring, it's that it's information that you don't use on a regular basis. \n\n[00:04:55] Debbie:\nSo it's just like, yeah. Yeah, like everything is pretty much set up for you. So we try to kind of think like, except for like the base URL that you might add in or adding the web server, everything else just works and it's just like, you know, it just works, just as a job. \n\n[00:05:07] Kent:\nYeah, yeah, precisely. So people will, when they start with the Playwright tests in the workshop, everything is configured and set up for them and they're just working in test files, which is where they're going to work on day to day. And so where we start is an unauthenticated test just to make sure that that works. \n\n[00:05:27] But we get into like going through login experience and... \n\n[00:05:32] Debbie:\nYou start with the most complicated thing. Oh my God. \n\n[00:05:34] Kent:\nYes. Yep, yep. We very early, we get into, okay, now let's test the login stuff. And then we add utilities for being logged in. So I want to talk about briefly, like what is the best way in your mind to test the logged in \n\n[00:05:54] experience? Because most of us are building, the primary number of our features are the logged in experience. And I've seen a lot of people have a little utility that is like basically their login test and they run their login test before they run the rest of their \n\n[00:06:14] logged in state tests. So can you talk a little bit about that approach and why it may not be the best? \n\n[00:06:21] Debbie:\nWell, it depends, right? Because have you used project dependencies? \n\n[00:06:25] Kent:\nOh, no, I haven't heard of this. \n\n[00:06:27] Debbie:\nI see, okay. So we have project dependencies, which basically means you can have your login test as a project, right? So this is the, this test which logs in can then be used as a, like a setup, right? So it's kind of like a global setup, but it's called, we used project dependencies. So In your config file, \n\n[00:06:47] and you do have to go into the config file, and you add in this login test. Then you basically go to the next test, which could be user profile or whatever, and the user profile will depend on the login test. That login test will run every time that user profile test runs. But maybe the, I don't know, navigation \n\n[00:07:08] test doesn't need the login. So it's not going to run that time. So you basically say which test depends on which, and you can kind of run those tests and it's really, really cool. What's in LIMO \n\n[00:07:18] Kent:\n2? Yeah, okay, so that, huh, yeah, that's very interesting. I think I still would prefer the mechanism we're doing in the workshop, so that's good. I mean, that I don't have to change everything now. But, and the reason I would prefer it is just because it feels unnecessary, unnecessary because we already have some \n\n[00:07:39] confirmation that login works and that like just adds, you know, 3 seconds to every test to go through that flow. But I can totally see that feature. \n\n[00:07:47] Debbie:\nYou can use load load storage so you can state load the state, so that means it doesn't rerun that test. It's going to save that storage. \n\n[00:07:58] Kent:\nHoly smokes, really? \n\n[00:08:00] Debbie:\nYeah, that is watching our release videos. \n\n[00:08:04] Kent:\nOh no, I just revealed my lack of engagement. Oh dear. That is very cool. So 1 of the big challenges with login in particular is, especially when I was working at PayPal, this was a big challenge. I wanted to do some login test stuff and I had no \n\n[00:08:24] idea how the auth worked at PayPal. It's this huge company, there are like 30 cookies, okay, maybe not 30, But there are like a number of cookies and I didn't know which ones were really relevant to the login and like what they even did. They always like cryptic weird stuff. And so it took me a long time to figure out. But if I had that feature, I could just say, \n\n[00:08:45] run this test and then save the state. And then that can be the starting for these others. \n\n[00:08:50] Debbie:\nExactly. And then it's quicker. And also if like your login breaks, it's not gonna run those other tests, right? Because it's, it depends on it. So those tests don't ever get run if something in your login is not working. \n\n[00:09:01] Kent:\nOh my word. I have so much other cool things that I can teach now. \n\n[00:09:05] Debbie:\nYeah. \n\n[00:09:06] Kent:\nThat is amazing. Yeah, that's such a great idea. Holy smokes. So, all right, I wanna hear about other things that you've noticed people don't know that they should. \n\n[00:09:18] Debbie:\nOkay, well, 1 I kind of learned myself the other day was sharding, which is something like, I thought was super complicated and super like, sounds scary, you know? And sharding is basically about splitting your test across multiple machines. Now, all of a sudden you've lost me. I'm like, what do you mean? But basically, my personal website, I've got \n\n[00:09:38] about 200 tests because I run it on 3 browsers. Some of them are just like testing simple things, but It takes time, it takes half an hour, which is a long time when you're trying to fix something really quickly. Then the test fails, you're like, oh my God, I got to run again. But we can use sharding on say GitHub using GitHub Actions, and it's really \n\n[00:09:58] simple to do. You can say, I want to shard that test and just say 4 shards. It's going to run, divide it by 4 basically, and I get my test down to 7 minutes instead of 30 minutes. That's a massive difference. It's easy to set up. It's just change something in the GitHub Actions file and a little bit in the configuration. \n\n[00:10:20] Again, it was in our last release video, and it's in the docs, and we'll have some blog posts and videos as well coming out soon. But that's really cool that I didn't know about, and I'm sure other users don't know about. \n\n[00:10:31] Kent:\nYeah, yeah, that is very cool. So I guess that really depends on your CI infrastructure and whether you have the machines available and how to communicate with those machines and stuff. But it sounds like you have it working with GitHub Actions. You'll have examples of how to make that work. \n\n[00:10:47] Debbie:\nYou can just go to my website and check it out. You can see all my failed attempts as well. And then you can see it. Yeah. \n\n[00:10:53] Kent:\nOh, the pain is real. I totally can feel that. Yes. That's really awesome. Okay. Yeah, that's actually a great feature. And it makes me think of something else I wanted to discuss, and that is, when is Playwright the right fix? Because 1 of the things that we're, or the right tool, because 1 of the things that we're \n\n[00:11:13] doing in the workshop is we're not just doing end-to-end tests, we're also doing low-level unit tests on function, and then we're doing component tests on a component, and then route tests on a route, and all of those are running inside of VTest. And actually we also have like API tests that are running \n\n[00:11:34] inside of V-Test as well. And so in my experience, I have found the most success using Playwright just for my end-to-end tests and then V-Test for everything else. But I know that Playwright does support component testing. So I'd like to talk a little bit about where you see \n\n[00:11:55] the different tools and what is most appropriate for what kind of test. \n\n[00:12:00] Debbie:\nI think component testing is something that's kind of still very new in a lot of people's workflow. So it's like they're still going from unit and building end-to-end tests and the component is kind of in the middle, right? And it's a really useful test, especially if you're building a component library or something that's going to be shared across multiple websites. But if you're just testing maybe 1 website, maybe \n\n[00:12:20] component test is maybe too much, maybe it's not. That's a decision you need to make within your scope of your project. We do have support for component testing. It is still like experimental. We call it because we don't feel that there's enough people using it for us to get enough feedback to be able to say this is yes exactly what you need and what you want \n\n[00:12:40] because the use is not there. We're not seeing so many people on board as much as like the end-to-end tests. We do have API testing as well, and a lot of people are using that. So it just depends, but it depends on how much of your API you want to test. Do we cover all the features that you want? I don't know. That depends \n\n[00:13:00] on what you want to test. But basically, yeah, end-to-end testing is our main focus for sure. And I think people are switching from doing less unit tests and more end-to-end tests. I think That's the biggest shift we're seeing in everything, and that's where Playwright really fits into your workflow. And if you've \n\n[00:13:20] done a unit test or testing library, you go to Playwright, you'd feel at home, right? \n\n[00:13:25] Kent:\n100%, yeah. Yeah, actually that resembles very much my personal experience as well. I'll tell people that the testing trophy, which is the shape of how I think about where you focus your test, the testing trophy is getting a little top heavy for me. So not in a bad way, like in a good way. That's just like, I'm feeling myself \n\n[00:13:46] wanting to do more end-to-end tests than I have in the past, because the tools in that realm are getting much better, which is a great thing. So to dive into the component testing a little bit more, I can tell you from my own experience, the primary reason I'm not using or teaching component testing \n\n[00:14:06] with Playwright quite yet is because it's experimental and I experimented with it. And there are a couple interesting limitations that once lifted, I think I'll be more likely to use. But the primary thing that I have noticed is that \n\n[00:14:26] it seems that Playwright is gonna be responsible for compiling my code to get it into a state where it can be tested. And yeah, yeah, it uses Vite, yep. Which is gonna be potentially different from the way that I'm building my code for production, which always kind of makes me feel funny \n\n[00:14:47] when those 2 things are going to be different. So if there is some way to get Playwright to let me be in charge of the build, \n\n[00:14:54] Debbie:\nthat's interesting. That could help. I want to render this in. Yeah. Yeah. \n\n[00:15:00] Kent:\nYeah. So, okay, there was another thing that you mentioned as you were talking that, oh, there actually, so another thing that we don't get into in the course, but would be interesting to talk about is VTest it actually has experimental in browser support using Playwright \n\n[00:15:20] and WebDriver and I think there's another that it supports. And I tried that, it didn't quite work for me yet. But yeah, Playwright is seeming to become the foundation for a lot of automation tools for automating the browser. Are there other uses of Playwright that you're seeing outside \n\n[00:15:40] of using it as it's the end to end test runner? \n\n[00:15:47] Debbie:\nI mean, there's a lot of use cases for it, for sure. Some people are using visual testing as well, right? And then some people are going into scraping, like, scraping sounds horrible, automating things, right? So there's a lot of use cases, but obviously there's a big difference, right? So previously Playwright was like a library. And when people \n\n[00:16:07] started to using it in the, you know, 3 years ago when it first came out. But because the focus has gone on the test runner, all the features are in the test runner, which means all that auto-weighting, that retryability, having less flaky tests, comes with that test runner. So those who are using the library and building upon it, they have some limitations. So it depends on what they're doing with it. And we're \n\n[00:16:27] seeing a lot of, like, you know, frameworks are building on top of others are building on top of it. But it's about really make sure you're actually using Playwright to the way Playwright should be used. That's our only concern when it comes to the integrations that are out there, because are they really showing off Playwright's coolest and best features? \n\n[00:16:45] Kent:\nYeah, yeah. Well, I definitely like using Playwright as it is. So that's good. Well, 1 of the major drawbacks of using VTest is that the like in the typical way is that it's running in node and we're trying to, and for some things like our API that we're hitting \n\n[00:17:06] for that test or for our pure functions and stuff like that, like that's fine. But as soon as you want to have a DOM for like testing some UI, that becomes a challenge because we have simulated DOMs with JS DOM or Happy DOM and they're not spec compliant entirely and \n\n[00:17:26] they miss a lot of features. And so that's why I'm very intrigued by having either, like I'm seeing both sides coming closer to each other. So V-Test is over here sitting in DOM and they're like, I kind of want to try and run in Playwright, but within V-Test. And then Playwright's over here saying, I kind of want to run your component \n\n[00:17:46] tests. Like I want to get lower down the testing trophy to cover those use cases. Which I find pretty interesting. \n\n[00:17:53] Debbie:\nYeah. I mean, if we could do everything, it would be, it would be incredible. And we, we do, we do a lot as it is. But unit tests, we don't want to do unit tests because we testers do such a great job and there's like, you know, you can't focus on absolutely everything. So I think it's like, you have to draw the line and say like, this is what we're focusing on. Root interception, right. It's something as well that we can do, which is, \n\n[00:18:13] you know, you can, you can do, Like you can do a hell of a lot. So, basically it's more about, we don't want to go down all the way, although it might look like we are. But I think it's okay to have 2 tools to test your, your website. I don't think Playwright needs to be the, you only use Playwright and then you never use anything else. I don't think it has \n\n[00:18:33] to be that way. Maybe that's the future, who knows? \n\n[00:18:36] Kent:\nYeah, yeah. I actually really appreciate that perspective, especially coming from you, that you don't have to be the 1 thing for everything. I think that a good line for Playwright to draw is we will do everything that you need to test that runs in a browser. And so for the Node stuff, \n\n[00:18:56] we can just stick with VTest. And I hope that in the future, the component testing gets even more solidified so that we can run any. So I would really like to drop JS DOM. That's what I'm saying. \n\n[00:19:09] Debbie:\nOkay. I see. I will bring that feedback back to the team and let's see in a couple of months where we're at. \n\n[00:19:14] Kent:\nOkay. Yeah. That sounds awesome. And I just love how much Microsoft is investing in Playwright to make it such a vital tool in our toolbox for testing. \n\n[00:19:25] Debbie:\nWell, we have so many apps within Microsoft that need to be tested, right? You know, Like from VS code to Bing, to everything that we're testing, everything. Teams is using it. Like, so there's so many of our products that need to be tested properly. So it makes sense for us to invest in something that Microsoft can use internally, but also that the whole \n\n[00:19:45] world can use it. Because if we just use it, we're not really getting that user feedback in a real world scenario. And it's when you do open source, you learn so much more than if you do a closed source product only related to what your company wants. \n\n[00:20:00] Kent:\nI a hundred percent agree. Yeah, that makes tons of sense. So 1 question that I get when I teach about testing is from people who are doing React Native or something like they're doing native development. My impression is that that's 1 area that Playwright has just decided we're not going to do native mobile \n\n[00:20:20] stuff. Is that correct or do you have any tools for mobile? \n\n[00:20:23] Debbie:\nI mean, I would say, well, we can test Android. It's an experimental with WebView and things like that, right? So you can test that out, but iOS is more complicated, of course. I would say like if, you know, somebody wanted to give us loads of money and give us a team that is mobile, you know, \n\n[00:20:44] based and knows their stuff and is able to invest in that, then we would happily do it. It's not that we don't want to, it's just that our team is actually really, really small. So it's really hard to do everything. And we could do everything and it would be really bad. Or we can do small amount, but make sure we do it good. And I think that's their key to success. \n\n[00:21:03] Kent:\nVery good. Yeah, that makes tons of sense. So if it runs in a browser, then it works in Playwright. And I think that's a pretty good line to draw. That's what it's for. It's for browser testing. Yeah, a hundred percent. And then of course, like there are tools within Playwright to change the viewport size. So if you wanna test the mobile \n\n[00:21:24] version \n\n[00:21:24] Debbie:\nof your site. Yeah, you can do mobile Safari and you can emulate that browser in a mobile, But it isn't an app, which is different sometimes to a mobile version. So that's, I mean, yeah, it'd be cool. Let's test mobiles. Let's test everything. But who knows future? \n\n[00:21:39] Kent:\nYeah. Just, just be super good at the browser stuff. I, myself personally, I only care about the web anyway. \n\n[00:21:45] Debbie:\nSo yeah, I don't do apps. I don't build apps. So I don't have the need to test them either. \n\n[00:21:51] Kent:\nYeah. Yeah Well, cool. Is there anything that we haven't touched? I feel like we've gone in a lot of different directions with this Is there anything else that you want to talk about with Playwright or testing in general that we haven't touched on? \n\n[00:22:05] Debbie:\nWell, I would say with Playwright, and this is going to be direct especially to you, Kent, since you didn't watch our last videos. But I would say seriously watch our release videos because we do come out with, you know, new things. And we also try and teach people something that they can do or learn from in those videos. And they're only really short eight-minute videos. But also, \n\n[00:22:25] we update every month. There's a reason why we update, because we update the browsers to make sure you're testing on the latest version of the browsers. So really, we encourage you to update your Playwright version as often as possible. Sometimes you leave it there for 6 months and it's like, but then you're not getting everything that Playwright can give you and you're also not testing on \n\n[00:22:45] the most up-to-date browsers. So definitely keep your Playwright version up to date. I think that's like key to you being and doing, like you're testing better. And then when you're filing bugs, right? Cause sometimes people file a bug, it's like, what version are you on? Yeah, Of course that doesn't work, right? You don't fix the version. We'll fix it, right? So yeah. And then also file \n\n[00:23:05] issues and feature requests. So Kent, for example, what you just said to me there, that should be an issue. And you know, because you submitted issues and they got sorted and feature requests got done. People upvote them and we work with the upvotes of those issues. So if you have something that you want done, you're frustrated because something isn't working for you, let us know. \n\n[00:23:26] We can't read minds. We value people's coming to us and telling us how we can make Playwright better. So please submit issues, book reports, feature requests and upvote them. \n\n[00:23:38] Kent:\nYeah, that's awesome, awesome tips. And I'll also add, join the Discord. \n\n[00:23:44] Debbie:\nYes, \n\n[00:23:44] Kent:\nyes. I was really happy to see the discord when that was put together. So thank \n\n[00:23:49] Debbie:\nyou I'm only gonna talk to you some discord like oh my god. We have to set up this good \n\n[00:23:56] Kent:\nYeah, a lot of places so like prisma was also on Slack and I was like, listen guys and gals, I don't like Slack, could we move over to Discord? And I think enough people told them that, that they finally moved over to Discord too, which Discord's not perfect, but it sure is nice. And \n\n[00:24:16] so I'm \n\n[00:24:17] Debbie:\nglad that we did. It was like during my hit and that we lost all our messages after like a month and stuff. And then you can find anything. And it's like, why would you delete that? It's like, come on. Whereas Discord is quite hard to keep up with because we're so active. There's so many questions. There's so many things, but people are answering the questions for us which means we don't have to unless like someone tags us and we need to jump \n\n[00:24:37] in but it's so great because everyone's helping each other so discord has been a huge success for us. \n\n[00:24:42] Kent:\nOh very good yeah so go join the discord and there's a playwright an ex account as well or twitter account. \n\n[00:24:50] Debbie:\nIs that what we call it now? \n\n[00:24:53] Kent:\nAnd then Debbie how do people keep up with you and what you're doing \n\n[00:24:57] Debbie:\nYeah, I have a website Debbie codes and if you go to there you'll find all the links to me to everywhere. And most of my blog posts might be about testing, although some could be about running and other stuff and, personal stuff. But yeah, and videos, I'm doing a lot of playwright videos at the moment and courses, but they'll be on the Playwright YouTube channel. So check that out as well. But yeah, \n\n[00:25:17] Debbie.co, it's easy. \n\n[00:25:19] Kent:\nAwesome. Cool. Well, thank you so much, Debbie. It's always a pleasure to chat with you. I enjoy our conversations and look forward to the next time we see each other. \n\n[00:25:26] Debbie:\nYes. We need to go for a swim, Kent. \n\n[00:25:30] Kent:\nBye everybody. Bye. Bye everybody. \n\n[00:25:32] Debbie:\nBye. Bye.",
            "srt": "1\n00:00:00,220 --> 00:00:03,919\nHey everybody, welcome. This is my friend Debbie. Say hi Debbie.\n\n2\n00:00:04,299 --> 00:00:05,100\nHi everyone.\n\n3\n00:00:06,220 --> 00:00:09,639\nSo Debbie O'Brien is, you live in Spain, right?\n\n4\n00:00:10,080 --> 00:00:12,759\nMallorca, yes. Mallorca, yes. So\n\n5\n00:00:13,179 --> 00:00:15,900\nDebbie lives in Spain. I met Debbie in person.\n\n6\n00:00:16,219 --> 00:00:21,840\nI think the first time we met in person was in Croatia last year, where we went swimming together in the Mediterranean,\n\n7\n00:00:22,360 --> 00:00:23,300\nwhich was fun.\n\n8\n00:00:24,520 --> 00:00:25,020\nAnd\n\n9\n00:00:25,380 --> 00:00:41,500\nactually, like, you pushed me, not like physically pushed me, but like you pushed me beyond what I normally would have done. Like normally when I go traveling and I'm by a big body of water, I like to jump in just to say, I have been in the Pacific Ocean or I've been, you know, wherever.\n\n10\n00:00:42,980 --> 00:00:52,320\nAnd you like actually started swimming out And I'm like, Oh, okay, I guess we're gonna, we're gonna swim out there a little ways. And, and, it was actually really refreshing. It was so nice.\n\n11\n00:00:52,700 --> 00:01:07,980\nYeah, it was really great. And like that, the, conference in Croatia is called Infobip Shift and it's just really great conference. Are you going again this year? That's like coming up. No, unfortunately not, but it is a great conference. And so diversity as well.\n\n12\n00:01:08,560 --> 00:01:14,780\nYeah, a hundred percent. I love that conference. That was my second time there. And I would like to go this year, but it's yeah,\n\n13\n00:01:15,140 --> 00:01:15,920\nJust challenging.\n\n14\n00:01:16,380 --> 00:01:20,140\nWe'll go next year and go for a swim again. Yes, yes, let's do it.\n\n15\n00:01:20,600 --> 00:01:27,020\nOkay, so Debbie works at Microsoft on the Playwright team. So, Debbie, can you give us an intro to yourself?\n\n16\n00:01:27,540 --> 00:01:30,320\nYou can be as personal or professional as you like.\n\n17\n00:01:30,620 --> 00:01:31,400\nOh, gosh.\n\n18\n00:01:32,420 --> 00:01:34,180\nYeah, so basically I work at Microsoft\n\n19\n00:01:34,740 --> 00:02:02,820\nadvocating for Playwright. So my job is to try and build the Playwright community, make sure that everyone out there knows how to use it, is comfortable using it, and listen to the feedback of those users and take that on board and bring it back to the engineers so they can create a better product for our users. And it's a really cool job because it's open source and I've always been working in open source for the last 4 years. So to get to work with open source again, and also testing is something I've been passionate about. I've been forcing companies to do testing for many years when I worked,\n\n20\n00:02:03,340 --> 00:02:09,940\nyou know, in the agencies and stuff. So it's like so nice to kind of say, yes, come on, testing everyone. Come on, let's, let's get testing.\n\n21\n00:02:10,639 --> 00:02:19,400\nThat is awesome. Yeah. And you know, you've done such a marvelous job since you joined the team. I feel like Playwright has been very thoughtful\n\n22\n00:02:19,760 --> 00:02:20,500\nof users.\n\n23\n00:02:21,260 --> 00:02:24,500\nAnd so you've just done a really good job of that. I especially\n\n24\n00:02:25,640 --> 00:02:26,140\nappreciated\n\n25\n00:02:26,520 --> 00:02:28,160\nbeing involved in\n\n26\n00:02:29,120 --> 00:02:30,780\nthe new locators API.\n\n27\n00:02:31,080 --> 00:02:31,820\nThat just,\n\n28\n00:02:32,540 --> 00:02:34,500\nthat changed everything for me, honestly.\n\n29\n00:02:34,840 --> 00:02:38,400\nI was really into Cypress, and Cypress is still a great tool.\n\n30\n00:02:38,760 --> 00:02:43,220\nThere are people who even prefer it over Playwright, and that's fine, that's great.\n\n31\n00:02:44,380 --> 00:02:44,880\nBut\n\n32\n00:02:45,760 --> 00:02:50,040\nOnce the locators were added that resemble the testing library locators,\n\n33\n00:02:50,640 --> 00:03:00,900\nthen that was a huge plus for me. And then you came in and made the UI mode. And I was like, I don't know why I would use Cypress anymore. Like this is just so good.\n\n34\n00:03:01,600 --> 00:03:06,140\nSo yeah, do you wanna talk about some of the process for making some of those changes?\n\n35\n00:03:07,740 --> 00:03:14,620\nWell, I will say I remember in the conference in Croatia where we sat down and you said, right, okay, show me Playwright.\n\n36\n00:03:15,140 --> 00:03:22,620\nAnd I watched you use it and I watched you struggle with certain things. And that was 1 of the things you struggled with, right? It was like, why can I not get testing library,\n\n37\n00:03:23,360 --> 00:03:44,240\nthese roles and things like that? So just watching how you're trying to do stuff is like, oh, this is how Kent or any other user is probably trying to use Playwright. And how can we then, and that basically took back to the team and said, right, this is what Ken's trying to do. How can we improve on this? And then obviously the engineers come up with their magic and put things to great work, right?\n\n38\n00:03:45,180 --> 00:04:00,520\nYes, yes. Actually, that is a testament for conferences, right? It's like, it's only at an in-person conference do you have that type of an experience where it's like, let's sit down together and we can see each other and like body language and all of that just feels so natural.\n\n39\n00:04:01,560 --> 00:04:23,420\nAnd I remember that very well too because there were a number of things that you surprised me and I'm like, whoa, it can do that. Like that's very cool. Like the default web server, you're like installing a package and I just like, I'll go to wait, I'm gonna watch, I'll watch. And then like, Why don't you just use the config file and just uncomment? Oh my God, this is already built in. Yes, yes, yes. I really, I like that feature a lot as well.\n\n40\n00:04:24,020 --> 00:04:26,920\nSo, yeah, the folks who are going through the workshops\n\n41\n00:04:28,100 --> 00:04:29,460\nwill be using\n\n42\n00:04:30,240 --> 00:04:33,220\nPlaywright. I'm not going to be showing them\n\n43\n00:04:34,060 --> 00:04:35,940\nhow to configure Playwright because\n\n44\n00:04:36,500 --> 00:04:37,760\nI've tried it before\n\n45\n00:04:38,520 --> 00:04:39,260\nand configuration\n\n46\n00:04:39,760 --> 00:04:42,180\nexercises are the most boring thing I can imagine\n\n47\n00:04:42,740 --> 00:04:47,140\nbecause it's literally just like, here are the docs and now configure this.\n\n48\n00:04:49,160 --> 00:04:49,660\nThe\n\n49\n00:04:50,080 --> 00:04:55,340\nmain thing is it's not that it's boring, it's that it's information that you don't use on a regular basis.\n\n50\n00:04:55,680 --> 00:05:08,660\nSo it's just like, yeah. Yeah, like everything is pretty much set up for you. So we try to kind of think like, except for like the base URL that you might add in or adding the web server, everything else just works and it's just like, you know, it just works, just as a job. Yeah, yeah, precisely.\n\n51\n00:05:09,140 --> 00:05:12,320\nSo people will, when they start with the Playwright\n\n52\n00:05:12,840 --> 00:05:14,080\ntests in the workshop,\n\n53\n00:05:14,600 --> 00:05:20,340\neverything is configured and set up for them and they're just working in test files, which is where they're going to work on day to day.\n\n54\n00:05:20,980 --> 00:05:21,680\nAnd so\n\n55\n00:05:22,540 --> 00:05:24,560\nwhere we start is an unauthenticated\n\n56\n00:05:24,900 --> 00:05:25,860\ntest just to\n\n57\n00:05:26,600 --> 00:05:31,600\nmake sure that that works. But we get into like going through login experience and...\n\n58\n00:05:32,040 --> 00:05:34,960\nYou start with the most complicated thing. Oh my God. Yes.\n\n59\n00:05:35,540 --> 00:05:36,240\nYep, yep.\n\n60\n00:05:36,980 --> 00:05:42,320\nWe very early, we get into, okay, now let's test the login stuff. And then we add utilities\n\n61\n00:05:43,520 --> 00:05:46,600\nfor being logged in. So I want to talk about briefly,\n\n62\n00:05:48,140 --> 00:05:48,640\nlike\n\n63\n00:05:50,140 --> 00:05:50,780\nwhat is\n\n64\n00:05:51,280 --> 00:05:56,340\nthe best way in your mind to test the logged in experience? Because most of us are building,\n\n65\n00:05:56,660 --> 00:06:00,060\nthe primary number of our features are the logged in experience.\n\n66\n00:06:00,660 --> 00:06:02,920\nAnd I've seen a lot of people\n\n67\n00:06:04,020 --> 00:06:07,860\nhave a little utility that is like basically\n\n68\n00:06:08,560 --> 00:06:13,720\ntheir login test and they run their login test before they run the rest of their\n\n69\n00:06:14,760 --> 00:06:20,660\nlogged in state tests. So can you talk a little bit about that approach and why it may not be the best?\n\n70\n00:06:21,920 --> 00:06:24,860\nWell, it depends, right? Because have you used project dependencies?\n\n71\n00:06:25,760 --> 00:06:33,300\nOh, no, I haven't heard of this. I see, okay. So we have project dependencies, which basically means you can have your login test as\n\n72\n00:06:34,020 --> 00:06:35,860\na project, right? So this is the,\n\n73\n00:06:36,940 --> 00:06:58,760\nthis test which logs in can then be used as a, like a setup, right? So it's kind of like a global setup, but it's called, we used project dependencies. So In your config file, and you do have to go into the config file, and you add in this login test. Then you basically go to the next test, which could be user profile or whatever, and the user profile will depend\n\n74\n00:06:59,380 --> 00:07:00,600\non the login test.\n\n75\n00:07:01,640 --> 00:07:18,980\nThat login test will run every time that user profile test runs. But maybe the, I don't know, navigation test doesn't need the login. So it's not going to run that time. So you basically say which test depends on which, and you can kind of run those tests and it's really, really cool. What's in LIMO 2?\n\n76\n00:07:19,600 --> 00:07:27,380\nYeah, okay, so that, huh, yeah, that's very interesting. I think I still would prefer the mechanism we're doing in the workshop, so that's good.\n\n77\n00:07:27,700 --> 00:07:30,640\nI mean, that I don't have to change everything now. But,\n\n78\n00:07:31,220 --> 00:07:34,300\nand the reason I would prefer it is just because it feels\n\n79\n00:07:34,920 --> 00:07:35,420\nunnecessary,\n\n80\n00:07:36,140 --> 00:07:54,780\nunnecessary because we already have some confirmation that login works and that like just adds, you know, 3 seconds to every test to go through that flow. But I can totally see that feature. You can use load load storage so you can state load the state, so that means it doesn't rerun that test. It's going to save that storage.\n\n81\n00:07:58,420 --> 00:07:59,780\nHoly smokes, really?\n\n82\n00:08:00,140 --> 00:08:00,640\nYeah,\n\n83\n00:08:01,020 --> 00:08:02,880\nthat is watching our release videos.\n\n84\n00:08:04,860 --> 00:08:06,520\nOh no, I just revealed\n\n85\n00:08:06,960 --> 00:08:09,220\nmy lack of engagement. Oh dear.\n\n86\n00:08:10,680 --> 00:08:13,920\nThat is very cool. So 1 of the big challenges\n\n87\n00:08:15,300 --> 00:08:16,780\nwith login in particular\n\n88\n00:08:17,360 --> 00:08:17,860\nis,\n\n89\n00:08:18,660 --> 00:08:19,160\nespecially\n\n90\n00:08:19,660 --> 00:08:35,419\nwhen I was working at PayPal, this was a big challenge. I wanted to do some login test stuff and I had no idea how the auth worked at PayPal. It's this huge company, there are like 30 cookies, okay, maybe not 30, But there are like a number of cookies and I didn't know which ones were really relevant to the login\n\n91\n00:08:35,860 --> 00:08:52,700\nand like what they even did. They always like cryptic weird stuff. And so it took me a long time to figure out. But if I had that feature, I could just say, run this test and then save the state. And then that can be the starting for these others. Exactly. And then it's quicker. And also\n\n92\n00:08:53,100 --> 00:09:10,380\nif like your login breaks, it's not gonna run those other tests, right? Because it's, it depends on it. So those tests don't ever get run if something in your login is not working. Oh my word. I have so much other cool things that I can teach now. Yeah. That is amazing. Yeah, that's such a great idea. Holy smokes. So,\n\n93\n00:09:10,900 --> 00:09:15,040\nall right, I wanna hear about other things that you've noticed people don't know\n\n94\n00:09:15,780 --> 00:09:16,740\nthat they should.\n\n95\n00:09:18,420 --> 00:09:23,820\nOkay, well, 1 I kind of learned myself the other day was sharding, which is something like,\n\n96\n00:09:24,180 --> 00:09:36,240\nI thought was super complicated and super like, sounds scary, you know? And sharding is basically about splitting your test across multiple machines. Now, all of a sudden you've lost me. I'm like, what do you mean? But basically,\n\n97\n00:09:36,600 --> 00:09:41,640\nmy personal website, I've got about 200 tests because I run it on 3 browsers.\n\n98\n00:09:42,100 --> 00:09:47,660\nSome of them are just like testing simple things, but It takes time, it takes half an hour, which is\n\n99\n00:09:48,100 --> 00:10:04,080\na long time when you're trying to fix something really quickly. Then the test fails, you're like, oh my God, I got to run again. But we can use sharding on say GitHub using GitHub Actions, and it's really simple to do. You can say, I want to shard that test and just say 4 shards. It's going to run,\n\n100\n00:10:04,840 --> 00:10:11,640\ndivide it by 4 basically, and I get my test down to 7 minutes instead of 30 minutes. That's a massive difference.\n\n101\n00:10:13,260 --> 00:10:18,460\nIt's easy to set up. It's just change something in the GitHub Actions file and a little bit in the configuration.\n\n102\n00:10:20,140 --> 00:10:22,180\nAgain, it was in our last release video,\n\n103\n00:10:22,640 --> 00:10:34,020\nand it's in the docs, and we'll have some blog posts and videos as well coming out soon. But that's really cool that I didn't know about, and I'm sure other users don't know about. Yeah, yeah, that is very cool. So\n\n104\n00:10:34,540 --> 00:10:37,780\nI guess that really depends on your CI infrastructure\n\n105\n00:10:38,160 --> 00:10:52,220\nand whether you have the machines available and how to communicate with those machines and stuff. But it sounds like you have it working with GitHub Actions. You'll have examples of how to make that work. You can just go to my website and check it out. You can see all my failed attempts as well. And then you can see it.\n\n106\n00:10:52,900 --> 00:10:57,600\nYeah. Oh, the pain is real. I totally can feel that. Yes.\n\n107\n00:10:58,260 --> 00:10:59,620\nThat's really awesome.\n\n108\n00:11:00,420 --> 00:11:04,580\nOkay. Yeah, that's actually a great feature. And it makes me think of\n\n109\n00:11:05,140 --> 00:11:14,760\nsomething else I wanted to discuss, and that is, when is Playwright the right fix? Because 1 of the things that we're, or the right tool, because 1 of the things that we're doing in the workshop\n\n110\n00:11:15,100 --> 00:11:27,680\nis we're not just doing end-to-end tests, we're also doing low-level unit tests on function, and then we're doing component tests on a component, and then route tests on a route, and all of those are running inside of VTest.\n\n111\n00:11:29,380 --> 00:11:33,100\nAnd actually we also have like API tests that are running\n\n112\n00:11:34,020 --> 00:11:36,300\ninside of V-Test as well. And so\n\n113\n00:11:36,940 --> 00:11:37,860\nin my experience,\n\n114\n00:11:38,440 --> 00:11:40,440\nI have found the most success\n\n115\n00:11:41,260 --> 00:11:43,920\nusing Playwright just for my end-to-end tests\n\n116\n00:11:44,440 --> 00:11:53,500\nand then V-Test for everything else. But I know that Playwright does support component testing. So I'd like to talk a little bit about where you see\n\n117\n00:11:55,760 --> 00:11:59,660\nthe different tools and what is most appropriate for what kind of test.\n\n118\n00:12:00,180 --> 00:12:11,460\nI think component testing is something that's kind of still very new in a lot of people's workflow. So it's like they're still going from unit and building end-to-end tests and the component is kind of in the middle, right? And it's a really useful\n\n119\n00:12:11,780 --> 00:12:16,720\ntest, especially if you're building a component library or something that's going to be shared across multiple websites.\n\n120\n00:12:17,380 --> 00:12:26,300\nBut if you're just testing maybe 1 website, maybe component test is maybe too much, maybe it's not. That's a decision you need to make within your scope of your project.\n\n121\n00:12:27,340 --> 00:12:37,620\nWe do have support for component testing. It is still like experimental. We call it because we don't feel that there's enough people using it for us to get enough feedback to be able to say this\n\n122\n00:12:38,000 --> 00:12:46,020\nis yes exactly what you need and what you want because the use is not there. We're not seeing so many people on board as much as like the end-to-end tests.\n\n123\n00:12:47,540 --> 00:12:51,180\nWe do have API testing as well, and a lot of people are using that.\n\n124\n00:12:52,440 --> 00:13:00,040\nSo it just depends, but it depends on how much of your API you want to test. Do we cover all the features that you want? I don't know. That depends\n\n125\n00:13:00,480 --> 00:13:04,940\non what you want to test. But basically, yeah, end-to-end testing is\n\n126\n00:13:06,040 --> 00:13:07,620\nour main focus for sure.\n\n127\n00:13:09,260 --> 00:13:09,760\nAnd\n\n128\n00:13:10,320 --> 00:13:19,340\nI think people are switching from doing less unit tests and more end-to-end tests. I think That's the biggest shift we're seeing in everything, and that's where Playwright really fits into your workflow.\n\n129\n00:13:20,060 --> 00:13:23,040\nAnd if you've done a unit test or testing library, you go to Playwright,\n\n130\n00:13:23,520 --> 00:13:24,940\nyou'd feel at home, right?\n\n131\n00:13:25,520 --> 00:13:31,080\n100%, yeah. Yeah, actually that resembles very much my personal experience as well.\n\n132\n00:13:31,780 --> 00:13:49,860\nI'll tell people that the testing trophy, which is the shape of how I think about where you focus your test, the testing trophy is getting a little top heavy for me. So not in a bad way, like in a good way. That's just like, I'm feeling myself wanting to do more end-to-end tests than I have in the past, because the tools\n\n133\n00:13:50,200 --> 00:13:54,040\nin that realm are getting much better, which is a great thing.\n\n134\n00:13:55,080 --> 00:13:55,580\nSo\n\n135\n00:13:56,140 --> 00:13:58,720\nto dive into the component testing a little bit more,\n\n136\n00:13:59,380 --> 00:14:10,080\nI can tell you from my own experience, the primary reason I'm not using or teaching component testing with Playwright quite yet is because it's experimental and\n\n137\n00:14:10,560 --> 00:14:14,580\nI experimented with it. And there are a couple interesting limitations\n\n138\n00:14:15,060 --> 00:14:16,880\nthat once lifted, I think\n\n139\n00:14:18,180 --> 00:14:21,100\nI'll be more likely to use. But\n\n140\n00:14:22,280 --> 00:14:22,940\nthe primary\n\n141\n00:14:23,300 --> 00:14:25,640\nthing that I have noticed is that\n\n142\n00:14:26,880 --> 00:14:28,200\nit seems that\n\n143\n00:14:28,540 --> 00:14:31,820\nPlaywright is gonna be responsible for compiling my code\n\n144\n00:14:32,260 --> 00:14:34,780\nto get it into a state where it can be tested.\n\n145\n00:14:35,220 --> 00:14:35,720\nAnd\n\n146\n00:14:36,680 --> 00:14:39,660\nyeah, yeah, it uses Vite, yep. Which is gonna be\n\n147\n00:14:40,080 --> 00:14:46,580\npotentially different from the way that I'm building my code for production, which always kind of makes me feel funny\n\n148\n00:14:47,540 --> 00:14:57,840\nwhen those 2 things are going to be different. So if there is some way to get Playwright to let me be in charge of the build, that's interesting. That could help. I want to render this in. Yeah.\n\n149\n00:14:59,160 --> 00:14:59,660\nYeah.\n\n150\n00:15:00,600 --> 00:15:01,500\nYeah. So,\n\n151\n00:15:02,380 --> 00:15:04,580\nokay, there was another thing that you mentioned\n\n152\n00:15:05,060 --> 00:15:10,140\nas you were talking that, oh, there actually, so another thing that we don't get into in\n\n153\n00:15:10,680 --> 00:15:11,820\nthe course, but\n\n154\n00:15:12,280 --> 00:15:15,200\nwould be interesting to talk about is VTest\n\n155\n00:15:15,820 --> 00:15:17,200\nit actually has experimental\n\n156\n00:15:17,560 --> 00:15:18,280\nin browser\n\n157\n00:15:18,740 --> 00:15:19,240\nsupport\n\n158\n00:15:19,560 --> 00:15:22,700\nusing Playwright and WebDriver and I think there's another\n\n159\n00:15:23,940 --> 00:15:26,980\nthat it supports. And I tried that, it didn't quite work for me yet.\n\n160\n00:15:27,360 --> 00:15:32,780\nBut yeah, Playwright is seeming to become the foundation for a lot of\n\n161\n00:15:33,480 --> 00:15:33,980\nautomation\n\n162\n00:15:34,300 --> 00:15:35,340\ntools for\n\n163\n00:15:36,200 --> 00:15:41,140\nautomating the browser. Are there other uses of Playwright that you're seeing outside of\n\n164\n00:15:41,980 --> 00:15:44,840\nusing it as it's the end to end test runner?\n\n165\n00:15:47,800 --> 00:15:57,540\nI mean, there's a lot of use cases for it, for sure. Some people are using visual testing as well, right? And then some people are going into scraping, like, scraping sounds horrible, automating\n\n166\n00:15:58,320 --> 00:15:59,600\nthings, right?\n\n167\n00:16:00,060 --> 00:16:17,860\nSo there's a lot of use cases, but obviously there's a big difference, right? So previously Playwright was like a library. And when people started to using it in the, you know, 3 years ago when it first came out. But because the focus has gone on the test runner, all the features are in the test runner, which means all that auto-weighting, that retryability,\n\n168\n00:16:18,760 --> 00:16:24,520\nhaving less flaky tests, comes with that test runner. So those who are using the library and building upon it,\n\n169\n00:16:24,940 --> 00:16:38,980\nthey have some limitations. So it depends on what they're doing with it. And we're seeing a lot of, like, you know, frameworks are building on top of others are building on top of it. But it's about really make sure you're actually using Playwright to the way Playwright should be used. That's our only concern when it comes to\n\n170\n00:16:39,520 --> 00:16:44,660\nthe integrations that are out there, because are they really showing off Playwright's coolest and best features?\n\n171\n00:16:45,160 --> 00:16:49,620\nYeah, yeah. Well, I definitely like using Playwright as it is.\n\n172\n00:16:51,000 --> 00:16:54,980\nSo that's good. Well, 1 of the major drawbacks of using VTest\n\n173\n00:16:55,680 --> 00:16:56,820\nis that the\n\n174\n00:16:57,340 --> 00:17:02,260\nlike in the typical way is that it's running in node and we're trying to,\n\n175\n00:17:02,720 --> 00:17:05,619\nand for some things like our API that we're hitting\n\n176\n00:17:06,020 --> 00:17:08,040\nfor that test or for our\n\n177\n00:17:08,359 --> 00:17:11,460\npure functions and stuff like that, like that's fine.\n\n178\n00:17:11,920 --> 00:17:14,240\nBut as soon as you want to have a DOM\n\n179\n00:17:14,640 --> 00:17:15,140\nfor\n\n180\n00:17:16,359 --> 00:17:17,720\nlike testing some UI,\n\n181\n00:17:18,819 --> 00:17:23,500\nthat becomes a challenge because we have simulated DOMs with JS DOM or Happy DOM\n\n182\n00:17:23,800 --> 00:17:27,440\nand they're not spec compliant entirely and they miss a lot of features.\n\n183\n00:17:28,460 --> 00:17:32,340\nAnd so that's why I'm very intrigued by having\n\n184\n00:17:33,580 --> 00:17:34,080\neither,\n\n185\n00:17:34,660 --> 00:17:50,580\nlike I'm seeing both sides coming closer to each other. So V-Test is over here sitting in DOM and they're like, I kind of want to try and run in Playwright, but within V-Test. And then Playwright's over here saying, I kind of want to run your component tests. Like I want to get lower down the testing trophy to cover those use cases.\n\n186\n00:17:51,220 --> 00:17:52,700\nWhich I find pretty interesting.\n\n187\n00:17:53,440 --> 00:17:58,680\nYeah. I mean, if we could do everything, it would be, it would be incredible. And we, we do, we do a lot as it is.\n\n188\n00:17:59,020 --> 00:18:09,620\nBut unit tests, we don't want to do unit tests because we testers do such a great job and there's like, you know, you can't focus on absolutely everything. So I think it's like, you have to draw the line and say like, this is what we're focusing on.\n\n189\n00:18:10,760 --> 00:18:17,120\nRoot interception, right. It's something as well that we can do, which is, you know, you can, you can do, Like you can do a hell of a lot. So,\n\n190\n00:18:18,660 --> 00:18:20,280\nbasically it's more about,\n\n191\n00:18:20,840 --> 00:18:24,020\nwe don't want to go down all the way, although it might look like we are.\n\n192\n00:18:24,440 --> 00:18:36,420\nBut I think it's okay to have 2 tools to test your, your website. I don't think Playwright needs to be the, you only use Playwright and then you never use anything else. I don't think it has to be that way. Maybe that's the future, who knows?\n\n193\n00:18:36,760 --> 00:18:39,500\nYeah, yeah. I actually really appreciate that perspective,\n\n194\n00:18:40,080 --> 00:18:41,500\nespecially coming from you,\n\n195\n00:18:42,740 --> 00:18:45,520\nthat you don't have to be the 1 thing for everything.\n\n196\n00:18:46,240 --> 00:18:47,400\nI think that\n\n197\n00:18:48,020 --> 00:18:53,980\na good line for Playwright to draw is we will do everything that you need to test that runs in a browser.\n\n198\n00:18:55,520 --> 00:18:58,400\nAnd so for the Node stuff, we can just stick with VTest.\n\n199\n00:18:58,840 --> 00:19:02,460\nAnd I hope that in the future, the component testing gets\n\n200\n00:19:03,000 --> 00:19:04,100\neven more solidified\n\n201\n00:19:04,440 --> 00:19:09,640\nso that we can run any. So I would really like to drop JS DOM. That's what I'm saying. Okay.\n\n202\n00:19:10,080 --> 00:19:16,580\nI see. I will bring that feedback back to the team and let's see in a couple of months where we're at. Okay. Yeah. That sounds awesome.\n\n203\n00:19:17,220 --> 00:19:34,660\nAnd I just love how much Microsoft is investing in Playwright to make it such a vital tool in our toolbox for testing. Well, we have so many apps within Microsoft that need to be tested, right? You know, Like from VS code to Bing, to everything that we're testing, everything.\n\n204\n00:19:35,140 --> 00:19:59,620\nTeams is using it. Like, so there's so many of our products that need to be tested properly. So it makes sense for us to invest in something that Microsoft can use internally, but also that the whole world can use it. Because if we just use it, we're not really getting that user feedback in a real world scenario. And it's when you do open source, you learn so much more than if you do a closed source product only related to what your company wants.\n\n205\n00:20:00,120 --> 00:20:11,340\nI a hundred percent agree. Yeah, that makes tons of sense. So 1 question that I get when I teach about testing is from people who are doing React Native or something like they're doing native development.\n\n206\n00:20:13,080 --> 00:20:18,500\nMy impression is that that's 1 area that Playwright has just decided we're not going to do native\n\n207\n00:20:19,540 --> 00:20:24,420\nmobile stuff. Is that correct or do you have any tools for mobile? I mean,\n\n208\n00:20:24,800 --> 00:20:27,460\nI would say, well, we can test Android.\n\n209\n00:20:28,320 --> 00:20:32,940\nIt's an experimental with WebView and things like that, right? So you can test that out, but iOS\n\n210\n00:20:33,740 --> 00:20:35,460\nis more complicated, of course.\n\n211\n00:20:36,140 --> 00:21:03,300\nI would say like if, you know, somebody wanted to give us loads of money and give us a team that is mobile, you know, based and knows their stuff and is able to invest in that, then we would happily do it. It's not that we don't want to, it's just that our team is actually really, really small. So it's really hard to do everything. And we could do everything and it would be really bad. Or we can do small amount, but make sure we do it good. And I think that's their key to success.\n\n212\n00:21:03,840 --> 00:21:10,220\nVery good. Yeah, that makes tons of sense. So if it runs in a browser, then it works in Playwright. And I think that's a pretty\n\n213\n00:21:10,520 --> 00:21:13,740\ngood line to draw. That's what it's for. It's for browser testing.\n\n214\n00:21:14,040 --> 00:21:15,040\nYeah, a hundred percent.\n\n215\n00:21:16,780 --> 00:21:23,160\nAnd then of course, like there are tools within Playwright to change the viewport size. So if you wanna test the mobile\n\n216\n00:21:24,060 --> 00:21:25,580\nversion of your site.\n\n217\n00:21:25,900 --> 00:21:34,200\nYeah, you can do mobile Safari and you can emulate that browser in a mobile, But it isn't an app, which is different sometimes to a mobile version. So that's,\n\n218\n00:21:34,900 --> 00:21:38,400\nI mean, yeah, it'd be cool. Let's test mobiles. Let's test everything. But\n\n219\n00:21:38,860 --> 00:21:52,000\nwho knows future? Yeah. Just, just be super good at the browser stuff. I, myself personally, I only care about the web anyway. So yeah, I don't do apps. I don't build apps. So I don't have the need to test them either. Yeah. Yeah\n\n220\n00:21:52,640 --> 00:22:04,660\nWell, cool. Is there anything that we haven't touched? I feel like we've gone in a lot of different directions with this Is there anything else that you want to talk about with Playwright or testing in general that we haven't touched on?\n\n221\n00:22:05,240 --> 00:22:10,520\nWell, I would say with Playwright, and this is going to be direct especially to you, Kent, since you didn't watch our last videos.\n\n222\n00:22:11,880 --> 00:22:18,660\nBut I would say seriously watch our release videos because we do come out with, you know, new things. And we also try and teach people something\n\n223\n00:22:20,080 --> 00:22:29,280\nthat they can do or learn from in those videos. And they're only really short eight-minute videos. But also, we update every month. There's a reason why we update, because we update the browsers\n\n224\n00:22:29,640 --> 00:22:33,060\nto make sure you're testing on the latest version of the browsers.\n\n225\n00:22:33,460 --> 00:22:37,320\nSo really, we encourage you to update your Playwright version\n\n226\n00:22:37,640 --> 00:22:38,800\nas often as possible.\n\n227\n00:22:39,180 --> 00:22:48,000\nSometimes you leave it there for 6 months and it's like, but then you're not getting everything that Playwright can give you and you're also not testing on the most up-to-date browsers. So definitely\n\n228\n00:22:48,960 --> 00:22:53,760\nkeep your Playwright version up to date. I think that's like key to you being and doing,\n\n229\n00:22:54,320 --> 00:23:04,020\nlike you're testing better. And then when you're filing bugs, right? Cause sometimes people file a bug, it's like, what version are you on? Yeah, Of course that doesn't work, right? You don't fix the version. We'll fix it, right?\n\n230\n00:23:04,340 --> 00:23:06,260\nSo yeah. And then also file issues\n\n231\n00:23:06,820 --> 00:23:07,860\nand feature requests.\n\n232\n00:23:08,160 --> 00:23:16,560\nSo Kent, for example, what you just said to me there, that should be an issue. And you know, because you submitted issues and they got sorted and feature requests got done.\n\n233\n00:23:16,980 --> 00:23:32,940\nPeople upvote them and we work with the upvotes of those issues. So if you have something that you want done, you're frustrated because something isn't working for you, let us know. We can't read minds. We value people's coming to us and telling us how we can make Playwright better. So please\n\n234\n00:23:33,420 --> 00:23:35,180\nsubmit issues, book reports,\n\n235\n00:23:35,860 --> 00:23:37,740\nfeature requests and upvote them.\n\n236\n00:23:38,400 --> 00:23:42,540\nYeah, that's awesome, awesome tips. And I'll also add,\n\n237\n00:23:42,980 --> 00:23:43,840\njoin the Discord.\n\n238\n00:23:44,380 --> 00:23:49,780\nYes, yes. I was really happy to see the discord when that was put together. So thank you\n\n239\n00:23:51,340 --> 00:23:54,840\nI'm only gonna talk to you some discord like oh my god. We have to set up this good\n\n240\n00:23:56,680 --> 00:23:57,180\nYeah,\n\n241\n00:23:58,120 --> 00:24:03,540\na lot of places so like prisma was also on Slack and I was like, listen guys\n\n242\n00:24:04,240 --> 00:24:04,960\nand gals,\n\n243\n00:24:06,660 --> 00:24:07,740\nI don't like Slack,\n\n244\n00:24:08,140 --> 00:24:32,300\ncould we move over to Discord? And I think enough people told them that, that they finally moved over to Discord too, which Discord's not perfect, but it sure is nice. And so I'm glad that we did. It was like during my hit and that we lost all our messages after like a month and stuff. And then you can find anything. And it's like, why would you delete that? It's like, come on. Whereas Discord is quite hard to keep up with because we're so active. There's so many questions. There's so many things, but people are answering\n\n245\n00:24:33,100 --> 00:24:46,520\nthe questions for us which means we don't have to unless like someone tags us and we need to jump in but it's so great because everyone's helping each other so discord has been a huge success for us. Oh very good yeah so go join the discord and there's a playwright\n\n246\n00:24:47,240 --> 00:24:48,380\nan ex account\n\n247\n00:24:49,140 --> 00:24:51,840\nas well or twitter account. Is that what we call it now?\n\n248\n00:24:53,620 --> 00:24:57,180\nAnd then Debbie how do people keep up with you and what you're doing\n\n249\n00:24:57,720 --> 00:25:08,220\nYeah, I have a website Debbie codes and if you go to there you'll find all the links to me to everywhere. And most of my blog posts might be about testing, although some could be about running and other stuff and,\n\n250\n00:25:08,720 --> 00:25:09,660\npersonal stuff.\n\n251\n00:25:10,160 --> 00:25:19,420\nBut yeah, and videos, I'm doing a lot of playwright videos at the moment and courses, but they'll be on the Playwright YouTube channel. So check that out as well. But yeah, Debbie.co, it's easy.\n\n252\n00:25:19,820 --> 00:25:20,320\nAwesome.\n\n253\n00:25:20,840 --> 00:25:28,920\nCool. Well, thank you so much, Debbie. It's always a pleasure to chat with you. I enjoy our conversations and look forward to the next time we see each other. Yes. We need to go for a swim, Kent.\n\n254\n00:25:30,580 --> 00:25:31,400\nBye everybody. Bye. Bye everybody.\n\n255\n00:25:32,100 --> 00:25:32,850\nBye. Bye."
          },
          "_rev": "WsAmd18YA1frbQaWBZppsY",
          "muxAsset": {
            "muxAssetId": "85jy6l9NFFLye1PhyG9dUBncaboqcVmnTg02ctTaPVow",
            "_type": "muxAsset",
            "muxPlaybackId": "dUR02rZlEGTtz902Xs4015a5tzAddoJlA01eGuLnGH00rRb4"
          },
          "_id": "NS5Go30oWcGEvHRq8lWNhr",
          "title": "Debbie O'Brein.mp4",
          "state": "ready",
          "originalMediaUrl": "https://egghead-video-uploads.s3.amazonaws.com/epic-web/interviews/Debbie+O%27Brein.mp4",
          "duration": 1533.166667,
          "_type": "videoResource"
        }
      },
      {
        "solution": null,
        "title": "Exploring the Front-End Ecosystem with Mark Dalgleish",
        "_type": "interview",
        "_updatedAt": "2023-10-18T16:59:54Z",
        "description": "Mark Dalgleish CSS Modules co-creator, delves into CSS progress, React and design systems. Balancing flexibility and standardization in managing design systems\n",
        "body": "Mark Dalgleish, co-creator of CSS Modules, explores the evolving landscape of CSS, React, and design systems. Mark currently contributes to Shopify's work on Remix.\n\nTracing his foray into front-end development back to CSS modules, Mark talks about transitioning to CSS-in-JS. This shift was fueled by the demands of a more componentized approach, especially within the React and design systems frameworks.\n\nThe dialogue shifts to the intricacies of managing a design system. A key tension emerges between the need for flexibility and the imperative for standardization.\n\nDrawing on their shared experience at Shopify, the speakers delve into their respective encounters with Remix. They suggest that the platform's future seems to be pivoting towards enabling users to roll out their own features, especially through server components.\n\nAs the discussion winds down, both speakers agree that constraints often serve a constructive role. These limitations push developers towards making informed decisions and open up pathways for innovative solutions.\n\n## Resources\n\n- [Mark Dalgleish on Twitter](https://twitter.com/markdalgleish)",
        "slug": "exploring-the-front-end-ecosystem-with-mark-dalgleish",
        "videoResource": {
          "title": "Mark Dalgleish.mp4",
          "_updatedAt": "2024-03-19T20:25:37Z",
          "duration": 2264.033333,
          "_rev": "6LaeqP6n94P8FD3sVhYJJt",
          "_createdAt": "2023-10-18T16:46:47Z",
          "_type": "videoResource",
          "_id": "1d5c5691-0511-471d-8048-b581329a4ca7",
          "state": "new",
          "transcript": {
            "_type": "transcript",
            "text": "[00:00:00] Kent:\nHello everybody, this is my friend Mark Del... Oh, I do this every time. I practice your last name and then I'm like saying it and you're not the only 1, so don't feel... I guess don't feel special. No, but you are special. Don't feel singled out. Okay, DelGlish. \n\n[00:00:17] Mark\nYou nailed it, perfect. \n\n[00:00:18] Kent:\nYes, all right. So this is Mark. Mark and I, you know, I don't think we've ever met. Have we met in person? \n\n[00:00:26] Mark\nWe have in Amsterdam. \n\n[00:00:28] Kent:\nOh, 0, that's right. That's right. Yeah, good. So, but we knew each other long before that. I think, I mean, I knew who you were from CSS modules. I don't think you knew who I was at that time. But yeah, pretty early on, I was an early user of CSS, not very early, but pretty early user of \n\n[00:00:48] CSS modules. I was using it with AngularJS. So I was probably 1 of like 12 people doing that. But anyway, so that would have been like 2014. And I'm not sure exactly when we developed a relationship, but I have really enjoyed our friendship over the years and \n\n[00:01:08] would love for people to get to know you a little bit. So Mark, why don't you introduce yourself to us? \n\n[00:01:15] Mark\nSo, hi, my name is Mike Douglas. I am, as you said, most known for my work with CSS modules, which goes back to the, it came out of the early work we were doing with React. So it's been a big part of the React community since then. But that for me really grew into a real love of front-end tooling in service of \n\n[00:01:35] being able to componentize everything. So that's how do we, not just the CSS, obviously CSS modules is a big part of that. We extended our work there into vanilla extract as well, ultimately. And I've worked on tools like Playroom, which is a JSX in-browser design tool, effectively, for your design system. \n\n[00:01:56] And I worked on design systems at Seek, the company I worked at when we built these tools, you know, all of these together as a package, how we built the CSS, how we prototyped with it in the browser, how we built and deployed it to all of the teams. And that work has led me to work on Remix now. \n\n[00:02:17] So, yeah, I'm working on Remix at Shopify now. So I'm helping all the build tooling around that and getting more CSS features into Remix itself as well. \n\n[00:02:28] Kent:\nThank you for doing that. I think that, well, thank you for all of the stuff that you've done. CSS modules was my first taste of tooling-enforced componentization of CSS. Before that, I'd use BEM. I actually had my own Tailwind-esque-like \n\n[00:02:50] thing where I, Stylus was great at this, at doing like loops and stuff. I could never get LESS or SAS to do what I could do with Stylus. But so I created my own like Tailwind classes And I actually really liked that, but it just never really took off for me. So then yeah, I discovered CSS modules \n\n[00:03:10] and that got me started on componentized CSS. And then eventually we go through the CSS and JS phase and all of that, which was kind of, probably be a good thing to talk about as well. Because when CSS and JS was a lot more popular than it is now, there was a lot of pushback from the greater \n\n[00:03:30] web ecosystem saying this is just so terrible for all these reasons. And I never really felt like I disagreed with them, but the challenge that I had with that was that CSS and JS was solving some major problems that I had. And they were saying, well, CSS and JS isn't the answer. And they just didn't have an answer for it. \n\n[00:03:50] So anyway, you wrote a blog post. I think it was Unified something. \n\n[00:03:57] Mark\nUnified Styling Language, I think it was. \n\n[00:03:59] Kent:\nYes, yes. And I remember sharing that blog post with people saying, listen, I get your concerns. Here's this blog post that explains why I still want to use CSS and JS. And now I feel like we've kind of moved on from that, but without getting rid of those benefits that you talk about. But yeah, I'd \n\n[00:04:19] love to hear from you about your experience through CSS modules into CSS and JS and what you're working on now and a little bit about that blog post too. \n\n[00:04:29] Mark\nYeah, I mean, maybe it's jumping to the end a little bit, but I think we can work back from this. To me, even though I spent a lot of my professional career working on tooling for how to compile and package up CSS, What's been more exciting to me has been more at the React \n\n[00:04:49] component-oriented layer, where to me the benefit of a tool like React was that for once I had a component system where I felt like I could really build my own design-oriented DSL, so that I could compose up a UI out of components that I designed the API for them. You know, and it wasn't, and to me that was \n\n[00:05:09] a big difference to what I'd used before where it was more, you know, templates and you would just have reams and reams of HTML. The componentization of React was so strong that to me it naturally gravitated towards the world of design systems, where it's like if I'm working at a sizable company that's trying to have consistent UI, especially across multiple teams, is where it really \n\n[00:05:30] starts to pay off, right? That was the environment in which I was like, CSS and low-level HTML is kind of getting in the way of us being consistent because we want to be speaking the way our designers speak, you know, And this has become very mainstream now. Like I think early on in React, it \n\n[00:05:50] was novel, but now it's become very normal that people, basically any sizeable company realizes we need a component library so that we can all be on the same page and we're not reinventing the wheel and we're consistent. And if we want to make changes to our design language, we can roll that out. So to me, that is the world in which componentized CSS fits, right? \n\n[00:06:10] I always thought, even from the beginning with CSS modules, I was thinking that CSS was like private implementation detail of a component. If I'm consuming a component, I shouldn't actually have to care whether it uses CSS modules or something else. The idea is just as long as it's portable and it just works, then I actually don't mind at \n\n[00:06:30] all. And so that's why, even though I've been working with a lot of very opinionated CSS tooling, I'm totally open to other approaches as long as including things like Tailwind, for example, which is very popular now. But to me, I'd still would like to treat that as private implementation detail of a component so that as a consumer, my app \n\n[00:06:50] just looks like my design language, custom design language for my company and my product. \n\n[00:06:58] Kent:\nI 100% agree. I think that is just, it cannot be overstated how awesome it is to work in an application that has a well thought out design system with an implementation in React components with that API designed around it. So I think this would actually be a pretty interesting topic \n\n[00:07:18] around that, and that is, do you allow, or as part of your API, do you allow people to sidestep things and to like say, well, for this button, I need the padding to be like X, or do you turn that into like, oh, well, if you want that, we've got to make an API for it. Or do you allow \n\n[00:07:38] people to just pass arbitrary styles or CSS? \n\n[00:07:42] Mark\nYeah, this is like 1 of the biggest questions when it comes to design systems and something we, like, so when I worked on design systems at Seek, where CSS modules came from, our first design system definitely went to the extreme of trying to accommodate people doing custom things. Basically, I mean, \n\n[00:08:03] in practice, what this amounted to was we would spread props a lot of the time. And we would say, if you pass a class name to this component, we'll just add your class name on there as well. If you pass an online style, we'll put that in there as well. And I think to me, like, to me, that was a really good experience to see the downsides of \n\n[00:08:23] that approach in practice at scale, particularly because, you know, the vision of a design system is about moving quickly. It's about being consistent and it's importantly, it's about being able to make changes to the system in the future as well as if you want to redesign, if the company wants to go through some sizable redesign, having a good component system really helps that. \n\n[00:08:43] What we found was there was sort of 2 major problems with opening up that level of flexibility. The first 1 was that, to the point about change, it was really hard to make changes after the fact because there wasn't a strong contract between the outside world. So seemingly any CSS \n\n[00:09:04] change to the component could break some consumer and there was just no way to have any confidence about those changes. So that made things a lot harder. That meant the components tended towards just not changing much at all. Yeah, yeah. But then I guess a secondary problem to this as well is that the design system is meant to be \n\n[00:09:24] kind of at any given time, ideally it's a snapshot of the way designers want the site to look in general, right, as standards across the whole company. And what we found is that if we open up these escape patches, people very much use them and would use them instead of talking to us \n\n[00:09:45] about what should be a really important conversation in the sense that if there's a team trying to use our standard design language, but then there's a disagreement, we should be talking about that. But those conversations were just not happening. Developers were just punching holes everywhere. And so those 2 problems together meant that the \n\n[00:10:05] system wasn't evolving as quickly as it should. The important design conversations weren't happening. And then we were afraid to make changes to the system later. So we actually built a second system later on because we needed to do cross-brand theming. And it was such a big new requirement that it was easier to build a new 1 than try and retrofit that requirement. \n\n[00:10:25] And that was the time when we took the opportunity to start more conservatively in terms of our API. And we said, we're not opening up class name and style. We're going to be really restricted with props. And we found that for us anyway, at least at the scale where we were operating, that was much better for us. It meant that the system \n\n[00:10:46] encouraged people to be more standardized, it empowered developers to push back on designers so that they would have these conversations. And if they couldn't resolve it by using an actual standard pattern, the designers would then end up talking to us as a team to try and figure out, well, how do we, you know, how do we standardize these patterns that maybe are \n\n[00:11:06] emerging that don't quite align with what we have so far? \n\n[00:11:09] Kent:\nYes. Yeah. I think, and I'm guessing that worked out pretty well. \n\n[00:11:16] Mark\nLargely. I mean, there's always going to be, it's 1 of those problems that there's always going to be natural tension between these 2 extremes. So it's not that, you know, 1 approach is really bad and the other approach is obviously really good. It's a trade-off, but I think overall, I prefer the trade-off of saying, yeah, consumers should be as consistent as possible. And if you \n\n[00:11:36] can't work around it via composition, I think maybe that's the worth calling out as 1 reason we were able to get away with this is that we focus really strongly on composition. So that you... We really tried to break down into primitives that could be composed in different ways and recombined. \n\n[00:11:56] So that there wasn't that same need to have to, you know, pass extra props into components. You would just arrange them in different ways. I think that meant that it was very rare that someone literally just could not do something standard with the tools that we gave them. \n\n[00:12:15] Kent:\nYeah, that makes a lot of sense. What kind of things did you find people wanted to diverge? Like, was it completely new designs that the designer came up with, or was it just like margin here, padding here, that sort of thing? \n\n[00:12:31] Mark\nI guess, yeah, I mean, it varied and it often depended on the designer too. Some designers are better at being closer to the standards and some, just because of their workflow, will end up with more differences that are just sort of random differences. \n\n[00:12:45] Kent:\nIncidental. \n\n[00:12:46] Mark\nYeah, I mean, this is sort of to my point, right, is that because the conversations weren't happening, often the dynamic was, and also depending on the developer as well and their design skills as well, some developers would have the relationship with their designer that they saw their job as just a pixel perfect match the mock-up. \n\n[00:13:08] And so what would happen is sometimes, you know, in the old environment where there were no guardrails at all around this stuff, developers would just say, oh, the padding is off by 2 pixels. I guess I'll have to override the styles. \n\n[00:13:22] Kent:\nOh, yeah. \n\n[00:13:23] Mark\nAnd that might just be a change that's... If you were to actually go and talk to the designer and say, hey, this is 2 pixels different to the component, The designer will say, oh, well, yeah, well then go with the standard 1. And so there was definitely extremes of like things that were just a side effect \n\n[00:13:43] of people naturally working in an unconstrained design tool. But then the other extreme is you would have things like they'd add icons to something that didn't have support for icons before. And so that would actually, again, that would like a button, for example, it's like maybe there was no built-in support for icons on the button, or it didn't look right if you just \n\n[00:14:03] used it in the text, something like that. And that would, again, like that would force that conversation where we would say, oh, you're right, this is something that needs to be solved at the primitive level and we're missing it. So we would prioritize working on those features. But yeah, a lot of the time we could solve designs just by composition. So, and, \n\n[00:14:25] you know, rounding to the nearest design standard, that goes really far. \n\n[00:14:30] Kent:\nYeah, yeah. I'd like to dive into the composition a bit. There could be folks listening who are not familiar with what you mean by that. Can you describe that a little bit? \n\n[00:14:40] Mark\nYeah, I mean, the idea with composition, I guess, ultimately is that you rely on, if we're talking about React specifically, it's like you leverage nesting of children rather than having a component that takes a lot of different props to customize it. So a good example, a basic example of this is you might have a card component, \n\n[00:15:00] right? And all it does is give you some padding and background color, that sort of thing. You know, you could keep adding props to card, you can have a title prop and a subtitle prop and a whatever, you just keep adding props. But then you know, the other approach is you say a card is just a container, Like it should have the minimum \n\n[00:15:21] props possible. And if you want a title, like you put a title component in the card, and you put a subheading component in the card and so on. And even then you can go even further in terms of, you know, a card might have props for padding, but you can equally have layout \n\n[00:15:41] components that their job is literally just to provide white space. Right? And so now it's like, so then you can start to rethink, well, how much do we even maybe even need a card component or is it a card or is it just a surface component? And inside of that, I put an inset like layout component. And then inside of that, I put a stack component to like vertically lay out the items. And \n\n[00:16:01] so once you start going down this road of trying to keep props to an absolute minimum and leverage components instead, it often leads you to components that are just generally trying to do less and work together as a set more. \n\n[00:16:15] Kent:\nYeah, composition is really the solution to so many problems. And it's, Epic React is currently getting an update. And 1 of the things that I wish that I'd done from the very beginning was talk about composition. So there is an exercise in the updated Epic React about composition, \n\n[00:16:35] because I just think it is really, really powerful. Epic React does have a compound components exercise, which is very, very good and very similar kind of idea, but even composition from a layout perspective, I think is underutilized. And I would say that in the React ecosystem, \n\n[00:16:56] the lack of composition as a regularly used pattern is a big reason why people reach for context to avoid the prop drilling problem and stuff like that too. So let's work our way backward a little bit from the \n\n[00:17:17] design systems and components and talk a little bit about what motivated things like styled components and well, actually, you know what, I wanna ask you as the co-creator of CSS modules, when styled components came out and CSS and JS became a real \n\n[00:17:37] thing was, did you ever end up using that? I know that you kind of came to its defense for what it was trying to do, but I don't know if you ever really ended up using CSS and JS. \n\n[00:17:46] Mark\nYeah, not in production. So yeah, that's why I think some people who were familiar with my work at the time were surprised that that blog post came from me, where I was defending this thing that you might think I would have been against. So my position at the time was that I very much, because I was doing server rendering with React, like that's actually what got me \n\n[00:18:06] into React was the fact that you could render it on the server. Because of that, I was very much trying to go with the grain of the web and ship, like I just wanted to ship plain style sheets from the beginning. That was kind of what I wanted to do. And I guess what worried me about a lot of the CSS \n\n[00:18:26] and JS approaches was that it felt like it was trading off on runtime performance to make my life as a developer better. And obviously there's a bit of a spectrum there, like it's not black and white, but I was, my concern was that operating at the scale of a large company with like lots of teams that are going to be consuming our component library, in that context, \n\n[00:18:46] my concern was that the runtime performance could become a problem at scale and then would be really hard to reverse that. \n\n[00:18:54] Kent:\nYes. \n\n[00:18:56] Mark\nAnd so I wasn't against it in like in theory, it was more just, I really was wary of walking into a bit of a trap there. So I felt like we had good alternatives, that we didn't have to go down that road of runtime CSS and JS. So we just made do, and like I said, because we focus on our components as the \n\n[00:19:16] mechanism for sharing style rather than the CSS itself. It meant that you sort of, in some sense, it felt like CSS and JS anyway, because I'm designing via my React components. So like, who cares if it's static CSS files behind the scenes? I think history's proven me correct on this based on my own conversations with a lot of people over the \n\n[00:19:36] years who've said, yeah, we've got ourselves into a performance problem with runtime CSS and JS where it's just slow, but it's death by a thousand, It's the worst kind of slow where it's death by a thousand cuts. And how do you fix that? You've just got to redo everything, basically is the problem I saw people running into. But you know, again, I'm \n\n[00:19:56] not using this as an excuse to say CSS and JS is bad. Like some, you know, some people are happy to take that, take that win and bash CSS and JS, that's not my position. Like I think for a lot of people, the runtime performance is a complete non-issue. And the upside is much better than the downside. \n\n[00:20:16] So yeah, I guess I have a pretty nuanced take, but I've always been, I've always been in, in favor of, that approach in theory. And I mean, I was definitely interested in trying to have the best of both worlds and be, and seeing if I like the authoring experience, can we keep the authoring experience as close as possible, but still \n\n[00:20:36] ship plain CSS files? And obviously that's what led into vanilla extract as well. \n\n[00:20:41] Kent:\nYeah, yeah, absolutely. I think 1 thing that I always appreciated, because I could tell that you never actually shipped CSS and JS because you had reservations around that. But what I appreciated about your stance on it was that you could relate to the problems that were trying to be solved. And they really were \n\n[00:21:02] big problems. Like the biggest problem is can I delete the CSS? That's probably the biggest problem in general. Even if you're using Vim or any other 1 of these conventions, can I delete the CSS? I think CSS modules solved that a lot, but 1 of the reasons that I struggled with CSS modules was \n\n[00:21:22] even inside of that, I could have CSS that wasn't being used. And it just can be challenging and like dynamic things. And now we've got CSS custom properties. And so dynamic stuff is a little, well, a lot easier now. But yeah, to \n\n[00:21:42] continue on with that train of thought, I think vanilla extract is kind of the best of all worlds as you described. So let's talk a little bit about vanilla extract and how is that an evolution of CSS modules and like kind of, well, I'll say it this way and you can correct me. It seems to me that vanilla extract \n\n[00:22:03] is like CSS and JS and CSS modules had a baby. Is that kind of what you would say? \n\n[00:22:09] Mark\nYeah, like literally in the readme, 1 of the first things I wrote as its tagline was like, I said, it's basically CSS modules in TypeScript. Ah, yeah. \n\n[00:22:16] Kent:\nThat's kind of \n\n[00:22:17] Mark\nthe way I sold it and the way I thought about it. I think it maybe makes sense if you think about how do you arrive at that point if you're, like I said, if you go back in time to when CSS modules was really big And you've got sort of 2 parallel sets of work going. You've got people work in terms \n\n[00:22:37] of the tooling people are using. You've got your plain CSS files, and then you've got your runtime CSS and JS stuff going on. Because we were trying to stay in that lane of keeping things static. If you're working in plain CSS, as you said, like now we have custom properties, but even that, people find they want to go even further than that. We were using \n\n[00:22:57] pre-processes. So at Seek, we were using less, but it could equally have been SaaS or you said stylus as well, anything else like that. What I found is that because we wanted to be able to reuse, you know, variables, mixins and so on, like we had a, because it's a design system, right? Like once you get into the CSS file, there's still \n\n[00:23:17] a level of standardization you want to have available within the CSS file. And what I found was that we were just hitting a level of complexity in CSS pre-processing that I was missing JavaScript. I was Like, it's frustrating to me that when I switch context from my React code, where I've got my HTML, \n\n[00:23:38] I've got my standard JavaScript, I've got my HTML, like rendering logic in JavaScript, but as soon as I go to styling and I wanna have logic for how to generate my styles. I'm now in a completely different language that works completely differently. You know, can I test it? Are there unit testing tools for this thing? Yeah. \n\n[00:23:59] And I think this especially came to a head when TypeScript came along because then the gap really widened. Because it's like, I've got JavaScript, which I much prefer working into LESS, and I've got static types in my JavaScript now, which I don't have in my LESS file. So Vanilla Extract \n\n[00:24:19] was kind of like saying, okay, basically how do I use TypeScript as a preprocessor effectively? I want to generate in the same way that LESS or SAS is a language that generates CSS. It's like, I want TypeScript to be that language. And then I get the best of both worlds. It's like, I get the same performance characteristics of using plain old \n\n[00:24:39] CSS files, but I get all the benefits I'm reaping else literally everywhere else in my code base, basically TypeScript. \n\n[00:24:48] Kent:\nYeah, I mean, it sounds like a no brainer, honestly, having typeset because with CSS modules, you have that style thing and you can apply these class names but like you don't know if that class name exists anymore or ever did. And so being able to get that type autocomplete and all of that, \n\n[00:25:08] that just, yeah, that's pretty, pretty brilliant. So you mentioned earlier, or we talked a little bit about Tailwind. How would you say, like, what is your take on use cases where Tailwind versus CSS or vanilla extracts are? I don't \n\n[00:25:28] know if, you also have this sprinkles thing as well. That might be a little more analogous, I guess. \n\n[00:25:35] Mark\nYeah, I think so to me, it's a really interesting problem because I think the short answer for a lot of people is just use Tailwind. I think that has become the short answer for most people. And I think the reason for that is out of the box, Tailwind solves so many problems and gets you focused on just like shipping \n\n[00:25:55] in a consistent way. So like, because you can configure it with, so from a design system perspective, it forces you to think of things in terms of like palettes, right? Like you've got your space scale, you've got your color palettes and so on. Like so much of design consistency boils down to that. It's like anytime I set padding on \n\n[00:26:15] an element or I set a color, you know, if you're just working in raw CSS from the ground up, people tend to just use random arbitrary values everywhere. Yeah, they eyeball it. Yeah, exactly. Tailwind encourages you to think more in terms of like, Which item from the palette am I going to pick? And it just gives you fewer choices in a good way. \n\n[00:26:35] So much of the design is about that constraint. And then it also solves the other problem in terms of like, how do I keep CSS as close to where it's used as possible? And don't have this like Rube Goldberg machine of like, how do I actually generate the CSS that eventually gets used somewhere? It keeps it local. It's like, so I think it, it, it, \n\n[00:26:56] it's the best way to get, especially people who are, I want to be careful how I wear this, especially if you've got people who are less experienced with CSS, it'll like, it will get them on working in a good architecture right off the bat. But I think, I don't think it's only for people like I've been working with CSS for decades at this point, basically, and I still \n\n[00:27:16] think Tailwind's a really great solution. So that's like the background to say I'm a big fan of Tailwind at a high level. I think there's some trade-offs, like the API is obviously a little weird, like running these giant strings, But I think it's 1 of those things like React has had its quirks, like JSX itself was like weird. Once you \n\n[00:27:36] get used to it, you're like, okay, you go with the grain of this is actually brilliant. Where I think Tailwind for some people, and this is true for me as well, like where it becomes a bit trickier is when you start working at the scale of a design system with multiple teams. Like I think if you're in 1 repo, \n\n[00:27:56] right, and you're just building a little startup or something, you've got 1 project, Tailwind's a complete no-brainer. When you've got a centralized team that's trying to ship a component library, in that environment, if you're using Tailwind, to me, that's where it starts to get trickier. And I think that's why a lot of people who are building design systems, they're the ones that get the most value \n\n[00:28:16] from vanilla extract because they want to think of CSS as private implementation detail of a component. They don't want their consumers sort of inadvertently consuming every CSS decision you ever made as public API. But that's kind of the way Tailwind naturally, at least out of the box, naturally works. Like if you configure Tailwind to be your \n\n[00:28:37] company's design guidelines and then you ship that as a component library, your Tailwind config basically now is public API across the whole company. And so if you were then, if designers, you know, 6 months, whatever, 2 years later say, we're going to have a big design refresh and we want to effectively change our Tailwind config, \n\n[00:28:58] how does that play out across, you know, maybe dozens of repos consuming or projects consuming your Tailwind config. To me, that's where like the lack of type safety becomes a problem. That's where like basically every class name being a public API, a piece of public API becomes a challenge. So these are conversations I've had with people who are like, yeah, we've \n\n[00:29:18] thought about Tailwind, but because of this problem, we don't want to adopt it. We want to ship components to people. Or maybe even if they want to use vanilla extract, they want to be able to ship like type safe utilities and things like that, where there is a clear boundary between the design system, \n\n[00:29:38] like the component library and the consumers. I think it's doable. I do think it's doable with Tailwind. It's just, we would require a lot of maybe extra tooling and discipline to enforce that boundary between the provider of it and the consumer. \n\n[00:29:54] Kent:\nYeah, I think that's a very well stated nuanced take. So Thank you for that. Okay, so I also wanted to ask you, before we get to the end of our time, I want to ask you about what you're working on at Shopify on Remix. So you joined up about the time that I left, so about a year ago, is that right? \n\n[00:30:15] Or was it later? \n\n[00:30:16] Mark\nClose to a year ago, yeah. \n\n[00:30:18] Kent:\nYeah, yeah, I promise that my leaving had nothing to do with your arrival. I was actually really bummed that we didn't get to work together. So yeah, very soon after you joined is when vanilla extracts got added and also like the, we learned about this in the workshop, the CSS, \n\n[00:30:38] whoa, what is it called? The bundle, yeah, CSS bundle stuff got added and all of that. So I'm sure that you had quite a lot to do with that. So what else have you been working on and what are you looking forward to in the future for Remix? \n\n[00:30:55] Mark\nYeah, so I mean, just to drill into that a little bit, like what attracted me to Remix was I felt like I had a lot to add in the space of fleshing out the compiler a bit more around the area of CSS because I like as an enthusiast looking at Remix from the outside, I was super excited about basically everything it was doing, \n\n[00:31:15] But then when it got down to the styling portion, I felt like it basically only gave me a couple of realistic options to do styling. It was like you could manually manage each individual CSS file and wire them. That felt like I wasn't a huge fan of that. And the other approach was tailwind. And \n\n[00:31:36] again, like I said, I'm not against tailwind, but that felt like super restrictive to me. Like, like I basically, those are my only options. And so I was, and because Remix kept the compiler basically as private API, there's no plugin API. And when you look at other similar tooling, particularly in the React space, you'll see tools that \n\n[00:31:56] have built-in post-CSS support, built-in auto-prefixer, built-in, on and on it goes, Sass, less CSS modules. And so it felt like there was a big gap between what people might expect Remix to do in this area and what it was doing. So I was definitely keen to jump in and try and figure out, you know, how do we start to bring some of these features \n\n[00:32:16] into Remix. But it's funny, in terms of looking forwards, what we're seeing is that, I guess the challenge is, you can imagine adding all of these things and maintaining them, making sure they're bug-free in Remix, like, it takes a lot of work. And the Remix team is not very big. So I think the work up to this point has been really good for \n\n[00:32:37] fixing these issues for people who want to come to Remix, but maybe find the tooling in this area was lacking. But we want to unlock this going forward so you don't have to rely on us to implement all these things. So, you know, there's 2 things on the horizon we're looking at. There's, I mean, first of all, the big elephant in the room is server components because \n\n[00:32:57] that changes the way you think about bundling in relation to React going forwards. And Remix potentially can do a lot less work than it's doing today when it comes to bundling. And so in that world, maybe we can reorient things away from us owning so much of the compiler and you can bring your \n\n[00:33:17] own compiler. But that's maybe more of a long-term play as well. In the short term, there's definitely room for us to revisit our tooling choice. Remix historically was, I think, roll-up based and then moved to ES build. And we're still open to changing that as well, maybe in service of allowing people more access to the compiler. So \n\n[00:33:37] we're sort of trying to play the short to medium and long-term games at the same time and figure out how do we let you do even more in Remix? So for example, we don't have built-in SaaS support right now. Some people still want that. And ideally, you don't have to wait for us to ship that. You can just, if you have access to the compiler, \n\n[00:33:58] you can just add your own plugin in there and you're done. So I'm definitely excited about letting consumers do more with Remix, but hopefully in a way that means we don't have to do so much as owners of Remix as well. \n\n[00:34:11] Kent:\nYeah, yeah. So invert control a little bit there. The challenge with inverting control then is in the same way as we were talking about at the beginning, that people will use those class names and they'll just throw stuff in there. And now all of a sudden, like changing 1 little thing that you thought was just an internal thing could break somebody, which \n\n[00:34:31] I, so I think that the Remix team was, was right to keep the compiler locked down, especially early on when things were still being worked out. But yeah, there's, there's that trade off of people being kind of limited on what they can do. \n\n[00:34:48] Mark\nYeah, I think to me, that's why I personally, I mean, I'm not the only 1, like that's why personally most of my interest is at the moment is in solving this problem is around VEET, because I think VEET does have a good answer to this where, yeah, I think that's why so many frameworks are moving or like are built on VEET is because it's sitting at the right level of \n\n[00:35:08] abstraction where me as a consumer of a framework that's built on VEET, it's really quite trivial to integrate something like Vanilla Extract, for example. Like we have a Vite plugin, and so it just naturally works with all these Vite-based frameworks, like no problem at all. Yeah. So I feel like that's the right level of abstraction. I mean, I'm \n\n[00:35:28] not as deep on how server components fit into the Vite story. I know there's people experimenting in that space, but I guess that's where the VEET being opinionated, somewhat more opinionated about the architecture, the fact that there's an SSR server, you know, obviously those opinions then need to be \n\n[00:35:48] shaped a bit more when the architecture moves towards server components. So I've still got a lot of learning to do to figure out what does that mean long-term. How do we balance these 2 things is interesting to me. \n\n[00:36:01] Kent:\nYeah, yeah. It's very cool. Well, Mark, we're getting to the end of our time. Did you have anything that you wanted to talk about before we wrap up? \n\n[00:36:11] Mark\nWhat do I want to talk about? \n\n[00:36:15] Kent:\nDid we miss anything? \n\n[00:36:19] Mark\nIf I would encourage you, I mean, maybe it's going back to the original topic a bit, but if you're working with React and you're trying to build design systems, I would, if you're someone who's working on a component library, I would really encourage you to try and force yourself to build complete pages with no custom CSS. And if you're working with Tailwind, that includes like try to \n\n[00:36:39] avoid custom, you know, strings of class names, right? Because to me, that is the real test of like, is my component library workable in and of itself? Can I recombine these Lego blocks into a UI? Because I think that was basically the secret to us coming to a lot of these conclusions, is tying 1 hand behind your back \n\n[00:36:59] saying, and Playroom, our in-browser JSX editor was a tool for testing this out, was saying, if I really force myself to not write CSS, how far can I get? And yeah, I think that's the best way to learn, because you'll probably come up with different opinions than mine \n\n[00:37:19] in terms of how do you reach that goal, but just that constraint forces you to make some really good decisions around component design. \n\n[00:37:26] Kent:\nYeah, yeah. Tie your hands to free your mind. It's a good practice in general. Well, Mark, Thank you so much for giving me some of your time and having this chat together This is fun. It's always good to chat with you. And yeah, we'll see everybody on the epic web Bye-bye \n\n",
            "srt": "1\n00:00:00,480 --> 00:00:04,240\nHello everybody, this is my friend Mark Del... Oh,\n\n2\n00:00:04,600 --> 00:00:15,980\nI do this every time. I practice your last name and then I'm like saying it and you're not the only 1, so don't feel... I guess don't feel special. No, but you are special. Don't feel singled out. Okay,\n\n3\n00:00:16,420 --> 00:00:16,920\nDelGlish.\n\n4\n00:00:17,300 --> 00:00:20,880\nYou nailed it, perfect. Yes, all right. So this is Mark.\n\n5\n00:00:21,380 --> 00:00:22,520\nMark and I,\n\n6\n00:00:23,140 --> 00:00:27,840\nyou know, I don't think we've ever met. Have we met in person? We have in Amsterdam.\n\n7\n00:00:28,700 --> 00:00:36,540\nOh, 0, that's right. That's right. Yeah, good. So, but we knew each other long before that. I think,\n\n8\n00:00:37,300 --> 00:00:42,620\nI mean, I knew who you were from CSS modules. I don't think you knew who I was at that time.\n\n9\n00:00:43,320 --> 00:00:50,840\nBut yeah, pretty early on, I was an early user of CSS, not very early, but pretty early user of CSS modules. I was using it with AngularJS.\n\n10\n00:00:51,580 --> 00:00:54,640\nSo I was probably 1 of like 12 people doing that.\n\n11\n00:00:55,760 --> 00:00:56,260\nBut\n\n12\n00:00:56,680 --> 00:00:57,180\nanyway,\n\n13\n00:00:57,880 --> 00:00:59,660\nso that would have been like 2014.\n\n14\n00:01:00,400 --> 00:01:03,840\nAnd I'm not sure exactly when we developed a relationship, but\n\n15\n00:01:04,459 --> 00:01:06,360\nI have really enjoyed our\n\n16\n00:01:07,160 --> 00:01:12,540\nfriendship over the years and would love for people to get to know you a little bit. So Mark, why don't you introduce\n\n17\n00:01:13,500 --> 00:01:14,660\nyourself to us?\n\n18\n00:01:15,060 --> 00:01:16,980\nSo, hi, my name is Mike Douglas.\n\n19\n00:01:17,560 --> 00:01:27,780\nI am, as you said, most known for my work with CSS modules, which goes back to the, it came out of the early work we were doing with React. So it's been a big part of the React community since then.\n\n20\n00:01:28,580 --> 00:01:30,820\nBut that for me really grew into\n\n21\n00:01:31,160 --> 00:01:32,540\na real love of\n\n22\n00:01:33,080 --> 00:01:36,480\nfront-end tooling in service of being able to componentize\n\n23\n00:01:36,860 --> 00:01:38,040\neverything. So that's\n\n24\n00:01:38,560 --> 00:01:39,479\nhow do we,\n\n25\n00:01:40,080 --> 00:01:46,980\nnot just the CSS, obviously CSS modules is a big part of that. We extended our work there into vanilla extract as well, ultimately.\n\n26\n00:01:47,740 --> 00:01:50,900\nAnd I've worked on tools like Playroom, which is a JSX\n\n27\n00:01:51,940 --> 00:01:55,420\nin-browser design tool, effectively, for your design system.\n\n28\n00:01:56,120 --> 00:01:57,680\nAnd I worked on design systems\n\n29\n00:01:58,080 --> 00:02:00,860\nat Seek, the company I worked at when we built these tools,\n\n30\n00:02:01,560 --> 00:02:10,780\nyou know, all of these together as a package, how we built the CSS, how we prototyped with it in the browser, how we built and deployed it to all of the teams.\n\n31\n00:02:11,600 --> 00:02:15,100\nAnd that work has led me to work on Remix now.\n\n32\n00:02:17,220 --> 00:02:19,260\nSo, yeah, I'm working on Remix\n\n33\n00:02:19,820 --> 00:02:21,600\nat Shopify now. So I'm\n\n34\n00:02:21,940 --> 00:02:22,440\nhelping\n\n35\n00:02:22,960 --> 00:02:28,060\nall the build tooling around that and getting more CSS features into Remix itself as well.\n\n36\n00:02:28,740 --> 00:02:30,780\nThank you for doing that.\n\n37\n00:02:31,560 --> 00:02:37,240\nI think that, well, thank you for all of the stuff that you've done. CSS modules was my first taste of\n\n38\n00:02:39,960 --> 00:02:40,460\ntooling-enforced\n\n39\n00:02:41,500 --> 00:02:42,000\ncomponentization\n\n40\n00:02:43,300 --> 00:02:45,780\nof CSS. Before that, I'd use BEM.\n\n41\n00:02:46,240 --> 00:02:47,200\nI actually had\n\n42\n00:02:47,860 --> 00:02:48,900\nmy own Tailwind-esque-like\n\n43\n00:02:50,220 --> 00:02:51,420\nthing where I,\n\n44\n00:02:51,820 --> 00:02:52,320\nStylus\n\n45\n00:02:52,660 --> 00:03:01,020\nwas great at this, at doing like loops and stuff. I could never get LESS or SAS to do what I could do with Stylus. But so I created my own like Tailwind\n\n46\n00:03:01,340 --> 00:03:01,840\nclasses\n\n47\n00:03:02,680 --> 00:03:06,360\nAnd I actually really liked that, but it just never really took off for me.\n\n48\n00:03:06,720 --> 00:03:08,000\nSo then yeah, I discovered\n\n49\n00:03:09,580 --> 00:03:14,360\nCSS modules and that got me started on componentized CSS. And then eventually\n\n50\n00:03:15,160 --> 00:03:22,860\nwe go through the CSS and JS phase and all of that, which was kind of, probably be a good thing to talk about as well. Because\n\n51\n00:03:24,280 --> 00:03:34,400\nwhen CSS and JS was a lot more popular than it is now, there was a lot of pushback from the greater web ecosystem saying this is just so terrible for all these reasons.\n\n52\n00:03:34,900 --> 00:03:40,020\nAnd I never really felt like I disagreed with them, but the challenge that I had with\n\n53\n00:03:41,100 --> 00:03:51,560\nthat was that CSS and JS was solving some major problems that I had. And they were saying, well, CSS and JS isn't the answer. And they just didn't have an answer for it. So anyway,\n\n54\n00:03:52,540 --> 00:03:55,340\nyou wrote a blog post. I think it was Unified\n\n55\n00:03:56,120 --> 00:03:56,620\nsomething.\n\n56\n00:03:57,340 --> 00:04:04,620\nUnified Styling Language, I think it was. Yes, yes. And I remember sharing that blog post with people saying, listen, I get your concerns.\n\n57\n00:04:05,220 --> 00:04:07,860\nHere's this blog post that explains why\n\n58\n00:04:08,800 --> 00:04:14,360\nI still want to use CSS and JS. And now I feel like we've kind of moved on from that,\n\n59\n00:04:15,480 --> 00:04:21,240\nbut without getting rid of those benefits that you talk about. But yeah, I'd love to hear from you about\n\n60\n00:04:21,820 --> 00:04:22,540\nyour experience\n\n61\n00:04:23,100 --> 00:04:29,120\nthrough CSS modules into CSS and JS and what you're working on now and a little bit about that blog post too.\n\n62\n00:04:29,820 --> 00:04:30,720\nYeah, I mean,\n\n63\n00:04:31,120 --> 00:04:33,540\nmaybe it's jumping to the end a little bit, but I think\n\n64\n00:04:34,340 --> 00:04:38,460\nwe can work back from this. To me, even though I spent a lot of my\n\n65\n00:04:38,840 --> 00:04:43,760\nprofessional career working on tooling for how to compile and package up CSS,\n\n66\n00:04:45,660 --> 00:04:49,400\nWhat's been more exciting to me has been more at the React\n\n67\n00:04:49,920 --> 00:04:50,420\ncomponent-oriented\n\n68\n00:04:51,160 --> 00:04:52,700\nlayer, where to me\n\n69\n00:04:53,100 --> 00:04:54,980\nthe benefit of a tool like React\n\n70\n00:04:55,320 --> 00:05:00,120\nwas that for once I had a component system where I felt like I could really build my own design-oriented\n\n71\n00:05:00,620 --> 00:05:01,120\nDSL,\n\n72\n00:05:01,880 --> 00:05:07,440\nso that I could compose up a UI out of components that I designed the API for them.\n\n73\n00:05:08,560 --> 00:05:15,420\nYou know, and it wasn't, and to me that was a big difference to what I'd used before where it was more, you know, templates and you would just have reams and reams of HTML.\n\n74\n00:05:17,020 --> 00:05:17,720\nThe componentization\n\n75\n00:05:18,080 --> 00:05:31,360\nof React was so strong that to me it naturally gravitated towards the world of design systems, where it's like if I'm working at a sizable company that's trying to have consistent UI, especially across multiple teams, is where it really starts to pay off, right?\n\n76\n00:05:32,580 --> 00:05:35,520\nThat was the environment in which I was like, CSS\n\n77\n00:05:36,380 --> 00:05:49,500\nand low-level HTML is kind of getting in the way of us being consistent because we want to be speaking the way our designers speak, you know, And this has become very mainstream now. Like I think early on in React,\n\n78\n00:05:49,940 --> 00:06:04,420\nit was novel, but now it's become very normal that people, basically any sizeable company realizes we need a component library so that we can all be on the same page and we're not reinventing the wheel and we're consistent. And if we want to make changes to our design language, we can roll that out.\n\n79\n00:06:04,780 --> 00:06:08,040\nSo to me, that is the world in which componentized CSS\n\n80\n00:06:09,000 --> 00:06:10,100\nfits, right?\n\n81\n00:06:10,460 --> 00:06:13,160\nI always thought, even from the beginning with CSS modules,\n\n82\n00:06:13,580 --> 00:06:17,980\nI was thinking that CSS was like private implementation detail of a component.\n\n83\n00:06:18,520 --> 00:06:23,220\nIf I'm consuming a component, I shouldn't actually have to care whether it uses CSS modules\n\n84\n00:06:23,560 --> 00:06:24,740\nor something else.\n\n85\n00:06:25,120 --> 00:06:27,340\nThe idea is just as long as it's portable\n\n86\n00:06:27,880 --> 00:06:34,420\nand it just works, then I actually don't mind at all. And so that's why, even though I've been working with a lot of very opinionated\n\n87\n00:06:34,940 --> 00:06:35,820\nCSS tooling,\n\n88\n00:06:36,220 --> 00:06:47,820\nI'm totally open to other approaches as long as including things like Tailwind, for example, which is very popular now. But to me, I'd still would like to treat that as private implementation detail of a component\n\n89\n00:06:48,480 --> 00:06:49,820\nso that as a consumer,\n\n90\n00:06:50,280 --> 00:06:52,540\nmy app just looks like my\n\n91\n00:06:52,960 --> 00:06:53,900\ndesign language,\n\n92\n00:06:54,400 --> 00:06:57,000\ncustom design language for my company and my product.\n\n93\n00:06:58,440 --> 00:06:59,180\nI 100%\n\n94\n00:06:59,600 --> 00:07:00,100\nagree.\n\n95\n00:07:00,660 --> 00:07:01,820\nI think that is\n\n96\n00:07:02,380 --> 00:07:04,700\njust, it cannot be overstated how\n\n97\n00:07:05,280 --> 00:07:10,020\nawesome it is to work in an application that has a well thought out design system with an implementation\n\n98\n00:07:10,320 --> 00:07:14,020\nin React components with that API designed around it.\n\n99\n00:07:15,060 --> 00:07:17,220\nSo I think this would actually be a pretty interesting\n\n100\n00:07:17,680 --> 00:07:18,180\ntopic\n\n101\n00:07:18,560 --> 00:07:20,420\naround that, and that is,\n\n102\n00:07:21,580 --> 00:07:22,800\ndo you allow,\n\n103\n00:07:23,400 --> 00:07:25,020\nor as part of your API,\n\n104\n00:07:25,680 --> 00:07:41,780\ndo you allow people to sidestep things and to like say, well, for this button, I need the padding to be like X, or do you turn that into like, oh, well, if you want that, we've got to make an API for it. Or do you allow people to just pass arbitrary styles or CSS?\n\n105\n00:07:42,740 --> 00:07:47,180\nYeah, this is like 1 of the biggest questions when it comes to design systems and something we,\n\n106\n00:07:47,900 --> 00:07:49,300\nlike, so when I worked on\n\n107\n00:07:50,140 --> 00:07:54,400\ndesign systems at Seek, where CSS modules came from, our first design system\n\n108\n00:07:55,440 --> 00:07:57,840\ndefinitely went to the extreme of\n\n109\n00:07:58,840 --> 00:08:01,420\ntrying to accommodate people doing custom things.\n\n110\n00:08:02,160 --> 00:08:06,240\nBasically, I mean, in practice, what this amounted to was we would\n\n111\n00:08:06,820 --> 00:08:16,700\nspread props a lot of the time. And we would say, if you pass a class name to this component, we'll just add your class name on there as well. If you pass an online style, we'll put that in there as well. And\n\n112\n00:08:17,640 --> 00:08:21,600\nI think to me, like, to me, that was a really good experience to see\n\n113\n00:08:22,440 --> 00:08:25,940\nthe downsides of that approach in practice at scale, particularly because,\n\n114\n00:08:26,340 --> 00:08:29,940\nyou know, the vision of a design system is about moving quickly.\n\n115\n00:08:30,360 --> 00:08:40,440\nIt's about being consistent and it's importantly, it's about being able to make changes to the system in the future as well as if you want to redesign, if the company wants to go through some sizable redesign,\n\n116\n00:08:40,900 --> 00:08:43,480\nhaving a good component system really helps that.\n\n117\n00:08:43,940 --> 00:08:46,900\nWhat we found was there was sort of 2 major problems\n\n118\n00:08:47,220 --> 00:08:49,240\nwith opening up that level of flexibility.\n\n119\n00:08:49,780 --> 00:08:51,400\nThe first 1 was\n\n120\n00:08:51,820 --> 00:08:52,320\nthat,\n\n121\n00:08:52,720 --> 00:08:59,280\nto the point about change, it was really hard to make changes after the fact because there wasn't a strong contract between\n\n122\n00:09:00,300 --> 00:09:01,420\nthe outside world.\n\n123\n00:09:01,780 --> 00:09:03,120\nSo seemingly any\n\n124\n00:09:03,860 --> 00:09:10,540\nCSS change to the component could break some consumer and there was just no way to have any confidence about those changes.\n\n125\n00:09:11,120 --> 00:09:16,740\nSo that made things a lot harder. That meant the components tended towards just not changing much at all.\n\n126\n00:09:17,680 --> 00:09:18,520\nYeah, yeah. But then\n\n127\n00:09:19,460 --> 00:09:23,040\nI guess a secondary problem to this as well is that the design system\n\n128\n00:09:23,560 --> 00:09:27,680\nis meant to be kind of at any given time, ideally it's a snapshot of\n\n129\n00:09:28,080 --> 00:09:28,940\nthe way designers\n\n130\n00:09:29,380 --> 00:09:34,020\nwant the site to look in general, right, as standards across the whole company.\n\n131\n00:09:34,440 --> 00:09:34,940\nAnd\n\n132\n00:09:35,320 --> 00:09:38,420\nwhat we found is that if we open up these escape patches,\n\n133\n00:09:39,580 --> 00:09:44,660\npeople very much use them and would use them instead of talking to us\n\n134\n00:09:45,360 --> 00:09:53,800\nabout what should be a really important conversation in the sense that if there's a team trying to use our standard design language, but then there's a disagreement,\n\n135\n00:09:54,520 --> 00:09:56,300\nwe should be talking about that.\n\n136\n00:09:56,920 --> 00:10:01,020\nBut those conversations were just not happening. Developers were just punching holes\n\n137\n00:10:01,860 --> 00:10:02,360\neverywhere.\n\n138\n00:10:02,900 --> 00:10:20,280\nAnd so those 2 problems together meant that the system wasn't evolving as quickly as it should. The important design conversations weren't happening. And then we were afraid to make changes to the system later. So we actually built a second system later on because we needed to do cross-brand theming. And it was such a big\n\n139\n00:10:20,640 --> 00:10:25,060\nnew requirement that it was easier to build a new 1 than try and retrofit that requirement.\n\n140\n00:10:25,600 --> 00:10:34,140\nAnd that was the time when we took the opportunity to start more conservatively in terms of our API. And we said, we're not opening up class name and style.\n\n141\n00:10:34,600 --> 00:10:36,600\nWe're going to be really restricted with props.\n\n142\n00:10:37,420 --> 00:10:41,260\nAnd we found that for us anyway, at least at the scale where we were operating,\n\n143\n00:10:43,380 --> 00:10:45,920\nthat was much better for us. It meant that the system\n\n144\n00:10:46,720 --> 00:10:53,740\nencouraged people to be more standardized, it empowered developers to push back on designers so that they would have these conversations.\n\n145\n00:10:54,760 --> 00:10:56,820\nAnd if they couldn't resolve it by\n\n146\n00:10:57,380 --> 00:11:13,360\nusing an actual standard pattern, the designers would then end up talking to us as a team to try and figure out, well, how do we, you know, how do we standardize these patterns that maybe are emerging that don't quite align with what we have so far? Yes. Yeah. I think, and I'm guessing that worked out\n\n147\n00:11:15,060 --> 00:11:18,060\npretty well. Largely. I mean, there's always going to be,\n\n148\n00:11:18,540 --> 00:11:29,680\nit's 1 of those problems that there's always going to be natural tension between these 2 extremes. So it's not that, you know, 1 approach is really bad and the other approach is obviously really good. It's a trade-off, but I think overall,\n\n149\n00:11:30,040 --> 00:11:31,980\nI prefer the trade-off of saying,\n\n150\n00:11:32,680 --> 00:11:36,680\nyeah, consumers should be as consistent as possible. And if you can't\n\n151\n00:11:37,580 --> 00:11:39,400\nwork around it via composition,\n\n152\n00:11:40,080 --> 00:11:47,860\nI think maybe that's the worth calling out as 1 reason we were able to get away with this is that we focus really strongly on composition.\n\n153\n00:11:49,060 --> 00:11:50,140\nSo that you...\n\n154\n00:11:50,460 --> 00:11:55,700\nWe really tried to break down into primitives that could be composed in different ways and recombined.\n\n155\n00:11:56,400 --> 00:11:59,080\nSo that there wasn't that same need to have to,\n\n156\n00:12:00,240 --> 00:12:03,420\nyou know, pass extra props into components. You would\n\n157\n00:12:03,740 --> 00:12:05,520\njust arrange them in different ways.\n\n158\n00:12:06,400 --> 00:12:11,740\nI think that meant that it was very rare that someone literally just could not do something\n\n159\n00:12:12,720 --> 00:12:14,700\nstandard with the tools that we gave them.\n\n160\n00:12:15,060 --> 00:12:16,780\nYeah, that makes a lot of sense.\n\n161\n00:12:17,160 --> 00:12:18,940\nWhat kind of things did you\n\n162\n00:12:19,440 --> 00:12:21,600\nfind people wanted to\n\n163\n00:12:22,260 --> 00:12:30,520\ndiverge? Like, was it completely new designs that the designer came up with, or was it just like margin here, padding here, that sort of thing?\n\n164\n00:12:31,440 --> 00:12:38,580\nI guess, yeah, I mean, it varied and it often depended on the designer too. Some designers are better at being closer to the standards and some,\n\n165\n00:12:38,940 --> 00:12:43,880\njust because of their workflow, will end up with more differences that are just sort of\n\n166\n00:12:44,240 --> 00:12:45,680\nrandom differences. Incidental.\n\n167\n00:12:46,060 --> 00:12:51,920\nYeah, I mean, this is sort of to my point, right, is that because the conversations weren't happening, often the dynamic was,\n\n168\n00:12:52,720 --> 00:12:56,500\nand also depending on the developer as well and their design skills\n\n169\n00:12:56,840 --> 00:12:57,560\nas well,\n\n170\n00:12:58,380 --> 00:13:06,080\nsome developers would have the relationship with their designer that they saw their job as just a pixel perfect match the mock-up.\n\n171\n00:13:08,100 --> 00:13:14,840\nAnd so what would happen is sometimes, you know, in the old environment where there were no guardrails at all around this stuff,\n\n172\n00:13:16,220 --> 00:13:23,160\ndevelopers would just say, oh, the padding is off by 2 pixels. I guess I'll have to override the styles. Oh, yeah.\n\n173\n00:13:23,800 --> 00:13:30,460\nAnd that might just be a change that's... If you were to actually go and talk to the designer and say, hey, this is 2 pixels different\n\n174\n00:13:30,780 --> 00:13:31,280\nto\n\n175\n00:13:32,000 --> 00:13:37,400\nthe component, The designer will say, oh, well, yeah, well then go with the standard 1. And so\n\n176\n00:13:38,300 --> 00:13:41,740\nthere was definitely extremes of like things that were just\n\n177\n00:13:43,100 --> 00:13:47,320\na side effect of people naturally working in an unconstrained design tool.\n\n178\n00:13:47,860 --> 00:13:50,500\nBut then the other extreme is you would have things like\n\n179\n00:13:50,820 --> 00:14:13,860\nthey'd add icons to something that didn't have support for icons before. And so that would actually, again, that would like a button, for example, it's like maybe there was no built-in support for icons on the button, or it didn't look right if you just used it in the text, something like that. And that would, again, like that would force that conversation where we would say, oh, you're right, this is something that needs to be solved at the primitive level and we're missing it. So we would\n\n180\n00:14:14,220 --> 00:14:16,360\nprioritize working on those features.\n\n181\n00:14:17,780 --> 00:14:21,260\nBut yeah, a lot of the time we could solve designs\n\n182\n00:14:22,080 --> 00:14:24,440\njust by composition. So, and,\n\n183\n00:14:25,080 --> 00:14:27,600\nyou know, rounding to the nearest design standard,\n\n184\n00:14:28,040 --> 00:14:29,320\nthat goes really far.\n\n185\n00:14:30,060 --> 00:14:39,560\nYeah, yeah. I'd like to dive into the composition a bit. There could be folks listening who are not familiar with what you mean by that. Can you describe that a little bit?\n\n186\n00:14:40,360 --> 00:14:44,120\nYeah, I mean, the idea with composition, I guess, ultimately is that\n\n187\n00:14:44,680 --> 00:14:48,220\nyou rely on, if we're talking about React specifically, it's like you leverage\n\n188\n00:14:49,120 --> 00:14:50,320\nnesting of children\n\n189\n00:14:51,300 --> 00:14:56,540\nrather than having a component that takes a lot of different props to customize it. So\n\n190\n00:14:56,940 --> 00:15:03,400\na good example, a basic example of this is you might have a card component, right? And all it does is give you some padding and\n\n191\n00:15:04,760 --> 00:15:06,360\nbackground color, that sort of thing.\n\n192\n00:15:07,200 --> 00:15:19,040\nYou know, you could keep adding props to card, you can have a title prop and a subtitle prop and a whatever, you just keep adding props. But then you know, the other approach is you say a card is just a container,\n\n193\n00:15:19,340 --> 00:15:25,460\nLike it should have the minimum props possible. And if you want a title, like you put a title component in the card,\n\n194\n00:15:26,880 --> 00:15:28,360\nand you put a subheading\n\n195\n00:15:28,780 --> 00:15:30,860\ncomponent in the card and so on.\n\n196\n00:15:32,160 --> 00:15:33,980\nAnd even then you can go even further\n\n197\n00:15:34,700 --> 00:15:38,260\nin terms of, you know, a card might have props for padding,\n\n198\n00:15:38,800 --> 00:16:01,700\nbut you can equally have layout components that their job is literally just to provide white space. Right? And so now it's like, so then you can start to rethink, well, how much do we even maybe even need a card component or is it a card or is it just a surface component? And inside of that, I put an inset like layout component. And then inside of that, I put a stack component to like vertically lay out the items. And so\n\n199\n00:16:02,320 --> 00:16:14,360\nonce you start going down this road of trying to keep props to an absolute minimum and leverage components instead, it often leads you to components that are just generally trying to do less and work together as a set more.\n\n200\n00:16:15,760 --> 00:16:17,300\nYeah, composition is really\n\n201\n00:16:17,900 --> 00:16:19,700\nthe solution to so many problems.\n\n202\n00:16:20,740 --> 00:16:21,240\nAnd\n\n203\n00:16:21,600 --> 00:16:22,100\nit's,\n\n204\n00:16:22,940 --> 00:16:25,220\nEpic React is currently getting an update.\n\n205\n00:16:25,600 --> 00:16:26,820\nAnd 1 of the\n\n206\n00:16:27,440 --> 00:16:30,320\nthings that I wish that I'd done from the very beginning was\n\n207\n00:16:30,780 --> 00:16:38,600\ntalk about composition. So there is an exercise in the updated Epic React about composition, because I just think it is really, really powerful.\n\n208\n00:16:39,000 --> 00:16:41,060\nEpic React does have a compound components\n\n209\n00:16:42,340 --> 00:16:47,680\nexercise, which is very, very good and very similar kind of idea, but even\n\n210\n00:16:48,340 --> 00:16:51,640\ncomposition from a layout perspective, I think is underutilized.\n\n211\n00:16:52,580 --> 00:16:55,620\nAnd I would say that in the React ecosystem,\n\n212\n00:16:56,540 --> 00:16:58,160\nthe lack of composition\n\n213\n00:16:58,820 --> 00:17:02,380\nas a regularly used pattern is a big reason\n\n214\n00:17:02,780 --> 00:17:03,280\nwhy\n\n215\n00:17:04,660 --> 00:17:08,900\npeople reach for context to avoid the prop drilling problem and stuff like that too.\n\n216\n00:17:11,000 --> 00:17:11,500\nSo\n\n217\n00:17:12,040 --> 00:17:14,720\nlet's work our way backward a little bit from\n\n218\n00:17:16,220 --> 00:17:16,720\nthe\n\n219\n00:17:17,099 --> 00:17:21,359\ndesign systems and components and talk a little bit about what motivated\n\n220\n00:17:23,240 --> 00:17:25,660\nthings like styled components and\n\n221\n00:17:26,440 --> 00:17:33,100\nwell, actually, you know what, I wanna ask you as the co-creator of CSS modules,\n\n222\n00:17:33,420 --> 00:17:39,360\nwhen styled components came out and CSS and JS became a real thing was, did you ever end up using that?\n\n223\n00:17:39,840 --> 00:17:48,580\nI know that you kind of came to its defense for what it was trying to do, but I don't know if you ever really ended up using CSS and JS. Yeah, not in production. So\n\n224\n00:17:49,300 --> 00:18:01,340\nyeah, that's why I think some people who were familiar with my work at the time were surprised that that blog post came from me, where I was defending this thing that you might think I would have been against. So my position at the time was that\n\n225\n00:18:02,360 --> 00:18:09,380\nI very much, because I was doing server rendering with React, like that's actually what got me into React was the fact that you could render it on the server.\n\n226\n00:18:10,840 --> 00:18:21,880\nBecause of that, I was very much trying to go with the grain of the web and ship, like I just wanted to ship plain style sheets from the beginning. That was kind of what I wanted to do.\n\n227\n00:18:23,260 --> 00:18:31,260\nAnd I guess what worried me about a lot of the CSS and JS approaches was that it felt like it was trading off on runtime performance\n\n228\n00:18:32,440 --> 00:18:45,200\nto make my life as a developer better. And obviously there's a bit of a spectrum there, like it's not black and white, but I was, my concern was that operating at the scale of a large company with like lots of teams that are going to be consuming our component library,\n\n229\n00:18:46,020 --> 00:18:48,620\nin that context, my concern was that the runtime\n\n230\n00:18:49,640 --> 00:18:54,940\nperformance could become a problem at scale and then would be really hard to reverse that. Yes.\n\n231\n00:18:56,060 --> 00:18:59,180\nAnd so I wasn't against it in like in theory,\n\n232\n00:18:59,540 --> 00:19:04,840\nit was more just, I really was wary of walking into a bit of a trap there.\n\n233\n00:19:05,900 --> 00:19:15,200\nSo I felt like we had good alternatives, that we didn't have to go down that road of runtime CSS and JS. So we just made do, and like I said, because we focus on our components\n\n234\n00:19:15,780 --> 00:19:19,580\nas the mechanism for sharing style rather than the CSS itself.\n\n235\n00:19:20,060 --> 00:19:26,380\nIt meant that you sort of, in some sense, it felt like CSS and JS anyway, because I'm designing via my React components.\n\n236\n00:19:26,680 --> 00:19:30,040\nSo like, who cares if it's static CSS files behind the scenes?\n\n237\n00:19:30,820 --> 00:19:31,880\nI think history's\n\n238\n00:19:32,380 --> 00:19:37,320\nproven me correct on this based on my own conversations with a lot of people over the years who've said,\n\n239\n00:19:37,800 --> 00:19:53,860\nyeah, we've got ourselves into a performance problem with runtime CSS and JS where it's just slow, but it's death by a thousand, It's the worst kind of slow where it's death by a thousand cuts. And how do you fix that? You've just got to redo everything, basically is the problem I saw people running into.\n\n240\n00:19:54,800 --> 00:20:01,420\nBut you know, again, I'm not using this as an excuse to say CSS and JS is bad. Like some, you know, some people are happy to take that, take\n\n241\n00:20:02,040 --> 00:20:08,140\nthat win and bash CSS and JS, that's not my position. Like I think for a lot of people,\n\n242\n00:20:08,500 --> 00:20:11,180\nthe runtime performance is a complete non-issue.\n\n243\n00:20:12,500 --> 00:20:15,220\nAnd the upside is much better than the downside.\n\n244\n00:20:16,320 --> 00:20:22,360\nSo yeah, I guess I have a pretty nuanced take, but I've always been, I've always been in, in favor of,\n\n245\n00:20:23,040 --> 00:20:25,620\nthat approach in theory. And\n\n246\n00:20:26,000 --> 00:20:35,660\nI mean, I was definitely interested in trying to have the best of both worlds and be, and seeing if I like the authoring experience, can we keep the authoring experience as close as possible,\n\n247\n00:20:36,040 --> 00:20:51,000\nbut still ship plain CSS files? And obviously that's what led into vanilla extract as well. Yeah, yeah, absolutely. I think 1 thing that I always appreciated, because I could tell that you never actually shipped CSS and JS because you had reservations around that.\n\n248\n00:20:52,240 --> 00:20:54,300\nBut what I appreciated about your\n\n249\n00:20:54,660 --> 00:20:57,100\nstance on it was that you could\n\n250\n00:20:57,660 --> 00:21:01,860\nrelate to the problems that were trying to be solved. And they really were\n\n251\n00:21:02,220 --> 00:21:02,920\nbig problems.\n\n252\n00:21:03,240 --> 00:21:07,860\nLike the biggest problem is can I delete the CSS? That's probably the biggest problem\n\n253\n00:21:08,160 --> 00:21:12,620\nin general. Even if you're using Vim or any other 1 of these conventions,\n\n254\n00:21:13,480 --> 00:21:18,900\ncan I delete the CSS? I think CSS modules solved that a lot, but 1 of the reasons\n\n255\n00:21:19,460 --> 00:21:21,800\nthat I struggled with CSS modules was\n\n256\n00:21:22,460 --> 00:21:26,780\neven inside of that, I could have CSS that wasn't being used.\n\n257\n00:21:27,440 --> 00:21:27,940\nAnd\n\n258\n00:21:28,260 --> 00:21:29,440\nit just can be\n\n259\n00:21:30,520 --> 00:21:38,540\nchallenging and like dynamic things. And now we've got CSS custom properties. And so dynamic stuff is a little, well, a lot easier now.\n\n260\n00:21:40,440 --> 00:21:41,100\nBut yeah,\n\n261\n00:21:42,040 --> 00:21:44,940\nto continue on with that train of thought,\n\n262\n00:21:45,520 --> 00:22:01,580\nI think vanilla extract is kind of the best of all worlds as you described. So let's talk a little bit about vanilla extract and how is that an evolution of CSS modules and like kind of, well, I'll say it this way and you can correct me. It seems to me that\n\n263\n00:22:02,020 --> 00:22:05,040\nvanilla extract is like CSS and JS\n\n264\n00:22:06,740 --> 00:22:19,780\nand CSS modules had a baby. Is that kind of what you would say? Yeah, like literally in the readme, 1 of the first things I wrote as its tagline was like, I said, it's basically CSS modules in TypeScript. Ah, yeah. That's kind of the way I sold it and the way I thought about it.\n\n265\n00:22:21,760 --> 00:22:30,780\nI think it maybe makes sense if you think about how do you arrive at that point if you're, like I said, if you go back in time to when CSS modules was really big\n\n266\n00:22:31,720 --> 00:22:33,740\nAnd you've got sort of 2 parallel\n\n267\n00:22:35,220 --> 00:22:43,680\nsets of work going. You've got people work in terms of the tooling people are using. You've got your plain CSS files, and then you've got your runtime CSS and JS stuff going on.\n\n268\n00:22:44,380 --> 00:22:47,380\nBecause we were trying to stay in that lane of keeping things static.\n\n269\n00:22:48,440 --> 00:22:53,460\nIf you're working in plain CSS, as you said, like now we have custom properties, but even that,\n\n270\n00:22:53,860 --> 00:22:55,740\npeople find they want to go even further\n\n271\n00:22:56,040 --> 00:22:58,120\nthan that. We were using pre-processes.\n\n272\n00:22:58,520 --> 00:23:04,700\nSo at Seek, we were using less, but it could equally have been SaaS or you said stylus as well, anything else like that.\n\n273\n00:23:05,660 --> 00:23:08,420\nWhat I found is that because we wanted to be able to reuse,\n\n274\n00:23:09,520 --> 00:23:10,360\nyou know, variables,\n\n275\n00:23:11,600 --> 00:23:21,880\nmixins and so on, like we had a, because it's a design system, right? Like once you get into the CSS file, there's still a level of standardization you want to have available within the CSS file.\n\n276\n00:23:22,360 --> 00:23:32,340\nAnd what I found was that we were just hitting a level of complexity in CSS pre-processing that I was missing JavaScript. I was Like, it's frustrating to me that\n\n277\n00:23:33,060 --> 00:23:37,400\nwhen I switch context from my React code, where I've got my HTML,\n\n278\n00:23:38,740 --> 00:23:51,720\nI've got my standard JavaScript, I've got my HTML, like rendering logic in JavaScript, but as soon as I go to styling and I wanna have logic for how to generate my styles. I'm now in a completely different language that works completely differently.\n\n279\n00:23:52,640 --> 00:23:54,120\nYou know, can I test it?\n\n280\n00:23:55,240 --> 00:23:58,140\nAre there unit testing tools for this thing? Yeah.\n\n281\n00:23:59,320 --> 00:24:10,580\nAnd I think this especially came to a head when TypeScript came along because then the gap really widened. Because it's like, I've got JavaScript, which I much prefer working into LESS,\n\n282\n00:24:11,280 --> 00:24:16,700\nand I've got static types in my JavaScript now, which I don't have in my LESS file.\n\n283\n00:24:18,280 --> 00:24:21,140\nSo Vanilla Extract was kind of like saying, okay,\n\n284\n00:24:21,820 --> 00:24:24,020\nbasically how do I use TypeScript as a preprocessor\n\n285\n00:24:24,340 --> 00:24:32,180\neffectively? I want to generate in the same way that LESS or SAS is a language that generates CSS. It's like, I want TypeScript to be that language.\n\n286\n00:24:33,400 --> 00:24:33,900\nAnd\n\n287\n00:24:34,700 --> 00:24:46,120\nthen I get the best of both worlds. It's like, I get the same performance characteristics of using plain old CSS files, but I get all the benefits I'm reaping else literally everywhere else in my code base, basically TypeScript.\n\n288\n00:24:48,040 --> 00:24:51,240\nYeah, I mean, it sounds like a no brainer, honestly,\n\n289\n00:24:51,980 --> 00:24:52,480\nhaving\n\n290\n00:24:53,560 --> 00:25:01,980\ntypeset because with CSS modules, you have that style thing and you can apply these class names but like you don't know if that class name exists anymore or ever did.\n\n291\n00:25:02,580 --> 00:25:03,660\nAnd so\n\n292\n00:25:04,180 --> 00:25:11,860\nbeing able to get that type autocomplete and all of that, that just, yeah, that's pretty, pretty brilliant. So\n\n293\n00:25:13,080 --> 00:25:16,460\nyou mentioned earlier, or we talked a little bit about Tailwind.\n\n294\n00:25:17,320 --> 00:25:19,060\nHow would you say, like,\n\n295\n00:25:19,540 --> 00:25:21,240\nwhat is your take on\n\n296\n00:25:21,860 --> 00:25:24,020\nuse cases where Tailwind versus\n\n297\n00:25:24,480 --> 00:25:24,980\nCSS\n\n298\n00:25:25,320 --> 00:25:25,820\nor\n\n299\n00:25:26,600 --> 00:25:29,240\nvanilla extracts are? I don't know if,\n\n300\n00:25:29,640 --> 00:25:31,140\nyou also have this sprinkles\n\n301\n00:25:31,640 --> 00:25:38,900\nthing as well. That might be a little more analogous, I guess. Yeah, I think so to me, it's a really interesting\n\n302\n00:25:39,440 --> 00:25:45,680\nproblem because I think the short answer for a lot of people is just use Tailwind. I think that has become the short answer\n\n303\n00:25:46,400 --> 00:25:48,980\nfor most people. And I think the reason for that is\n\n304\n00:25:49,700 --> 00:25:55,020\nout of the box, Tailwind solves so many problems and gets you focused on just like shipping\n\n305\n00:25:55,480 --> 00:26:01,260\nin a consistent way. So like, because you can configure it with, so from a design system perspective,\n\n306\n00:26:02,180 --> 00:26:04,300\nit forces you to think of things\n\n307\n00:26:04,780 --> 00:26:11,860\nin terms of like palettes, right? Like you've got your space scale, you've got your color palettes and so on. Like so much of design consistency\n\n308\n00:26:12,240 --> 00:26:17,580\nboils down to that. It's like anytime I set padding on an element or I set a color,\n\n309\n00:26:17,900 --> 00:26:27,320\nyou know, if you're just working in raw CSS from the ground up, people tend to just use random arbitrary values everywhere. Yeah, they eyeball it. Yeah, exactly. Tailwind\n\n310\n00:26:28,180 --> 00:26:37,980\nencourages you to think more in terms of like, Which item from the palette am I going to pick? And it just gives you fewer choices in a good way. So much of the design is about that constraint.\n\n311\n00:26:39,640 --> 00:26:42,480\nAnd then it also solves the other problem in terms of like,\n\n312\n00:26:43,080 --> 00:26:52,000\nhow do I keep CSS as close to where it's used as possible? And don't have this like Rube Goldberg machine of like, how do I actually generate the CSS that eventually gets used somewhere?\n\n313\n00:26:53,080 --> 00:27:05,420\nIt keeps it local. It's like, so I think it, it, it, it's the best way to get, especially people who are, I want to be careful how I wear this, especially if you've got people who are less experienced with CSS, it'll like, it will get them on\n\n314\n00:27:05,780 --> 00:27:14,880\nworking in a good architecture right off the bat. But I think, I don't think it's only for people like I've been working with CSS for decades at this point, basically,\n\n315\n00:27:15,360 --> 00:27:18,420\nand I still think Tailwind's a really great solution.\n\n316\n00:27:19,360 --> 00:27:19,860\nSo\n\n317\n00:27:20,260 --> 00:27:23,640\nthat's like the background to say I'm a big fan of Tailwind\n\n318\n00:27:24,220 --> 00:27:29,680\nat a high level. I think there's some trade-offs, like the API is obviously a little weird, like running these giant strings,\n\n319\n00:27:30,040 --> 00:27:33,380\nBut I think it's 1 of those things like React has had its quirks,\n\n320\n00:27:33,840 --> 00:27:35,780\nlike JSX itself was like weird.\n\n321\n00:27:36,140 --> 00:27:39,980\nOnce you get used to it, you're like, okay, you go with the grain of this is actually brilliant.\n\n322\n00:27:41,200 --> 00:27:42,540\nWhere I think Tailwind\n\n323\n00:27:43,660 --> 00:27:47,700\nfor some people, and this is true for me as well, like where it becomes a bit trickier\n\n324\n00:27:48,340 --> 00:27:52,620\nis when you start working at the scale of a design system with multiple teams.\n\n325\n00:27:54,060 --> 00:27:54,880\nLike I think\n\n326\n00:27:55,240 --> 00:27:59,440\nif you're in 1 repo, right, and you're just building a little startup or something, you've got 1 project,\n\n327\n00:28:00,060 --> 00:28:01,300\nTailwind's a complete no-brainer.\n\n328\n00:28:01,960 --> 00:28:05,420\nWhen you've got a centralized team that's trying to ship a component library,\n\n329\n00:28:07,120 --> 00:28:13,940\nin that environment, if you're using Tailwind, to me, that's where it starts to get trickier. And I think that's why a lot of people who are building design systems,\n\n330\n00:28:14,540 --> 00:28:15,560\nthey're the ones that\n\n331\n00:28:15,940 --> 00:28:18,300\nget the most value from vanilla extract because\n\n332\n00:28:18,940 --> 00:28:24,560\nthey want to think of CSS as private implementation detail of a component. They don't want their consumers sort of inadvertently\n\n333\n00:28:25,300 --> 00:28:28,980\nconsuming every CSS decision you ever made as public API.\n\n334\n00:28:30,040 --> 00:28:34,620\nBut that's kind of the way Tailwind naturally, at least out of the box, naturally works. Like if\n\n335\n00:28:35,020 --> 00:28:40,940\nyou configure Tailwind to be your company's design guidelines and then you ship that as a component library,\n\n336\n00:28:42,660 --> 00:28:46,560\nyour Tailwind config basically now is public API across the whole company.\n\n337\n00:28:47,500 --> 00:28:56,340\nAnd so if you were then, if designers, you know, 6 months, whatever, 2 years later say, we're going to have a big design refresh and we want to effectively change our Tailwind config,\n\n338\n00:28:58,320 --> 00:29:02,620\nhow does that play out across, you know, maybe dozens of repos consuming\n\n339\n00:29:02,920 --> 00:29:11,680\nor projects consuming your Tailwind config. To me, that's where like the lack of type safety becomes a problem. That's where like basically every class name being a public API,\n\n340\n00:29:12,660 --> 00:29:14,840\na piece of public API becomes a challenge.\n\n341\n00:29:15,400 --> 00:29:19,440\nSo these are conversations I've had with people who are like, yeah, we've thought about Tailwind,\n\n342\n00:29:20,240 --> 00:29:21,720\nbut because of this problem,\n\n343\n00:29:22,080 --> 00:29:23,660\nwe don't want to adopt it.\n\n344\n00:29:25,080 --> 00:29:35,820\nWe want to ship components to people. Or maybe even if they want to use vanilla extract, they want to be able to ship like type safe utilities and things like that, where there is a clear boundary between\n\n345\n00:29:36,200 --> 00:29:36,700\nthe\n\n346\n00:29:37,940 --> 00:29:40,780\ndesign system, like the component library and the consumers.\n\n347\n00:29:42,100 --> 00:29:49,660\nI think it's doable. I do think it's doable with Tailwind. It's just, we would require a lot of maybe extra tooling and discipline to enforce\n\n348\n00:29:50,320 --> 00:29:53,540\nthat boundary between the provider of it and the consumer.\n\n349\n00:29:54,960 --> 00:29:58,480\nYeah, I think that's a very well stated nuanced take.\n\n350\n00:29:58,860 --> 00:29:59,360\nSo\n\n351\n00:30:00,040 --> 00:30:00,900\nThank you for that.\n\n352\n00:30:01,800 --> 00:30:09,820\nOkay, so I also wanted to ask you, before we get to the end of our time, I want to ask you about what you're working on at Shopify on Remix.\n\n353\n00:30:10,180 --> 00:30:10,680\nSo\n\n354\n00:30:11,120 --> 00:30:16,140\nyou joined up about the time that I left, so about a year ago, is that right? Or was it later?\n\n355\n00:30:16,720 --> 00:30:21,980\nClose to a year ago, yeah. Yeah, yeah, I promise that my leaving had nothing to do with your arrival.\n\n356\n00:30:23,400 --> 00:30:26,180\nI was actually really bummed that we didn't get to work together.\n\n357\n00:30:26,740 --> 00:30:27,540\nSo yeah,\n\n358\n00:30:28,040 --> 00:30:31,700\nvery soon after you joined is when vanilla extracts got added and\n\n359\n00:30:32,020 --> 00:30:35,700\nalso like the, we learned about this in the workshop, the\n\n360\n00:30:36,160 --> 00:30:36,660\nCSS,\n\n361\n00:30:38,560 --> 00:30:39,780\nwhoa, what is it called?\n\n362\n00:30:40,900 --> 00:30:45,040\nThe bundle, yeah, CSS bundle stuff got added and all of that.\n\n363\n00:30:45,780 --> 00:30:49,780\nSo I'm sure that you had quite a lot to do with that.\n\n364\n00:30:50,200 --> 00:30:50,700\nSo\n\n365\n00:30:51,220 --> 00:30:55,260\nwhat else have you been working on and what are you looking forward to in the future for Remix?\n\n366\n00:30:55,840 --> 00:31:00,800\nYeah, so I mean, just to drill into that a little bit, like what attracted me to\n\n367\n00:31:01,780 --> 00:31:05,640\nRemix was I felt like I had a lot to add in the space of\n\n368\n00:31:06,000 --> 00:31:12,140\nfleshing out the compiler a bit more around the area of CSS because I like as an enthusiast looking at Remix from the outside,\n\n369\n00:31:13,040 --> 00:31:18,060\nI was super excited about basically everything it was doing, But then when it got down to the styling portion,\n\n370\n00:31:19,300 --> 00:31:20,340\nI felt like\n\n371\n00:31:21,400 --> 00:31:29,120\nit basically only gave me a couple of realistic options to do styling. It was like you could manually manage each individual CSS file\n\n372\n00:31:29,860 --> 00:31:35,140\nand wire them. That felt like I wasn't a huge fan of that. And the other approach was tailwind.\n\n373\n00:31:35,840 --> 00:31:40,740\nAnd again, like I said, I'm not against tailwind, but that felt like super restrictive to me. Like, like I basically,\n\n374\n00:31:41,140 --> 00:31:42,420\nthose are my only options.\n\n375\n00:31:43,820 --> 00:31:45,980\nAnd so I was, and because Remix\n\n376\n00:31:46,300 --> 00:31:49,820\nkept the compiler basically as private API, there's no plugin API.\n\n377\n00:31:50,900 --> 00:31:52,320\nAnd when you look at other\n\n378\n00:31:52,640 --> 00:31:56,880\nsimilar tooling, particularly in the React space, you'll see tools that have built-in\n\n379\n00:31:57,500 --> 00:31:58,760\npost-CSS support,\n\n380\n00:31:59,060 --> 00:32:00,040\nbuilt-in auto-prefixer,\n\n381\n00:32:00,480 --> 00:32:02,240\nbuilt-in, on and on it goes,\n\n382\n00:32:02,860 --> 00:32:17,060\nSass, less CSS modules. And so it felt like there was a big gap between what people might expect Remix to do in this area and what it was doing. So I was definitely keen to jump in and try and figure out, you know, how do we start to bring some of these features into Remix.\n\n383\n00:32:17,800 --> 00:32:20,240\nBut it's funny, in terms of looking forwards,\n\n384\n00:32:21,760 --> 00:32:35,820\nwhat we're seeing is that, I guess the challenge is, you can imagine adding all of these things and maintaining them, making sure they're bug-free in Remix, like, it takes a lot of work. And the Remix team is not very big. So I think the work up to this point has been really good for\n\n385\n00:32:37,200 --> 00:32:41,260\nfixing these issues for people who want to come to Remix, but maybe find the tooling\n\n386\n00:32:41,580 --> 00:32:43,040\nin this area was lacking.\n\n387\n00:32:43,380 --> 00:32:43,880\nBut\n\n388\n00:32:44,380 --> 00:32:48,840\nwe want to unlock this going forward so you don't have to rely on us to implement all these things.\n\n389\n00:32:49,700 --> 00:32:53,460\nSo, you know, there's 2 things on the horizon we're looking at. There's,\n\n390\n00:32:54,020 --> 00:32:58,300\nI mean, first of all, the big elephant in the room is server components because that changes\n\n391\n00:32:58,680 --> 00:32:59,180\nthe\n\n392\n00:32:59,640 --> 00:33:03,980\nway you think about bundling in relation to React going forwards.\n\n393\n00:33:04,400 --> 00:33:05,100\nAnd Remix\n\n394\n00:33:05,540 --> 00:33:06,040\npotentially\n\n395\n00:33:06,540 --> 00:33:09,060\ncan do a lot less work than it's doing today\n\n396\n00:33:09,400 --> 00:33:11,020\nwhen it comes to bundling. And\n\n397\n00:33:11,500 --> 00:33:18,220\nso in that world, maybe we can reorient things away from us owning so much of the compiler and you can bring your own compiler.\n\n398\n00:33:19,300 --> 00:33:24,360\nBut that's maybe more of a long-term play as well. In the short term, there's definitely room for us to revisit\n\n399\n00:33:24,900 --> 00:33:26,460\nour tooling choice. Remix\n\n400\n00:33:26,780 --> 00:33:31,060\nhistorically was, I think, roll-up based and then moved to ES build.\n\n401\n00:33:31,400 --> 00:33:36,840\nAnd we're still open to changing that as well, maybe in service of allowing people more access to the compiler.\n\n402\n00:33:37,160 --> 00:33:43,220\nSo we're sort of trying to play the short to medium and long-term games at the same time and figure out\n\n403\n00:33:43,860 --> 00:33:51,100\nhow do we let you do even more in Remix? So for example, we don't have built-in SaaS support right now. Some people still want that.\n\n404\n00:33:53,260 --> 00:33:57,940\nAnd ideally, you don't have to wait for us to ship that. You can just, if you have access to the compiler,\n\n405\n00:33:58,380 --> 00:34:00,940\nyou can just add your own plugin in there and you're done.\n\n406\n00:34:01,400 --> 00:34:03,340\nSo I'm definitely excited about\n\n407\n00:34:04,700 --> 00:34:16,300\nletting consumers do more with Remix, but hopefully in a way that means we don't have to do so much as owners of Remix as well. Yeah, yeah. So invert control a little bit there. The challenge with inverting control then is\n\n408\n00:34:17,139 --> 00:34:18,300\nin the same way\n\n409\n00:34:18,940 --> 00:34:20,699\nas we were talking about at the beginning,\n\n410\n00:34:21,040 --> 00:34:35,820\nthat people will use those class names and they'll just throw stuff in there. And now all of a sudden, like changing 1 little thing that you thought was just an internal thing could break somebody, which I, so I think that the Remix team was, was right to\n\n411\n00:34:36,420 --> 00:34:38,300\nkeep the compiler locked down,\n\n412\n00:34:38,900 --> 00:34:41,940\nespecially early on when things were still being worked out.\n\n413\n00:34:42,780 --> 00:34:53,460\nBut yeah, there's, there's that trade off of people being kind of limited on what they can do. Yeah, I think to me, that's why I personally, I mean, I'm not the only 1, like that's why personally\n\n414\n00:34:53,800 --> 00:35:01,520\nmost of my interest is at the moment is in solving this problem is around VEET, because I think VEET does have a good answer to this where,\n\n415\n00:35:01,840 --> 00:35:12,420\nyeah, I think that's why so many frameworks are moving or like are built on VEET is because it's sitting at the right level of abstraction where me as a consumer of a framework that's built on VEET,\n\n416\n00:35:13,680 --> 00:35:23,500\nit's really quite trivial to integrate something like Vanilla Extract, for example. Like we have a Vite plugin, and so it just naturally works with all these Vite-based frameworks, like no problem at all.\n\n417\n00:35:23,800 --> 00:35:24,300\nYeah.\n\n418\n00:35:25,260 --> 00:35:28,100\nSo I feel like that's the right level of abstraction.\n\n419\n00:35:28,480 --> 00:35:30,360\nI mean, I'm not as deep on how\n\n420\n00:35:31,220 --> 00:35:35,780\nserver components fit into the Vite story. I know there's people experimenting in that space,\n\n421\n00:35:36,760 --> 00:35:38,300\nbut I guess that's where\n\n422\n00:35:39,520 --> 00:35:44,440\nthe VEET being opinionated, somewhat more opinionated about the architecture, the fact that there's an SSR\n\n423\n00:35:44,760 --> 00:35:45,260\nserver,\n\n424\n00:35:46,340 --> 00:35:52,940\nyou know, obviously those opinions then need to be shaped a bit more when the architecture moves towards server components.\n\n425\n00:35:53,480 --> 00:35:57,080\nSo I've still got a lot of learning to do to figure out what does that mean long-term.\n\n426\n00:35:58,140 --> 00:36:01,200\nHow do we balance these 2 things is interesting to me.\n\n427\n00:36:01,620 --> 00:36:03,220\nYeah, yeah. It's very cool.\n\n428\n00:36:03,540 --> 00:36:09,520\nWell, Mark, we're getting to the end of our time. Did you have anything that you wanted to talk about before we wrap up?\n\n429\n00:36:11,760 --> 00:36:13,220\nWhat do I want to talk about?\n\n430\n00:36:15,780 --> 00:36:16,820\nDid we miss anything?\n\n431\n00:36:19,080 --> 00:36:19,580\nIf\n\n432\n00:36:19,900 --> 00:36:22,580\nI would encourage you, I mean, maybe it's going back to the original\n\n433\n00:36:23,000 --> 00:36:26,900\ntopic a bit, but if you're working with React and you're trying to build design systems,\n\n434\n00:36:27,440 --> 00:36:42,040\nI would, if you're someone who's working on a component library, I would really encourage you to try and force yourself to build complete pages with no custom CSS. And if you're working with Tailwind, that includes like try to avoid custom, you know, strings of class names, right?\n\n435\n00:36:42,600 --> 00:36:46,520\nBecause to me, that is the real test of like, is my component library\n\n436\n00:36:46,880 --> 00:36:48,420\nworkable in and of itself?\n\n437\n00:36:49,080 --> 00:36:52,040\nCan I recombine these Lego blocks into a UI?\n\n438\n00:36:52,360 --> 00:36:56,460\nBecause I think that was basically the secret to us coming to a lot of these conclusions,\n\n439\n00:36:56,820 --> 00:36:57,320\nis\n\n440\n00:36:57,720 --> 00:36:59,720\ntying 1 hand behind your back saying,\n\n441\n00:37:00,860 --> 00:37:02,360\nand Playroom, our in-browser\n\n442\n00:37:02,900 --> 00:37:06,000\nJSX editor was a tool for testing this out, was saying,\n\n443\n00:37:06,900 --> 00:37:11,100\nif I really force myself to not write CSS, how far can I get?\n\n444\n00:37:12,520 --> 00:37:13,020\nAnd\n\n445\n00:37:13,380 --> 00:37:18,540\nyeah, I think that's the best way to learn, because you'll probably come up with different opinions\n\n446\n00:37:18,940 --> 00:37:25,820\nthan mine in terms of how do you reach that goal, but just that constraint forces you to make some really good decisions around component design.\n\n447\n00:37:26,400 --> 00:37:29,180\nYeah, yeah. Tie your hands to free your mind. It's a\n\n448\n00:37:29,620 --> 00:37:30,120\ngood\n\n449\n00:37:30,560 --> 00:37:31,600\npractice in general.\n\n450\n00:37:32,100 --> 00:37:42,440\nWell, Mark, Thank you so much for giving me some of your time and having this chat together This is fun. It's always good to chat with you. And yeah, we'll see everybody on the epic web\n\n451\n00:37:42,820 --> 00:37:43,320\nBye-bye\n"
          },
          "muxAsset": {
            "muxPlaybackId": "UOb9d201SCpEPJqD1Edd9Fm00nI7BOXNi97JcJ8i00f1zU",
            "muxAssetId": "FvFo7RQ4hzmTPLz9qd8lX3rjEEsdjWEfG028v32H4Kgw",
            "_type": "muxAsset"
          },
          "originalMediaUrl": "https://egghead-video-uploads.s3.amazonaws.com/epic-web/interviews/Mark+Dalgleish.mp4"
        },
        "_id": "B9MrGEg0NpGWTknnF8PiUJ"
      },
      {
        "_id": "WBQDSVdErPwEcA4Fd0g8nF",
        "_updatedAt": "2023-10-18T17:05:20Z",
        "slug": "navigating-changing-web-technologies-with-mark-thompson",
        "videoResource": {
          "duration": 2742.366667,
          "_createdAt": "2023-10-18T17:05:04Z",
          "_id": "fb40335f-819e-41f9-88de-f5e44e69da5d",
          "title": "Mark Thompson.mp4",
          "_updatedAt": "2024-03-19T20:25:34Z",
          "originalMediaUrl": "https://egghead-video-uploads.s3.amazonaws.com/epic-web/interviews/Mark+Thompson.mp4",
          "transcript": {
            "srt": "1\n00:00:01,160 --> 00:00:02,420\nWhat is up everybody?\n\n2\n00:00:02,720 --> 00:00:05,240\nI'm so excited to be joined by Mark Thompson.\n\n3\n00:00:05,740 --> 00:00:07,060\nThis is Texan.\n\n4\n00:00:07,660 --> 00:00:11,019\nYou'll have to tell us what that nickname's all about, Mark. But\n\n5\n00:00:11,759 --> 00:00:13,160\nyeah, so Mark and I\n\n6\n00:00:13,500 --> 00:00:21,040\nmet, I think, on Twitter. I don't think we met in person before we met on Twitter, which is actually describes most of my relationships these days.\n\n7\n00:00:21,580 --> 00:00:26,099\nBut yeah, I think the first time we met in person was at NGConf this year,\n\n8\n00:00:26,420 --> 00:00:28,400\nwhere I just like- Well, second time,\n\n9\n00:00:29,279 --> 00:00:44,940\nbut the first actual, actual meeting, but the second time we actually come in contact. Oh, okay. Okay. Why don't you, I'm trying to remember what that first time was then. Oh, it was a really random time. So if you don't remember this, I don't blame you at all, but we both were at\n\n10\n00:00:45,420 --> 00:00:49,240\nModern Front Ends Live in London. Oh, yes. And I was lost\n\n11\n00:00:49,860 --> 00:01:08,220\nand we hadn't like, you know, connected before that. You know what I mean? We just kind of maybe tweeted each other randomly, but not really connected. And then I was like, hey, do you know where to go? You're like, man, I'm going to this hotel. And I was like, yeah, I'm totally lost. And it was a whole thing for me, but you were super kind, even like passing, you were super kind about it. So. Yeah, you know,\n\n12\n00:01:08,560 --> 00:01:10,460\nI think by then we had\n\n13\n00:01:10,840 --> 00:01:16,580\nmet online. I feel like we had. And so if I had been in the right frame of mind, then\n\n14\n00:01:16,960 --> 00:01:32,620\nI would have given you a big hug at that point. But yeah. But I also had a mask on. So that's another thing. Oh, yes, yes. A lot of people don't recognize me in a mask, which makes sense, which is why people wear masks. You know, when you do stuff, they don't wanna be recognized there. So I had a mask on. So I know that\n\n15\n00:01:33,060 --> 00:01:34,400\ndefinitely, you know,\n\n16\n00:01:35,460 --> 00:01:35,960\ncontributed.\n\n17\n00:01:36,540 --> 00:01:40,080\nYeah. Well, hey, it's been awesome to get to know you\n\n18\n00:01:40,520 --> 00:01:49,780\nfor the last about year or so that I have gotten to know you. Why don't you introduce yourself to the folks listening and Tell us about what you're into and,\n\n19\n00:01:50,140 --> 00:02:10,300\nyou know, however personal or professional you'd like to keep it. Yeah, fantastic. Hey friends, my name is Mark. First, I'll tell you why they call me Mark Texan. I was looking for a Twitter handle way back in 2017 and I asked my wife, I was like, help me think of something because she's really good at coming up with names of things that I want to do. And she's like, what about Texan?\n\n20\n00:02:10,919 --> 00:02:14,700\nAnd I was like, I'm not from Texas. She's like, no, not Texan, like T-E-X-A-N-E-S-O-N.\n\n21\n00:02:16,840 --> 00:02:18,660\nI was like, oh, that is so clever.\n\n22\n00:02:19,060 --> 00:02:22,500\nAnd I've ran with it ever since. And because my name is so common,\n\n23\n00:02:22,800 --> 00:02:28,760\nif you search Mark Thompson, it's really hard to find me. But if you search Mark Texson, you'll find me in, you know,\n\n24\n00:02:29,080 --> 00:02:30,140\nreally, really quickly.\n\n25\n00:02:31,420 --> 00:02:35,700\nYeah. That was actually, that's a great idea. I hadn't thought about the the SEO\n\n26\n00:02:36,100 --> 00:02:38,940\nAspect of that but yeah for sure you need some moniker\n\n27\n00:02:39,480 --> 00:02:59,880\nto make it easy for people to find you when you have a name Like Mark Thompson. Yeah, and when I was in high school, I wasn't even the only Mark Thompson I wasn't even the only Mark Thompson. I wasn't even the only Mark A. See, like you can use your middle initial to even further disambiguate, right? Yeah. I can't even do that because I'm not even the only Mark A. Thompson out there. In my high school, there were 2 Mark Allen Thompsons.\n\n28\n00:03:00,340 --> 00:03:10,280\nNo way. Yeah, totally 2 Mark Allen Thompsons. Once I was hospitalized, there's another Mark Thompson. They kept like coming in and asking me about his conditions. And I'm like, that's not me. I mean,\n\n29\n00:03:10,760 --> 00:03:16,620\nsuper common name. Anyway, so I've been writing code for a very, very long time. I started writing code probably\n\n30\n00:03:17,420 --> 00:03:18,480\nwhen I was\n\n31\n00:03:19,020 --> 00:03:19,520\n15.\n\n32\n00:03:20,380 --> 00:03:22,040\nAnd then I started working professionally\n\n33\n00:03:23,200 --> 00:03:27,840\nabout 15 or 16 years ago. It's been a long time. My first job was in 2006.\n\n34\n00:03:28,580 --> 00:03:32,060\nSo it's been a while. Wow. Wow, man. That's awesome.\n\n35\n00:03:32,780 --> 00:03:35,040\nAnd then you only joined Twitter in 2017.\n\n36\n00:03:35,740 --> 00:03:39,940\nThat sounds unheard of. Yeah, because I was so against Twitter.\n\n37\n00:03:40,760 --> 00:03:48,240\nDon't ask me why, I didn't have any good reasons. I was just against it just to be against it. You know, I actually feel the same way. Like there are movies\n\n38\n00:03:48,840 --> 00:03:57,080\nthat you miss and then after a while It becomes like a badge of honor like nope never saw that 1 like I know people who feel that way about the Harry Potter movies\n\n39\n00:03:57,780 --> 00:04:00,920\nI feel that way about Titanic I never saw\n\n40\n00:04:03,380 --> 00:04:14,840\njust won't watch it at this point. Yeah. Yeah. It is a badge of honor. Like, nope, never saw it. And I'm proud of that, I guess. Yeah, I just won't watch. You cannot get me to watch Titanic. I just won't watch it. That is so funny.\n\n41\n00:04:15,200 --> 00:04:16,060\nYeah. Well,\n\n42\n00:04:16,380 --> 00:04:19,300\ngood. That's fun to make those kinds of connections.\n\n43\n00:04:19,920 --> 00:04:21,980\nSo what have you been doing all this time\n\n44\n00:04:22,360 --> 00:04:23,300\nin tech then?\n\n45\n00:04:23,800 --> 00:04:25,740\nHow did you get started in 2002?\n\n46\n00:04:27,440 --> 00:04:31,120\nOh, sure, sure, sure, sure. So when I first, oh man.\n\n47\n00:04:32,780 --> 00:04:47,940\nWow, I'm trying to remember what got me started. So the way I got started with computer science in general was that when I was a little kid, I remember feeling like I wanted my computer to like ask me questions about my day, like a personal assistant. Oh yeah, yeah. Mm-hmm. And I was, so this is back in the early nineties.\n\n48\n00:04:48,360 --> 00:04:49,940\nSo for those at home,\n\n49\n00:04:50,280 --> 00:05:14,020\nI'm in my almost mid forties now. So I've been around for a little while, but yeah, I want to do that. And then I had started to pursue computer science around trying to solve that problem and figure out how to like get started, not try to solve like personal assistance, but like, how do I interact with the computer? How do I program? And then I was lucky enough to have like a high school teacher who believed in me enough to like make me stay after school and practice programming.\n\n50\n00:05:14,380 --> 00:05:25,020\nAnd then that led to going to undergrad computer science, mathematics, graduate school, computer science. And then I ended up, my first job as a Java programmer for a small company.\n\n51\n00:05:25,840 --> 00:05:29,180\nAnd yeah, so I spent a lot of time, spent the first, probably\n\n52\n00:05:29,760 --> 00:05:33,620\n40% of my career as a Java, like server side, like programmer,\n\n53\n00:05:33,960 --> 00:05:36,300\njust doing all Java. And then around 2011,\n\n54\n00:05:37,120 --> 00:05:41,100\nthe world changed when the first frameworks started to come around.\n\n55\n00:05:41,540 --> 00:05:42,760\nSo Batman\n\n56\n00:05:43,200 --> 00:05:43,940\nand Knockout\n\n57\n00:05:44,280 --> 00:05:45,100\nand Backbone\n\n58\n00:05:45,440 --> 00:05:45,940\nand\n\n59\n00:05:46,260 --> 00:05:48,180\nso many libraries and AngularJS,\n\n60\n00:05:48,540 --> 00:05:58,040\nall these things came around. And I felt like the world was changing and I wanted to be a part of that change. And then I switched over to front end development and I never looked back. Wow, man, yeah, 2011,\n\n61\n00:05:58,840 --> 00:06:04,780\nthat is early on. Like that's even early, relatively early for the Node.js days too.\n\n62\n00:06:05,600 --> 00:06:09,680\nSo yeah, that's pretty sweet. I got home from my mission in 2010\n\n63\n00:06:10,240 --> 00:06:10,740\nand\n\n64\n00:06:11,100 --> 00:06:12,320\ngot married in 2011.\n\n65\n00:06:14,080 --> 00:06:18,380\nAnd so I was still like trying to figure out what to do with my life around that time.\n\n66\n00:06:18,740 --> 00:06:21,680\nI was sure I didn't want to do anything with computer programming.\n\n67\n00:06:23,500 --> 00:06:25,260\nBut yeah, did end up\n\n68\n00:06:26,440 --> 00:06:29,240\ninto that. And I also started with Java,\n\n69\n00:06:30,060 --> 00:06:34,420\nbut eventually found my way to JavaScript. That's when I decided, oh, programming is actually pretty fun.\n\n70\n00:06:35,020 --> 00:06:37,740\nWas when I found JavaScript. So,\n\n71\n00:06:38,360 --> 00:06:39,640\nvery cool. So,\n\n72\n00:06:40,080 --> 00:06:44,940\nyou have been doing this web stuff for a really long time. What would you say is the most interesting,\n\n73\n00:06:47,540 --> 00:06:48,780\nwith all the perspective\n\n74\n00:06:49,440 --> 00:06:54,840\nthat you have from your years of experience, what would you say is the most interesting thing that's happened in the web in the last couple of years?\n\n75\n00:06:56,440 --> 00:06:58,940\nOh, I think just the APIs\n\n76\n00:06:59,380 --> 00:07:07,460\non the web, like the fact that you can do things that you can do now, like accessing devices, like we're using a web-based interface to have this conversation.\n\n77\n00:07:07,760 --> 00:07:12,840\nWhen I first started, that was impossible. Right? Yeah. When I first started, you couldn't even round buttons\n\n78\n00:07:13,340 --> 00:07:35,460\nwith CSS yet. You could only use JavaScript to round buttons. And a lot of people who are watching this may be like, I didn't even know that was a thing. Yeah, really, you could not do rounded corners on buttons. You had to use JavaScript or you'd use this idea of like, you remember that you'd use a table and you slice up an image in Photoshop that had the design you wanted and you use that as your button like you should do all kinds of\n\n79\n00:07:36,040 --> 00:07:52,220\nLike make fancy looking buttons and the fact that you can do any of that the fact that you can play video games in The browser, I mean, I just think the web APIs are just mind-blowing now because the browsers become this ubiquitous like portal for the world. So it's really fantastic. That is so cool.\n\n80\n00:07:54,060 --> 00:07:59,520\nIt really is amazing. I love seeing the cool things that people can do on the web. And I just,\n\n81\n00:08:00,260 --> 00:08:10,140\nI know that a lot of people are saying you gotta hedge your bets and learn different languages, and I have nothing against that. Like, feel free to learn other languages. I think that'll probably make you better at JavaScript.\n\n82\n00:08:11,100 --> 00:08:12,900\nBut I have just laser-focused\n\n83\n00:08:13,200 --> 00:08:19,500\nmy own career on JavaScript and the web, and that has worked out really well for me because there's really nothing I can't do,\n\n84\n00:08:21,260 --> 00:08:29,740\nrelatively speaking. I can almost hear some of the Rust level programmers out there like, oh, I can think of a lot of things you can't do, can't do. For now.\n\n85\n00:08:30,060 --> 00:08:31,060\nYeah, for now.\n\n86\n00:08:32,100 --> 00:08:34,039\nSo yeah, the web is awesome. So\n\n87\n00:08:34,340 --> 00:08:41,299\nsince then, the web has just been your whole focus then? Web and mobile. I've been really fascinated with mobile devices and mobile apps,\n\n88\n00:08:41,659 --> 00:08:52,260\nbut now because of how powerful the web is, you can just take your web skills and then you can apply those to like mobile development, which again, it's like mind blowing how the APIs are changing.\n\n89\n00:08:53,400 --> 00:08:55,520\nYeah, yeah, that's very cool. I have,\n\n90\n00:08:56,380 --> 00:09:02,380\nI did a little bit of a stint in mobile stuff, but when it came back to the web and I'm just\n\n91\n00:09:02,900 --> 00:09:04,140\nfull web guy now.\n\n92\n00:09:05,340 --> 00:09:06,360\nSo yeah,\n\n93\n00:09:07,280 --> 00:09:14,020\nMark, 1 of the cool things that I really have enjoyed following you is your Good Morning series.\n\n94\n00:09:15,260 --> 00:09:19,400\nSo for those of you who haven't seen what Mark is doing there,\n\n95\n00:09:20,140 --> 00:09:50,260\nwhy don't you give us a little intro to what is this Good Morning series all about? Yeah, so Good Morning with Mark is a web series that I do. I post online, different platforms, you can find me anywhere, literally, but mostly Twitter, but you can find me all kinds of places. But the idea behind it was that I really love helping people and I really love sharing the solutions to problems that I solve. So I do it through code, right? When I would teach classes, but also what about like personal like problems when you're\n\n96\n00:09:50,740 --> 00:10:11,540\ntrying to accomplish something? And I was like, oh, I could probably help people with this. And then I can also spread some like positivity out there because I don't know if you've been on Twitter before, but It can be super toxic, super quick. And it's really easy to just feel down. The world is in a very interesting place. There's so much happening. I'm like, okay, I like helping people. And I really like trying to help people, you know, like\n\n97\n00:10:12,180 --> 00:10:27,480\nfeel cared for. That's a really good way for me to kind of frame it, to feel cared for. So I started this series of just motivational videos that you could watch in about a minute, right? About a minute. And then you can get, hopefully, some inspiration and get yourself unstuck if you're stuck on something.\n\n98\n00:10:28,380 --> 00:10:29,940\nAnd that's where I've been\n\n99\n00:10:30,260 --> 00:10:31,420\nhaving a lot of fun lately.\n\n100\n00:10:31,960 --> 00:10:37,480\nYeah, I love it. And so, for those who haven't seen it yet, there's basically a video of Mark standing\n\n101\n00:10:37,800 --> 00:10:45,040\nand he says like, hold up a second with your doom scrolling or whatever, and then you just say something really inspirational for about a minute,\n\n102\n00:10:45,800 --> 00:10:47,140\nlike various topics,\n\n103\n00:10:47,860 --> 00:10:49,700\nwhat's holding you back, stuff like that.\n\n104\n00:10:50,500 --> 00:10:51,000\nAnd\n\n105\n00:10:51,340 --> 00:10:52,260\nvery encouraging\n\n106\n00:10:52,740 --> 00:10:54,120\nas well. It's not like,\n\n107\n00:10:55,080 --> 00:10:58,680\nI know some thought leaders or whatever, these business people,\n\n108\n00:10:59,040 --> 00:11:10,340\ninspirational speakers can speak in a lot of platitudes and stuff like that. And like, look at me, how successful I've been. That's absolutely not the vibe that Mark gives off. It's more like, I believe in you and\n\n109\n00:11:10,840 --> 00:11:12,580\nmakes you feel really good about yourself.\n\n110\n00:11:12,900 --> 00:11:21,040\nAnd this is, like you do this every week on a Monday morning. Is that the cadence that you're on? Yep, every week on Monday morning. Like right before,\n\n111\n00:11:21,340 --> 00:11:25,100\nso you see behind me is like my setup, that's where I stand to do these videos.\n\n112\n00:11:25,440 --> 00:11:25,940\nAnd\n\n113\n00:11:26,400 --> 00:11:33,980\nI was just recording right before our conversation. Oh, nice. To release the video for the current week. Oh man, so I'm standing between\n\n114\n00:11:34,860 --> 00:11:40,660\nyour wonderful video and like tons of people who want to get said good morning to.\n\n115\n00:11:41,380 --> 00:11:53,200\nOh good, no this is great. You know what's funny about those videos and you is that I remember the first time you interacted with 1 of those videos, I was like, wow, I didn't even think that I was on your radar. If that makes sense. Right. And not because\n\n116\n00:11:53,560 --> 00:11:56,900\nlike, okay. So people who have never met Kent, this is to you friends.\n\n117\n00:11:57,320 --> 00:12:12,740\nHe is so kind and like genuine and personable. Like It's not even that he acts weird. It's just, I do know about you, Kent, that your following is quite large. Lots of people always vying for your attention. You know what I mean? So the fact that I came across your timeline and that you interacted,\n\n118\n00:12:13,140 --> 00:12:24,660\nit caught me off guard. I was like, wow, that I was even on your radar that you even had the time because how busy you are to even like watch a video, right? And so that was super encouraging for me. I was like, oh, so people are watching these videos\n\n119\n00:12:25,080 --> 00:12:28,480\nand it is, like you said, it's not the like empty platitudes.\n\n120\n00:12:28,820 --> 00:12:29,740\nIt's more like\n\n121\n00:12:30,060 --> 00:12:32,860\nI've done this or I've been here. Let me tell you\n\n122\n00:12:33,480 --> 00:12:43,220\nhow I got out of it. Maybe it can help you, but more than anything, like you said, I want you to believe in yourself because I actually believe that most people can get what they want out of life if they believe in themselves enough.\n\n123\n00:12:43,840 --> 00:12:47,700\nYeah, okay, so let's dig in. That was very nice of you. Thank you, Mark.\n\n124\n00:12:48,560 --> 00:12:49,660\nLet's dig into\n\n125\n00:12:50,220 --> 00:12:52,580\nsome of that concept a little bit\n\n126\n00:12:53,180 --> 00:12:53,680\nwith\n\n127\n00:12:54,300 --> 00:12:55,620\nbelief in yourself.\n\n128\n00:12:55,960 --> 00:13:02,680\nWhy do you think that it matters so much? Like, let me take a step back. Sometimes it can sound kind of corny\n\n129\n00:13:03,140 --> 00:13:08,740\nor cheesy, like just believe in yourself and all your dreams will come true, right? Like that sort of thing.\n\n130\n00:13:09,140 --> 00:13:10,740\nBut like, is that real?\n\n131\n00:13:11,660 --> 00:13:26,460\nAnd what is so important about really believing in yourself? And What does that actually mean as well? Sure, so the reason I think believing in yourself is real and why it's powerful when somebody else believes in you, but like you really got to believe in yourself is because there will be times where you just will not have the support\n\n132\n00:13:26,980 --> 00:13:27,480\nthat\n\n133\n00:13:27,980 --> 00:13:33,340\nyou need to get through. So whenever you do anything hard, like a support system is really important.\n\n134\n00:13:33,900 --> 00:13:34,580\nAnd sometimes\n\n135\n00:13:34,940 --> 00:13:45,580\nthat journey of doing something that's worth doing or challenging for yourself, you won't have the support system the whole time. You may not have it when you start. And that's when believing in yourself really matters.\n\n136\n00:13:46,020 --> 00:14:06,240\nRight? Because as you've probably noticed that you might've been like, oh, I'm gonna make this like fantastic course. And some people were like, like your first course. We were like, OK, he'll do it, whatever. But then as soon as you did it, then the support system came flooding in. Everybody's like, oh, yeah, Kent can do this. He could totally do this. Yeah, you got this. Can't wait for your next 1. But what about the times when you were like, man, I'm like\n\n137\n00:14:06,680 --> 00:14:21,420\n100 hours in and developing this course and I'm tired. I don't know if anybody will even care. Am I the qualified person to do it? All the negative self-talking come in. And so believing in yourself can be like the thing that carries you over the line, I believe.\n\n138\n00:14:21,900 --> 00:14:26,620\nOh yeah, I 100% agree. Like, especially when you're getting started\n\n139\n00:14:27,340 --> 00:14:28,060\nand nobody\n\n140\n00:14:28,680 --> 00:14:37,480\nknows what you're working on. And so even if they were going to be nice and say like you can do it They they don't even know what they're saying you can do\n\n141\n00:14:38,640 --> 00:14:40,420\nAnd so like yeah\n\n142\n00:14:41,120 --> 00:14:44,080\nThe only person who can believe in you in that point is yourself\n\n143\n00:14:44,720 --> 00:14:52,860\nRight, and I think having that attitude like if you don't believe in yourself, then why would you even do it? And so without the attitude,\n\n144\n00:14:53,360 --> 00:14:55,880\nyou're not going to, it's not going to be\n\n145\n00:14:56,240 --> 00:14:56,740\npossible.\n\n146\n00:14:57,540 --> 00:15:00,860\nSure. So. And I'll be, I'll be transparent. I've had it. I've had\n\n147\n00:15:02,080 --> 00:15:03,540\na pretty tough\n\n148\n00:15:04,200 --> 00:15:06,640\ngo of life. Like my life has been very challenging.\n\n149\n00:15:08,180 --> 00:15:10,060\nAnd I've had lots of people doubt\n\n150\n00:15:10,580 --> 00:15:16,300\nthat I could accomplish the things that I've accomplished. I've had lots of people just been like, yeah, all right. Like when I mentioned that teacher,\n\n151\n00:15:16,640 --> 00:15:21,260\nright, who believed in me, like at that time, I was just going through like a phase of like\n\n152\n00:15:21,960 --> 00:15:28,040\nidentity crisis, kinda, where I knew that I was capable and I was smart, but I didn't know who I wanted to be.\n\n153\n00:15:28,700 --> 00:15:34,820\nAnd I had this teacher just kind of be like, hey, look, you can do totally better than this. Like you could totally do more\n\n154\n00:15:35,240 --> 00:15:39,360\nthan you're doing. Right. Like you're about to fail this class, but I know you could be good at this.\n\n155\n00:15:39,800 --> 00:15:53,620\nAnd her making me like stay behind at school changed my life because if she didn't do that, I probably would not have pursued computer science longterm or I wouldn't have had the same path that I've had, right? And got on the trajectory. So yeah,\n\n156\n00:15:54,140 --> 00:16:03,780\nyou know, so it's good to have people believe in you, but then there are times where I had to believe in myself when I built my first company. It was Like, yeah, I had to, there were some nights that I was just like, man, I hate this.\n\n157\n00:16:04,400 --> 00:16:06,100\nAnd nobody's gonna like what I'm making.\n\n158\n00:16:06,820 --> 00:16:13,120\nAnd everything sucks. But I had to believe like, no, you can do this. You can do this, bro. Like, you just gotta keep going. Just do not give up.\n\n159\n00:16:13,680 --> 00:16:14,180\nYeah,\n\n160\n00:16:14,680 --> 00:16:20,100\nI think so much of what we accomplish comes from our attitude around it.\n\n161\n00:16:20,740 --> 00:16:23,900\nAnd so, yeah, I appreciate your Monday\n\n162\n00:16:24,400 --> 00:16:25,940\nvideos that helps\n\n163\n00:16:26,540 --> 00:16:35,100\nrestore that belief in ourselves. Even if it's just a reminder, oh yeah, I need to have a more positive attitude about life right now.\n\n164\n00:16:35,540 --> 00:16:48,500\nThat positivity is good. And I definitely appreciate that on Twitter or X, where things can be very anonymous and random strangers can pop up and kind of ruin your day. And so having\n\n165\n00:16:48,960 --> 00:16:53,940\na friend pop up and be like, hey, I think you're awesome, don't forget it. And that just\n\n166\n00:16:54,440 --> 00:16:57,140\ndoes help. It matters. It means something.\n\n167\n00:16:57,660 --> 00:17:04,260\nAnd speaking of the random strangers that ruin your day, 1 thing I try to do is be the random stranger that roots you on.\n\n168\n00:17:04,599 --> 00:17:12,680\nAnd like this 1 person did not know her from anywhere, never met her before. She was like, oh, I'm starting my first day at General Assembly.\n\n169\n00:17:13,079 --> 00:17:37,000\nAnd so I was coding bootcamp. And I just quote tweeted it. And I was like, hey, we believe in you, you got this, good luck, proud of you, you can do it, you know what I mean? And just be that random stranger that instead of like, you know, crapping on her idea or be like, man, bootcamp suck there, a scam or whatever you want to say, you know what I mean? I was like, nope, I'm gonna be the opposite person. I'm gonna just push her on because I just know that when you're going through that process, that's a hard road. Boot camps are hard,\n\n170\n00:17:37,340 --> 00:17:37,840\nright?\n\n171\n00:17:38,800 --> 00:17:51,840\nAnd yeah, so anyway, I like to be the random stranger that roots people on too. I love that. Yeah, we need more of those. All right, Stop being the random person who says you're doing it wrong and be the random person who says you rock. That's great.\n\n172\n00:17:52,760 --> 00:17:53,260\nCool.\n\n173\n00:17:54,520 --> 00:17:57,480\nSo bringing it back, I guess, a little closer\n\n174\n00:17:58,040 --> 00:18:05,780\nto web dev stuff, what is it that you're working on right now? You're on the Angular team at Google, right? I am. I am.\n\n175\n00:18:06,680 --> 00:18:08,580\nYeah, so I'm working on 2 things.\n\n176\n00:18:09,280 --> 00:18:11,020\nSo 1 is the whole Angular\n\n177\n00:18:11,820 --> 00:18:22,320\nworld. So Angular is a web framework that helps you build scalable apps. And so if you've not used it before, that's totally OK. Because whenever I meet people who never use Angular, they get this weird\n\n178\n00:18:22,660 --> 00:18:38,600\nposture about it. I'm like, it's OK. I've never used some other tools either. I've never used Solid. But when I met Ryan Carneado, I was like, Hey, I could appreciate your work though, you know, but I never used it. So anyway, but, Angular web framework. Right. And so we had,\n\n179\n00:18:38,940 --> 00:18:47,220\nyou know, it's just this really interesting journey where we started out, brought TypeScript kind of, I won't say we brought it to the mainstream, but we were the first framework to\n\n180\n00:18:47,720 --> 00:18:52,480\njust really embrace TypeScript from the start. Yeah. And we were just using TypeScript.\n\n181\n00:18:53,000 --> 00:18:53,760\nAnd so\n\n182\n00:18:54,160 --> 00:18:55,780\nthat was kind of trailblazing\n\n183\n00:18:56,120 --> 00:18:57,000\nat that time.\n\n184\n00:18:57,340 --> 00:19:04,860\nAnd then we were also using observables early, early on. And again, thinking about this idea of a stream of events that happen over time that are unpredictable,\n\n185\n00:19:05,220 --> 00:19:13,760\nprogramming like that, like those are things that are really trailblazing. And then I think we got into a place where we knew we needed to make a core evolutionary change to the framework\n\n186\n00:19:14,440 --> 00:19:23,460\nin order to meet the needs of the next generation of web apps. But it took us a long time to get there. I'll be honest with you. We had about a two-year period where\n\n187\n00:19:24,400 --> 00:19:25,780\nwe just lost a little momentum\n\n188\n00:19:26,100 --> 00:19:29,940\nbecause we were trying to make this really significant change.\n\n189\n00:19:30,300 --> 00:19:40,140\nAnd so when we finally got out of it, now, you know, a lot of people are talking about Angular because we're releasing new features. We've been able to just add a lot of brand new things to the framework. But,\n\n190\n00:19:40,520 --> 00:19:44,560\nyou know, right now, what's interesting to me is how do we continue to serve developers?\n\n191\n00:19:45,040 --> 00:19:55,300\nAnd so that's what I've been working on on the Angular team is like trying to figure out how do we serve developers who want to build scalable applications? Like what can we do to be the best framework for you if that's what you want to use?\n\n192\n00:19:55,840 --> 00:20:09,020\nYeah, I think I can definitely relate to the idea of like we have this thing that we're working on and it's a really, really foundational change and it's taking a lot of time and then you finally finish it and then it's just like\n\n193\n00:20:10,280 --> 00:20:13,540\nthe dam has broken and everything else comes finally.\n\n194\n00:20:14,700 --> 00:20:16,300\nThat's a really, really awesome\n\n195\n00:20:16,640 --> 00:20:27,180\nthing. Now the thing, the revolutionary, or like the big change that you were making was to move to signals, is that right? Oh no, even before that, it was to change our rendering engine.\n\n196\n00:20:28,180 --> 00:20:32,920\nAnd so for our template rendering engine, we moved something called View Engine to Ivy.\n\n197\n00:20:33,400 --> 00:20:35,840\nAnd it's an incremental view engine. And\n\n198\n00:20:36,160 --> 00:20:38,220\nagain, 1 of those things where it's like\n\n199\n00:20:38,600 --> 00:20:42,540\nreally good idea is just, I think that we maybe underestimated\n\n200\n00:20:42,880 --> 00:20:44,560\nhow long it would take us,\n\n201\n00:20:45,140 --> 00:20:48,000\nBut now we're actually able to benefit from\n\n202\n00:20:48,340 --> 00:20:54,120\nhaving that change. So now we can do things like signals, right? Which is a huge thing. And then we have all these things around\n\n203\n00:20:54,480 --> 00:20:58,220\nour new template syntax where you can do deferred loading,\n\n204\n00:20:58,520 --> 00:21:05,780\ndefining your templates. And So all these fantastic features that we get to do now are because we went through that really hard time\n\n205\n00:21:06,100 --> 00:21:11,920\nof that migration from Vue engine to Ivy, but now we're able to just continue to keep the hips rolling.\n\n206\n00:21:12,240 --> 00:21:14,940\nOh, dude. Okay. So I feel like there are\n\n207\n00:21:16,000 --> 00:21:23,040\na lot of lessons that we can learn from that, both like from a code perspective, but also from a personal life perspective.\n\n208\n00:21:23,500 --> 00:21:27,740\nYou know, like that, that to me sounds a lot like sharpening the saw and\n\n209\n00:21:28,080 --> 00:21:32,780\nyou know, all of those things that, I don't know, that just made me think of a bunch of\n\n210\n00:21:34,200 --> 00:21:36,840\nthings where it's time to invest back\n\n211\n00:21:37,360 --> 00:21:39,440\nin the foundation a little bit, right?\n\n212\n00:21:40,440 --> 00:21:48,000\nI think- Sometimes you gotta do that just as a human, right? Like as a person. You just gotta like take that L and just like, I don't want to say disappear\n\n213\n00:21:48,420 --> 00:21:59,000\nfor 2 years, but sometimes you do just have to do something that has taken a long time, but it's worth it. You just got to sit there and go through it and it's going to suck in the middle of it.\n\n214\n00:21:59,600 --> 00:22:01,860\nWhat it'll allow you to do for yourself,\n\n215\n00:22:02,560 --> 00:22:03,060\nright?\n\n216\n00:22:03,680 --> 00:22:19,500\nIs a valuable thing. So I told you the parallels there. Yeah, yeah. I think education is another 1 where it's like, you know what, I'm gonna pause shipping, you know, on my side projects for a little bit and just dedicate time to like re-evaluating the fundamentals\n\n217\n00:22:19,860 --> 00:22:21,160\nand that sort of thing.\n\n218\n00:22:21,760 --> 00:22:25,100\nSolidify my foundation, yeah. Yeah, that's very cool.\n\n219\n00:22:26,000 --> 00:22:26,500\nSo,\n\n220\n00:22:27,880 --> 00:22:35,720\nI'm curious, Mark, what your take on the future of not just Angular, but the future of the web, the future of software development,\n\n221\n00:22:36,220 --> 00:22:40,460\nfuture of the world. Like, where do you think we're going? I feel like there's just a lot\n\n222\n00:22:41,040 --> 00:22:41,620\nof uncertainty,\n\n223\n00:22:41,920 --> 00:22:55,580\nright? A lot of things are happening. Where do you think the future is going, Mark? It's perfect, Segway, because I think the second thing that I'm working on is figuring out how to help developers find the future for themselves. So it's no secret that like, ChatGPT\n\n224\n00:22:56,040 --> 00:23:03,040\nand AI and LL and large language model based systems have burst into the same and really changed the way that\n\n225\n00:23:03,440 --> 00:23:04,780\nwe perceive work,\n\n226\n00:23:05,280 --> 00:23:10,780\nright? And I think as a developer, this is the last 10 to 12 months have been a really scary time\n\n227\n00:23:11,120 --> 00:23:15,480\nbecause I think that if you see things, people like, Oh, Chad GPT just wrote my entire\n\n228\n00:23:16,240 --> 00:23:18,740\nunit test, or I showed a picture\n\n229\n00:23:19,200 --> 00:23:21,180\nand then it created the application\n\n230\n00:23:21,560 --> 00:23:22,380\nfor me\n\n231\n00:23:22,740 --> 00:23:26,020\nand I showed it a wireframe or I did this thing, I did that thing.\n\n232\n00:23:27,440 --> 00:23:29,120\nLike you might just feel like you're toast.\n\n233\n00:23:29,720 --> 00:23:46,260\nYou just feel like it's over. Why would I learn anything more when this is the future? And like, as a content creator, I see like these like video, you know, AI videos that now can change your language in real time and change your lips moving and like all these things, right? So it makes you feel like the human effort\n\n234\n00:23:46,560 --> 00:23:51,820\nis being slowly phased out in favor of like machine effort. I don't think that's the full story.\n\n235\n00:23:52,340 --> 00:23:56,260\nI think that what people have to understand is that,\n\n236\n00:23:57,040 --> 00:23:57,540\nAI\n\n237\n00:23:58,660 --> 00:24:02,300\nis not perfect, but it is going to change everything,\n\n238\n00:24:02,780 --> 00:24:08,760\nright? Like I don't think you can rely on chat GP. Well, somebody tried this. Somebody tried to build a business with chat GPT.\n\n239\n00:24:09,720 --> 00:24:13,820\nI'm only gonna do the things that chat GPT says and they didn't make any money.\n\n240\n00:24:14,340 --> 00:24:18,120\nRight? Like seriously, they didn't make any money. Like none of the systems could replace\n\n241\n00:24:18,520 --> 00:24:28,400\nthe human decision-making. So the way I think about AI now, or for you as a developer, so the friends at home, if you're listening right now, here's what I would say you should do right now.\n\n242\n00:24:28,780 --> 00:24:32,120\nLearn how to build AI enabled systems,\n\n243\n00:24:32,580 --> 00:24:40,140\nnot build systems with AI, like using chat GPT to do your work. I'm saying, learn how to make applications that leverage AI.\n\n244\n00:24:41,200 --> 00:24:49,300\nBecause I think that's the future, because 1 of the things that happens is that I am completely starting to start talking too much, but I'm really passionate about this. No, no, this is great. I love your take.\n\n245\n00:24:49,640 --> 00:25:10,460\nSo I think this, users are gonna expect more and more out of applications now, out of software. Yeah. Right? And you should be the ones that like, know how to build those systems that can do more. And the example I've been using is like a calendar. Like imagine if you had like really smart calendar software, it's like, Oh, Kent has a doctor's appointment today at let's say 11 a.m.\n\n246\n00:25:10,920 --> 00:25:18,340\nI already know Kent doesn't drive a car because I can tell that he uses Lyft and Uber all the time. Okay, fine. I don't know if your car came, but I'm just saying.\n\n247\n00:25:19,020 --> 00:25:23,260\nMaybe Ken doesn't have a car. So it would know to like schedule your Lyft\n\n248\n00:25:23,860 --> 00:25:28,860\nor Uber for you, right? It'll remind you, like, it'll get, can read your\n\n249\n00:25:29,440 --> 00:25:35,420\nappointment information all locally, nothing in the cloud, right? But locally, I'm like, oh yeah, you should fast for this. Send you a notification\n\n250\n00:25:35,860 --> 00:25:56,020\nat like, you know, the night before, at minute, like, hey, make sure this is your last meal. You got, you have to, you know, like really smart, sophisticated software that do things beyond human scale, right? That's where I think we should leverage AI, is to build software that can do things that humans can't do. I couldn't translate every book known to man, right? Humans can do it, but AI could do it.\n\n251\n00:25:56,420 --> 00:26:01,100\nI think medical space is another place where AI is going to change the world. We'll get earlier detections,\n\n252\n00:26:01,400 --> 00:26:08,300\nyou know what I mean? Like patterns will get pulled out that humans could have missed, but AI will be able to find it. But that doesn't mean we replace our doctors.\n\n253\n00:26:08,860 --> 00:26:10,580\nIt just means that we give tools\n\n254\n00:26:11,440 --> 00:26:14,720\nthat help change the way that people get served.\n\n255\n00:26:15,060 --> 00:26:18,540\nAnd we should be the ones to create those tools. Like don't get left out of that\n\n256\n00:26:19,780 --> 00:26:20,280\nplan.\n\n257\n00:26:21,220 --> 00:26:23,800\nYeah, yeah. I like that. I think\n\n258\n00:26:25,620 --> 00:26:27,840\nif there's any good takeaway from this\n\n259\n00:26:28,740 --> 00:26:33,660\nsegment of our conversation, It's like go build something that uses AI in some way.\n\n260\n00:26:34,000 --> 00:26:34,740\nAnd OpenAI's\n\n261\n00:26:35,060 --> 00:26:40,220\nAPI is great. It's not the only game in town, but it is a really easy 1 to use.\n\n262\n00:26:40,840 --> 00:26:43,160\nAnd just get yourself a little bit familiar\n\n263\n00:26:43,620 --> 00:26:48,820\nwith that sort of thing. Build a little demo or something just so that you get used to that.\n\n264\n00:26:49,900 --> 00:26:51,140\nI would add\n\n265\n00:26:51,500 --> 00:26:52,980\nthat learning how to\n\n266\n00:26:53,460 --> 00:26:53,960\nleverage\n\n267\n00:26:54,360 --> 00:26:54,860\nAI-based\n\n268\n00:26:55,440 --> 00:26:57,240\ntools as like AI assistants\n\n269\n00:26:58,500 --> 00:27:00,180\nin your regular coding, that's\n\n270\n00:27:01,120 --> 00:27:02,120\nreally, really helpful.\n\n271\n00:27:02,660 --> 00:27:04,900\nA lot of people will look at ChatGPT\n\n272\n00:27:05,220 --> 00:27:13,360\nand they'll be like, look at that garbage output. This is such a terrible thing. It'll never really be all that useful or whatever. I totally disagree with that. I think\n\n273\n00:27:15,660 --> 00:27:28,300\nyou could look at a kitchen and make some meal that is garbage, of course, but you can also, like, if you're really good at it, you can use those tools to make a really great meal as well. And so you have to recognize\n\n274\n00:27:28,660 --> 00:27:33,220\nthe ingredients that go into a really good output from the AI.\n\n275\n00:27:33,580 --> 00:27:36,160\nI love that. Super smart. I didn't think about the kitchen\n\n276\n00:27:37,120 --> 00:27:39,060\nanalogy. It's a great analogy. Fantastic.\n\n277\n00:27:39,960 --> 00:27:48,340\nWell, cool. So I'm looking forward to our AI future. I think it's awesome. I really enjoy the tools. And actually in the workshops,\n\n278\n00:27:48,820 --> 00:28:02,940\nI do not turn off co-pilot. I leave that on and it's very intentional and I just show people, here's how you use this tool and how you properly review the code that it generated for you so that you make sure that it's doing what you want it to do.\n\n279\n00:28:03,940 --> 00:28:06,140\nWait, pause right there. That's interesting.\n\n280\n00:28:07,120 --> 00:28:08,620\nMake sure that you review\n\n281\n00:28:09,800 --> 00:28:10,700\nthe output.\n\n282\n00:28:11,580 --> 00:28:15,840\nSo does that mean, Kent, that we still have to know how to code? Oh, snap.\n\n283\n00:28:17,460 --> 00:28:21,720\nThis stuff is not taking our jobs yet. Maybe 1 day, but yeah, today,\n\n284\n00:28:22,200 --> 00:28:23,720\nI definitely see\n\n285\n00:28:24,280 --> 00:28:25,580\nCoPilot as\n\n286\n00:28:26,320 --> 00:28:35,780\nlike an intern that I'm working with that like doesn't quite understand all the context that I get. And maybe 1 day it will have a lot more context, but even still it doesn't\n\n287\n00:28:36,820 --> 00:28:45,120\nknow everything that I want it to do. And so, yeah, you definitely need to review it. And there's more than once in the videos of Epic Web where I say,\n\n288\n00:28:45,560 --> 00:28:48,540\nSilly copilot, that's not at all right at all.\n\n289\n00:28:48,940 --> 00:28:53,200\nAnd I leave that stuff in there because I think that it's important for people to know\n\n290\n00:28:54,080 --> 00:29:01,580\nthat you don't just blindly follow what the AI is producing for you. You just, you got to treat it as a coworker that helps you type faster.\n\n291\n00:29:02,020 --> 00:29:07,220\nThat's right. And I think that for people, if you are like a person who wants to do your side projects,\n\n292\n00:29:08,140 --> 00:29:16,660\nI just imagine what would probably take me like 3 weeks of nights and weekends, what, how, how much can I reduce that time if I use an AI system,\n\n293\n00:29:17,080 --> 00:29:38,980\nright? And then how could I be more prolific with my output without, and reducing the chance of burnout, because 1 of the hard things about like side projects is that you're, if you're working full time and then you're doing this at night, eventually you will start to burn the candle at both ends. Right. And so these tools could totally change the way that you do stuff. I just think that it's a mistake to ignore it.\n\n294\n00:29:39,320 --> 00:29:43,220\nI think a lot of developers are just kind of writing it off and, and\n\n295\n00:29:43,520 --> 00:29:58,420\nmaybe not your audience. Right. Well, like Maybe people who are more just like negative about it, to be honest with you, just more negative perspective, like, oh, you know, this will never be anything. Look how bad this output is, or look how wrong this code is. I'm like, it's wrong now, but you do know this thing's going to get better. Yeah.\n\n296\n00:29:58,820 --> 00:29:59,540\nAnd so\n\n297\n00:30:00,020 --> 00:30:00,560\nwhat, so, So\n\n298\n00:30:01,500 --> 00:30:12,140\nI guess 1 way to also think about it for friends at home who still may be a little scared, the baseline will change, right? So right now you have like, I have to look at Fiverr. I feel like they're at risk\n\n299\n00:30:12,660 --> 00:30:19,100\nwith all the AI tools, the people who like, you know, use templates to generate a lot of stuff. Eventually like those like\n\n300\n00:30:19,640 --> 00:30:35,360\nkind of lower level outputs will be kind of changed. And then a lot of the jobs that are kind of lower level problem solving will probably be automated through like tools, AI tools eventually, for sure. I mean, that's the sad reality. Some people will be displaced by this technology,\n\n301\n00:30:36,040 --> 00:30:48,540\nbut I'm telling you, people who are listening to our conversation, like here's how you don't end up in that pile, right? Like you learn to be, like you say, learn how to use the tools and also learn how to build the tools. Like you get open AI,\n\n302\n00:30:49,140 --> 00:30:49,640\nFirebase\n\n303\n00:30:50,140 --> 00:30:51,780\nhas a bunch of tools where\n\n304\n00:30:52,300 --> 00:30:52,800\nif\n\n305\n00:30:53,300 --> 00:31:11,880\nyou can just include it in your app, like the AI program parts already done for you, but your app can then take advantage of those features. I mean, like you can start doing that stuff right now. You should, like you said, build something small. Even if it's the version of Hello World with an AI assistant, just start to understand how these tools work so that way you are\n\n306\n00:31:12,180 --> 00:31:19,320\nready when the industry eventually shifts completely, you'll be right there ready, ready to go. Yep, yep, 100%.\n\n307\n00:31:20,140 --> 00:31:21,360\nWell, Mark, we've covered\n\n308\n00:31:21,760 --> 00:31:23,040\na lot of different\n\n309\n00:31:23,360 --> 00:31:23,860\ntopics.\n\n310\n00:31:24,180 --> 00:31:31,620\nIs there anything that we didn't really talk about that you'd like to dive a little deeper on or you'd like to talk about? Yeah, I would like to\n\n311\n00:31:32,500 --> 00:31:40,020\nencourage people mostly just like you and I. So, and here's why I say that, because I think that's something that you do is you complete really large projects.\n\n312\n00:31:41,760 --> 00:31:43,760\nAnd that is a very hard skill.\n\n313\n00:31:46,700 --> 00:31:52,320\nAnd people don't realize it. Because so, so here's the problem I think that people run into. They underestimate\n\n314\n00:31:52,760 --> 00:32:05,580\nhow hard something is, and they overestimate how capable they are doing it. That sounds a little mean, but I don't mean it like that. I mean, you may be not capable to do it because you have kids at home, or you have a loved 1 you're taking care of, right? Like you overestimate\n\n315\n00:32:05,920 --> 00:32:14,660\nyour ability to do it or your, or availability to do it. Let's say it that way. That's a little bit nicer because I think you can do anything you want. Okay. Yeah.\n\n316\n00:32:16,220 --> 00:32:18,620\nHow do you complete such large projects?\n\n317\n00:32:19,600 --> 00:32:23,260\nOoh, yeah, you know, I start by completing smaller ones.\n\n318\n00:32:24,340 --> 00:32:33,100\nRight? So like I, because I am much more capable of building something like Epic Web today than I was before I made my first course on egghead.\n\n319\n00:32:34,020 --> 00:32:34,960\nAnd so yeah,\n\n320\n00:32:36,200 --> 00:32:38,600\nstart small and build from there. That helps a lot.\n\n321\n00:32:39,380 --> 00:32:40,460\nStart small. So\n\n322\n00:32:41,320 --> 00:32:46,420\nhow do you figure out what's the smallest unit then that you should start at? Ooh, yeah. Yeah, that's a good question.\n\n323\n00:32:47,780 --> 00:32:49,580\nI don't know. I think\n\n324\n00:32:50,980 --> 00:32:56,620\nyou need those quick wins though. So you do need to figure out a way to break it down so that you can,\n\n325\n00:32:57,740 --> 00:33:08,740\nthis kind of feeds into believing in yourself like we were talking earlier. You have to have something that you can finish and then you'd say I am a person who finishes stuff Mmm, and that's a good feeling\n\n326\n00:33:11,400 --> 00:33:16,740\nFind a way find a way to break it down into something small it I think it's hard to define\n\n327\n00:33:17,840 --> 00:33:18,580\na general\n\n328\n00:33:18,900 --> 00:33:24,900\nrule for how to break things down, because it's gonna depend largely on things. But if you wanna get into\n\n329\n00:33:25,900 --> 00:33:28,020\nblogging or something like that, then\n\n330\n00:33:28,500 --> 00:33:29,480\nI would say\n\n331\n00:33:30,040 --> 00:33:32,380\nDon't build the blog first, write the blog post.\n\n332\n00:33:33,520 --> 00:33:37,840\nAnd get that published, even on like, I used to publish blog posts on GitHub Gist.\n\n333\n00:33:39,340 --> 00:33:42,280\nAnd yeah, just throw up some content somewhere.\n\n334\n00:33:43,260 --> 00:33:44,440\nAnd over time,\n\n335\n00:33:45,040 --> 00:33:47,820\nyou can start doing a little bit more of the fancier stuff.\n\n336\n00:33:48,120 --> 00:33:50,220\nOkay, 100% true story.\n\n337\n00:33:50,640 --> 00:33:56,140\nBy the time people have watched this video, maybe this video will be out before people get to see this most likely.\n\n338\n00:33:56,780 --> 00:34:00,220\nWhat you just said is what today's video is about. Oh, snap.\n\n339\n00:34:00,720 --> 00:34:08,800\nBecause I was saying, in this video, it's called like, stop trying to cheat the system. Because what people will do is they'll say, well, I want to do this thing.\n\n340\n00:34:09,219 --> 00:34:27,460\nAnd then, or I want to learn this thing. And then they'll think of all the like tasks surrounding it instead of doing the actual thing they want to do. So instead of like writing the blog, they were like, okay, I got to build a blog. Okay. Now I got to learn this framework and then I got to do this thing. And I got to do this. I got to find hosting. None of this had nothing to do with writing a blog. Yeah.\n\n341\n00:34:28,020 --> 00:34:30,780\nBut you feel so good because you're like, well, I'm learning.\n\n342\n00:34:31,280 --> 00:34:42,380\nI'm learning. So you try to cheat the system, which is really a way for you as an overachiever. If you identify as an overachiever, for you to just do more stuff because overachievers just want to do a lot of stuff. They want to overachieve.\n\n343\n00:34:42,880 --> 00:35:02,460\nAnd so me as an overachiever, I've done that before. So anyway, the point being is that like what you just said, literally what I filmed right before we talked, which is just about that idea of like, don't cheat the system. Just do the thing that you're trying to do. Don't try to like, you know, add all these other things on because you're probably not going to finish because you've taken on too much.\n\n344\n00:35:03,280 --> 00:35:08,260\nYeah, yeah. You know, that makes me think of a concept that I've thought about over the years\n\n345\n00:35:08,680 --> 00:35:13,400\ncalled needs-based learning. I should probably write a blog post about this. But like, so\n\n346\n00:35:14,060 --> 00:35:18,340\nthe idea is instead of saying, oh, I'm gonna build a blog\n\n347\n00:35:18,680 --> 00:35:25,540\nso that I can have a blog post and I'm gonna learn about hosting and stuff, you don't really need to do those things to get the blog out there.\n\n348\n00:35:26,300 --> 00:35:44,600\nBut you get a couple blog posts done and then you're like, you know what, I really need to get those on my own domain. Okay, so now you need to learn how to get a domain. And then, oh, I need to have some sort of site there with, you know, I've got static content, I can just put HTML files out there. And so, like over time,\n\n349\n00:35:45,060 --> 00:35:47,860\nAnd we actually kind of do this naturally on the job too.\n\n350\n00:35:48,480 --> 00:35:51,840\nThe boss says, we need to do this thing, and so now you need to learn\n\n351\n00:35:52,280 --> 00:35:52,780\nX.\n\n352\n00:35:54,340 --> 00:35:59,980\nYou jump into a project that uses Redux, and now I need to learn Redux. And so\n\n353\n00:36:01,060 --> 00:36:11,340\nI'd say needs-based learning isn't the only way to do it. Of course, like if you want to, the problem with needs-based learning is that you skip over fundamentals that if you had those, you'd do things differently\n\n354\n00:36:12,180 --> 00:36:13,520\nand stuff would be better.\n\n355\n00:36:14,200 --> 00:36:17,720\nBut- Potentially better. Yeah, potentially better, yeah, yeah.\n\n356\n00:36:18,100 --> 00:36:21,240\nBut I think needs-based learning kind of helps avoid\n\n357\n00:36:21,960 --> 00:36:22,460\nthis\n\n358\n00:36:22,860 --> 00:36:24,680\nparalysis that comes from\n\n359\n00:36:25,520 --> 00:36:26,360\njust constantly\n\n360\n00:36:27,180 --> 00:36:43,000\nfeeling like you have to do all the peripheral things rather than just shipping the stuff that you wanna ship. So like do as little as possible as it takes to ship the thing you're trying to ship. That's right, that's right. If I could go back to any side project that I've ever not completed,\n\n361\n00:36:43,320 --> 00:36:54,780\nI wish that I would have done as little as possible. So the thing that I tell people now is that if I did another side project, like another company or try to do a startup, first thing I would do is make a webpage with the buy now button.\n\n362\n00:36:57,040 --> 00:36:59,620\nI wouldn't do anything else. I wouldn't buy any domains,\n\n363\n00:37:00,060 --> 00:37:07,320\nMaybe a domain, maybe if it's cheap, only if it's like $10 or $5, right? Yeah. But like, quick domain, Squarespace, whatever,\n\n364\n00:37:07,780 --> 00:37:26,300\nGitHub, just something where I can put a buy now button before I build anything. Because the thing that I think that people do is like, this is a different conversation, but I'm just saying like, like you said, needs-based. And I feel like the only thing you need to know at first, if you're trying to sell something, if people want to buy it, that's what you need to know before you even like do anything else.\n\n365\n00:37:26,780 --> 00:38:17,460\nAnd so I will say, yeah, if I get, put some analytics on it, If people actually clicked it, then I was okay. People want it. Right. But if nobody ever clicked it, nobody ever searched for it. I don't get any traffic to it. What do you think is going to happen when you finish it? Yeah. We'll get any traffic then, which is what happened to me. This is how I know this lesson. Nobody cared about the thing that I built, even though I spent 3 and a half years building it. Oh yeah. And they definitely don't care how long you spent on it, right? Nope, nobody cares. They still don't. Nobody's texting me like, hey, are you ever gonna add more features? Nobody's, you know what I mean? Like nobody's like into it, which is fine. I learned a lot. Yeah. But I ended up getting to the point of, the reason I was able to ship that project was because I eventually got to the point you're talking about, which is doing the smallest thing to ship, right? I was just like, nope, just gotta ship, gotta ship. Yeah, you know, like a couple, around when COVID hit, my sister\n\n366\n00:38:18,080 --> 00:38:38,940\nis a accomplished violinist and has a bunch of violinist friends. And so she was seeing all of her violinists not being able to get performances and get paid that way. And so she was thinking, well, how about I put together a site where I can get them teaching so they can teach people. And so she talked to me about it because I'm the developer brother, and she's like, hey,\n\n367\n00:38:39,660 --> 00:38:43,740\nbasically what she described to me was she wanted custom software for\n\n368\n00:38:44,640 --> 00:38:48,620\nbasically a Zoom-like platform, a Google Calendar-like platform,\n\n369\n00:38:50,380 --> 00:38:53,500\nlike scheduling, all of this stuff, all custom software.\n\n370\n00:38:54,000 --> 00:38:55,240\nAnd I told her,\n\n371\n00:38:55,600 --> 00:39:03,240\nno, no, no, no, you don't want that. Here's what you wanna do. You set up a webpage, just use Wix.com or something, that says,\n\n372\n00:39:04,700 --> 00:39:07,860\nschedule your lessons here, whatever, and then you manually\n\n373\n00:39:08,680 --> 00:39:09,180\nintegrate\n\n374\n00:39:09,920 --> 00:39:10,420\nTito.com\n\n375\n00:39:11,920 --> 00:39:26,820\nor whatever that Tito is called. I don't know that domain, but yeah. So like you got the ticketing, and then you manually send out calendar events and then you manually set up Zoom calls and do everything manually, as little as possible automated as you can.\n\n376\n00:39:27,900 --> 00:39:34,860\nAnd then that way you're not out like hundreds of thousands of dollars in like multiple years building this platform that nobody ends up using.\n\n377\n00:39:35,740 --> 00:39:37,540\nAnd honestly, like we hear\n\n378\n00:39:38,300 --> 00:39:40,580\nthe success stories of\n\n379\n00:39:41,000 --> 00:39:41,500\nstartups\n\n380\n00:39:42,900 --> 00:39:44,040\nand like how\n\n381\n00:39:45,240 --> 00:39:45,740\ninfrequently\n\n382\n00:39:46,300 --> 00:39:47,360\nthose are successful.\n\n383\n00:39:47,920 --> 00:39:53,760\nAnd I think in large part, It's because they decide that they're gonna finish the thing before anybody wants it\n\n384\n00:39:54,940 --> 00:40:11,680\nI Think I really like your idea of just like the first thing you do is put up a buy now button and then you like Somebody says oh, yeah I want to buy this now And you figure out some random manual way to provide them the thing. Like you're not lying or anything. Like it's not like you're gonna promise something that you can't deliver.\n\n385\n00:40:12,180 --> 00:40:12,680\nBut\n\n386\n00:40:13,580 --> 00:40:16,280\nyou kind of force yourself into this needs-based\n\n387\n00:40:17,780 --> 00:40:25,860\nproduct building, I guess. Right, I mean, so if I did it right now, exactly what I would do is, if they clicked on buy now, I would take them to like\n\n388\n00:40:26,600 --> 00:40:38,400\na Jot form, or like a, what do you call those types of online forms? Yeah, yeah. For like a wait list. I'm like, okay, I won't take any money. You know what I mean? But it's like, oh, you're interested in buying this, great. We're still in development. You know what I mean?\n\n389\n00:40:38,760 --> 00:40:41,260\nBe the first to be notified when this is available.\n\n390\n00:40:41,980 --> 00:40:43,480\nAnd then I\n\n391\n00:40:44,060 --> 00:40:52,920\nwould wait to see how many of those I got. Yeah. And if I got like a thousand, I'm like, oh, people actually want this. And they'll pay the price that's listed on the website\n\n392\n00:40:53,420 --> 00:41:01,260\nfor it. Right. And so, yeah, again, this is learned from years of kind of false starts with building products,\n\n393\n00:41:01,960 --> 00:41:04,620\nthen building an actual product, and then\n\n394\n00:41:05,200 --> 00:41:12,140\nreviewing all those lessons in my brain of like, oh, yeah, this is what I would do if I were to do it again. Will I ever do another product? I don't know.\n\n395\n00:41:12,560 --> 00:41:18,900\nMaybe, but it's hard for me to be like, Yeah, let me, I don't know, I wanna focus on the video stuff right now, right? Like\n\n396\n00:41:19,760 --> 00:41:22,080\nthat's my product right now is video stuff.\n\n397\n00:41:23,080 --> 00:41:24,020\nYeah, you know,\n\n398\n00:41:24,620 --> 00:41:32,540\nthat makes me think of whenever I am advising family about things that they wanna start doing, like whether it be content related stuff or\n\n399\n00:41:33,080 --> 00:41:34,420\nactual some sort of product.\n\n400\n00:41:35,280 --> 00:41:37,280\nLike my sister teaches piano lessons,\n\n401\n00:41:37,640 --> 00:41:38,460\ndifferent sister.\n\n402\n00:41:39,620 --> 00:41:40,120\nAnd\n\n403\n00:41:40,580 --> 00:41:42,880\nI always, I have another sister who\n\n404\n00:41:43,440 --> 00:41:50,460\nwas into softball and she would teach softball lessons. So anytime that they come to me and say, hey, what should I do to get started?\n\n405\n00:41:51,340 --> 00:41:54,500\nI always say, put up a mailing list. Get a mailing list going.\n\n406\n00:41:55,240 --> 00:42:02,060\nAnd that gives you a really good idea. And then I did that with Epic Web, and once I had, I mean, I already had a pretty good mailing list, but\n\n407\n00:42:03,080 --> 00:42:09,000\nonce you have a number of people who are interested, then you say, okay, I'm gonna do a live workshop. Like,\n\n408\n00:42:09,520 --> 00:42:12,940\nthe thing that comes out of Epic Web is a bunch of recorded videos,\n\n409\n00:42:13,320 --> 00:42:22,480\nbut I do the live workshops so that I can make sure that the material that I'm gonna record is gonna be worthwhile for people. And it also gives me a good idea,\n\n410\n00:42:22,900 --> 00:42:23,400\nunderstanding\n\n411\n00:42:24,060 --> 00:42:28,020\nof like, will people buy this thing by actually having them buy it? And so\n\n412\n00:42:28,480 --> 00:42:28,980\nwhile\n\n413\n00:42:29,540 --> 00:42:31,780\na in-person or live workshop\n\n414\n00:42:32,260 --> 00:42:35,400\ndoesn't scale as well as what Epic Web is supposed to,\n\n415\n00:42:36,100 --> 00:42:37,860\nby kind of doing\n\n416\n00:42:38,480 --> 00:42:40,180\nas little as possible, the manual\n\n417\n00:42:40,760 --> 00:42:42,780\nlabor required to make that happen,\n\n418\n00:42:43,200 --> 00:42:49,040\nI can really test the waters and see not only are people willing to buy, but\n\n419\n00:42:49,540 --> 00:43:02,180\nis this a product that people are gonna be happy with and I can fine tune things before I really commit. This actually makes me think of Elon Musk and Tesla and how they over automated the Model 3 line\n\n420\n00:43:02,500 --> 00:43:03,740\nwhere like 2017\n\n421\n00:43:04,220 --> 00:43:05,460\nor whenever that was,\n\n422\n00:43:06,020 --> 00:43:13,580\nthat yeah, it was before that, like 2014, something like that. They just like automated the entire process and it just almost destroyed the company\n\n423\n00:43:14,540 --> 00:43:17,000\nbecause they automated stuff before they knew.\n\n424\n00:43:17,540 --> 00:43:39,720\nYou're solving the problem before you have it. And so you come up with the wrong solution. So anyway, yeah, lots of thoughts there. Oh man, we can have a ton of conversations. You know, next time we're in person, let's make sure we get a meal and just like, Yeah, yeah. Have some more and just talk. Because I think that the way we approach problems is similar. And I think there's a lot that I could learn from how you've done things. I mean, yeah, it's really,\n\n425\n00:43:40,520 --> 00:43:49,160\nI don't know. I like the way you approach it, like doing the, because right now, 1 of the things that, Well, I know we're running out of time. I'll just say this last thing. Working at a large company,\n\n426\n00:43:50,020 --> 00:43:51,760\nit is really hard to get\n\n427\n00:43:52,280 --> 00:43:54,500\ngreen lit to do certain projects\n\n428\n00:43:54,800 --> 00:43:57,780\nbecause we worry about scale, which is reasonable,\n\n429\n00:43:58,180 --> 00:44:00,600\nright? Google scale is very different than\n\n430\n00:44:00,920 --> 00:44:01,660\nyour local\n\n431\n00:44:02,060 --> 00:44:04,640\nshop that has 5 developers, you know what I mean?\n\n432\n00:44:05,060 --> 00:44:12,320\nScale is very different. But sometimes I have to remind people like, Hey, look, sometimes you just got to do things that don't scale until you can't do them anymore because then you know\n\n433\n00:44:12,840 --> 00:44:31,780\nenough about how to like scale it at that point. But you don't even know what you need to scale if you just start with scale first. Sometimes you can start with scale, but sometimes you just gotta do stuff. And then you're like, oh yeah, this doesn't scale. Okay, I need to automate this, or I need to change this because this is not working for me. But like I said, you don't even know it's working because you haven't done anything. Yeah.\n\n434\n00:44:32,720 --> 00:44:33,580\nYeah, 100%.\n\n435\n00:44:33,920 --> 00:44:43,480\nI'd love to get a meal with you. So next time you're in Salt Lake or next time I'm in your part of the world, which is, where do you, where are you living? I'm in Chicago now. Chicago, okay.\n\n436\n00:44:44,180 --> 00:44:48,460\nI think I've only ever been to the Chicago airport, but next time I'm over there,\n\n437\n00:44:49,220 --> 00:44:53,300\nwe should grab something. It's been awesome chatting with you. We might be at an event at the same time.\n\n438\n00:44:53,620 --> 00:44:54,120\nI\n\n439\n00:44:54,440 --> 00:44:56,140\nmean, I'm moving around a little bit.\n\n440\n00:44:57,280 --> 00:45:03,420\nSo sweet, it was awesome chatting with you. What's the best place for people to keep up with what you're doing and\n\n441\n00:45:03,840 --> 00:45:11,520\nstay tuned with what you're working on? Yeah. So, if you want to hang out with me and know what's going on, you can find me until it goes away,\n\n442\n00:45:12,920 --> 00:45:14,360\ntwitter slash x\n\n443\n00:45:15,020 --> 00:45:17,200\nat Mark Texson. That's M-A-R-K-T-E-C-H-S-O-N.\n\n444\n00:45:20,220 --> 00:45:26,340\nBut if you just search Mark Texson, you will know exactly where I am because I'm the only 1 right now, so. Nice,\n\n445\n00:45:26,680 --> 00:45:33,920\nyeah, way to get that SEO juice going. That's good stuff. Yeah, my wife is brilliant. Like you said, my wife is great, by the way. Yeah, that's right.\n\n446\n00:45:34,540 --> 00:45:40,060\nShe's great. She's really great. Cool. Hey, thanks everybody for listening and we'll catch you all later.\n\n447\n00:45:41,460 --> 00:45:41,960\nPeace.\n",
            "_type": "transcript",
            "text": "[00:00:01] Kent:\nWhat is up everybody? I'm so excited to be joined by Mark Thompson. This is Texan. You'll have to tell us what that nickname's all about, Mark. But yeah, so Mark and I met, I think, on Twitter. I don't think we met in person before we met on Twitter, which is actually describes most of my relationships these days. \n\n[00:00:21] But yeah, I think the first time we met in person was at NGConf this year, where I just like- Well, second \n\n[00:00:27] Mark\ntime, but the first actual, actual meeting, but the second time we actually come in contact. \n\n[00:00:33] Kent:\nOh, okay. Okay. Why don't you, I'm trying to remember what that first time was then. \n\n[00:00:37] Mark\nOh, it was a really random time. So if you don't remember this, I don't blame you at all, but we both were at Modern Front Ends Live in London. Oh, yes. And I was lost and we hadn't like, you know, connected before that. You know what I mean? We just kind of maybe tweeted each other randomly, but not really connected. And then I was like, hey, do you know where to go? \n\n[00:00:57] You're like, man, I'm going to this hotel. And I was like, yeah, I'm totally lost. And it was a whole thing for me, but you were super kind, even like passing, you were super kind about it. \n\n[00:01:07] Kent:\nSo. Yeah, you know, I think by then we had met online. I feel like we had. And so if I had been in the right frame of mind, then I would have given you a big hug at that point. But yeah. But I \n\n[00:01:20] Mark\nalso had a mask on. So that's another thing. \n\n[00:01:22] Kent:\nOh, yes, yes. \n\n[00:01:23] Mark\nA lot of people don't recognize me in a mask, which makes sense, which is why people wear masks. You know, when you do stuff, they don't wanna be recognized there. So I had a mask on. So I know that definitely, you know, contributed. \n\n[00:01:36] Kent:\nYeah. Well, hey, it's been awesome to get to know you for the last about year or so that I have gotten to know you. Why don't you introduce yourself to the folks listening and Tell us about what you're into and, you know, however personal or professional you'd like to keep it. \n\n[00:01:53] Mark\nYeah, fantastic. Hey friends, my name is Mark. First, I'll tell you why they call me Mark Texan. I was looking for a Twitter handle way back in 2017 and I asked my wife, I was like, help me think of something because she's really good at coming up with names of things that I want to do. And \n\n[00:02:08] Kent:\nshe's like, \n\n[00:02:09] Mark\nwhat about Texan? And I was like, I'm not from Texas. She's like, no, not Texan, like T-E-X-A-N-E-S-O-N. I was like, oh, that is so clever. And I've ran with it ever since. And because my name is so common, if you search Mark Thompson, it's really hard to find me. But if you search Mark Texson, you'll find me in, you know, really, \n\n[00:02:29] really quickly. Yeah. \n\n[00:02:32] Kent:\nThat was actually, that's a great idea. I hadn't thought about the the SEO Aspect of that but yeah for sure you need some moniker to make it easy for people to find you when you have a name Like Mark Thompson. \n\n[00:02:43] Mark\nYeah, and when I was in high school, I wasn't even the only Mark Thompson I wasn't even the only Mark Thompson. I wasn't even the only Mark A. See, like you can use your middle initial to even further disambiguate, right? \n\n[00:02:53] Kent:\nYeah. \n\n[00:02:53] Mark\nI can't even do that because I'm not even the only Mark A. Thompson out there. In my high school, there were 2 Mark Allen Thompsons. \n\n[00:03:00] Kent:\nNo way. \n\n[00:03:01] Mark\nYeah, totally 2 Mark Allen Thompsons. Once I was hospitalized, there's another Mark Thompson. They kept like coming in and asking me about his conditions. And I'm like, that's not me. I mean, super common name. Anyway, so I've been writing code for a very, very long time. I started writing code probably when I was 15. And then I started \n\n[00:03:21] working professionally about 15 or 16 years ago. It's been a long time. My first job was in 2006. So it's been a while. \n\n[00:03:29] Kent:\nWow. Wow, man. That's awesome. And then you only joined Twitter in 2017. That sounds unheard of. \n\n[00:03:37] Mark\nYeah, because I was so against Twitter. Don't ask me why, I didn't have any good reasons. I was just against it just to be against it. \n\n[00:03:44] Kent:\nYou know, I actually feel the same way. Like there are movies that you miss and then after a while It becomes like a badge of honor like nope never saw that 1 like I know people who feel that way about the Harry Potter movies I feel that way about Titanic I never saw \n\n[00:04:03] Mark\njust won't watch it at this point. \n\n[00:04:04] Kent:\nYeah. Yeah. It is a badge of honor. Like, nope, never saw it. And I'm proud of that, I guess. \n\n[00:04:10] Mark\nYeah, I just won't watch. You cannot get me to watch Titanic. I just won't watch it. \n\n[00:04:14] Kent:\nThat is so funny. Yeah. Well, good. That's fun to make those kinds of connections. So what have you been doing all this time in tech then? How did you get started in 2002? \n\n[00:04:27] Mark\nOh, sure, sure, sure, sure. So when I first, oh man. Wow, I'm trying to remember what got me started. So the way I got started with computer science in general was that when I was a little kid, I remember feeling like I wanted my computer to like ask me questions about my day, like a personal assistant. Oh yeah, yeah. Mm-hmm. And I was, so this is back in the early \n\n[00:04:47] nineties. So for those at home, I'm in my almost mid forties now. So I've been around for a little while, but yeah, I want to do that. And then I had started to pursue computer science around trying to solve that problem and figure out how to like get started, not try to solve like personal assistance, but like, how do I interact with the computer? How do I program? And then \n\n[00:05:07] I was lucky enough to have like a high school teacher who believed in me enough to like make me stay after school and practice programming. And then that led to going to undergrad computer science, mathematics, graduate school, computer science. And then I ended up, my first job as a Java programmer for a small company. And yeah, so I spent a lot \n\n[00:05:27] of time, spent the first, probably 40% of my career as a Java, like server side, like programmer, just doing all Java. And then around 2011, the world changed when the first frameworks started to come around. So Batman and Knockout and Backbone and so many libraries and \n\n[00:05:47] AngularJS, all these things came around. And I felt like the world was changing and I wanted to be a part of that change. And then I switched over to front end development and I never looked back. \n\n[00:05:56] Kent:\nWow, man, yeah, 2011, that is early on. Like that's even early, relatively early for the Node.js days too. So yeah, that's pretty sweet. I got home from my mission in 2010 and got married in 2011. And so I was still like trying to figure out what to do with \n\n[00:06:16] my life around that time. I was sure I didn't want to do anything with computer programming. But yeah, did end up into that. And I also started with Java, but eventually found my way to JavaScript. That's when I decided, oh, programming is actually pretty fun. Was when I found JavaScript. \n\n[00:06:37] So, very cool. So, you have been doing this web stuff for a really long time. What would you say is the most interesting, with all the perspective that you have from your years of experience, what would you say is the most interesting thing that's happened in the web in the last couple of years? \n\n[00:06:56] Mark\nOh, I think just the APIs on the web, like the fact that you can do things that you can do now, like accessing devices, like we're using a web-based interface to have this conversation. When I first started, that was impossible. Right? Yeah. When I first started, you couldn't even round buttons with CSS yet. You could only use JavaScript to round \n\n[00:07:16] buttons. And a lot of people who are watching this may be like, I didn't even know that was a thing. Yeah, really, you could not do rounded corners on buttons. You had to use JavaScript or you'd use this idea of like, you remember that you'd use a table and you slice up an image in Photoshop that had the design you wanted and you use that as your button like you should do all kinds of Like make \n\n[00:07:36] fancy looking buttons and the fact that you can do any of that the fact that you can play video games in The browser, I mean, I just think the web APIs are just mind-blowing now because the browsers become this ubiquitous like portal for the world. So it's really fantastic. \n\n[00:07:50] Kent:\nThat is so cool. It really is amazing. I love seeing the cool things that people can do on the web. And I just, I know that a lot of people are saying you gotta hedge your bets and learn different languages, and I have nothing against that. Like, feel free to learn other languages. I think that'll probably make you better at JavaScript. \n\n[00:08:11] But I have just laser-focused my own career on JavaScript and the web, and that has worked out really well for me because there's really nothing I can't do, relatively speaking. I can almost hear some of the Rust level programmers out there like, oh, I can think of a lot of things you can't do, can't do. For now. Yeah, for now. \n\n[00:08:32] So yeah, the web is awesome. So since then, the web has just been your whole focus then? \n\n[00:08:37] Mark\nWeb and mobile. I've been really fascinated with mobile devices and mobile apps, but now because of how powerful the web is, you can just take your web skills and then you can apply those to like mobile development, which again, it's like mind blowing how the APIs are changing. \n\n[00:08:53] Kent:\nYeah, yeah, that's very cool. I have, I did a little bit of a stint in mobile stuff, but when it came back to the web and I'm just full web guy now. So yeah, Mark, 1 of the cool things that I really have enjoyed following you is your Good Morning \n\n[00:09:13] series. So for those of you who haven't seen what Mark is doing there, why don't you give us a little intro to what is this Good Morning series all about? \n\n[00:09:24] Mark\nYeah, so Good Morning with Mark is a web series that I do. I post online, different platforms, you can find me anywhere, literally, but mostly Twitter, but you can find me all kinds of places. But the idea behind it was that I really love helping people and I really love sharing the solutions to problems that I solve. So I do it through code, \n\n[00:09:45] right? When I would teach classes, but also what about like personal like problems when you're trying to accomplish something? And I was like, oh, I could probably help people with this. And then I can also spread some like positivity out there because I don't know if you've been on Twitter before, but It can be super toxic, super quick. And it's really easy to just feel down. The world is in a very \n\n[00:10:05] interesting place. There's so much happening. I'm like, okay, I like helping people. And I really like trying to help people, you know, like feel cared for. That's a really good way for me to kind of frame it, to feel cared for. So I started this series of just motivational videos that you could watch in about a minute, right? About a minute. And then you can get, hopefully, some inspiration \n\n[00:10:25] and get yourself unstuck if you're stuck on something. And that's where I've been having a lot of fun lately. \n\n[00:10:31] Kent:\nYeah, I love it. And so, for those who haven't seen it yet, there's basically a video of Mark standing and he says like, hold up a second with your doom scrolling or whatever, and then you just say something really inspirational for about a minute, like various topics, what's holding you back, stuff like that. And very encouraging \n\n[00:10:52] as well. It's not like, I know some thought leaders or whatever, these business people, inspirational speakers can speak in a lot of platitudes and stuff like that. And like, look at me, how successful I've been. That's absolutely not the vibe that Mark gives off. It's more like, I believe in you and makes you feel really good about yourself. \n\n[00:11:12] And this is, like you do this every week on a Monday morning. Is that the cadence that you're on? \n\n[00:11:18] Mark\nYep, every week on Monday morning. Like right before, so you see behind me is like my setup, that's where I stand to do these videos. And I was just recording right before our conversation. \n\n[00:11:28] Kent:\nOh, nice. \n\n[00:11:29] Mark\nTo release the video for the current week. \n\n[00:11:32] Kent:\nOh man, so I'm standing between your wonderful video and like tons of people who want to get said good morning to. \n\n[00:11:41] Mark\nOh good, no this is great. You know what's funny about those videos and you is that I remember the first time you interacted with 1 of those videos, I was like, wow, I didn't even think that I was on your radar. If that makes sense. Right. And not because like, okay. So people who have never met Kent, this is to you friends. He is so kind and like genuine and personable. Like It's not \n\n[00:12:01] even that he acts weird. It's just, I do know about you, Kent, that your following is quite large. Lots of people always vying for your attention. You know what I mean? So the fact that I came across your timeline and that you interacted, it caught me off guard. I was like, wow, that I was even on your radar that you even had the time because how busy you are to even like watch a video, right? And so that \n\n[00:12:21] was super encouraging for me. I was like, oh, so people are watching these videos and it is, like you said, it's not the like empty platitudes. It's more like I've done this or I've been here. Let me tell you how I got out of it. Maybe it can help you, but more than anything, like you said, I want you to believe in yourself because I actually believe that most people can get what they want out of life \n\n[00:12:41] if they believe in themselves enough. \n\n[00:12:43] Kent:\nYeah, okay, so let's dig in. That was very nice of you. Thank you, Mark. Let's dig into some of that concept a little bit with belief in yourself. Why do you think that it matters so much? Like, let me take a step back. Sometimes it can sound kind of corny or cheesy, \n\n[00:13:04] like just believe in yourself and all your dreams will come true, right? Like that sort of thing. But like, is that real? And what is so important about really believing in yourself? And What does that actually mean as well? \n\n[00:13:16] Mark\nSure, so the reason I think believing in yourself is real and why it's powerful when somebody else believes in you, but like you really got to believe in yourself is because there will be times where you just will not have the support that you need to get through. So whenever you do anything hard, like a support system is really important. And sometimes that journey of doing something that's \n\n[00:13:36] worth doing or challenging for yourself, you won't have the support system the whole time. You may not have it when you start. And that's when believing in yourself really matters. Right? Because as you've probably noticed that you might've been like, oh, I'm gonna make this like fantastic course. And some people were like, like your first course. We were like, OK, he'll do it, whatever. But then as soon as you did it, then \n\n[00:13:56] the support system came flooding in. Everybody's like, oh, yeah, Kent can do this. He could totally do this. Yeah, you got this. Can't wait for your next 1. But what about the times when you were like, man, I'm like 100 hours in and developing this course and I'm tired. I don't know if anybody will even care. Am I the qualified person to do it? All the negative self-talking come in. And so \n\n[00:14:16] believing in yourself can be like the thing that carries you over the line, I believe. \n\n[00:14:21] Kent:\nOh yeah, I 100% agree. Like, especially when you're getting started and nobody knows what you're working on. And so even if they were going to be nice and say like you can do it They they don't even know what they're saying you can do And so like yeah The only person \n\n[00:14:41] who can believe in you in that point is yourself Right, and I think having that attitude like if you don't believe in yourself, then why would you even do it? And so without the attitude, you're not going to, it's not going to be possible. \n\n[00:14:57] Mark\nSure. So. And I'll be, I'll be transparent. I've had it. I've had a pretty tough go of life. Like my life has been very challenging. And I've had lots of people doubt that I could accomplish the things that I've accomplished. I've had lots of people just been like, yeah, all right. Like when I mentioned that teacher, right, who believed in \n\n[00:15:17] me, like at that time, I was just going through like a phase of like identity crisis, kinda, where I knew that I was capable and I was smart, but I didn't know who I wanted to be. And I had this teacher just kind of be like, hey, look, you can do totally better than this. Like you could totally do more than you're doing. Right. Like you're about to fail this class, \n\n[00:15:37] but I know you could be good at this. And her making me like stay behind at school changed my life because if she didn't do that, I probably would not have pursued computer science longterm or I wouldn't have had the same path that I've had, right? And got on the trajectory. So yeah, you know, so it's good to have people believe in you, but then there are times where I \n\n[00:15:57] had to believe in myself when I built my first company. It was Like, yeah, I had to, there were some nights that I was just like, man, I hate this. And nobody's gonna like what I'm making. And everything sucks. But I had to believe like, no, you can do this. You can do this, bro. Like, you just gotta keep going. Just do not give up. \n\n[00:16:13] Kent:\nYeah, I think so much of what we accomplish comes from our attitude around it. And so, yeah, I appreciate your Monday videos that helps restore that belief in ourselves. Even if it's just a reminder, oh yeah, I need to have a more positive attitude \n\n[00:16:33] about life right now. That positivity is good. And I definitely appreciate that on Twitter or X, where things can be very anonymous and random strangers can pop up and kind of ruin your day. And so having a friend pop up and be like, hey, I think you're awesome, don't forget it. And that just \n\n[00:16:54] does help. It matters. It means something. \n\n[00:16:57] Mark\nAnd speaking of the random strangers that ruin your day, 1 thing I try to do is be the random stranger that roots you on. And like this 1 person did not know her from anywhere, never met her before. She was like, oh, I'm starting my first day at General Assembly. And so I was coding bootcamp. And I just quote tweeted it. And I was like, hey, we believe in \n\n[00:17:17] you, you got this, good luck, proud of you, you can do it, you know what I mean? And just be that random stranger that instead of like, you know, crapping on her idea or be like, man, bootcamp suck there, a scam or whatever you want to say, you know what I mean? I was like, nope, I'm gonna be the opposite person. I'm gonna just push her on because I just know that when you're going through that process, that's a hard road. Boot camps are hard, right? \n\n[00:17:38] And yeah, so anyway, I like to be the random stranger that roots people on too. \n\n[00:17:42] Kent:\nI love that. Yeah, we need more of those. All right, Stop being the random person who says you're doing it wrong and be the random person who says you rock. That's great. Cool. So bringing it back, I guess, a little closer to web dev stuff, what is it that you're working on right now? You're on the Angular \n\n[00:18:02] team at Google, right? \n\n[00:18:04] Mark\nI am. I am. Yeah, so I'm working on 2 things. So 1 is the whole Angular world. So Angular is a web framework that helps you build scalable apps. And so if you've not used it before, that's totally OK. Because whenever I meet people who never use Angular, they get this weird posture about it. I'm like, it's OK. \n\n[00:18:24] I've never used some other tools either. I've never used Solid. But when I met Ryan Carneado, I was like, Hey, I could appreciate your work though, you know, but I never used it. So anyway, but, Angular web framework. Right. And so we had, you know, it's just this really interesting journey where we started out, brought TypeScript kind of, I won't say we brought it to the mainstream, \n\n[00:18:45] but we were the first framework to just really embrace TypeScript from \n\n[00:18:49] Kent:\nthe start. \n\n[00:18:50] Mark\nYeah. And we were just using TypeScript. And so that was kind of trailblazing at that time. And then we were also using observables early, early on. And again, thinking about this idea of a stream of events that happen over time that are unpredictable, programming like that, like those are things that are really trailblazing. And then I think we got into a place where we knew we needed to \n\n[00:19:10] make a core evolutionary change to the framework in order to meet the needs of the next generation of web apps. But it took us a long time to get there. I'll be honest with you. We had about a two-year period where we just lost a little momentum because we were trying to make this really significant change. And \n\n[00:19:30] so when we finally got out of it, now, you know, a lot of people are talking about Angular because we're releasing new features. We've been able to just add a lot of brand new things to the framework. But, you know, right now, what's interesting to me is how do we continue to serve developers? And so that's what I've been working on on the Angular team is like trying to figure out how do we serve developers who want to build scalable applications? \n\n[00:19:50] Like what can we do to be the best framework for you if that's what you want to use? \n\n[00:19:55] Kent:\nYeah, I think I can definitely relate to the idea of like we have this thing that we're working on and it's a really, really foundational change and it's taking a lot of time and then you finally finish it and then it's just like the dam has broken and everything else comes finally. That's a really, really awesome \n\n[00:20:16] thing. Now the thing, the revolutionary, or like the big change that you were making was to move to signals, is that right? \n\n[00:20:23] Mark\nOh no, even before that, it was to change our rendering engine. And so for our template rendering engine, we moved something called View Engine to Ivy. And it's an incremental view engine. And again, 1 of those things where it's like really good idea is just, I think that we maybe underestimated how long \n\n[00:20:43] it would take us, But now we're actually able to benefit from having that change. So now we can do things like signals, right? \n\n[00:20:51] Kent:\nWhich is \n\n[00:20:51] Mark\na huge thing. And then we have all these things around our new template syntax where you can do deferred loading, defining your templates. And So all these fantastic features that we get to do now are because we went through that really hard time of that migration from Vue engine to Ivy, but now we're able to just continue to keep the hips rolling. \n\n[00:21:12] Kent:\nOh, dude. Okay. So I feel like there are a lot of lessons that we can learn from that, both like from a code perspective, but also from a personal life perspective. You know, like that, that to me sounds a lot like sharpening the saw and you know, all of those things that, I don't know, that just made me think of a bunch \n\n[00:21:32] of things where it's time to invest back in the foundation a little bit, right? \n\n[00:21:40] Mark\nI think- Sometimes you gotta do that just as a human, right? Like as a person. You just gotta like take that L and just like, I don't want to say disappear for 2 years, but sometimes you do just have to do something that has taken a long time, but it's worth it. \n\n[00:21:54] Kent:\nYou just \n\n[00:21:54] Mark\ngot to sit there and go through it and it's going to suck in the middle of it. What it'll allow you to do for yourself, right? Is a valuable thing. So I told you the parallels there. \n\n[00:22:06] Kent:\nYeah, yeah. I think education is another 1 where it's like, you know what, I'm gonna pause shipping, you know, on my side projects for a little bit and just dedicate time to like re-evaluating the fundamentals and that sort of thing. Solidify my foundation, yeah. Yeah, that's very cool. So, \n\n[00:22:27] I'm curious, Mark, what your take on the future of not just Angular, but the future of the web, the future of software development, future of the world. Like, where do you think we're going? I feel like there's just a lot of uncertainty, right? A lot of things are happening. Where do you think the future is going, Mark? \n\n[00:22:46] Mark\nIt's perfect, Segway, because I think the second thing that I'm working on is figuring out how to help developers find the future for themselves. So it's no secret that like, ChatGPT and AI and LL and large language model based systems have burst into the same and really changed the way that we perceive \n\n[00:23:04] Kent:\nwork, right? \n\n[00:23:05] Mark\nAnd I think as a developer, this is the last 10 to 12 months have been a really scary time because I think that if you see things, people like, Oh, Chad GPT just wrote my entire unit test, or I showed a picture and then it created the application for me and I showed it a wireframe or I did this thing, I did that thing. \n\n[00:23:27] Like you might just feel like you're toast. You just feel like it's over. Why would I learn anything more when this is the future? And like, as a content creator, I see like these like video, you know, AI videos that now can change your language in real time and change your lips moving and like all these things, right? So it makes you feel like the human effort is being slowly \n\n[00:23:47] phased out in favor of like machine effort. I don't think that's the full story. I think that what people have to understand is that, AI is not perfect, but it is going to change everything, right? Like I don't think you can rely on chat GP. Well, somebody tried this. Somebody tried to build a business \n\n[00:24:07] with chat GPT. I'm only gonna do the things that chat GPT says and they didn't make any money. Right? Like seriously, they didn't make any money. Like none of the systems could replace the human decision-making. So the way I think about AI now, or for you as a developer, so the friends at home, if you're listening right now, here's what I would say you should do right \n\n[00:24:27] now. Learn how to build AI enabled systems, not build systems with AI, like using chat GPT to do your work. I'm saying, learn how to make applications that leverage AI. Because I think that's the future, because 1 of the things that happens is that I am completely starting to start talking too much, but I'm really passionate about this. No, no, this \n\n[00:24:47] Kent:\nis great. I love your take. \n\n[00:24:49] Mark\nSo I think this, users are gonna expect more and more out of applications now, out of software. \n\n[00:24:54] Kent:\nYeah. \n\n[00:24:55] Mark\nRight? And you should be the ones that like, know how to build those systems that can do more. And the example I've been using is like a calendar. Like imagine if you had like really smart calendar software, it's like, Oh, Kent has a doctor's appointment today at let's say 11 a.m. I already know Kent doesn't drive a car because I can tell that he uses Lyft and Uber all the \n\n[00:25:15] time. Okay, fine. I don't know if your car came, but I'm just saying. Maybe Ken doesn't have a car. So it would know to like schedule your Lyft or Uber for you, right? It'll remind you, like, it'll get, can read your appointment information all locally, nothing in the cloud, right? But locally, I'm like, oh yeah, you should fast for this. Send you a notification \n\n[00:25:35] at like, you know, the night before, at minute, like, hey, make sure this is your last meal. You got, you have to, you know, like really smart, sophisticated software that do things beyond human scale, right? That's where I think we should leverage AI, is to build software that can do things that humans can't do. I couldn't translate every book known to man, right? Humans can do it, but AI could do it. \n\n[00:25:56] I think medical space is another place where AI is going to change the world. We'll get earlier detections, you know what I mean? Like patterns will get pulled out that humans could have missed, but AI will be able to find it. But that doesn't mean we replace our doctors. It just means that we give tools that help change the way that people get served. And we should be the ones to create \n\n[00:26:16] those tools. Like don't get left out of that plan. \n\n[00:26:21] Kent:\nYeah, yeah. I like that. I think if there's any good takeaway from this segment of our conversation, It's like go build something that uses AI in some way. And OpenAI's API is great. It's not the only game in town, but it is a really easy 1 to use. And just \n\n[00:26:41] get yourself a little bit familiar with that sort of thing. Build a little demo or something just so that you get used to that. I would add that learning how to leverage AI-based tools as like AI assistants in your regular coding, that's really, really \n\n[00:27:01] helpful. A lot of people will look at ChatGPT and they'll be like, look at that garbage output. This is such a terrible thing. It'll never really be all that useful or whatever. I totally disagree with that. I think you could look at a kitchen and make some meal that is garbage, of course, but you can also, like, \n\n[00:27:21] if you're really good at it, you can use those tools to make a really great meal as well. And so you have to recognize the ingredients that go into a really good output from the AI. \n\n[00:27:33] Mark\nI love that. Super smart. I didn't think about the kitchen analogy. It's a great analogy. Fantastic. \n\n[00:27:39] Kent:\nWell, cool. So I'm looking forward to our AI future. I think it's awesome. I really enjoy the tools. And actually in the workshops, I do not turn off co-pilot. I leave that on and it's very intentional and I just show people, here's how you use this tool and how you properly review the code that it generated for you \n\n[00:28:00] so that you make sure that it's doing what you want it to do. \n\n[00:28:03] Mark\nWait, pause right there. That's interesting. Make sure that you review the output. So does that mean, Kent, that we still have to know how to code? \n\n[00:28:15] Kent:\nOh, snap. This stuff is not taking our jobs yet. Maybe 1 day, but yeah, today, I definitely see CoPilot as like an intern that I'm working with that like doesn't quite understand all the context that I get. And maybe 1 day it will have a lot more context, but even still \n\n[00:28:35] it doesn't know everything that I want it to do. And so, yeah, you definitely need to review it. And there's more than once in the videos of Epic Web where I say, Silly copilot, that's not at all right at all. \n\n[00:28:48] Mark\nAnd I \n\n[00:28:49] Kent:\nleave that stuff in there because I think that it's important for people to know that you don't just blindly follow what the AI is producing for you. You just, you got to treat it as a coworker that helps you type faster. \n\n[00:29:02] Mark\nThat's right. And I think that for people, if you are like a person who wants to do your side projects, I just imagine what would probably take me like 3 weeks of nights and weekends, what, how, how much can I reduce that time if I use an AI system, right? And then how could I be more prolific with my output without, and reducing the \n\n[00:29:22] chance of burnout, because 1 of the hard things about like side projects is that you're, if you're working full time and then you're doing this at night, eventually you will start to burn the candle at both ends. Right. And so these tools could totally change the way that you do stuff. I just think that it's a mistake to ignore it. I think a lot of developers are just kind of writing it off \n\n[00:29:42] and, and maybe not your audience. Right. Well, like Maybe people who are more just like negative about it, to be honest with you, just more negative perspective, like, oh, you know, this will never be anything. Look how bad this output is, or look how wrong this code is. I'm like, it's wrong now, but you do know this thing's going to get better. \n\n[00:29:57] Kent:\nYeah. \n\n[00:29:58] Mark\nAnd so what, so, So I guess 1 way to also think about it for friends at home who still may be a little scared, the baseline will change, right? So right now you have like, I have to look at Fiverr. I feel like they're at risk with all the AI tools, the people who like, you know, use templates to generate a lot of stuff. Eventually like those like \n\n[00:30:19] kind of lower level outputs will be kind of changed. And then a lot of the jobs that are kind of lower level problem solving will probably be automated through like tools, AI tools eventually, for sure. I mean, that's the sad reality. Some people will be displaced by this technology, but I'm telling you, people who are listening to our conversation, like here's how you don't \n\n[00:30:39] end up in that pile, right? Like you learn to be, like you say, learn how to use the tools and also learn how to build the tools. Like you get open AI, Firebase has a bunch of tools where if you can just include it in your app, like the AI program parts already done for you, but your app can then take advantage of those \n\n[00:30:59] features. I mean, like you can start doing that stuff right now. You should, like you said, build something small. Even if it's the version of Hello World with an AI assistant, just start to understand how these tools work so that way you are ready when the industry eventually shifts completely, you'll be right there ready, ready to go. \n\n[00:31:18] Kent:\nYep, yep, 100%. Well, Mark, we've covered a lot of different topics. Is there anything that we didn't really talk about that you'd like to dive a little deeper on or you'd like to talk about? \n\n[00:31:30] Mark\nYeah, I would like to encourage people mostly just like you and I. So, and here's why I say that, because I think that's something that you do is you complete really large projects. And that is a very hard skill. And people don't realize it. Because so, so here's the problem I think \n\n[00:31:50] that people run into. They underestimate how hard something is, and they overestimate how capable they are doing it. That sounds a little mean, but I don't mean it like that. I mean, you may be not capable to do it because you have kids at home, or you have a loved 1 you're taking care of, right? Like you overestimate your ability to do it or your, or availability to do it. Let's say it \n\n[00:32:10] that way. That's a little bit nicer because I think you can do anything you want. Okay. Yeah. How do you complete such large projects? \n\n[00:32:19] Kent:\nOoh, yeah, you know, I start by completing smaller ones. Right? So like I, because I am much more capable of building something like Epic Web today than I was before I made my first course on egghead. And so yeah, start small and build from there. That helps a lot. \n\n[00:32:39] Mark\nStart small. So how do you figure out what's the smallest unit then that you should start at? \n\n[00:32:44] Kent:\nOoh, yeah. Yeah, that's a good question. I don't know. I think you need those quick wins though. So you do need to figure out a way to break it down so that you can, this kind of feeds into believing in yourself like we were talking earlier. You have to have something that you can finish and then you'd say \n\n[00:33:04] I am a person who finishes stuff Mmm, and that's a good feeling Find a way find a way to break it down into something small it I think it's hard to define a general rule for how to break things down, because it's gonna depend largely on things. But if you wanna get into \n\n[00:33:25] blogging or something like that, then I would say Don't build the blog first, write the blog post. And get that published, even on like, I used to publish blog posts on GitHub Gist. And yeah, just throw up some content somewhere. And over time, you can start doing \n\n[00:33:46] a little bit more of the fancier stuff. \n\n[00:33:48] Mark\nOkay, 100% true story. By the time people have watched this video, maybe this video will be out before people get to see this most likely. What you just said is what today's video is about. \n\n[00:33:59] Kent:\nOh, snap. \n\n[00:34:00] Mark\nBecause I was saying, in this video, it's called like, stop trying to cheat the system. Because what people will do is they'll say, well, I want to do this thing. And then, or I want to learn this thing. And then they'll think of all the like tasks surrounding it instead of doing the actual thing they want to do. So instead of like writing the blog, they were like, okay, I got to build a blog. Okay. Now I got \n\n[00:34:20] to learn this framework and then I got to do this thing. And I got to do this. I got to find hosting. None of this had nothing to do with writing a blog. Yeah. But you feel so good because you're like, well, I'm learning. I'm learning. So you try to cheat the system, which is really a way for you as an overachiever. If you identify as an overachiever, for you to just do more stuff because overachievers just want to do a lot \n\n[00:34:40] of stuff. They want to overachieve. And so me as an overachiever, I've done that before. So anyway, the point being is that like what you just said, literally what I filmed right before we talked, which is just about that idea of like, don't cheat the system. Just do the thing that you're trying to do. Don't try to like, you know, add all these other things on because you're probably not going to finish because \n\n[00:35:01] you've taken on too much. \n\n[00:35:03] Kent:\nYeah, yeah. You know, that makes me think of a concept that I've thought about over the years called needs-based learning. I should probably write a blog post about this. \n\n[00:35:12] Mark\nBut like, \n\n[00:35:12] Kent:\nso the idea is instead of saying, oh, I'm gonna build a blog so that I can have a blog post and I'm gonna learn about hosting and stuff, you don't really need to do those things to get the blog out there. But you get a couple blog posts done and then you're like, you know what, I really need to get those on my own domain. \n\n[00:35:32] Okay, so now you need to learn how to get a domain. And then, oh, I need to have some sort of site there with, you know, I've got static content, I can just put HTML files out there. And so, like over time, And we actually kind of do this naturally on the job too. The boss says, we need to do this thing, and so now you need to learn X. \n\n[00:35:54] You jump into a project that uses Redux, and now I need to learn Redux. And so I'd say needs-based learning isn't the only way to do it. Of course, like if you want to, the problem with needs-based learning is that you skip over fundamentals that if you had those, you'd do things differently and stuff would be better. But- \n\n[00:36:14] Potentially better. Yeah, potentially better, yeah, yeah. But I think needs-based learning kind of helps avoid this paralysis that comes from just constantly feeling like you have to do all the peripheral things rather than just shipping the stuff that you wanna ship. So like do as little as possible \n\n[00:36:34] as it takes to ship the thing you're trying to ship. \n\n[00:36:37] Mark\nThat's right, that's right. If I could go back to any side project that I've ever not completed, I wish that I would have done as little as possible. So the thing that I tell people now is that if I did another side project, like another company or try to do a startup, first thing I would do is make a webpage with the buy now button. I wouldn't \n\n[00:36:57] do anything else. I wouldn't buy any domains, Maybe a domain, maybe if it's cheap, only if it's like $10 or $5, right? Yeah. But like, quick domain, Squarespace, whatever, GitHub, just something where I can put a buy now button before I build anything. Because the thing that I think that people do is like, this is a different conversation, but I'm just saying like, like you said, needs-based. And \n\n[00:37:17] I feel like the only thing you need to know at first, if you're trying to sell something, if people want to buy it, that's what you need to know before you even like do anything else. And so I will say, yeah, if I get, put some analytics on it, If people actually clicked it, then I was okay. People want it. Right. But if nobody ever clicked it, nobody ever searched for it. I don't get any traffic to it. What do you think is \n\n[00:37:37] going to happen when you finish it? Yeah. We'll get any traffic then, which is what happened to me. This is how I know this lesson. Nobody cared about the thing that I built, even though I spent 3 and a half years building it. \n\n[00:37:46] Kent:\nOh yeah. And they definitely don't care how long you spent on it, right? \n\n[00:37:49] Mark\nNope, nobody cares. They still don't. Nobody's texting me like, hey, are you ever gonna add more features? Nobody's, you know what I mean? Like nobody's like into it, which is fine. I learned a lot. Yeah. But I ended up getting to the point of, the reason I was able to ship that project was because I eventually got to the point you're talking about, which is doing the smallest thing to ship, \n\n[00:38:10] right? I was just like, nope, just gotta ship, gotta ship. \n\n[00:38:12] Kent:\nYeah, you know, like a couple, around when COVID hit, my sister is a accomplished violinist and has a bunch of violinist friends. And so she was seeing all of her violinists not being able to get performances and get paid that way. And so she was thinking, well, how about I put together a site where I can get them teaching so they \n\n[00:38:32] can teach people. And so she talked to me about it because I'm the developer brother, and she's like, hey, basically what she described to me was she wanted custom software for basically a Zoom-like platform, a Google Calendar-like platform, like scheduling, all of this stuff, all custom \n\n[00:38:53] software. And I told her, no, no, no, no, you don't want that. Here's what you wanna do. You set up a webpage, just use Wix.com or something, that says, schedule your lessons here, whatever, and then you manually integrate Tito.com or whatever that Tito \n\n[00:39:13] is called. I don't know that domain, but yeah. So like you got the ticketing, and then you manually send out calendar events and then you manually set up Zoom calls and do everything manually, as little as possible automated as you can. And then that way you're not out like hundreds of thousands of dollars in like multiple years building this \n\n[00:39:33] platform that nobody ends up using. And honestly, like we hear the success stories of startups and like how infrequently those are successful. And I think in large part, It's because they decide that they're gonna finish the thing before anybody wants \n\n[00:39:53] it I Think I really like your idea of just like the first thing you do is put up a buy now button and then you like Somebody says oh, yeah I want to buy this now And you figure out some random manual way to provide them the thing. Like you're not lying or anything. Like it's not like you're gonna promise something that you can't deliver. But \n\n[00:40:13] you kind of force yourself into this needs-based product building, I guess. \n\n[00:40:19] Mark\nRight, I mean, so if I did it right now, exactly what I would do is, if they clicked on buy now, I would take them to like a Jot form, or like a, what do you call those types of online forms? \n\n[00:40:30] Kent:\nYeah, yeah. \n\n[00:40:30] Mark\nFor like a wait list. I'm like, okay, I won't take any money. You know what I mean? But it's like, oh, you're interested in buying this, great. We're still in development. You know what I mean? Be the first to be notified when this is available. And then I would wait to see how many of those I got. Yeah. And if I got like a thousand, I'm like, oh, people actually want this. And they'll pay \n\n[00:40:50] the price that's listed on the website for it. Right. And so, yeah, again, this is learned from years of kind of false starts with building products, then building an actual product, and then reviewing all those lessons in my brain of like, oh, yeah, this is what I would do if I were to do it again. Will I ever do another product? \n\n[00:41:11] I don't know. Maybe, but it's hard for me to be like, Yeah, let me, I don't know, I wanna focus on the video stuff right now, right? Like that's my product right now is video stuff. \n\n[00:41:23] Kent:\nYeah, you know, that makes me think of whenever I am advising family about things that they wanna start doing, like whether it be content related stuff or actual some sort of product. Like my sister teaches piano lessons, different sister. And I always, I have another sister who \n\n[00:41:43] was into softball and she would teach softball lessons. So anytime that they come to me and say, hey, what should I do to get started? I always say, put up a mailing list. Get a mailing list going. And that gives you a really good idea. And then I did that with Epic Web, and once I had, I mean, I already had a pretty good mailing list, but once you \n\n[00:42:03] have a number of people who are interested, then you say, okay, I'm gonna do a live workshop. Like, the thing that comes out of Epic Web is a bunch of recorded videos, but I do the live workshops so that I can make sure that the material that I'm gonna record is gonna be worthwhile for people. And it also gives me a good idea, understanding \n\n[00:42:24] of like, will people buy this thing by actually having them buy it? And so while a in-person or live workshop doesn't scale as well as what Epic Web is supposed to, by kind of doing as little as possible, the manual labor required to make that happen, I can really test \n\n[00:42:44] the waters and see not only are people willing to buy, but is this a product that people are gonna be happy with and I can fine tune things before I really commit. This actually makes me think of Elon Musk and Tesla and how they over automated the Model 3 line where like 2017 or \n\n[00:43:04] whenever that was, that yeah, it was before that, like 2014, something like that. They just like automated the entire process and it just almost destroyed the company because they automated stuff before they knew. You're solving the problem before you have it. And so you come up with the wrong solution. So anyway, yeah, lots of thoughts there. \n\n[00:43:24] Mark\nOh man, we can have a ton of conversations. You know, next time we're in person, let's make sure we get a meal and just like, Yeah, yeah. Have some more and just talk. Because I think that the way we approach problems is similar. And I think there's a lot that I could learn from how you've done things. I mean, yeah, it's really, I don't know. I like the way you approach it, like doing the, because right now, 1 of the \n\n[00:43:44] things that, Well, I know we're running out of time. I'll just say this last thing. Working at a large company, it is really hard to get green lit to do certain projects because we worry about scale, which is reasonable, right? Google scale is very different than your local shop that has 5 developers, you know what I mean? \n\n[00:44:05] Scale is very different. But sometimes I have to remind people like, Hey, look, sometimes you just got to do things that don't scale until you can't do them anymore because then you know enough about how to like scale it at that point. But you don't even know what you need to scale if you just start with scale first. Sometimes you can start with scale, but sometimes you just gotta do stuff. And then you're like, oh yeah, this doesn't scale. \n\n[00:44:25] Okay, I need to automate this, or I need to change this because this is not working for me. But like I said, you don't even know it's working because you haven't done anything. \n\n[00:44:31] Kent:\nYeah. Yeah, 100%. I'd love to get a meal with you. So next time you're in Salt Lake or next time I'm in your part of the world, which is, where do you, where are you living? \n\n[00:44:40] Mark\nI'm in Chicago now. \n\n[00:44:42] Kent:\nChicago, okay. I think I've only ever been to the Chicago airport, but next time I'm over there, we should grab something. It's been awesome chatting with you. \n\n[00:44:51] Mark\nWe might be at an event at the same time. I mean, I'm moving around a little bit. \n\n[00:44:57] Kent:\nSo sweet, it was awesome chatting with you. What's the best place for people to keep up with what you're doing and stay tuned with what you're working on? \n\n[00:45:05] Mark\nYeah. So, if you want to hang out with me and know what's going on, you can find me until it goes away, twitter slash x at Mark Texson. That's M-A-R-K-T-E-C-H-S-O-N. But if you just search Mark Texson, you will know exactly where I am because I'm the only 1 right now, so. \n\n[00:45:25] Kent:\nNice, yeah, way to get that SEO juice going. That's good stuff. Yeah, my \n\n[00:45:29] Mark\nwife is brilliant. Like you said, my wife is great, by the way. \n\n[00:45:32] Kent:\nYeah, that's right. \n\n[00:45:34] Mark\nShe's great. She's really great. \n\n[00:45:36] Kent:\nCool. Hey, thanks everybody for listening and we'll catch you all \n\n[00:45:39] Mark\nlater. Peace. "
          },
          "_rev": "9CeTKuUcQZRsVUft8VlcV4",
          "_type": "videoResource",
          "muxAsset": {
            "muxPlaybackId": "gsvMRWP6iG7RlwOg013pxC3X02LKr6ZQ3ou00cjuTSmW00k",
            "muxAssetId": "AKXk400vF024PUursQhR1umzSUPUQNuRPTsbq8z3LYFl8",
            "_type": "muxAsset"
          },
          "state": "new"
        },
        "solution": null,
        "_type": "interview",
        "title": "Navigating Changing Web Technologies with Mark Thompson",
        "description": "Mark Thompson from Google's Angular team explores JavaScript, web evolution, and AI. Embrace AI as a tool in development.",
        "body": "Mark Thompson, a member of Google's Angular team, discusses their career paths, the evolution of web technologies, and the intersection of AI and software development.\n\nThe conversation kicks off with an exploration of Mark and Kent's shared interest in JavaScript. They examine the pivotal role of APIs in shaping the modern web experience.\n\nThey touch upon Angular's significant codebase changes, such as the shift from the View Engine to Ivy. This segment reveals the necessity of establishing a strong foundational codebase to accommodate future growth.\n\nAs the dialogue shifts toward artificial intelligence, the duo discuss the capabilities and constraints of AI tools like GitHub Copilot. They stress the importance for developers to adapt by integrating AI into their workflow, highlighting that AI is a tool that can enhance but not entirely replace human skills.\n\nFinally, Mark talks about their web series \"Good Morning with Mark,\" aimed at disseminating positivity and practical solutions.\n\n## Resources\n\n- [Mark Thompson on Twitter](https://twitter.com/marktechson)"
      },
      {
        "_updatedAt": "2023-10-18T18:20:46Z",
        "videoResource": {
          "title": "Matt Pocock.mp4",
          "_createdAt": "2023-10-18T17:25:18Z",
          "state": "ready",
          "_type": "videoResource",
          "_updatedAt": "2024-03-19T20:25:32Z",
          "duration": 2918.766667,
          "_id": "umRzgEK3x2YA3YfFYH5ptd",
          "muxAsset": {
            "muxPlaybackId": "9rkcGfLWkI00hyX00pFy00hDJtIZRBK4GXO3p8qksbdv02E",
            "muxAssetId": "T5BmNAzreLX3a85I2wesexVrXTbMmqkq02966bER9gK8",
            "_type": "muxAsset"
          },
          "originalMediaUrl": "https://egghead-video-uploads.s3.amazonaws.com/epic-web/interviews/Matt+Pocock.mp4",
          "transcript": {
            "srt": "1\n00:00:00,940 --> 00:00:01,900\nHello everybody,\n\n2\n00:00:03,220 --> 00:00:16,740\nthis is an exciting day. We get to talk with Matt Pocock about TypeScript and other things. So if you haven't heard of Matt yet, then you're in for a treat. Matt is just a lovely person to chat with.\n\n3\n00:00:17,180 --> 00:00:18,580\nHe Has a very nice voice\n\n4\n00:00:18,960 --> 00:00:19,460\nthat\n\n5\n00:00:19,900 --> 00:00:24,160\nif you take any of his courses, you will hear a lot, which is great.\n\n6\n00:00:25,080 --> 00:00:29,740\nAnd yeah, we're excited to chat about the thing that Matt has\n\n7\n00:00:30,060 --> 00:00:32,180\nrecently been most excited about, which is TypeScript.\n\n8\n00:00:33,160 --> 00:00:44,940\nBut before we get too far into that, Matt, would you like to give an intro to yourself? Absolutely. Well, I feel a tremendous pressure to make my voice sound even better than it supposedly is as well.\n\n9\n00:00:45,260 --> 00:00:49,100\nSo that's a nice little subplot throughout this whole interview.\n\n10\n00:00:50,140 --> 00:00:50,640\nNo,\n\n11\n00:00:51,400 --> 00:00:56,260\nI've been full-time talking about TypeScript for about 6, 9 months now, I guess.\n\n12\n00:00:57,340 --> 00:01:01,500\nBefore that, I was working at Vercel as a developer advocate and then at a company called Stately,\n\n13\n00:01:01,840 --> 00:01:02,340\nwhich\n\n14\n00:01:03,040 --> 00:01:11,080\nwhen I was there, I was part of the XState core team. And XState is a complicated sort of state machine, state chart library that I know that you really like, Kent.\n\n15\n00:01:11,540 --> 00:01:16,600\nAnd this, I think maybe how we had our first interaction as well, maybe in the Stately Discord as well.\n\n16\n00:01:16,920 --> 00:01:18,140\nAnd I think\n\n17\n00:01:18,860 --> 00:01:27,320\nlike when we were working on X state and stately, we had a lot of complicated TypeScript problems to try and solve. Oh yeah. I was really passionate about,\n\n18\n00:01:27,700 --> 00:01:43,940\nstate machines and state charts and through battling with TypeScript and working with my colleague at the time called Mateusz Brzezinski, who's a massive TypeScript expert. I got exposed to all that stuff and got really excited and interested in it and then start posting videos about it and went full time and here we are.\n\n19\n00:01:44,540 --> 00:01:46,420\nThat's interesting how that happens.\n\n20\n00:01:48,900 --> 00:01:51,880\nI think I've kind of shaken this idea off\n\n21\n00:01:52,300 --> 00:01:52,800\nrecently,\n\n22\n00:01:53,160 --> 00:01:59,440\nsort of, but a year or 2 ago, a lot of people just saw me as the testing guy.\n\n23\n00:02:01,300 --> 00:02:05,140\nAnd because I created testing JavaScript and testing library and all that.\n\n24\n00:02:06,040 --> 00:02:06,540\nAnd\n\n25\n00:02:07,900 --> 00:02:14,440\nI don't know if this is the same for you, but I never, never planned on being the testing guy. It just happened\n\n26\n00:02:15,040 --> 00:02:20,340\nbecause of the things that I was interested in and things I was working on, the problems I was trying to solve,\n\n27\n00:02:21,060 --> 00:02:30,960\nwhich, yeah, I think it's kind of interesting how it just kind of happens naturally. Totally. I think I just posted my first video on TypeScript. Before that, I'd just been posting about XState. I was kind of the unofficial\n\n28\n00:02:31,580 --> 00:02:35,260\ndev rel for XState at the time, along with David Corshede, obviously.\n\n29\n00:02:35,740 --> 00:02:41,660\nAnd I posted a video about TypeScript. People loved it. I posted another 1. People loved it. And suddenly I was the TypeScript guy.\n\n30\n00:02:42,260 --> 00:02:46,540\nPeople were calling me the Rodney Mullen of TypeScript. I think that quote went around for a long time.\n\n31\n00:02:47,400 --> 00:03:07,280\nYeah. And that's still, I am the guy. And so I think, yeah, it's strange when people you don't know, start tagging you on things and start saying, help me solve my TypeScript problem. I'm sure you get that all the time with many, many different things. In fact, you're not just the testing guy. You're probably actually the React guy too. It's probably you and Dan Abramov getting all the love. Yeah. Yeah. That's exactly\n\n32\n00:03:07,680 --> 00:03:10,020\nkind of how, how it works, but like,\n\n33\n00:03:10,960 --> 00:03:14,920\nI'm sure you have a, an idea of how you became the guy. And,\n\n34\n00:03:15,920 --> 00:03:18,080\nI can say that, for me,\n\n35\n00:03:18,820 --> 00:03:23,100\nI became kind of the testing guy because I created Testing Library, but also because\n\n36\n00:03:24,020 --> 00:03:33,580\nI started, I would reply and I would answer the questions. And I definitely see you doing that with TypeScript. Yeah, it turns out if you reply, they just ask you more. So\n\n37\n00:03:34,020 --> 00:03:35,820\ndon't feed the trolls or\n\n38\n00:03:37,280 --> 00:03:41,500\ndon't give out useful information or people will think of you as the guy who gives out useful information.\n\n39\n00:03:41,960 --> 00:03:46,360\nYeah, which, you know, that plays well into your hand as an educator\n\n40\n00:03:46,680 --> 00:03:51,920\nbecause you definitely want to be seen as that person. And I always saw that as kind of like\n\n41\n00:03:52,240 --> 00:04:07,700\na job security thing too, because like if there's ever a downturn or given the slight downturn that we've experienced, I'm Sorry, I shouldn't say slight, like some people have lost jobs and stuff, it's not slight for them for sure. But the downturn we've recently experienced,\n\n42\n00:04:09,920 --> 00:04:14,120\nit gives me no sense, a small sense of security knowing that\n\n43\n00:04:15,060 --> 00:04:16,080\nin that event,\n\n44\n00:04:16,800 --> 00:04:23,740\nthe people who are seen as the most skilled are the ones who are going to keep their employment. And so\n\n45\n00:04:24,480 --> 00:04:33,140\nthat was my justification to my wife when I would explain why I spent so much time on Twitter and answering people's questions for free and doing open source. All of that was\n\n46\n00:04:34,320 --> 00:04:36,860\nto like keep myself forefront\n\n47\n00:04:37,280 --> 00:04:38,380\nin people's minds\n\n48\n00:04:38,860 --> 00:04:53,220\nfor that sort of thing. And it keeps me sharp as well. That's what I feel. I just get the sense that I feel, I imagine you maybe feel as well that I feel a little bit divorced from kind of like the day-to-day development. I haven't been on JIRA in a long time.\n\n49\n00:04:53,540 --> 00:05:04,340\nYeah. Like I don't have a manager or anyone. I haven't like got a burned down chart or anything sort of like corralling me to do stuff but people just asking me stuff all the time\n\n50\n00:05:04,640 --> 00:05:06,720\nand giving me the insight into their day-to-day,\n\n51\n00:05:07,040 --> 00:05:09,100\nit keeps me sharp and keeps me interested.\n\n52\n00:05:09,620 --> 00:05:14,480\nAbsolutely. That was actually 1 of the things I was worried about when I went full-time teacher back in 2019,\n\n53\n00:05:15,540 --> 00:05:23,740\nwas just that, like, I would lose touch with what it's like to be a real engineer on a team and stuff. And I definitely remember what it was like\n\n54\n00:05:24,380 --> 00:05:34,180\nat big and small companies, PayPal and things. I had a small stint with Remix, which I think kind of helped. And that was a little different experience than I'd had before as well.\n\n55\n00:05:34,940 --> 00:05:36,960\nBut yeah, it's important to\n\n56\n00:05:37,360 --> 00:05:38,980\nstay close to\n\n57\n00:05:39,440 --> 00:05:48,480\nwhat that day-to-day development is like. Like you and I both spend a lot of time developing software, whether it's open source, reusable packages or\n\n58\n00:05:48,900 --> 00:05:49,940\nactual applications.\n\n59\n00:05:51,880 --> 00:05:53,720\nI was actually worried about that too,\n\n60\n00:05:54,120 --> 00:05:56,180\nbut it turns out there's no shortage of\n\n61\n00:05:57,040 --> 00:05:58,180\ncoding projects\n\n62\n00:05:58,780 --> 00:06:01,020\nto work on, even as an educator.\n\n63\n00:06:01,920 --> 00:06:02,620\nBut yeah,\n\n64\n00:06:03,640 --> 00:06:09,660\nit is kind of interesting, the regular day-to-day work that developers have to go through that,\n\n65\n00:06:11,260 --> 00:06:13,940\nyeah, I'm glad I don't have to deal with regularly.\n\n66\n00:06:15,060 --> 00:06:41,680\nYeah, there's a whole subset of stuff that I just so happy that I don't have to do anymore. It's it feels so good. I mean, but I don't know. There is a part of me that it chooses to get back to at some point. Yeah, yeah, I know the feeling. It's kind of you want to go back to school or something and kind of relive your glory days. You know, that's how I feel. I want to go back knowing everything I do now and knowing all this sort of extra edgy stuff I've got as an educator and just think, oh, I could absolutely smash that Jira ticket. I really could.\n\n67\n00:06:42,040 --> 00:06:43,480\nYeah, that's for sure.\n\n68\n00:06:44,100 --> 00:06:46,860\nMaybe 1 day or you make your own company or something.\n\n69\n00:06:47,800 --> 00:06:48,300\nCool.\n\n70\n00:06:49,000 --> 00:06:49,500\nOkay,\n\n71\n00:06:49,900 --> 00:06:52,320\nso yeah, let's talk about TypeScript a little bit.\n\n72\n00:06:53,520 --> 00:06:54,900\nFirst, let's get this,\n\n73\n00:06:56,520 --> 00:06:57,980\nI guess, this first topic\n\n74\n00:06:58,580 --> 00:06:59,080\nout\n\n75\n00:06:59,440 --> 00:07:00,180\nof the way.\n\n76\n00:07:00,660 --> 00:07:03,000\nShould people use TypeScript at all?\n\n77\n00:07:03,680 --> 00:07:05,640\nLike, why is JavaScript not enough?\n\n78\n00:07:07,280 --> 00:07:11,140\nI think when you look back at the reasons they created TypeScript,\n\n79\n00:07:11,660 --> 00:07:15,420\nthe reasons they created it is that they thought at the time JavaScript just\n\n80\n00:07:15,740 --> 00:07:21,300\nsucks really. And it really did suck at the time. This is like 10, nearly 11 years ago. And\n\n81\n00:07:21,660 --> 00:07:29,540\nJavaScript really was in a place where it was just not functioning well for large applications. You didn't have a sense of what modules were. You didn't have,\n\n82\n00:07:30,020 --> 00:07:30,520\nlike,\n\n83\n00:07:30,940 --> 00:07:46,780\nreally all of the tools that we have today to build large applications and make nice modular things that lots of people from the same team can work on. And I think there's still a lot of those issues hanging around today in JavaScript. But the thing that's really painful about modern JavaScript today\n\n84\n00:07:47,120 --> 00:08:03,500\nis that the IDE experience is so bad. Like when you go into a JavaScript project, it's kind of like you're delving around in some kind of complex arcane CSS, right? Like you're just scared to touch anything or change anything because you have no idea where those ripples are going to go out to.\n\n85\n00:08:04,200 --> 00:08:12,340\nWhen you're using something like VS Code, which I think a lot of the industry is on right now, VS Code and all IDs are integrated really closely with TypeScript.\n\n86\n00:08:12,840 --> 00:08:14,080\nWhen you use TypeScript,\n\n87\n00:08:15,040 --> 00:08:24,720\nyou just get so many more powerful tools at your disposal that you just wouldn't have otherwise. You get autocomplete, you get in IDE errors, you get loads of tools like refactors,\n\n88\n00:08:25,520 --> 00:08:26,260\ngo to definition,\n\n89\n00:08:26,720 --> 00:08:39,240\nand you get kind of like a English teacher just over your shoulder the whole time, just like watching you write down your stuff and giving you little red squigglies, you know, when you're doing things. And you can hand in your code at the end of the day and go,\n\n90\n00:08:39,640 --> 00:08:58,940\ndoes my code work or not, according to your thoughts? And the teacher will go yes or no, which means you can kind of integrate it on CI and your CI can tell you, okay, does this look like it's going to work? And most of the time it will catch things that you wouldn't have got otherwise. So when Airbnb migrated into TypeScript,\n\n91\n00:08:59,440 --> 00:09:02,060\nI can't remember what the exact figure was, but it was something like\n\n92\n00:09:02,480 --> 00:09:19,100\n38% of all of their bugs they shipped to production could have been prevented by TypeScript. So it's just, I mean, it's like, at the end of the day, you get a more powerful IDE, you ship fewer bugs, and to be honest, I just feel better working with TypeScript. It's just feels like my tools are more powerful.\n\n93\n00:09:19,940 --> 00:09:25,340\nBut doesn't TypeScript kind of tie your hands so you can't be as expressive or like,\n\n94\n00:09:27,040 --> 00:09:30,980\nyeah, like there are features of the JavaScript language that you cannot use\n\n95\n00:09:31,920 --> 00:09:37,200\nto their full extent if you're using TypeScript. So doesn't it limit you? So TypeScript,\n\n96\n00:09:37,740 --> 00:09:53,400\nbasically TypeScript describes JavaScript. And so the more complex language that you're using within JavaScript, the more complex your TypeScript is going to have to be in order to handle it. TypeScript is really, really good at describing JavaScript. And it turns out that most JavaScript,\n\n97\n00:09:53,760 --> 00:09:55,960\nyou really hardly need any annotations\n\n98\n00:09:56,280 --> 00:10:05,940\nor like hardly any sort of sprinkles of stuff in order for it to understand what the JavaScript is doing. So things like narrowing within functions, TypeScript is really good at understanding.\n\n99\n00:10:06,340 --> 00:10:15,980\nThings like function parameters, TypeScript can't figure out for you, so you need to sort of do those things. But if you're doing really complicated things, like, I don't know, kind of\n\n100\n00:10:16,500 --> 00:10:33,940\nprototype assignments, or like, I don't know, messing about with the fundamental building blocks of JavaScript in order to get something done, or using maybe deprecated features of JavaScript or like the with keyword or things you maybe shouldn't be using, TypeScript isn't going to be that good at doing it. TypeScript is mostly focused on getting you working on the\n\n101\n00:10:34,540 --> 00:10:46,580\nmain path, pushing you into a sort of place where actually your code is more readable because you're less incentivized to do these magical dances. So I think some people who are really, really wizards with JavaScript,\n\n102\n00:10:46,960 --> 00:10:52,700\nthey feel a little bit like TypeScript is constraining me. But I think those constraints in a team setting\n\n103\n00:10:53,140 --> 00:10:54,180\nare good ones.\n\n104\n00:10:54,840 --> 00:11:00,260\nYeah. I don't remember who said this, but the phrase is, tie your hands to free your mind.\n\n105\n00:11:01,080 --> 00:11:04,540\nAnd I think that just describes it very well.\n\n106\n00:11:04,900 --> 00:11:05,720\nAnother person,\n\n107\n00:11:06,060 --> 00:11:06,860\nJared Forsyth,\n\n108\n00:11:07,540 --> 00:11:13,120\nyears ago, before I was into TypeScript, I actually got into Flow first and then later into TypeScript.\n\n109\n00:11:13,580 --> 00:11:15,420\nBut before I got into Type JavaScript,\n\n110\n00:11:15,760 --> 00:11:16,780\nJared said,\n\n111\n00:11:17,140 --> 00:11:20,040\nif it's hard to type, then it's probably hard to understand\n\n112\n00:11:20,460 --> 00:11:21,180\nas well.\n\n113\n00:11:22,240 --> 00:11:24,620\nNow, I don't know if that's always the case,\n\n114\n00:11:25,520 --> 00:11:26,020\nbecause\n\n115\n00:11:26,920 --> 00:11:28,820\nI've found that the more generic,\n\n116\n00:11:29,440 --> 00:11:33,980\nnot to borrow the term from TypeScript, but the more generic I write my\n\n117\n00:11:34,380 --> 00:11:37,440\ncode, the more complicated my types have to be.\n\n118\n00:11:37,860 --> 00:11:38,900\nAnd as a result,\n\n119\n00:11:39,320 --> 00:11:41,100\nlibrary TypeScript is often\n\n120\n00:11:41,400 --> 00:11:45,700\nmuch, much harder to write because the idea of a library is to\n\n121\n00:11:46,100 --> 00:11:46,800\nbe generic.\n\n122\n00:11:47,140 --> 00:11:47,820\nAnd so,\n\n123\n00:11:48,620 --> 00:11:50,420\nwhy do you think that is?\n\n124\n00:11:51,280 --> 00:11:53,700\nWhen you're writing library-type scripts, you inherently\n\n125\n00:11:54,100 --> 00:11:55,180\ndon't know\n\n126\n00:11:56,400 --> 00:11:59,880\nwhat it's going to be used for. Let's say you just build a groupby function.\n\n127\n00:12:00,480 --> 00:12:10,300\nYou don't know when you build that group by function, all of the different types of objects that are gonna be passed through that, all of the different keys that might need to be grouped together. And so when you're building\n\n128\n00:12:11,060 --> 00:12:35,780\nlike your library, you're essentially going, okay, this is a hole that I don't know what's going in there yet. This is a slot that needs, like the user is going to fill it with whatever they have. And that is really complicated. And a lot of type languages actually don't have a concept of that. But because JavaScript is so loose, TypeScript needs to incorporate that. And so what you get are generics in TypeScript, and generics are a way of describing\n\n129\n00:12:36,140 --> 00:12:43,100\nthose little holes that you can then fill with things, and TypeScript will infer based on what you pass in to those functions.\n\n130\n00:12:43,620 --> 00:13:02,300\nSo when you're building library stuff, often you're not gonna have just 1 slot, you're gonna have maybe 4 or 5. You look at the types for something like tanstack query, and there are 4 of those generic slots kind of on every single type on there, because they need to understand what data the user is fetching, and also how they might change that data via select transform.\n\n131\n00:13:02,960 --> 00:13:28,420\nIt can get really, really hairy. But I think, I mean, this is a lot of what my paid stuff is, my paid course is like trying to accomplish. It's trying to break that stuff down and make it easier to understand. Because when you think of it as just you've got these little holes and little slots that you're putting types into via runtime values, then it starts to make sense and you can start to piece together the flow. But as you say, like if you're writing standard application JavaScript,\n\n132\n00:13:28,780 --> 00:13:42,080\noften you know everything that's gonna be passed through your functions. You don't need to write things in a very generic way and you don't need to care about all the possible outcomes. You might just have maybe 3 or 4 possible outcomes and TypeScript lets you be very specific about those too.\n\n133\n00:13:42,980 --> 00:13:45,980\nThat makes tons of sense. And I would say\n\n134\n00:13:46,400 --> 00:13:57,320\nalso as a general rule, more generic JavaScript is also more complicated than less generic JavaScript. So like TypeScript doesn't have anything to do with it. It's just the fact of the matter. Now,\n\n135\n00:13:58,500 --> 00:13:59,180\nit is\n\n136\n00:13:59,700 --> 00:14:01,980\nreally, really difficult to make a very\n\n137\n00:14:02,420 --> 00:14:03,560\ngeneric TypeScript\n\n138\n00:14:04,280 --> 00:14:09,560\nwork in a correct way. But I find that when I'm making those types of abstractions,\n\n139\n00:14:10,900 --> 00:14:11,700\nmy TypeScript\n\n140\n00:14:12,180 --> 00:14:13,040\nis a little,\n\n141\n00:14:14,480 --> 00:14:16,720\nwhat's the right word, a little more rule-breaky.\n\n142\n00:14:17,540 --> 00:14:19,940\nLike I do things in those abstractions\n\n143\n00:14:21,040 --> 00:14:27,680\nthat I would not typically recommend in product code, like casting things as any or whatever.\n\n144\n00:14:29,060 --> 00:14:31,500\nWhere like As long as I have\n\n145\n00:14:31,820 --> 00:14:32,800\nthe proper\n\n146\n00:14:33,180 --> 00:14:35,780\nother safeguards to make up for those casts,\n\n147\n00:14:36,480 --> 00:14:46,760\nthen I feel more confident doing that. For sure. It's important to think of TypeScript as not a complete project yet. It's not done, you know? TypeScript isn't finished\n\n148\n00:14:47,420 --> 00:14:59,000\nwith its own type system. And so there is things inside TypeScript. In fact, there's 1 that's kind of maybe spec'd for a next version of TypeScript, which as of time of recording, this is 5.3 is going to be the next version,\n\n149\n00:14:59,340 --> 00:15:03,120\nwhich might improve some inference within these generic functions\n\n150\n00:15:03,520 --> 00:15:07,280\nand mean that you're less likely to need to cast in certain situations.\n\n151\n00:15:07,960 --> 00:15:15,040\nSo currently my advice in those situations is if you have a complicated function, which is supposed to receive any kind of input,\n\n152\n00:15:15,660 --> 00:15:23,860\nexpel any kind of output, then you might need to do some casting because you might know more than TypeScript in those situations. But TypeScript is getting smarter.\n\n153\n00:15:24,660 --> 00:15:25,680\nYes, 100%.\n\n154\n00:15:26,760 --> 00:15:31,700\nAnd actually, since we're on the subject of casting, I'm going to give 1 rule\n\n155\n00:15:32,140 --> 00:15:36,940\nto folks that I think, I'm pretty sure you'll agree with me, and it's a pretty\n\n156\n00:15:38,480 --> 00:15:39,520\nstrong rule.\n\n157\n00:15:39,920 --> 00:15:41,500\nBut that rule is,\n\n158\n00:15:43,060 --> 00:15:43,560\nwell,\n\n159\n00:15:43,940 --> 00:15:48,980\nI guess it'll take some explaining. So you can make a function as a generic\n\n160\n00:15:49,600 --> 00:15:50,100\nand\n\n161\n00:15:50,740 --> 00:15:52,000\nyou can pass in whatever\n\n162\n00:15:52,360 --> 00:15:59,940\ntype you want. And so what I have seen in the past, and I know you've seen this as well, is people will have a very generic function\n\n163\n00:16:00,480 --> 00:16:03,140\nthat, like let's say a JSON parse function,\n\n164\n00:16:03,560 --> 00:16:04,380\nas an example,\n\n165\n00:16:04,840 --> 00:16:05,340\nand\n\n166\n00:16:05,660 --> 00:16:09,720\nthe return value of that is completely unknown. You can't really know\n\n167\n00:16:10,520 --> 00:16:24,640\nat compile time what that type will be. And so they'll say, well, I don't wanna do a cast because that is bad, so therefore I will make it a generic. I will pass the type that the parse return type should be, and that's what the return type will be.\n\n168\n00:16:24,960 --> 00:16:27,100\nMy rule is never do that, ever.\n\n169\n00:16:27,940 --> 00:16:30,560\nThat is always wrong, and the reason is\n\n170\n00:16:31,400 --> 00:16:37,000\nthat a generic to people looks like, oh, the library has considered this and will ensure\n\n171\n00:16:37,540 --> 00:16:40,020\nthat the type that's returned is correct.\n\n172\n00:16:40,920 --> 00:16:51,440\nBut in the case of something like where it's just within the library function, it says as whatever type you passed in, you're lying to yourself. And lying to yourself is fine\n\n173\n00:16:51,780 --> 00:17:05,040\nif you know that you're doing it. But by using a generic, you're lying to yourself and not knowing it. Exactly. Yeah. It's really easy to do that with a fetch function as well. Because you're like, okay, right. I'm fetching from an endpoint, I know what that endpoint returns,\n\n174\n00:17:05,900 --> 00:17:12,780\nthat's going to be absolutely fine. And most of the time, that's true, you don't need to validate that endpoint, you know probably what it's going to return.\n\n175\n00:17:13,260 --> 00:17:31,920\nBut someday it might break or it might do something funky. And so it's tempting to build like a, you know, a generic get from end point or whatever, where you just pop in a generic slot and you, and you put that, on the end. But the thing is that fetch it's returns any. So what you're doing really is you're just hiding in any underneath a beautiful look generic signature,\n\n176\n00:17:32,320 --> 00:17:32,780\nwhich,\n\n177\n00:17:33,140 --> 00:17:40,780\nexactly the same with your Jason pass, Jason pass returns any 2. And you are just not going to have a good time if that's something that you do consistently\n\n178\n00:17:41,120 --> 00:17:50,420\nand because it looks so nice, you know, but really just hidden a bunch of stuff underneath a hidden a bunch of anys underneath a nice API. Yes, yeah, 100%.\n\n179\n00:17:50,740 --> 00:17:51,980\nAnd at some point,\n\n180\n00:17:52,280 --> 00:17:55,160\nwe actually, I had a conversation with Colin,\n\n181\n00:17:56,000 --> 00:17:59,720\ncreator of Zod. So that's, that's a solution right there is that\n\n182\n00:18:00,040 --> 00:18:01,980\nIf you really want to be certain of the type\n\n183\n00:18:02,360 --> 00:18:08,040\nand it's a value that comes at runtime, then you've got to parse it at runtime. That's the solution.\n\n184\n00:18:09,520 --> 00:18:13,940\nSo yeah, let's continue. Sometimes I find that\n\n185\n00:18:15,040 --> 00:18:17,860\nTypeScript makes it more difficult to\n\n186\n00:18:18,280 --> 00:18:25,520\nwrite some of my code. What should I do in those situations where, like, I know that the code works, but TypeScript is making,\n\n187\n00:18:26,440 --> 00:18:39,040\nlike, is calling out little pieces in my code that says, like, well, this could be null. Like, use ref, for example. I'm passing the ref to a DOM node, and in my use effect, it will be there. I promise, it is going to be there.\n\n188\n00:18:39,440 --> 00:18:48,660\nAnd TypeScript's just yelling at me. What do you do in those situations? You add the bang and say, no, this won't be null, or What do you do? Yeah, another 1 is like search parameters, right? It's like,\n\n189\n00:18:49,040 --> 00:18:59,980\nyou know, when you have search params coming into your application and you pretty much know that the only path that we can possibly get there, there's always going to be an ID in the search params. Why are you making me check this? What are you doing?\n\n190\n00:19:00,880 --> 00:19:02,220\nSo in those situations\n\n191\n00:19:02,540 --> 00:19:17,920\nwhere you know for sure, and actually there's even, I did some application work just for my friend the other day, and I was using some type generator that was sort of creating some types for me from a GraphQL endpoint. Turns out that on that GraphQL endpoint, they made everything\n\n192\n00:19:18,340 --> 00:19:19,080\nall undefined.\n\n193\n00:19:19,660 --> 00:19:44,480\nSo it was like, okay, so like, so I know the stuff is going to be there. You know, the stuff is going to be there, but I have to do all of the optional chaining to get all the way through. And so that messes up a few things like, because you know, but so yeah, what I ended up doing is I just ended up using the bang operator a bunch. And that's absolutely fine. That's what you're saying is you're saying, okay, I know this is going to be there. I know something that TypeScript doesn't know. And you're often going to be in those situations.\n\n194\n00:19:45,060 --> 00:19:50,260\nAnd part of learning TypeScript is learning when you can bend the rules a little bit.\n\n195\n00:19:51,340 --> 00:20:02,140\nOften those things are going to be just fine. And when they do go wrong, then you're going to end up with an error in your application, but you would have ended up with an error in your application if you use something like Zod to validate it anyway.\n\n196\n00:20:02,500 --> 00:20:03,000\nSo\n\n197\n00:20:03,340 --> 00:20:04,240\nit's sometimes\n\n198\n00:20:04,540 --> 00:20:09,440\nyou just need to know when to shut the teacher up and just write some code.\n\n199\n00:20:09,900 --> 00:20:10,940\nYeah, you know,\n\n200\n00:20:11,380 --> 00:20:16,380\nI say this all the time and people watching probably have heard this in the workshop so far, but\n\n201\n00:20:16,920 --> 00:20:17,420\nTypeScript\n\n202\n00:20:17,840 --> 00:20:22,000\ndoesn't make your life terrible. It just shows you how terrible your life is.\n\n203\n00:20:23,860 --> 00:20:24,360\nYes.\n\n204\n00:20:24,960 --> 00:20:45,520\nI have a sort of story about this that I was thinking about the other day. That's the perfect metaphor for this. I resealed the bath the other day, and I don't know if you have these in the US, you probably do, which is you have those guns where you sort of like put it in the sealant and then you sort of do that. So the first time I ever resealed a bath is I didn't realize that guns were a thing. So I just took the thing and I did\n\n205\n00:20:46,720 --> 00:20:47,420\nlike that.\n\n206\n00:20:48,220 --> 00:20:50,400\nIt took me about 45 minutes\n\n207\n00:20:50,740 --> 00:21:00,320\nand I was just like, my arms were killing me at the end of it as well. I got a massive workout, but I did do it. I did manage to get there. And there was a real sense of achievement at the end.\n\n208\n00:21:01,060 --> 00:21:04,120\nAnd this occurred to me that this is like\n\n209\n00:21:04,440 --> 00:21:06,840\nhow it feels when your tools aren't\n\n210\n00:21:07,840 --> 00:21:11,420\ngood enough. You feel really good for having worked against your tools,\n\n211\n00:21:11,880 --> 00:21:12,380\nbut\n\n212\n00:21:12,840 --> 00:21:23,220\nwhen your tools are better, it's just so much easier. And you can spend energy on different things. Yeah, that's a that's a great metaphor. And like, that works really nicely, too, because\n\n213\n00:21:23,800 --> 00:21:24,800\nit's not like\n\n214\n00:21:25,240 --> 00:21:37,860\nyou didn't gain anything out of the experience. Like, you know, you got to work out and that's, that's good. But you could have done other things that could have pushed your goals forward, you know, better. Yeah, and would I recommend it to anyone else? No, absolutely not.\n\n215\n00:21:39,380 --> 00:21:44,680\nIt feels like the part of the TV commercial that's like, there's got to be a better way.\n\n216\n00:21:46,220 --> 00:21:56,540\nBecause I wasn't thinking that, you know, like as that person just doing that, writing my code or like as a JavaScript developer, I wasn't thinking there must be a better way. You know, I was quite happy with my situation.\n\n217\n00:21:57,040 --> 00:21:58,040\nYeah, yeah, sure.\n\n218\n00:21:58,980 --> 00:22:01,660\nSo I want to add 1 other thing to\n\n219\n00:22:02,500 --> 00:22:03,300\nour previous\n\n220\n00:22:03,800 --> 00:22:04,820\nconversation there,\n\n221\n00:22:06,040 --> 00:22:06,540\nwhere\n\n222\n00:22:06,880 --> 00:22:08,760\nyou had that GraphQL API,\n\n223\n00:22:09,520 --> 00:22:14,180\nmade everything undefined. That sounds awful. I probably would have done the same thing that you did.\n\n224\n00:22:15,060 --> 00:22:19,460\nFor the example that I gave of use ref and this could be null,\n\n225\n00:22:20,080 --> 00:22:23,300\nI actually find that, or like params as well,\n\n226\n00:22:25,020 --> 00:22:30,040\nTypeScript doesn't know the conventions of the framework you're using. TypeScript doesn't understand\n\n227\n00:22:30,780 --> 00:22:32,000\nuse ref directly.\n\n228\n00:22:32,540 --> 00:22:33,420\nAnd actually\n\n229\n00:22:34,200 --> 00:22:39,360\nTypeScript is right. It is possible that that DOM node could not be defined,\n\n230\n00:22:39,960 --> 00:22:41,180\nor it could be null.\n\n231\n00:22:41,940 --> 00:22:49,820\nAnd maybe not today, but tomorrow when your co-worker conditionally renders that element, now it is undefined or it is null.\n\n232\n00:22:50,460 --> 00:22:52,560\nAnd you better believe that\n\n233\n00:22:52,900 --> 00:22:58,500\nyou're better off dealing with that problem right now than just saying, no TypeScript, I know better than you.\n\n234\n00:22:58,940 --> 00:23:00,140\nSo I find myself\n\n235\n00:23:00,720 --> 00:23:03,980\nhappier adding the 1 or 2 lines of code to satisfy\n\n236\n00:23:04,640 --> 00:23:05,360\na condition\n\n237\n00:23:05,740 --> 00:23:09,800\nthat may not ever happen today, but certainly could happen in the future\n\n238\n00:23:10,320 --> 00:23:12,900\nand avoid those types of problems. And additionally,\n\n239\n00:23:13,260 --> 00:23:13,920\nyou mentioned\n\n240\n00:23:15,060 --> 00:23:34,540\nthat Zod, like if you were to type check it with Zod, then you're still gonna get an error. And that is certainly the case if you just parse it with Zod and then it changes in the future, you're gonna get an error either way. But the nice thing about parsing it with Zod, and I'm not saying you do this always, but the nice thing about parsing it with Zod is the error you get will be much more useful.\n\n241\n00:23:35,020 --> 00:23:38,400\nAnd so it is worthwhile, like again, this is TypeScript\n\n242\n00:23:39,440 --> 00:23:40,540\njust showing you\n\n243\n00:23:41,040 --> 00:23:43,340\nthe challenges that you will face 1 day\n\n244\n00:23:43,660 --> 00:23:51,520\nor very potentially could face in the future. And so I think it's worth putting a little bit of extra effort into listening to the teacher.\n\n245\n00:23:52,120 --> 00:23:52,620\nYes.\n\n246\n00:23:53,040 --> 00:23:54,780\nI mean, the classic example is document.getElementById,\n\n247\n00:23:56,600 --> 00:23:58,160\nright? If you think about document.getElementById,\n\n248\n00:23:59,060 --> 00:24:04,380\nyou know that your little app or root thing is always going to be there, right? It's always going to be there.\n\n249\n00:24:04,700 --> 00:24:11,980\nCome hell or high water, that element is going to be there, but TypeScript thinks it might not be there. That's true, there is a future where it might not.\n\n250\n00:24:12,280 --> 00:24:23,660\nAnd I think in those situations, you really want to think about the error that will happen if it's not there. Because if you have like a property missing from a data structure, let's say that comes in and\n\n251\n00:24:24,340 --> 00:24:37,620\nlet's say you could have validated it with Zod. And it's just missing, right? So maybe it's just not there or whatever. Or it's an empty string or something's wrong with it. And then that then flows through the entirety of your app. And it causes something\n\n252\n00:24:38,160 --> 00:24:42,100\nlike 14 levels down to error in a way that's confusing.\n\n253\n00:24:42,400 --> 00:24:50,820\nYou really want to think about the boundaries of your application and the data that's coming into it, when you have data that could be in a strange spot,\n\n254\n00:24:51,280 --> 00:24:52,000\nand especially\n\n255\n00:24:52,380 --> 00:24:55,620\nparts where you can enter form data or things like that,\n\n256\n00:24:55,980 --> 00:25:16,040\nor accept anything on a public API endpoints or something, like that's just gonna kill your app and it's gonna make debugging incredibly stressful when you have to dive down those 14 levels to figure out, oh, I see, we're just receiving the wrong thing. So in those situations, you just want to think about how good is the error I'm going to get if I don't validate this? Because with document.geton.by.id,\n\n257\n00:25:16,980 --> 00:25:22,940\nyou're going to know straight away that something's wrong because that's going to error in the console with like this thing is not defined,\n\n258\n00:25:23,300 --> 00:25:23,800\nright?\n\n259\n00:25:24,340 --> 00:25:26,020\nWhereas with a Zod thing,\n\n260\n00:25:26,940 --> 00:25:32,140\nor that element that's just not available on the data, that's going to kill you in debugging.\n\n261\n00:25:32,680 --> 00:25:34,860\nYeah, that's a great example.\n\n262\n00:25:35,860 --> 00:25:36,680\nI think\n\n263\n00:25:38,100 --> 00:25:40,380\nthe cool thing is that by\n\n264\n00:25:40,840 --> 00:25:45,000\nputting forth a little bit of attention at the boundaries of your application where\n\n265\n00:25:46,120 --> 00:25:55,220\nthat data is coming in, putting a little bit of effort to validate that, and then cleaning it up so that the rest of the application has really nice data and everything\n\n266\n00:25:56,380 --> 00:26:06,360\nwill result in a much better user experience too, because then you can say, oh, like I got some data from this API. And instead of showing you this janky, weird, incomplete UI,\n\n267\n00:26:07,660 --> 00:26:12,260\nwhich is unreliable at this point, I'm just gonna say there was something wrong and you\n\n268\n00:26:12,840 --> 00:26:16,220\ncan go and report that to your betters or whatever.\n\n269\n00:26:16,720 --> 00:26:27,660\nExactly, yeah. It just makes, and especially when you're handling errors in React and flowing things up in the right direction, you want those errors to be predictable too, so that they can hit the right error boundary and make it really nice.\n\n270\n00:26:27,980 --> 00:26:28,700\nYeah, 100%.\n\n271\n00:26:29,180 --> 00:26:31,280\nSo Matt, You're teaching on TotalTypescript.com,\n\n272\n00:26:33,840 --> 00:26:35,460\nteaching TypeScript wizards,\n\n273\n00:26:35,940 --> 00:26:40,580\nmaking people comfortable with TypeScript and even wizards with TypeScript. So\n\n274\n00:26:41,600 --> 00:26:53,300\nwhat would you say for somebody who's just getting started into learning TypeScript? Of course, we say go to Total TypeScript, there's a bunch of free stuff that you can go through. But why don't you describe\n\n275\n00:26:53,640 --> 00:26:55,580\nsome of the things that beginners\n\n276\n00:26:56,040 --> 00:26:59,620\nwill go through on Total TypeScript or the things that you recommend\n\n277\n00:27:00,180 --> 00:27:12,040\nfor beginners who are getting into TypeScript and want to, or even not even beginners, but people who've been using it for a while, but just skipped over the fundamentals as part of their regular, you know, cause we're developing software. We're not learning stuff just for fun.\n\n278\n00:27:12,440 --> 00:27:24,640\nSo yeah, what are some of those? It's like backfilling information, you know? Yeah, yeah. When you're just like, you're just working with it often and you just don't, you've got maybe questions that sort of like were buried in the back of your head 6 months ago that you never quite answered.\n\n279\n00:27:25,440 --> 00:27:42,480\nIt's so useful to get that information. And I think a lot of what I really like about your courses and what I try to emulate too is that you can skim a lot of the material. You can just get a sense from the chapter headings, okay, that's an interesting little piece, a little interesting morsel, I might dig that out and then you solve a problem. And with Total Timescript,\n\n280\n00:27:42,800 --> 00:27:45,860\nespecially with beginner stuff, I try to make the beginner stuff\n\n281\n00:27:47,080 --> 00:28:08,580\nas close to free as possible. And there's like a whole free beginner's tutorial and tons of like different articles for beginners too. And so you should definitely take the beginner's tutorials. You take, especially because you're looking at React stuff in Epic web, then you should look at the free React tutorial as well, which covers all the sort of user ref and use state and all of the sort of nonsense you need to understand with TypeScript and React.\n\n282\n00:28:09,140 --> 00:28:15,680\nAnd I think then too, like the TypeScript handbook is a pretty solid resource, which is their official documentation.\n\n283\n00:28:16,380 --> 00:28:20,100\nIt lays out in really nice formatting and\n\n284\n00:28:20,540 --> 00:28:23,660\nkind of order, which I think is a really important part of learning\n\n285\n00:28:24,000 --> 00:28:46,720\nall the things you need to know to get productive and make it make sense. And I think from there, it's all about getting involved because it's 1 of the cool things about TS is that you really don't need that much to get started. You need to understand how to annotate a function parameter, you need to understand the basic types, a few object types, maybe an array type, and you're good to go. You can just start being productive and start messing around with stuff.\n\n286\n00:28:47,040 --> 00:28:47,540\nAnd\n\n287\n00:28:47,900 --> 00:28:53,760\nTypeScript just comes with every front-end framework now, whether you're using Next or Remix or whatever you're using,\n\n288\n00:28:54,160 --> 00:28:55,940\nTypeScript will be an option. So\n\n289\n00:28:57,380 --> 00:29:04,660\nit's so easy to get started and just start rolling with it. Yeah, that's great. And in fact, for a lot of frameworks, it's the default option\n\n290\n00:29:05,380 --> 00:29:07,000\nas well, because it's just,\n\n291\n00:29:07,360 --> 00:29:08,820\nit really has 1,\n\n292\n00:29:09,720 --> 00:29:12,000\nat least in everything that I do.\n\n293\n00:29:12,380 --> 00:29:16,160\nThat's a big part of why Epic Web is 100% TypeScript.\n\n294\n00:29:16,940 --> 00:29:19,860\nAnd a few years ago, I tweeted that\n\n295\n00:29:20,220 --> 00:29:26,920\neverything that I teach will be in TypeScript unless what I'm teaching is TypeScript or like beginner JavaScript stuff.\n\n296\n00:29:27,880 --> 00:29:28,380\nBecause\n\n297\n00:29:29,680 --> 00:29:33,580\nit just makes things so much more productive. And in particular, like you said,\n\n298\n00:29:34,160 --> 00:29:38,980\nthe typical day-to-day product stuff, you don't really need to use TypeScript that much.\n\n299\n00:29:39,520 --> 00:29:41,620\nLike you end up annotating a function\n\n300\n00:29:43,480 --> 00:29:49,780\nand there's like, that's mostly what you're gonna be doing. Now actually on the subject of functions, I'm curious,\n\n301\n00:29:50,500 --> 00:29:53,600\nthere was a thing going around a while ago about\n\n302\n00:29:54,020 --> 00:29:54,940\ntype inference\n\n303\n00:29:55,280 --> 00:29:58,400\nand return types and things. So\n\n304\n00:29:58,820 --> 00:30:11,180\nyeah, there's seems to be, I think we'd be remiss if we didn't touch on a couple of these hot topics. We can also talk about types versus interfaces and stuff too as this is kind of a fun subject. So where do you stand on\n\n305\n00:30:11,920 --> 00:30:16,160\ntype inference with regard to return types? Yep, so there's,\n\n306\n00:30:16,860 --> 00:30:22,000\nthe thing about TypeScript is you can configure it differently based on your preferences, right? So\n\n307\n00:30:22,740 --> 00:30:31,820\ndifferent people will have different ideas about what strict means and how strict they want TypeScript to be. And so TypeScript ships with a bunch of different config options to\n\n308\n00:30:32,360 --> 00:30:34,180\ndo all sorts of stuff. So you can have\n\n309\n00:30:34,640 --> 00:30:46,660\na warning or an error if you forget to use a function parameter, for instance, or you forget to use a local variable, things like this. And there's 1 where you can get an error if you forget\n\n310\n00:30:47,960 --> 00:30:56,080\nto add a return type to your functions. So you can basically say, okay, this function will return a string or number, let's say.\n\n311\n00:30:56,640 --> 00:31:02,120\nI think that particular rule in TypeScript causes more trouble than it's worth,\n\n312\n00:31:02,980 --> 00:31:04,780\nbecause of a number of reasons.\n\n313\n00:31:05,420 --> 00:31:28,840\nFirstly, it's going to sometimes be inaccurate because you can actually like type a function to say, okay, this returns string or number, whereas in fact it returns just a string or returns string or undefined, whereas in fact it just returns undefined, right? So then you have to deal with the string case. So there's a lot of those little situations where you, for instance, maybe just edit the body of a function, don't edit the return type, and then like\n\n314\n00:31:29,240 --> 00:31:34,420\nyou are having to handle all that stuff further down in your app, or maybe handling the cases that aren't there.\n\n315\n00:31:35,740 --> 00:31:57,040\nAnd there's more to it too, if you're using like a third-party library, often the types are gonna be very, very complex. If you're using a, I don't know, like a React query or something, I keep coming back to that example, then those types you're going to need to know about the internal types of React query if you want to use them in a return type, which is really, really grim often. It's often just easier if you just\n\n316\n00:31:57,380 --> 00:32:02,460\nlet the implicit stuff handle it. If you just let TypeScript handle it, and then it just flows through app beautifully.\n\n317\n00:32:03,260 --> 00:32:04,460\nAnd often too,\n\n318\n00:32:04,840 --> 00:32:07,060\nespecially if you're working in a React app,\n\n319\n00:32:07,600 --> 00:32:12,140\nyour components, which are just functions, they're always gonna return the same thing, which is React.ReactNode.\n\n320\n00:32:12,980 --> 00:32:17,140\nSo why bother annotating that because you know they're gonna return the same thing all the time.\n\n321\n00:32:17,560 --> 00:32:19,220\nAnd so I think\n\n322\n00:32:19,540 --> 00:32:20,040\nimplicit\n\n323\n00:32:20,420 --> 00:32:40,120\ntypes do have a really good set of uses, which is, oh, sorry, explicit return types have a really good set of uses, especially in like a library setting or where you're building, let's say in the utils folder of your app, where you have your custom group by functions, or you have your domain functions where you're ordering and sorting and stuff.\n\n324\n00:32:40,420 --> 00:32:48,140\nWhen you're working with those, you want to be sure that they're returning the right stuff because often the bodies of those functions can be very complex, and you're not quite sure\n\n325\n00:32:48,580 --> 00:32:58,500\nwhat the shape of the endpoint is going to be. And it means that someone who's just scanning down your code, for instance, in a PR, can just look at it and go, OK, that's supposed to return that. That seems right.\n\n326\n00:32:58,940 --> 00:33:01,820\nAnd it knows that TypeScript is checking the internals as well.\n\n327\n00:33:02,200 --> 00:33:02,700\nSo\n\n328\n00:33:03,480 --> 00:33:04,700\nI think that\n\n329\n00:33:05,740 --> 00:33:19,780\nit's a case of whether you should turn on that rule or not, of always having to explicitly return things or not. And I think you shouldn't. I still think you should use return types when you need to and when it makes sense. But I don't think you should always have to.\n\n330\n00:33:20,940 --> 00:33:22,180\nI 100% agree.\n\n331\n00:33:22,640 --> 00:33:31,300\nIt is interesting to think about rules like that being kind of like a linter. TypeScript is more than just a type checker. It also can be a linter in some cases.\n\n332\n00:33:32,440 --> 00:33:36,240\nYeah, that's actually a really interesting case I never really considered, where\n\n333\n00:33:36,960 --> 00:33:39,980\nyour return type can be wider than the reality.\n\n334\n00:33:40,320 --> 00:33:40,820\nAnd\n\n335\n00:33:42,540 --> 00:33:44,120\nthat is kind of like writing\n\n336\n00:33:44,700 --> 00:33:45,560\ntest cases\n\n337\n00:33:46,540 --> 00:34:01,240\nthat your implementation happens to support this 1 feature, but nobody needs that feature. And so then as you're refactoring that code, you have to make that test pass, but the only thing that cares about it is the test. And so delete the test.\n\n338\n00:34:02,260 --> 00:34:04,840\nYeah, That makes tons of sense to me.\n\n339\n00:34:05,740 --> 00:34:06,240\nSo,\n\n340\n00:34:06,680 --> 00:34:07,660\nalso on,\n\n341\n00:34:08,679 --> 00:34:17,219\noh, there was something else I wanted to mention about that. If I remember, I'll come back to it. But yeah, I'd like to hear your take on types versus interfaces.\n\n342\n00:34:17,780 --> 00:34:18,280\nYeah.\n\n343\n00:34:18,760 --> 00:34:19,300\nI mean,\n\n344\n00:34:20,080 --> 00:34:25,440\nwhen you're talking about types versus interfaces, what we're really talking about is how you declare object types.\n\n345\n00:34:25,840 --> 00:34:32,300\nBecause in React as well, like it's essentially most of your activity in React is gonna be declaring\n\n346\n00:34:32,780 --> 00:34:33,960\nprops, right?\n\n347\n00:34:34,360 --> 00:34:42,420\nYou know, declare a type for your props and then you put that on the component. And then it means whenever you use that component, you get auto-complete, you get type safety. It's lovely.\n\n348\n00:34:42,900 --> 00:34:43,400\nAnd\n\n349\n00:34:44,440 --> 00:34:48,980\nwhen you do that, you can either use a type or you can use an interface.\n\n350\n00:34:49,659 --> 00:34:50,159\nAnd\n\n351\n00:34:51,040 --> 00:34:53,620\nlike when we're comparing type or interface normally,\n\n352\n00:34:54,020 --> 00:34:57,600\nI think the better way to compare them is by talking\n\n353\n00:34:58,580 --> 00:34:59,840\nabout interface extends\n\n354\n00:35:00,480 --> 00:35:01,400\nor intersections.\n\n355\n00:35:01,980 --> 00:35:17,620\nAnd intersections are where you can basically take 2 types and like mush them together. Use the ampersand operator and you just go, okay, these guys just get slotted together. So user and admin user are now slotted together and that's like a super admin user or whatever. And it means that they combine the types of the 2.\n\n356\n00:35:18,040 --> 00:35:18,540\nAnd\n\n357\n00:35:19,140 --> 00:35:33,660\nwhen you do that, you are slowing TypeScript down a little bit because that is quite a complicated computation to have to do in order to understand all of the types that are going into it. And So when you use something like interface extends instead,\n\n358\n00:35:34,020 --> 00:36:09,640\nthat forces you to basically go, okay, I'm going to interface extends this thing that I was smashing in. And it means that I have to give it a name. And when I give it a name, it means that TypeScript can cache it. And it means that it never needs to check that again or do that computation ever again. So when you're comparing those 2, interface is the clear winner because over the entire process of your application or like when TypeScript is checking all that stuff, it can just do more caching because it knows that there are more names that it can cache against. Whereas with type, and you're doing all of these sort of ampersand mashing together, then it has to do more computation.\n\n359\n00:36:10,160 --> 00:36:14,720\nBut when we're talking about just like a simple object type, there really isn't\n\n360\n00:36:15,040 --> 00:36:15,940\nthat much difference.\n\n361\n00:36:16,760 --> 00:36:18,840\nThe thing that does maybe\n\n362\n00:36:19,340 --> 00:36:22,620\nmake a slight difference is that when you have 2 interfaces\n\n363\n00:36:22,960 --> 00:36:25,640\nwith the same name, let's say, they're both called user,\n\n364\n00:36:26,340 --> 00:36:34,180\nthen TypeScript will, like if you use a type for that, type user, type user, TypeScript will complain because you've used the same name twice. You shouldn't have done that.\n\n365\n00:36:34,700 --> 00:36:35,400\nIn interfaces,\n\n366\n00:36:35,840 --> 00:36:42,380\nyou get interface user, interface user. TypeScript won't complain. It will, in fact, just merge them together with what's called a declaration merge.\n\n367\n00:36:42,740 --> 00:36:43,400\nAnd that\n\n368\n00:36:43,920 --> 00:36:44,940\nis rare,\n\n369\n00:36:45,300 --> 00:36:58,480\nBut it will happen. It will happen at least once. It's happened to me. And that will be very frustrating if you're a beginner trying to understand that stuff. If you've got a 4,000 line file, if you've got 2 interfaces declared in the same scope with the same name, that's going to kill you, you know.\n\n370\n00:36:58,840 --> 00:36:59,340\nAnd\n\n371\n00:37:00,040 --> 00:37:04,820\nFor that reason alone, I would say when you're just declaring a simple object type, you should use type probably.\n\n372\n00:37:06,100 --> 00:37:12,680\nBut if you're doing any kind of like extends or like combining objects together, you should always use interface extends.\n\n373\n00:37:13,940 --> 00:37:14,840\nYeah, you know,\n\n374\n00:37:16,460 --> 00:37:22,540\nthat declaration merging is both a blessing and a curse, because like there are libraries that have,\n\n375\n00:37:25,580 --> 00:37:29,240\nthey even use the term in Jest and VTest, they're expect.extend.\n\n376\n00:37:30,540 --> 00:37:32,220\nAnd to be able to add\n\n377\n00:37:32,540 --> 00:37:40,300\nthese assertions to that API, you have to use an interface declaration merge, like that, of course. And that's how we do it in\n\n378\n00:37:40,600 --> 00:37:43,300\nour testing section of the course,\n\n379\n00:37:44,060 --> 00:37:44,560\nand\n\n380\n00:37:45,240 --> 00:37:48,580\nfor adding our own custom assertions, and it works great.\n\n381\n00:37:49,040 --> 00:37:50,140\nBut yeah,\n\n382\n00:37:50,460 --> 00:37:51,420\nthat is a\n\n383\n00:37:52,300 --> 00:37:53,260\nsurprising feature.\n\n384\n00:37:53,920 --> 00:37:54,660\nFor myself,\n\n385\n00:37:55,640 --> 00:37:56,140\nI\n\n386\n00:37:56,600 --> 00:37:57,100\nfind\n\n387\n00:37:57,920 --> 00:38:00,980\ninterfaces feel like classes and types feel like objects.\n\n388\n00:38:01,320 --> 00:38:03,060\nAnd so for that reason alone,\n\n389\n00:38:03,380 --> 00:38:06,700\nI prefer types just because I don't like classes.\n\n390\n00:38:08,320 --> 00:38:08,820\nBut\n\n391\n00:38:09,240 --> 00:38:09,740\nyeah,\n\n392\n00:38:10,080 --> 00:38:14,880\nin general, I actually completely agree. Like you don't find yourself doing\n\n393\n00:38:15,660 --> 00:38:18,200\nreally, really complicated stuff with that\n\n394\n00:38:18,620 --> 00:38:26,260\nwhere you feel like, oh, this is gonna be a performance problem unless you jump into, okay, now I'm doing a library or like now I'm generating\n\n395\n00:38:27,540 --> 00:38:28,860\na Prisma client.\n\n396\n00:38:29,340 --> 00:38:32,860\nAnd those types are really complicated. So yeah, definitely\n\n397\n00:38:33,300 --> 00:38:35,780\nmakes sense to think about performance from that perspective.\n\n398\n00:38:36,500 --> 00:38:44,560\nThe 1 addition I would say, because that's interesting you say like app and library. I think there is a third space that we didn't really talk about, which is there's\n\n399\n00:38:45,480 --> 00:38:48,740\nthe app library, and then there's the utils folder of your app.\n\n400\n00:38:49,400 --> 00:39:01,680\nAnd especially when you're migrating from JavaScript, that can often be the absolute killer. Because often, your files all across your application are going to depend on maybe just a couple of functions that some guy wrote 4 years ago,\n\n401\n00:39:02,160 --> 00:39:23,040\nand no 1 really knows how they work. And so someone coming into that, migrating that to TypeScript, you're gonna actually have to understand all that code really deeply. And probably just as we said earlier, because it's complex JavaScript, you're gonna have to use some complex TypeScript to deal with it. And the way you type those functions, if you just add a few anys in them, because they're used everywhere, that's gonna really degrade. Spreads everywhere.\n\n402\n00:39:23,480 --> 00:39:25,820\nSpreads everywhere. And so\n\n403\n00:39:26,260 --> 00:39:42,540\nthat I think, that's an interesting distinction app and lib, but I would also add the utils folder in because that can often just make or break the entire application experience. Yeah, for real. So you're telling me that it is perfectly okay, nobody's going to die if I use interface and type in the same application.\n\n404\n00:39:42,940 --> 00:39:43,480\nI mean,\n\n405\n00:39:44,180 --> 00:39:49,700\nthat's often what these arguments come down to, is like, you have to choose 1. We have to be consistent.\n\n406\n00:39:50,340 --> 00:40:07,400\nAnd I would just say they're both first class primitives in the language. I don't see why you have to choose 1 or the other. And I think that just rankles a lot of people and just gets them feeling like, Oh, that's stupid. Like, how could you do that in a real life? I mean, you just do it. You know, I mean, you can have them in the same file. You can have them like,\n\n407\n00:40:08,000 --> 00:40:15,940\nlike they're just so similar in the way they behave, apart from just a couple of different tweaks. You don't really need to be consistent to 1 or the other. I completely agree\n\n408\n00:40:16,560 --> 00:40:17,860\nwith that. I think\n\n409\n00:40:20,140 --> 00:40:29,980\nthat is the nuance that we're looking for here. Like it is okay to use both and nobody's gonna get in trouble for that. Also, I'm not your mom, so do whatever you want.\n\n410\n00:40:31,240 --> 00:40:35,420\nYeah, if you wanna use return types, you know, absolutely up to you. These are just like my opinions\n\n411\n00:40:35,740 --> 00:40:39,000\nand from us just looking at it, I think. Yeah, yeah.\n\n412\n00:40:40,240 --> 00:40:40,980\nWell, great.\n\n413\n00:40:42,040 --> 00:40:47,800\nSo, oh, you know what? Let's do 1 more kind of interesting 1. So React comes with a built-in\n\n414\n00:40:49,060 --> 00:40:56,180\nset of type, well, sorry, not built-in, unfortunately, maybe 1 day. But yes, there are types for React,\n\n415\n00:40:56,840 --> 00:41:00,080\nand those types come with a built-in type for\n\n416\n00:41:00,820 --> 00:41:03,340\na component, a function component.\n\n417\n00:41:04,440 --> 00:41:07,940\nI never use those at all. I feel like\n\n418\n00:41:08,460 --> 00:41:09,260\nit gives,\n\n419\n00:41:09,920 --> 00:41:10,780\nwell, okay,\n\n420\n00:41:11,120 --> 00:41:17,720\nsometimes, like for forward ref and stuff like that, I'll use them, but for regular components, yeah, not gonna happen for me.\n\n421\n00:41:18,020 --> 00:41:20,460\nAnd actually, a big part of it is just I don't like,\n\n422\n00:41:21,100 --> 00:41:25,020\nI like function declarations and you can't type those, which stinks. But\n\n423\n00:41:25,520 --> 00:41:26,820\nthat's as an aside.\n\n424\n00:41:28,380 --> 00:41:32,180\nYeah. So what is your take on using the component type for\n\n425\n00:41:32,500 --> 00:41:33,300\nReact components.\n\n426\n00:41:33,660 --> 00:41:35,440\nYeah, so there's a type called React.fc,\n\n427\n00:41:36,000 --> 00:41:51,480\nwhich is I think the 1 you're talking about. Yes. And this 1, it really used to suck. It really used to be bad actually in like a previous version of Types React. Because when you install React and you want to use TypeScript, you install React, which is the JavaScript code, and then Types React, which is the TypeScript code.\n\n428\n00:41:52,540 --> 00:41:54,560\nAnd it's in Types React that this\n\n429\n00:41:55,200 --> 00:41:56,100\nfunction exists.\n\n430\n00:41:56,820 --> 00:41:58,640\nAnd, oh, sorry, this type helper exists.\n\n431\n00:41:58,940 --> 00:42:04,620\nAnd it used to be crap for a long time because it used to implicitly add children to your types,\n\n432\n00:42:05,140 --> 00:42:14,680\ninto your props. And it meant that using it, you couldn't return things like numbers or strings from your component or undefined, let's say, which is a big 1.\n\n433\n00:42:15,060 --> 00:42:18,060\nWhereas in fact, those are now in React 18, I think.\n\n434\n00:42:18,980 --> 00:42:20,460\nThose are perfectly valid values.\n\n435\n00:42:21,040 --> 00:42:22,700\nWhereas, actually now,\n\n436\n00:42:24,060 --> 00:42:25,020\nTypeScript 5.1\n\n437\n00:42:26,260 --> 00:42:27,540\nonwards, and any\n\n438\n00:42:27,880 --> 00:42:40,280\ncurrent version of TypeScript React, it's actually perfectly OK, because they fix a lot of the issues. Now, when you're using a React.fc, you can actually return anything you want to, any valid React value. You can return undefined, you can return null or numbers, anything.\n\n439\n00:42:40,600 --> 00:42:43,120\nAnd it won't implicitly add children anymore.\n\n440\n00:42:43,460 --> 00:43:03,300\nSo I think I don't really mind. The only annoying thing is if you need to refactor it to a generic component, let's say, then that's a little bit harder because you've got to remove the React.fc definition and move it in. But so few of your components really need to be generic components that it doesn't end up mattering really at all. So yeah, I like it. I don't mind it too much.\n\n441\n00:43:03,760 --> 00:43:04,700\nCool, cool.\n\n442\n00:43:05,660 --> 00:43:14,120\nSomething that you said made me think of this other topic. We're like a little over our time that I was planning on, but I enjoy talking with you. So,\n\n443\n00:43:15,520 --> 00:43:16,400\nyeah. So\n\n444\n00:43:17,320 --> 00:43:21,420\n1 thing that I've found myself doing as I've been using TypeScript\n\n445\n00:43:22,820 --> 00:43:23,320\nis\n\n446\n00:43:24,280 --> 00:43:28,560\nit kind of magnified something I was already doing with JavaScript. So with JavaScript,\n\n447\n00:43:30,280 --> 00:43:39,260\ninitially as I started becoming a programmer, I would read books like Clean Code and things that would say your functions should just be a couple lines long\n\n448\n00:43:39,640 --> 00:43:42,540\nand all of these very strict rules about\n\n449\n00:43:43,060 --> 00:43:43,900\nClean Code.\n\n450\n00:43:45,140 --> 00:43:49,620\nSo I would follow those and then over time, I just became more\n\n451\n00:43:50,220 --> 00:43:51,240\nhappy with\n\n452\n00:43:51,560 --> 00:43:53,740\nkeeping my functions longer.\n\n453\n00:43:54,920 --> 00:44:01,420\nAnd doing, you know, just performing all the things. And the big benefit of that is now you don't have to do all of the\n\n454\n00:44:02,640 --> 00:44:04,620\nboilerplate, but also like legit\n\n455\n00:44:07,080 --> 00:44:07,580\nabstraction\n\n456\n00:44:07,900 --> 00:44:09,740\ncost of making a function.\n\n457\n00:44:10,160 --> 00:44:21,240\nAnd then TypeScript comes around and it says, not only do you pay the cost of just making the function and accepting the parameters and stuff, but you also have to type all of those things. Whereas like, maybe\n\n458\n00:44:21,660 --> 00:44:35,160\nI was able to infer that. Like a good example of this would be if I query the database with Prisma and I have my select in there. So I get like all this wonderful type inference. Now, if I have this block of code, I want to move to a function, I have to accept\n\n459\n00:44:35,560 --> 00:44:39,660\nthat array of users and define their types and everything. So I'm interested\n\n460\n00:44:39,960 --> 00:44:46,560\nin your thoughts on this, but I have pretty much just reduced the number of functions that I create,\n\n461\n00:44:47,500 --> 00:44:49,500\nand also components as well,\n\n462\n00:44:51,660 --> 00:44:55,580\nand a large reason for that is because it's a bit of a pain.\n\n463\n00:44:56,000 --> 00:45:06,220\nAnd I'm actually really happy with this. I think it's a good thing, but yeah, interested in your take. Yeah, I think like the ability to create temporary mess is I think a really important\n\n464\n00:45:07,580 --> 00:45:31,160\ntool for any framework and any tool. React lets you do this. You can have components that are like 2000 lines long and you don't need to clean them up. You can clean them up if you want to, but you don't need to. And that's glorious because it just means that you can just try things out and just find the abstractions when you find the right level. And you're absolutely right. Every time you create a new function, you're paying a cost there because TypeScript does force you to make,\n\n465\n00:45:33,220 --> 00:45:56,920\nforces you to pay double duty because you have to not only find the right code to put in that function, figure out the abstraction in your head, but also you're thinking about the types there too. You need to think about, okay, what things do I need to receive? What shape do I want them in? And of course you're doing that anyway, really. Like whenever you make a function, you're really thinking about all those things sort of from the get-go, or you should, and TypeScript really makes you do that too.\n\n466\n00:45:57,260 --> 00:45:58,000\nAnd so\n\n467\n00:45:58,440 --> 00:45:59,180\nI think\n\n468\n00:46:00,100 --> 00:46:00,600\nI\n\n469\n00:46:01,020 --> 00:46:22,300\nreally resonated with what you said in terms of like just allowing big functions, because often TypeScript will just help you out inside that function, just the same as if you were to capture that logic somewhere and just bring it in and pull it in. And I think that TypeScript lets us be messier because we know that we have a little bit of a cushion behind us. We can fall back on something\n\n470\n00:46:22,660 --> 00:46:25,180\nthat understands our code deeply.\n\n471\n00:46:25,680 --> 00:46:29,560\nAnd sure, it means that you can't use any sort of crazy abstractions or\n\n472\n00:46:30,300 --> 00:46:32,320\npens you in a little bit from using\n\n473\n00:46:32,900 --> 00:46:39,180\nthe stuff we talked about before, where you're really flying high with JavaScript, but it means that the basic stuff can be a little bit messier\n\n474\n00:46:39,520 --> 00:46:42,180\nand it will still work absolutely fine.\n\n475\n00:46:43,260 --> 00:46:43,940\nVery good.\n\n476\n00:46:44,640 --> 00:46:51,140\nCool. Well, I'm pleased with the current state of things. I'm happy with TypeScript. I think it's awesome.\n\n477\n00:46:51,600 --> 00:46:59,480\nAnd Matt, I appreciate you being here to chat with me about some of the interesting aspects of TypeScript. So love to hear\n\n478\n00:47:00,040 --> 00:47:01,020\na little bit about\n\n479\n00:47:01,560 --> 00:47:04,620\nways that people can connect with you. And like,\n\n480\n00:47:05,740 --> 00:47:06,760\nI know that\n\n481\n00:47:07,500 --> 00:47:08,320\nas I\n\n482\n00:47:08,760 --> 00:47:12,740\ngot into answering people's questions on Twitter, at some point, I kind of became\n\n483\n00:47:13,780 --> 00:47:14,740\ninterested or\n\n484\n00:47:15,060 --> 00:47:31,380\nopinionated on how those questions come in so that I can make the most value out of them and everything. So what is the best way, now that everybody knows that you're the guy who answers questions about TypeScript, what's the best way for people to ask questions to you and yeah, connect with you in general? That is a great question.\n\n485\n00:47:32,020 --> 00:47:34,800\nThe best place is on my Discord server, which is mattpuckott.com\n\n486\n00:47:35,220 --> 00:47:45,560\nforward slash Discord. Not only am I answering questions there, but there's a bunch of people who, sort of like a wizard's council there, who answer people's questions. And there's some extremely\n\n487\n00:47:46,080 --> 00:47:47,940\ntalented educators in there too.\n\n488\n00:47:48,900 --> 00:47:52,400\nSo big shout out to those people because they really, it's a lot of fun\n\n489\n00:47:52,960 --> 00:48:00,140\njust seeing the questions pour in and having people, especially new people in the community answer them. And the quality of answers in there is just astonishing.\n\n490\n00:48:00,720 --> 00:48:02,220\nSo for people who\n\n491\n00:48:02,620 --> 00:48:19,980\ndon't necessarily want to be, like make it big on Twitter or anything like that, aren't interested in that stuff, like the best way I think to learn TypeScript, especially the advanced stuff, is just to answer people's questions. And so having that forum there is the best place to do it. But if you really want me to answer them, then, you know, ping me on Twitter.\n\n492\n00:48:20,580 --> 00:48:23,420\nI'm sure that's absolutely fine too. But the Discord is the canonical\n\n493\n00:48:23,940 --> 00:48:25,020\nbest place to go.\n\n494\n00:48:25,320 --> 00:48:26,080\nVery good.\n\n495\n00:48:26,720 --> 00:48:35,420\nAwesome. Well, Matt, thank you so much and keep up all the awesome work. And yeah, we'll talk to you later. Same to you Kent, this was a pleasure.\n\n496\n00:48:35,980 --> 00:48:37,500\nThank you, bye everybody!",
            "text": "[00:00:00] Kent:\nHello everybody, this is an exciting day. We get to talk with Matt Pocock about TypeScript and other things. So if you haven't heard of Matt yet, then you're in for a treat. Matt is just a lovely person to chat with. He Has a very nice voice that if you take \n\n[00:00:21] any of his courses, you will hear a lot, which is great. And yeah, we're excited to chat about the thing that Matt has recently been most excited about, which is TypeScript. But before we get too far into that, Matt, would you like to give an intro to yourself? \n\n[00:00:37] Matt\nAbsolutely. Well, I feel a tremendous pressure to make my voice sound even better than it supposedly is as well. So that's a nice little subplot throughout this whole interview. No, I've been full-time talking about TypeScript for about 6, 9 months now, I guess. Before that, I \n\n[00:00:57] was working at Vercel as a developer advocate and then at a company called Stately, which when I was there, I was part of the XState core team. And XState is a complicated sort of state machine, state chart library that I know that you really like, Kent. And this, I think maybe how we had our first interaction as well, maybe in the Stately Discord as well. And I think \n\n[00:01:18] like when we were working on X state and stately, we had a lot of complicated TypeScript problems to try and solve. Oh yeah. I was really passionate about, state machines and state charts and through battling with TypeScript and working with my colleague at the time called Mateusz Brzezinski, who's a massive TypeScript expert. I got exposed to all that stuff and got really excited \n\n[00:01:38] and interested in it and then start posting videos about it and went full time and here we are. \n\n[00:01:44] Kent:\nThat's interesting how that happens. I think I've kind of shaken this idea off recently, sort of, but a year or 2 ago, a lot of people just saw me as the testing guy. And because I created testing JavaScript and testing library and all \n\n[00:02:04] that. And I don't know if this is the same for you, but I never, never planned on being the testing guy. It just happened because of the things that I was interested in and things I was working on, the problems I was trying to solve, which, yeah, I think it's kind of interesting how it just kind of happens naturally. \n\n[00:02:24] Matt\nTotally. I think I just posted my first video on TypeScript. Before that, I'd just been posting about XState. I was kind of the unofficial dev rel for XState at the time, along with David Corshede, obviously. And I posted a video about TypeScript. People loved it. I posted another 1. People loved it. And suddenly I was the TypeScript guy. People were calling me the Rodney Mullen of TypeScript. I think that \n\n[00:02:45] quote went around for a long time. Yeah. And that's still, I am the guy. And so I think, yeah, it's strange when people you don't know, start tagging you on things and start saying, help me solve my TypeScript problem. I'm sure you get that all the time with many, many different things. In fact, you're not just the testing guy. You're probably actually the React guy too. It's probably you and Dan Abramov getting all \n\n[00:03:05] the love. \n\n[00:03:05] Kent:\nYeah. Yeah. That's exactly kind of how, how it works, but like, I'm sure you have a, an idea of how you became the guy. And, I can say that, for me, I became kind of the testing guy because I created Testing Library, but also because I started, I would reply and \n\n[00:03:25] I would answer the questions. And I definitely see you doing that with TypeScript. \n\n[00:03:30] Matt\nYeah, it turns out if you reply, they just ask you more. So don't feed the trolls or don't give out useful information or people will think of you as the guy who gives out useful information. \n\n[00:03:41] Kent:\nYeah, which, you know, that plays well into your hand as an educator because you definitely want to be seen as that person. And I always saw that as kind of like a job security thing too, because like if there's ever a downturn or given the slight downturn that we've experienced, I'm Sorry, I shouldn't say slight, like some people \n\n[00:04:02] have lost jobs and stuff, it's not slight for them for sure. But the downturn we've recently experienced, it gives me no sense, a small sense of security knowing that in that event, the people who are seen as the most skilled are the ones who are going to keep their \n\n[00:04:22] employment. And so that was my justification to my wife when I would explain why I spent so much time on Twitter and answering people's questions for free and doing open source. All of that was to like keep myself forefront in people's minds for that sort of thing. \n\n[00:04:40] Matt\nAnd it keeps me sharp as well. That's what I feel. I just get the sense that I feel, I imagine you maybe feel as well that I feel a little bit divorced from kind of like the day-to-day development. I haven't been on JIRA in a long time. Yeah. Like I don't have a manager or anyone. I haven't like got a burned down chart or anything sort of like \n\n[00:05:00] corralling me to do stuff but people just asking me stuff all the time and giving me the insight into their day-to-day, it keeps me sharp and keeps me interested. \n\n[00:05:09] Kent:\nAbsolutely. That was actually 1 of the things I was worried about when I went full-time teacher back in 2019, was just that, like, I would lose touch with what it's like to be a real engineer on a team and stuff. And I definitely remember what it was like at big and small companies, PayPal and things. I had a small stint with Remix, which I \n\n[00:05:29] think kind of helped. And that was a little different experience than I'd had before as well. But yeah, it's important to stay close to what that day-to-day development is like. Like you and I both spend a lot of time developing software, whether it's open source, reusable packages or actual applications. \n\n[00:05:51] I was actually worried about that too, but it turns out there's no shortage of coding projects to work on, even as an educator. But yeah, it is kind of interesting, the regular day-to-day work that developers have to go through that, yeah, I'm glad \n\n[00:06:12] I don't have to deal with regularly. \n\n[00:06:15] Matt\nYeah, there's a whole subset of stuff that I just so happy that I don't have to do anymore. It's it feels so good. I mean, but I don't know. There is a part of me that it chooses to get back to at some point. \n\n[00:06:26] Kent:\nYeah, yeah, I know the feeling. \n\n[00:06:27] Matt\nIt's kind of you want to go back to school or something and kind of relive your glory days. You know, that's how I feel. I want to go back knowing everything I do now and knowing all this sort of extra edgy stuff I've got as an educator and just think, oh, I could absolutely smash that Jira ticket. I really could. \n\n[00:06:42] Kent:\nYeah, that's for sure. Maybe 1 day or you make your own company or something. Cool. Okay, so yeah, let's talk about TypeScript a little bit. First, let's get this, I guess, this first topic out of the way. Should people use TypeScript \n\n[00:07:02] at all? Like, why is JavaScript not enough? \n\n[00:07:07] Matt\nI think when you look back at the reasons they created TypeScript, the reasons they created it is that they thought at the time JavaScript just sucks really. And it really did suck at the time. This is like 10, nearly 11 years ago. And JavaScript really was in a place where it was just not functioning well for large applications. You didn't have a sense of what \n\n[00:07:27] modules were. You didn't have, like, really all of the tools that we have today to build large applications and make nice modular things that lots of people from the same team can work on. And I think there's still a lot of those issues hanging around today in JavaScript. But the thing that's really painful about modern JavaScript today is that \n\n[00:07:47] the IDE experience is so bad. Like when you go into a JavaScript project, it's kind of like you're delving around in some kind of complex arcane CSS, right? Like you're just scared to touch anything or change anything because you have no idea where those ripples are going to go out to. When you're using something like VS Code, which I think a lot of the industry is on right \n\n[00:08:07] now, VS Code and all IDs are integrated really closely with TypeScript. When you use TypeScript, you just get so many more powerful tools at your disposal that you just wouldn't have otherwise. You get autocomplete, you get in IDE errors, you get loads of tools like refactors, go to definition, and you get kind of \n\n[00:08:27] like a English teacher just over your shoulder the whole time, just like watching you write down your stuff and giving you little red squigglies, you know, when you're doing things. And you can hand in your code at the end of the day and go, does my code work or not, according to your thoughts? And the teacher will go yes or no, which means you can kind of integrate it on CI \n\n[00:08:48] and your CI can tell you, okay, does this look like it's going to work? And most of the time it will catch things that you wouldn't have got otherwise. So when Airbnb migrated into TypeScript, I can't remember what the exact figure was, but it was something like 38% of all of their bugs they shipped to production could have been prevented by TypeScript. So it's just, I mean, \n\n[00:09:08] it's like, at the end of the day, you get a more powerful IDE, you ship fewer bugs, and to be honest, I just feel better working with TypeScript. It's just feels like my tools are more powerful. \n\n[00:09:19] Kent:\nBut doesn't TypeScript kind of tie your hands so you can't be as expressive or like, yeah, like there are features of the JavaScript language that you cannot use to their full extent if you're using TypeScript. So doesn't it limit you? \n\n[00:09:36] Matt\nSo TypeScript, basically TypeScript describes JavaScript. And so the more complex language that you're using within JavaScript, the more complex your TypeScript is going to have to be in order to handle it. TypeScript is really, really good at describing JavaScript. And it turns out that most JavaScript, you really hardly need any annotations or \n\n[00:09:56] like hardly any sort of sprinkles of stuff in order for it to understand what the JavaScript is doing. So things like narrowing within functions, TypeScript is really good at understanding. Things like function parameters, TypeScript can't figure out for you, so you need to sort of do those things. But if you're doing really complicated things, like, I don't know, kind of prototype \n\n[00:10:17] assignments, or like, I don't know, messing about with the fundamental building blocks of JavaScript in order to get something done, or using maybe deprecated features of JavaScript or like the with keyword or things you maybe shouldn't be using, TypeScript isn't going to be that good at doing it. TypeScript is mostly focused on getting you working on the main path, pushing you into a sort of place \n\n[00:10:37] where actually your code is more readable because you're less incentivized to do these magical dances. So I think some people who are really, really wizards with JavaScript, they feel a little bit like TypeScript is constraining me. But I think those constraints in a team setting are good ones. \n\n[00:10:54] Kent:\nYeah. I don't remember who said this, but the phrase is, tie your hands to free your mind. And I think that just describes it very well. Another person, Jared Forsyth, years ago, before I was into TypeScript, I actually got into Flow first and then later into TypeScript. But before I got into Type \n\n[00:11:14] JavaScript, Jared said, if it's hard to type, then it's probably hard to understand as well. Now, I don't know if that's always the case, because I've found that the more generic, not to borrow the term from TypeScript, but the more generic I write my code, the \n\n[00:11:35] more complicated my types have to be. And as a result, library TypeScript is often much, much harder to write because the idea of a library is to be generic. And so, why do you think that is? \n\n[00:11:51] Matt\nWhen you're writing library-type scripts, you inherently don't know what it's going to be used for. Let's say you just build a groupby function. You don't know when you build that group by function, all of the different types of objects that are gonna be passed through that, all of the different keys that might need to be grouped together. And so when you're building like your \n\n[00:12:11] library, you're essentially going, okay, this is a hole that I don't know what's going in there yet. This is a slot that needs, like the user is going to fill it with whatever they have. And that is really complicated. And a lot of type languages actually don't have a concept of that. But because JavaScript is so loose, TypeScript needs to incorporate that. And so what you get \n\n[00:12:31] are generics in TypeScript, and generics are a way of describing those little holes that you can then fill with things, and TypeScript will infer based on what you pass in to those functions. So when you're building library stuff, often you're not gonna have just 1 slot, you're gonna have maybe 4 or 5. You look at the types for something like tanstack \n\n[00:12:51] query, and there are 4 of those generic slots kind of on every single type on there, because they need to understand what data the user is fetching, and also how they might change that data via select transform. It can get really, really hairy. But I think, I mean, this is a lot of what my paid stuff is, my paid course is like trying to accomplish. It's trying to break that stuff \n\n[00:13:11] down and make it easier to understand. Because when you think of it as just you've got these little holes and little slots that you're putting types into via runtime values, then it starts to make sense and you can start to piece together the flow. But as you say, like if you're writing standard application JavaScript, often you know everything that's gonna be passed through your functions. You don't \n\n[00:13:31] need to write things in a very generic way and you don't need to care about all the possible outcomes. You might just have maybe 3 or 4 possible outcomes and TypeScript lets you be very specific about those too. \n\n[00:13:42] Kent:\nThat makes tons of sense. And I would say also as a general rule, more generic JavaScript is also more complicated than less generic JavaScript. So like TypeScript doesn't have anything to do with it. It's just the fact of the matter. Now, it is really, really difficult to make a very generic \n\n[00:14:03] TypeScript work in a correct way. But I find that when I'm making those types of abstractions, my TypeScript is a little, what's the right word, a little more rule-breaky. Like I do things in those abstractions that I would not typically recommend \n\n[00:14:23] in product code, like casting things as any or whatever. Where like As long as I have the proper other safeguards to make up for those casts, then I feel more confident doing that. For sure. \n\n[00:14:39] Matt\nIt's important to think of TypeScript as not a complete project yet. It's not done, you know? TypeScript isn't finished with its own type system. And so there is things inside TypeScript. In fact, there's 1 that's kind of maybe spec'd for a next version of TypeScript, which as of time of recording, this is 5.3 is going to be the next version, which might \n\n[00:15:00] improve some inference within these generic functions and mean that you're less likely to need to cast in certain situations. So currently my advice in those situations is if you have a complicated function, which is supposed to receive any kind of input, expel any kind of output, then you might need to do some casting because you might \n\n[00:15:20] know more than TypeScript in those situations. But TypeScript is getting smarter. \n\n[00:15:24] Kent:\nYes, 100%. And actually, since we're on the subject of casting, I'm going to give 1 rule to folks that I think, I'm pretty sure you'll agree with me, and it's a pretty strong rule. But that rule is, well, I guess it'll take \n\n[00:15:44] some explaining. So you can make a function as a generic and you can pass in whatever type you want. And so what I have seen in the past, and I know you've seen this as well, is people will have a very generic function that, like let's say a JSON parse function, as an example, \n\n[00:16:04] and the return value of that is completely unknown. You can't really know at compile time what that type will be. And so they'll say, well, I don't wanna do a cast because that is bad, so therefore I will make it a generic. I will pass the type that the parse return type should be, and that's what the return type will be. \n\n[00:16:24] My rule is never do that, ever. That is always wrong, and the reason is that a generic to people looks like, oh, the library has considered this and will ensure that the type that's returned is correct. But in the case of something like where it's just within the \n\n[00:16:44] library function, it says as whatever type you passed in, you're lying to yourself. And lying to yourself is fine if you know that you're doing it. But by using a generic, you're lying to yourself and not knowing it. Exactly. \n\n[00:16:58] Matt\nYeah. It's really easy to do that with a fetch function as well. Because you're like, okay, right. I'm fetching from an endpoint, I know what that endpoint returns, that's going to be absolutely fine. And most of the time, that's true, you don't need to validate that endpoint, you know probably what it's going to return. But someday it might break or it might do something funky. And so it's tempting to build like a, you know, a \n\n[00:17:18] generic get from end point or whatever, where you just pop in a generic slot and you, and you put that, on the end. But the thing is that fetch it's returns any. So what you're doing really is you're just hiding in any underneath a beautiful look generic signature, which, exactly the same with your Jason pass, Jason pass returns any 2. And you are just not going to have \n\n[00:17:38] a good time if that's something that you do consistently and because it looks so nice, you know, but really just hidden a bunch of stuff underneath a hidden a bunch of anys underneath a nice API. \n\n[00:17:49] Kent:\nYes, yeah, 100%. And at some point, we actually, I had a conversation with Colin, creator of Zod. So that's, that's a solution right there is that If you really want to be certain of the type and it's a value that comes at runtime, then you've got to parse it at runtime. That's the solution. \n\n[00:18:09] So yeah, let's continue. Sometimes I find that TypeScript makes it more difficult to write some of my code. What should I do in those situations where, like, I know that the code works, but TypeScript is making, like, is calling out little pieces in my code that says, like, well, this \n\n[00:18:29] could be null. Like, use ref, for example. I'm passing the ref to a DOM node, and in my use effect, it will be there. I promise, it is going to be there. And TypeScript's just yelling at me. What do you do in those situations? You add the bang and say, no, this won't be null, or What do you do? \n\n[00:18:45] Matt\nYeah, another 1 is like search parameters, right? It's like, you know, when you have search params coming into your application and you pretty much know that the only path that we can possibly get there, there's always going to be an ID in the search params. Why are you making me check this? What are you doing? So in those situations where you know for sure, and actually there's even, I did \n\n[00:19:05] some application work just for my friend the other day, and I was using some type generator that was sort of creating some types for me from a GraphQL endpoint. Turns out that on that GraphQL endpoint, they made everything all undefined. So it was like, okay, so like, so I know the stuff is going to be there. You know, the stuff is going to be there, but I have to do all of the \n\n[00:19:25] optional chaining to get all \n\n[00:19:27] Kent:\nthe way through. \n\n[00:19:27] Matt\nAnd so that messes up a few things like, because you know, but so yeah, what I ended up doing is I just ended up using the bang operator a bunch. And that's absolutely fine. That's what you're saying is you're saying, okay, I know this is going to be there. I know something that TypeScript doesn't know. And you're often going to be in those situations. And part of learning TypeScript is learning \n\n[00:19:48] when you can bend the rules a little bit. Often those things are going to be just fine. And when they do go wrong, then you're going to end up with an error in your application, but you would have ended up with an error in your application if you use something like Zod to validate it anyway. So it's sometimes you just need to know when to shut the teacher up and just \n\n[00:20:08] write some code. \n\n[00:20:09] Kent:\nYeah, you know, I say this all the time and people watching probably have heard this in the workshop so far, but TypeScript doesn't make your life terrible. It just shows you how terrible your life is. \n\n[00:20:23] Matt\nYes. I have a sort of story about this that I was thinking about the other day. That's the perfect metaphor for this. I resealed the bath the other day, and I don't know if you have these in the US, you probably do, which is you have those guns where you sort of like put it in the sealant and then you sort of do that. So the first time I ever resealed a bath is I didn't realize that guns were a thing. So I just \n\n[00:20:43] took the thing and \n\n[00:20:44] Kent:\nI did \n\n[00:20:46] Matt\nlike that. It took me about 45 minutes and I was just like, my arms were killing me at the end of it as well. I got a massive workout, but I did do it. I did manage to get there. And there was a real sense of achievement at the end. And this occurred to me that this is like how it feels when your tools aren't \n\n[00:21:07] good enough. You feel really good for having worked against your tools, but when your tools are better, it's just so much easier. And you can spend energy on different things. \n\n[00:21:18] Kent:\nYeah, that's a that's a great metaphor. And like, that works really nicely, too, because it's not like you didn't gain anything out of the experience. Like, you know, you got to work out and that's, that's good. But you could have done other things that could have pushed your goals forward, you know, better. Yeah, and would I recommend it \n\n[00:21:36] Matt\nto anyone else? No, absolutely not. \n\n[00:21:39] Kent:\nIt feels like the part of the TV commercial that's like, there's got to be a better way. \n\n[00:21:46] Matt\nBecause I wasn't thinking that, you know, like as that person just doing that, writing my code or like as a JavaScript developer, I wasn't thinking there must be a better way. You know, I was quite happy with my situation. \n\n[00:21:57] Kent:\nYeah, yeah, sure. So I want to add 1 other thing to our previous conversation there, where you had that GraphQL API, made everything undefined. That sounds awful. I probably would have done the same thing that you did. For the example that I gave of \n\n[00:22:17] use ref and this could be null, I actually find that, or like params as well, TypeScript doesn't know the conventions of the framework you're using. TypeScript doesn't understand use ref directly. And actually TypeScript is right. It is possible that that \n\n[00:22:37] DOM node could not be defined, or it could be null. And maybe not today, but tomorrow when your co-worker conditionally renders that element, now it is undefined or it is null. And you better believe that you're better off dealing with that problem right now than just saying, no TypeScript, \n\n[00:22:57] I know better than you. So I find myself happier adding the 1 or 2 lines of code to satisfy a condition that may not ever happen today, but certainly could happen in the future and avoid those types of problems. And additionally, you mentioned that Zod, like if you were to type \n\n[00:23:17] check it with Zod, then you're still gonna get an error. And that is certainly the case if you just parse it with Zod and then it changes in the future, you're gonna get an error either way. But the nice thing about parsing it with Zod, and I'm not saying you do this always, but the nice thing about parsing it with Zod is the error you get will be much more useful. And so it is worthwhile, like again, \n\n[00:23:37] this is TypeScript just showing you the challenges that you will face 1 day or very potentially could face in the future. And so I think it's worth putting a little bit of extra effort into listening to the teacher. \n\n[00:23:52] Matt\nYes. I mean, the classic example is document.getElementById, right? If you think about document.getElementById, you know that your little app or root thing is always going to be there, right? It's always going to be there. Come hell or high water, that element is going to be there, but TypeScript thinks it might not be there. That's true, there is a future where it might not. \n\n[00:24:12] And I think in those situations, you really want to think about the error that will happen if it's not there. Because if you have like a property missing from a data structure, let's say that comes in and let's say you could have validated it with Zod. And it's just missing, right? So maybe it's just not there or whatever. Or it's an empty string or something's wrong with \n\n[00:24:32] it. And then that then flows through the entirety of your app. And it causes something like 14 levels down to error in a way that's confusing. You really want to think about the boundaries of your application and the data that's coming into it, when you have data that could be in a strange spot, and especially parts \n\n[00:24:52] where you can enter form data or things like that, or accept anything on a public API endpoints or something, like that's just gonna kill your app and it's gonna make debugging incredibly stressful when you have to dive down those 14 levels to figure out, oh, I see, we're just receiving the wrong thing. So in those situations, you just want to think about how good \n\n[00:25:12] is the error I'm going to get if I don't validate this? Because with document.geton.by.id, you're going to know straight away that something's wrong because that's going to error in the console with like this thing is not defined, right? Whereas with a Zod thing, or that element that's just not available on the data, that's going to kill you in debugging. \n\n[00:25:32] Kent:\nYeah, that's a great example. I think the cool thing is that by putting forth a little bit of attention at the boundaries of your application where that data is coming in, putting a little bit of effort to validate that, and then cleaning it up so that the rest of the \n\n[00:25:52] application has really nice data and everything will result in a much better user experience too, because then you can say, oh, like I got some data from this API. And instead of showing you this janky, weird, incomplete UI, which is unreliable at this point, I'm just gonna say there was something wrong and you \n\n[00:26:12] can go and report that to your betters or whatever. \n\n[00:26:16] Matt\nExactly, yeah. It just makes, and especially when you're handling errors in React and flowing things up in the right direction, you want those errors to be predictable too, so that they can hit the right error boundary and make it really nice. \n\n[00:26:27] Kent:\nYeah, 100%. So Matt, You're teaching on TotalTypescript.com, teaching TypeScript wizards, making people comfortable with TypeScript and even wizards with TypeScript. So what would you say for somebody who's just getting started into learning TypeScript? Of course, we say go \n\n[00:26:47] to Total TypeScript, there's a bunch of free stuff that you can go through. But why don't you describe some of the things that beginners will go through on Total TypeScript or the things that you recommend for beginners who are getting into TypeScript and want to, or even not even beginners, but people who've been using it for a while, but just skipped over the fundamentals as part of their regular, \n\n[00:27:08] you know, cause we're developing software. We're not learning stuff just for fun. So yeah, what are some of those? \n\n[00:27:13] Matt\nIt's like backfilling information, you know? Yeah, yeah. When you're just like, you're just working with it often and you just don't, you've got maybe questions that sort of like were buried in the back of your head 6 months ago that you never quite answered. It's so useful to get that information. And I think a lot of what I really like about your courses and what I try to emulate too is that you can skim a lot of the material. \n\n[00:27:34] You can just get a sense from the chapter headings, okay, that's an interesting little piece, a little interesting morsel, I might dig that out and then you solve a problem. And with Total Timescript, especially with beginner stuff, I try to make the beginner stuff as close to free as possible. And there's like a whole free beginner's tutorial and tons of like different articles for beginners too. And so you should definitely take \n\n[00:27:54] the beginner's tutorials. You take, especially because you're looking at React stuff in Epic web, then you should look at the free React tutorial as well, which covers all the sort of user ref and use state and all of the sort of nonsense you need to understand with TypeScript and React. And I think then too, like the TypeScript handbook is a pretty solid resource, \n\n[00:28:14] which is their official documentation. It lays out in really nice formatting and kind of order, which I think is a really important part of learning all the things you need to know to get productive and make it make sense. And I think from there, it's all about getting involved because it's 1 of the cool things about TS is that you really don't need that \n\n[00:28:34] much to get started. You need to understand how to annotate a function parameter, you need to understand the basic types, a few object types, maybe an array type, and you're good to go. You can just start being productive and start messing around with stuff. And TypeScript just comes with every front-end framework now, whether you're using Next or Remix or whatever you're using, TypeScript \n\n[00:28:54] will be an option. So it's so easy to get started and just start rolling with it. \n\n[00:29:00] Kent:\nYeah, that's great. And in fact, for a lot of frameworks, it's the default option as well, because it's just, it really has 1, at least in everything that I do. That's a big part of why Epic Web is 100% TypeScript. And a few years ago, I tweeted that everything \n\n[00:29:20] that I teach will be in TypeScript unless what I'm teaching is TypeScript or like beginner JavaScript stuff. Because it just makes things so much more productive. And in particular, like you said, the typical day-to-day product stuff, you don't really need to use TypeScript that much. Like you end up annotating \n\n[00:29:41] a function and there's like, that's mostly what you're gonna be doing. Now actually on the subject of functions, I'm curious, there was a thing going around a while ago about type inference and return types and things. So yeah, there's seems to be, I think \n\n[00:30:01] we'd be remiss if we didn't touch on a couple of these hot topics. We can also talk about types versus interfaces and stuff too as this is kind of a fun subject. So where do you stand on type inference with regard to return types? \n\n[00:30:14] Matt\nYep, so there's, the thing about TypeScript is you can configure it differently based on your preferences, right? So different people will have different ideas about what strict means and how strict they want TypeScript to be. And so TypeScript ships with a bunch of different config options to do all sorts of stuff. So you can have a warning \n\n[00:30:35] or an error if you forget to use a function parameter, for instance, or you forget to use a local variable, things like this. And there's 1 where you can get an error if you forget to add a return type to your functions. So you can basically say, okay, this function will return a string or number, \n\n[00:30:55] let's say. I think that particular rule in TypeScript causes more trouble than it's worth, because of a number of reasons. Firstly, it's going to sometimes be inaccurate because you can actually like type a function to say, okay, this returns string or number, whereas in fact it returns just a string or \n\n[00:31:15] returns string or undefined, whereas in fact it just returns undefined, right? So then you have to deal with the string case. So there's a lot of those little situations where you, for instance, maybe just edit the body of a function, don't edit the return type, and then like you are having to handle all that stuff further down in your app, or maybe handling the cases that aren't there. \n\n[00:31:35] And there's more to it too, if you're using like a third-party library, often the types are gonna be very, very complex. If you're using a, I don't know, like a React query or something, I keep coming back to that example, then those types you're going to need to know about the internal types of React query if you want to use them in a return type, which is really, really grim often. It's often just \n\n[00:31:55] easier if you just let the implicit stuff handle it. If you just let TypeScript handle it, and then it just flows through app beautifully. And often too, especially if you're working in a React app, your components, which are just functions, they're always gonna return the same thing, which is React.ReactNode. So why bother annotating that because you know they're gonna return \n\n[00:32:15] the same thing all the time. And so I think implicit types do have a really good set of uses, which is, oh, sorry, explicit return types have a really good set of uses, especially in like a library setting or where you're building, let's say in the utils folder of your app, where you have your custom \n\n[00:32:35] group by functions, or you have your domain functions where you're ordering and sorting and stuff. When you're working with those, you want to be sure that they're returning the right stuff because often the bodies of those functions can be very complex, and you're not quite sure what the shape of the endpoint is going to be. And it means that someone who's just scanning down your code, for instance, in a PR, can just look at it \n\n[00:32:55] and go, OK, that's supposed to return that. That seems right. And it knows that TypeScript is checking the internals as well. So I think that it's a case of whether you should turn on that rule or not, of always having to explicitly return things or not. And I think you shouldn't. I still think you should use return types when you need \n\n[00:33:15] to and when it makes sense. But I don't think you should always have to. \n\n[00:33:20] Kent:\nI 100% agree. It is interesting to think about rules like that being kind of like a linter. TypeScript is more than just a type checker. It also can be a linter in some cases. Yeah, that's actually a really interesting case I never really considered, where your return type can be wider than the reality. And \n\n[00:33:42] that is kind of like writing test cases that your implementation happens to support this 1 feature, but nobody needs that feature. And so then as you're refactoring that code, you have to make that test pass, but the only thing that cares about it is the test. And so delete the test. Yeah, \n\n[00:34:02] That makes tons of sense to me. So, also on, oh, there was something else I wanted to mention about that. If I remember, I'll come back to it. But yeah, I'd like to hear your take on types versus interfaces. \n\n[00:34:17] Matt\nYeah. I mean, when you're talking about types versus interfaces, what we're really talking about is how you declare object types. Because in React as well, like it's essentially most of your activity in React is gonna be declaring props, right? You know, declare a type for your props and then you put that on the component. And then it means \n\n[00:34:38] whenever you use that component, you get auto-complete, you get type safety. It's lovely. And when you do that, you can either use a type or you can use an interface. And like when we're comparing type or interface normally, I think the better way to compare them is by talking \n\n[00:34:58] about interface extends or intersections. And intersections are where you can basically take 2 types and like mush them together. Use the ampersand operator and you just go, okay, these guys just get slotted together. So user and admin user are now slotted together and that's like a super admin user or whatever. And it means that they combine the types of the 2. And \n\n[00:35:19] when you do that, you are slowing TypeScript down a little bit because that is quite a complicated computation to have to do in order to understand all of the types that are going into it. And So when you use something like interface extends instead, that forces you to basically go, okay, I'm going to interface extends this thing that I was smashing \n\n[00:35:39] in. And it means that I have to give it a name. And when I give it a name, it means that TypeScript can cache it. And it means that it never needs to check that again or do that computation ever again. So when you're comparing those 2, interface is the clear winner because over the entire process of your application or like when TypeScript is checking all that stuff, it can just do \n\n[00:35:59] more caching because it knows that there are more names that it can cache against. Whereas with type, and you're doing all of these sort of ampersand mashing together, then it has to do more computation. But when we're talking about just like a simple object type, there really isn't that much difference. The thing that does maybe make \n\n[00:36:19] a slight difference is that when you have 2 interfaces with the same name, let's say, they're both called user, then TypeScript will, like if you use a type for that, type user, type user, TypeScript will complain because you've used the same name twice. You shouldn't have done that. In interfaces, you get interface user, interface user. TypeScript won't complain. It will, in fact, just \n\n[00:36:39] merge them together with what's called a declaration merge. And that is rare, But it will happen. It will happen at least once. It's happened to me. And that will be very frustrating if you're a beginner trying to understand that stuff. If you've got a 4,000 line file, if you've got 2 interfaces declared in the same scope with the same name, that's going to kill you, you know. And \n\n[00:37:00] For that reason alone, I would say when you're just declaring a simple object type, you should use type probably. But if you're doing any kind of like extends or like combining objects together, you should always use interface extends. \n\n[00:37:13] Kent:\nYeah, you know, that declaration merging is both a blessing and a curse, because like there are libraries that have, they even use the term in Jest and VTest, they're expect.extend. And to be able to add these assertions to \n\n[00:37:33] that API, you have to use an interface declaration merge, like that, of course. And that's how we do it in our testing section of the course, and for adding our own custom assertions, and it works great. But yeah, that is a surprising feature. For \n\n[00:37:54] myself, I find interfaces feel like classes and types feel like objects. And so for that reason alone, I prefer types just because I don't like classes. But yeah, in general, I actually completely agree. Like you don't find yourself \n\n[00:38:14] doing really, really complicated stuff with that where you feel like, oh, this is gonna be a performance problem unless you jump into, okay, now I'm doing a library or like now I'm generating a Prisma client. And those types are really complicated. So yeah, definitely makes sense to think about \n\n[00:38:34] performance from that perspective. \n\n[00:38:36] Matt\nThe 1 addition I would say, because that's interesting you say like app and library. I think there is a third space that we didn't really talk about, which is there's the app library, and then there's the utils folder of your app. And especially when you're migrating from JavaScript, that can often be the absolute killer. Because often, your files all across your application \n\n[00:38:56] are going to depend on maybe just a couple of functions that some guy wrote 4 years ago, and no 1 really knows how they work. And so someone coming into that, migrating that to TypeScript, you're gonna actually have to understand all that code really deeply. And probably just as we said earlier, because it's complex JavaScript, you're gonna have to use some complex TypeScript to deal with it. And the way you \n\n[00:39:17] type those functions, if you just add a few anys in them, because they're used everywhere, that's gonna really degrade. \n\n[00:39:22] Kent:\nSpreads everywhere. \n\n[00:39:23] Matt\nSpreads everywhere. And so that I think, that's an interesting distinction app and lib, but I would also add the utils folder in because that can often just make or break the entire application experience. \n\n[00:39:34] Kent:\nYeah, for real. So you're telling me that it is perfectly okay, nobody's going to die if I use interface and type in the same application. \n\n[00:39:42] Matt\nI mean, that's often what these arguments come down to, is like, you have to choose 1. We have to be consistent. And I would just say they're both first class primitives in the language. I don't see why you have to choose 1 or the other. And I think that just rankles a lot of people and just gets them feeling like, Oh, that's stupid. Like, how could you do that in a real life? I mean, \n\n[00:40:02] you just do it. You know, I mean, you can have them in the same file. You can have them like, like they're just so similar in the way they behave, apart from just a couple of different tweaks. You don't really need to be consistent to 1 or the other. \n\n[00:40:15] Kent:\nI completely agree with that. I think that is the nuance that we're looking for here. Like it is okay to use both and nobody's gonna get in trouble for that. Also, I'm not your mom, so do whatever you want. Yeah, if \n\n[00:40:31] Matt\nyou wanna use return types, you know, absolutely up to you. These are just like my opinions and from us just looking at it, I think. \n\n[00:40:37] Kent:\nYeah, yeah. Well, great. So, oh, you know what? Let's do 1 more kind of interesting 1. So React comes with a built-in set of type, well, sorry, not built-in, unfortunately, maybe 1 day. But yes, there are types for React, and those types come \n\n[00:40:58] with a built-in type for a component, a function component. I never use those at all. I feel like it gives, well, okay, sometimes, like for forward ref and stuff like that, I'll use them, but for regular components, yeah, not gonna happen for me. And \n\n[00:41:18] actually, a big part of it is just I don't like, I like function declarations and you can't type those, which stinks. But that's as an aside. Yeah. So what is your take on using the component type for React components. \n\n[00:41:33] Matt\nYeah, so there's a type called React.fc, which is I think the 1 you're talking about. Yes. And this 1, it really used to suck. It really used to be bad actually in like a previous version of Types React. Because when you install React and you want to use TypeScript, you install React, which is the JavaScript code, and then Types React, which is the TypeScript code. And it's in Types React \n\n[00:41:53] that this function exists. And, oh, sorry, this type helper exists. And it used to be crap for a long time because it used to implicitly add children to your types, into your props. And it meant that using it, you couldn't return things like numbers or strings from your component or undefined, let's say, which is \n\n[00:42:13] a big 1. Whereas in fact, those are now in React 18, I think. Those are perfectly valid values. Whereas, actually now, TypeScript 5.1 onwards, and any current version of TypeScript React, it's actually perfectly OK, because they fix a lot of the issues. Now, when you're using a React.fc, \n\n[00:42:34] you can actually return anything you want to, any valid React value. You can return undefined, you can return null or numbers, anything. And it won't implicitly add children anymore. So I think I don't really mind. The only annoying thing is if you need to refactor it to a generic component, let's say, then that's a little bit harder because you've got to remove the React.fc definition \n\n[00:42:54] and move it in. But so few of your components really need to be generic components that it doesn't end up mattering really at all. So yeah, I like it. I don't mind it too much. \n\n[00:43:03] Kent:\nCool, cool. Something that you said made me think of this other topic. We're like a little over our time that I was planning on, but I enjoy talking with you. So, yeah. So 1 thing that I've found myself doing as I've been using TypeScript is \n\n[00:43:24] it kind of magnified something I was already doing with JavaScript. So with JavaScript, initially as I started becoming a programmer, I would read books like Clean Code and things that would say your functions should just be a couple lines long and all of these very strict rules about Clean Code. \n\n[00:43:45] So I would follow those and then over time, I just became more happy with keeping my functions longer. And doing, you know, just performing all the things. And the big benefit of that is now you don't have to do all of the boilerplate, but also like legit \n\n[00:44:07] abstraction cost of making a function. And then TypeScript comes around and it says, not only do you pay the cost of just making the function and accepting the parameters and stuff, but you also have to type all of those things. Whereas like, maybe I was able to infer that. Like a good example of this would be if I query the database with Prisma \n\n[00:44:27] and I have my select in there. So I get like all this wonderful type inference. Now, if I have this block of code, I want to move to a function, I have to accept that array of users and define their types and everything. So I'm interested in your thoughts on this, but I have pretty much just reduced the number of functions that I create, \n\n[00:44:47] and also components as well, and a large reason for that is because it's a bit of a pain. And I'm actually really happy with this. I think it's a good thing, but yeah, interested in your take. \n\n[00:45:00] Matt\nYeah, I think like the ability to create temporary mess is I think a really important tool for any framework and any tool. React lets you do this. You can have components that are like 2000 lines long and you don't need to clean them up. You can clean them up if you want to, but you don't need to. And that's glorious because it just means that you can just try things out and \n\n[00:45:20] just find the abstractions when you find the right level. And you're absolutely right. Every time you create a new function, you're paying a cost there because TypeScript does force you to make, forces you to pay double duty because you have to not only find the right code to put in that function, figure out the abstraction in your head, but also you're thinking \n\n[00:45:41] about the types there too. You need to think about, okay, what things do I need to receive? What shape do I want them in? And of course you're doing that anyway, really. Like whenever you make a function, you're really thinking about all those things sort of from the get-go, or you should, and TypeScript really makes you do that too. And so I think I really \n\n[00:46:01] resonated with what you said in terms of like just allowing big functions, because often TypeScript will just help you out inside that function, just the same as if you were to capture that logic somewhere and just bring it in and pull it in. And I think that TypeScript lets us be messier because we know that we have a little bit of a cushion behind us. We can fall back \n\n[00:46:21] on something that understands our code deeply. And sure, it means that you can't use any sort of crazy abstractions or pens you in a little bit from using the stuff we talked about before, where you're really flying high with JavaScript, but it means that the basic stuff can be a little bit messier and it will still work absolutely \n\n[00:46:41] fine. \n\n[00:46:43] Kent:\nVery good. Cool. Well, I'm pleased with the current state of things. I'm happy with TypeScript. I think it's awesome. And Matt, I appreciate you being here to chat with me about some of the interesting aspects of TypeScript. So love to hear a little bit about ways that people can connect with \n\n[00:47:03] you. And like, I know that as I got into answering people's questions on Twitter, at some point, I kind of became interested or opinionated on how those questions come in so that I can make the most value out of them and everything. So what is the best way, now that everybody knows that you're the \n\n[00:47:23] guy who answers questions about TypeScript, what's the best way for people to ask questions to you and yeah, connect with you in general? \n\n[00:47:30] Matt\nThat is a great question. The best place is on my Discord server, which is mattpuckott.com forward slash Discord. Not only am I answering questions there, but there's a bunch of people who, sort of like a wizard's council there, who answer people's questions. And there's some extremely talented educators in there too. So big shout out to those \n\n[00:47:50] people because they really, it's a lot of fun just seeing the questions pour in and having people, especially new people in the community answer them. And the quality of answers in there is just astonishing. So for people who don't necessarily want to be, like make it big on Twitter or anything like that, aren't interested in that stuff, like the best way I think to learn TypeScript, especially \n\n[00:48:10] the advanced stuff, is just to answer people's questions. And so having that forum there is the best place to do it. But if you really want me to answer them, then, you know, ping me on Twitter. I'm sure that's absolutely fine too. But the Discord is the canonical best place to go. \n\n[00:48:25] Kent:\nVery good. Awesome. Well, Matt, thank you so much and keep up all the awesome work. And yeah, we'll talk to you later. \n\n[00:48:33] Matt\nSame to you Kent, this was a pleasure. \n\n[00:48:35] Kent:\nThank you, bye everybody!"
          },
          "_rev": "WsAmd18YA1frbQaWBZpoTq"
        },
        "solution": null,
        "body": "Matt Pocock, a TypeScript expert and educator, sits down to discuss his journey in the TypeScript community. Having gained notoriety as the \"TypeScript guy\" through community engagement and educational videos, Matt shares his insights on TypeScript's advantages, complexities, and its evolving role in the development ecosystem.\n\nCiting Airbnb's 38% decrease in bugs after adopting the language, Matt praising TypeScript for its strengths in IDE capabilities, error prevention, and bug reduction.\n\nHowever, he also acknowledges the hurdles developers face when creating generic libraries and managing complex types. For enhancing type safety and data validation, tools like Zod come highly recommended.\n\nBoth Matt and Kent find a balanced perspective on TypeScript's strict nature, viewing it as a double-edged sword that primarily serves as a safety net for developers. The discussion also extends to TypeScript's compatibility with front-end frameworks like React.\n\nFor novices in TypeScript, Matt points to his Discord server and other no-cost resources as good starting points.\n\n#### Resources\n\n- [Matt Pocock on Twitter](https://twitter.com/mattpocockuk)\n- [Matt's TS Wizards Discord](https://discord.com/invite/8S5ujhfTB3)",
        "slug": "the-magic-of-typescript-with-matt-pocock",
        "_id": "WBQDSVdErPwEcA4Fd0g8xS",
        "_type": "interview",
        "title": "The Magic of TypeScript with Matt Pocock",
        "description": "Matt Pocock, TypeScript expert, delves into its strengths and complexities. Balancing type safety with generics. Recommends Zod for data validation."
      },
      {
        "videoResource": {
          "_rev": "6LaeqP6n94P8FD3sVhYJEN",
          "muxAsset": {
            "muxPlaybackId": "00XOPg5eOjrkM8R2yqksE958iJAfpo0002rlohkpP2TRY8",
            "muxAssetId": "WHIB006cNhR5qxw5JJqEEtqgwcVswTAIUqPCg01qmil5g",
            "_type": "muxAsset"
          },
          "_id": "umRzgEK3x2YA3YfFYH84lJ",
          "_updatedAt": "2024-03-19T20:25:31Z",
          "duration": 2530.3,
          "transcript": {
            "srt": "1\n00:00:00,299 --> 00:00:03,919\nWhat is up everybody I'm joined by my friend chantastic\n\n2\n00:00:05,020 --> 00:00:05,960\nMichael Chan\n\n3\n00:00:06,779 --> 00:00:09,360\nMichael say hi. Hey. Hello everyone.\n\n4\n00:00:09,960 --> 00:00:14,559\nI am so thrilled to be joined by Michael We we just finished having an hour-long conversation\n\n5\n00:00:14,960 --> 00:00:15,900\nbefore recording.\n\n6\n00:00:16,239 --> 00:00:17,980\nWe just enjoy each other's company\n\n7\n00:00:19,540 --> 00:00:21,800\nwe enjoy each other's company a lot, actually.\n\n8\n00:00:22,340 --> 00:00:23,200\nIt's so good.\n\n9\n00:00:24,380 --> 00:00:27,939\nSo yeah, Michael, I'm so happy that you're here with us.\n\n10\n00:00:28,860 --> 00:00:31,160\nI'm trying to remember, I always like to\n\n11\n00:00:31,560 --> 00:00:35,560\nstart off introductions by saying where our paths crossed.\n\n12\n00:00:36,100 --> 00:00:37,860\nAnd I'm sure that it was on Twitter.\n\n13\n00:00:38,920 --> 00:00:50,780\nAnd then we ran into each other at, I think React Conf was probably where we, or maybe React Rally. Possibly. Yeah, for some reason I think React Rally, but it might have been React Conf. I'm not\n\n14\n00:00:51,760 --> 00:00:53,980\nsure. We go back to like 2016\n\n15\n00:00:54,440 --> 00:00:54,940\nprobably.\n\n16\n00:00:55,400 --> 00:01:00,420\nYeah, I know that the first time I interviewed you was at I think the 2017\n\n17\n00:01:03,000 --> 00:01:13,020\nReact Rally maybe? Okay, yeah, yeah. That sounds about right it must have been before that but you know probably not too much I don't know you're 1 of you've got to be 1 of my oldest\n\n18\n00:01:13,479 --> 00:01:18,420\nfriends who are still a friend like that like we still chat and hang out and stuff.\n\n19\n00:01:19,200 --> 00:01:19,700\nReally?\n\n20\n00:01:20,320 --> 00:01:32,460\nOh yeah. Like all, all the friends that I had in college and high school and stuff, like, I don't really, certainly none of my friends in high school are still, I see it all. Some friends in college will, will do like a movie night occasionally, but,\n\n21\n00:01:32,980 --> 00:01:35,400\nyeah, I don't have a lot of those. So yeah,\n\n22\n00:01:36,180 --> 00:01:39,740\nI graduated college in 2014. So yeah, you're 1 of my oldest friends.\n\n23\n00:01:40,300 --> 00:01:46,040\nThat's so funny. I, you know, I have a really weird concept of time. And so\n\n24\n00:01:46,800 --> 00:01:47,300\nit,\n\n25\n00:01:47,860 --> 00:01:54,440\nI miss the part where like new friends become old friends. So all of my friends in my mind are new friends.\n\n26\n00:01:56,820 --> 00:01:59,520\nAnd so it's just really wild to think, oh yeah,\n\n27\n00:02:00,060 --> 00:02:00,980\nlike 2016,\n\n28\n00:02:01,420 --> 00:02:05,140\n2015, whenever that was, whatever that timeframe was, that's like\n\n29\n00:02:05,800 --> 00:02:06,300\n8\n\n30\n00:02:06,820 --> 00:02:09,240\nyears ago. Like, that's crazy. It's wild.\n\n31\n00:02:10,080 --> 00:02:14,020\nThat's amazing. I mean, it's all BC, right? Before COVID.\n\n32\n00:02:15,400 --> 00:02:25,780\nSo. Before COVID. Yeah, it's like, there's like a 3 year window where it's like time just stopped. Yeah, like I do. We have no way to account for it anymore. Yeah, it's funny though, because I do feel like during that time,\n\n33\n00:02:26,440 --> 00:02:28,400\nall of my online friendships\n\n34\n00:02:29,240 --> 00:02:29,740\nbecame,\n\n35\n00:02:31,060 --> 00:02:37,060\nIt's hard to, there became like this tactility to them where it's like, I couldn't remember\n\n36\n00:02:37,580 --> 00:02:46,959\nif I'd actually met certain people in real life or if I'd just like had podcast conversations with them and we just became like fast friends. Like it's really wild, like how,\n\n37\n00:02:47,280 --> 00:02:52,980\nlike that time shifted that for me. Whereas like, there wasn't as much of a difference.\n\n38\n00:02:53,400 --> 00:02:54,860\nYes, yeah, 100%.\n\n39\n00:02:55,240 --> 00:03:00,680\nI've had a couple of these interviews, and I'll start out being like, I don't think we've met in person, have we? Like...\n\n40\n00:03:02,060 --> 00:03:04,840\nYeah, like, Cassidy Williams, like, I consider\n\n41\n00:03:05,260 --> 00:03:17,060\nher a great friend at this point and we've never met in 3D. Like we could just be avatars to each other. It's really, really wild. Yeah, it's pretty interesting, this internet thing.\n\n42\n00:03:17,720 --> 00:03:32,020\nSpeaking of the internet thing, you're on the internet and you have some life experiences too. I wanna get an intro to you. So Michael, why don't you intro yourself to people watching for those who don't know you already? Yeah, so\n\n43\n00:03:32,360 --> 00:03:36,680\nmy name is, my official name is Michael Chan. I go by Chantastic most places.\n\n44\n00:03:37,060 --> 00:03:38,940\nAnd yeah, kind of\n\n45\n00:03:39,660 --> 00:03:41,180\nlike a weird amalgamation\n\n46\n00:03:41,840 --> 00:03:48,420\nof things. I'm definitely a second career dev, kind of came into this a little bit later in my career,\n\n47\n00:03:49,340 --> 00:03:49,840\naround\n\n48\n00:03:51,040 --> 00:03:52,480\nlike 2010-ish maybe.\n\n49\n00:03:53,080 --> 00:03:55,060\nAnd just really, I had always\n\n50\n00:03:55,900 --> 00:04:00,520\nloved the web and it wasn't really until that time where I had, I was like, you know what, I could probably\n\n51\n00:04:00,900 --> 00:04:08,800\ndo this. I could probably just do something that's fun that I like and like make stuff for a living. Like that's a thing that people do, right?\n\n52\n00:04:09,840 --> 00:04:11,500\nAnd yeah, I just I\n\n53\n00:04:12,280 --> 00:04:13,680\nreally got into it and\n\n54\n00:04:14,060 --> 00:04:15,540\nkind of, you know, through the years\n\n55\n00:04:16,060 --> 00:04:17,540\nI was fortunate enough to\n\n56\n00:04:18,060 --> 00:04:22,980\nkind of get in really early on and react and be able to build a, you know,\n\n57\n00:04:23,760 --> 00:04:30,520\na react project that was all real time at this job that I was doing at the time. And, you know, kind of in that, you know, it was like\n\n58\n00:04:30,840 --> 00:04:31,820\nlate 2013,\n\n59\n00:04:32,220 --> 00:04:33,040\nearly 2014,\n\n60\n00:04:33,620 --> 00:04:39,520\nlike, like right when it was like brand new and got to meet all of these really cool people and take part in this awesome community\n\n61\n00:04:39,840 --> 00:04:43,460\nof developers and just kind of change the way that the web\n\n62\n00:04:44,180 --> 00:04:49,420\nworks, which is really exciting. And so yeah, I had a podcast for a while called React Podcast,\n\n63\n00:04:49,840 --> 00:04:50,340\nand\n\n64\n00:04:51,300 --> 00:04:52,860\nI just have enjoyed\n\n65\n00:04:53,440 --> 00:05:04,060\nthe process of getting to meet some of the, like, you know, funnest, coolest people I've ever met. So yeah, that's that's a little bit of about me and and my intersection with the web.\n\n66\n00:05:04,540 --> 00:05:05,420\nSick, yeah.\n\n67\n00:05:05,740 --> 00:05:06,240\nSo\n\n68\n00:05:06,540 --> 00:05:07,240\nthat podcast\n\n69\n00:05:10,160 --> 00:05:16,860\nreminds me of podcasts that I've done and the primary reason that I would do the podcast is so I could talk with cool people.\n\n70\n00:05:17,360 --> 00:05:20,680\nAnd so yeah, you've been able to talk with a lot of people. Also gave you,\n\n71\n00:05:21,140 --> 00:05:21,980\nI'm guessing,\n\n72\n00:05:22,880 --> 00:05:23,960\na major reason\n\n73\n00:05:24,340 --> 00:05:33,740\nthat you were asked to participate in the React documentary was because you were like the voice of React for all that time. Yeah, you know, that was a super fun project. I,\n\n74\n00:05:35,020 --> 00:05:50,920\nyou know, Ida reached out to me and said, hey, we want to do a react documentary. And I have this kind of wild idea that, you know, you know, because you spent so much time doing the react podcast that you could be the voice of the documentary. And I was like, that would be like the biggest honor for me. And I,\n\n75\n00:05:51,740 --> 00:05:54,280\nit was so fun to be able to do,\n\n76\n00:05:54,800 --> 00:05:55,300\nto\n\n77\n00:05:56,480 --> 00:05:58,580\nI think just be a part of\n\n78\n00:05:59,440 --> 00:06:01,180\nacknowledging the incredible work\n\n79\n00:06:01,520 --> 00:06:04,100\nthat people had done and like the unlikeliness\n\n80\n00:06:05,020 --> 00:06:06,800\nof React to have become\n\n81\n00:06:07,200 --> 00:06:11,620\nwhat it is today. I just think that Ida did such an incredible job with that documentary.\n\n82\n00:06:12,380 --> 00:06:13,100\nIt's such\n\n83\n00:06:13,820 --> 00:06:19,460\na fun story, Especially, you know, what is it, I guess, 10 plus years later now,\n\n84\n00:06:22,660 --> 00:06:26,680\nto hear that maybe it was never going to be a thing feels impossible.\n\n85\n00:06:26,980 --> 00:06:38,400\nReact feels like an inevitability now. And I love stories like that. Like, you know, the story of Nike, Shoe Dog, like, is like 1 of my favorite books because it is like, okay,\n\n86\n00:06:39,320 --> 00:06:43,580\nNike is eternal, right? Like, it always has been. And\n\n87\n00:06:44,220 --> 00:06:44,720\nno,\n\n88\n00:06:45,060 --> 00:06:45,560\nThere\n\n89\n00:06:46,560 --> 00:06:51,520\nwas a very long period of Nike not being a possibility at all. And so\n\n90\n00:06:52,300 --> 00:07:09,980\nI love stories like that. Underdog stories are so much fun. And the documentary does a really good job of that. But yeah, I'd say that that's how we met. I think that we probably have like 3 episodes maybe where we just talk about React stuff. Yeah, oh well, and then we've got a whole series on Epic React,\n\n91\n00:07:10,840 --> 00:07:16,100\npodcast episodes too, which is pretty sweet. And then you also appeared on my own podcast.\n\n92\n00:07:16,880 --> 00:07:25,340\nWe did 2 episodes back to back, I think. I feel like we have like a, you know, between all of those, we got like a full like series. Like just, yeah.\n\n93\n00:07:27,040 --> 00:07:28,160\nWe just like talking.\n\n94\n00:07:29,960 --> 00:07:33,180\nSo, speaking of Epic React, why don't you,\n\n95\n00:07:34,700 --> 00:07:45,460\nby the time people watch this, the announcement will probably be made, but we'll pretend that that's not the case. Why don't you talk about Epic React a bit? Yeah, so something I'm really excited about is,\n\n96\n00:07:46,940 --> 00:07:50,880\nyou've done an incredible, first, I'm just gonna like gush on you for a second.\n\n97\n00:07:53,940 --> 00:07:55,440\nYou've done an incredible job\n\n98\n00:07:56,040 --> 00:07:56,540\nof\n\n99\n00:07:57,180 --> 00:07:57,680\neducating\n\n100\n00:07:58,180 --> 00:08:00,800\nweb developers. And it's been so fun to see\n\n101\n00:08:01,160 --> 00:08:01,660\nyou\n\n102\n00:08:02,360 --> 00:08:04,840\ndeveloping your skills of just\n\n103\n00:08:05,440 --> 00:08:11,340\nimproving people's life through making the web a better place. Aw, thanks. It's been really awesome.\n\n104\n00:08:13,140 --> 00:08:14,180\nYou've asked me to\n\n105\n00:08:15,960 --> 00:08:19,320\nwork on Epic React and put out an updated version.\n\n106\n00:08:20,360 --> 00:08:25,540\nAgain, a huge honor. My life is full of these incredible honors, to be asked\n\n107\n00:08:26,140 --> 00:08:33,140\nto participate and work with just really incredible people. And so, yeah, so we're working on a V2\n\n108\n00:08:33,520 --> 00:08:34,900\nof Epic React.\n\n109\n00:08:35,659 --> 00:08:36,159\nAnd\n\n110\n00:08:36,820 --> 00:08:42,679\nthat's actually 1 of the reasons we were talking so long beforehand is just kind of identifying, man, like in 3 years,\n\n111\n00:08:43,900 --> 00:08:45,040\nthe React ecosystem\n\n112\n00:08:45,400 --> 00:08:46,200\nhas changed\n\n113\n00:08:46,940 --> 00:08:47,440\nso\n\n114\n00:08:47,860 --> 00:08:48,360\nmuch,\n\n115\n00:08:51,220 --> 00:08:52,840\ndown to the level of like\n\n116\n00:08:53,560 --> 00:08:54,240\nthe contributors,\n\n117\n00:08:54,720 --> 00:08:56,460\nwhere they're contributing from,\n\n118\n00:08:57,980 --> 00:09:02,780\nthe builders that we use to, you know, bundle react, like the way things are tested,\n\n119\n00:09:03,220 --> 00:09:09,740\nyou know, kind of where the new features are being developed it's just like the ecosystem has gone through this huge shift\n\n120\n00:09:10,240 --> 00:09:11,400\njust over the last\n\n121\n00:09:11,880 --> 00:09:15,120\nyou know 3 years I mean even to the point where there's just\n\n122\n00:09:15,720 --> 00:09:17,440\nevery day there's like a new\n\n123\n00:09:18,140 --> 00:09:21,240\nbetter way finger quotes to like do components.\n\n124\n00:09:22,800 --> 00:09:23,300\nYeah,\n\n125\n00:09:24,020 --> 00:09:30,780\nit definitely is a challenge. Like I have mixed feelings about the whole thing because Epic Reacts was launched 3 years ago\n\n126\n00:09:31,240 --> 00:09:35,420\nand it's still like super relevant and super helpful for people.\n\n127\n00:09:36,140 --> 00:09:39,100\nSo like a huge testament to React itself\n\n128\n00:09:39,620 --> 00:09:41,020\nand being stable.\n\n129\n00:09:42,300 --> 00:09:43,480\nThere are some methodologies\n\n130\n00:09:43,940 --> 00:09:44,440\nthat\n\n131\n00:09:44,760 --> 00:09:45,820\nwe don't really\n\n132\n00:09:46,200 --> 00:09:48,380\ndo as much anymore because there are better,\n\n133\n00:09:48,900 --> 00:09:51,540\nfrankly, there are libraries to do those things better.\n\n134\n00:09:52,640 --> 00:09:53,440\nSo like,\n\n135\n00:09:54,280 --> 00:10:02,580\nwe teach how to do fetching and components, and then actually in the Bookshelf app, at the very end, we teach how to use React Query instead, which is,\n\n136\n00:10:02,920 --> 00:10:03,620\nyou know,\n\n137\n00:10:04,020 --> 00:10:11,340\nin at the final bookshelf app, we don't do any data fetching in components anymore. It's all happening inside React Query. But\n\n138\n00:10:12,180 --> 00:10:14,420\nstill like there are a number of things\n\n139\n00:10:16,120 --> 00:10:16,900\nthat are\n\n140\n00:10:17,300 --> 00:10:18,540\nchanges, but\n\n141\n00:10:18,900 --> 00:10:21,300\nmost of it is still super relevant.\n\n142\n00:10:21,900 --> 00:10:24,760\nBut it's also not in TypeScript. It's not\n\n143\n00:10:26,000 --> 00:10:31,780\nusing, or the suspense workshop was experimental at the time. Now suspense is a real thing.\n\n144\n00:10:32,360 --> 00:10:38,300\nAnd then all of the tools around this, like our build tools and testing tools and everything else.\n\n145\n00:10:39,800 --> 00:10:44,560\nYeah, things change over time. So I'm super excited that you're taking on the mantle because\n\n146\n00:10:45,040 --> 00:10:54,620\nI'm working on Epic Web, I can't do it all. And you're gonna do an awesome job with this. So I'm excited for what you're working on. Thank you, thank you, I appreciate that. And yeah, it's\n\n147\n00:10:56,440 --> 00:10:59,240\nbeen really eye-opening. I think 1 of the things that\n\n148\n00:11:00,100 --> 00:11:00,600\nhas\n\n149\n00:11:01,220 --> 00:11:02,800\nbeen really cool to see\n\n150\n00:11:03,180 --> 00:11:06,180\nis to go through the content and\n\n151\n00:11:06,780 --> 00:11:07,280\nrealize\n\n152\n00:11:08,400 --> 00:11:10,140\nhow well you,\n\n153\n00:11:11,260 --> 00:11:31,600\nyou do such a great job of directing people to look down a little bit. So not just learning at the level that you need to like execute something but like really understanding that level that's like just underneath you don't have to understand the whole world but like understanding just enough like below the surface that you can kind of escape if you get into like a sticky sticky situation\n\n154\n00:11:31,980 --> 00:11:35,700\nAnd I think that's been a really rewarding experience going through the content,\n\n155\n00:11:36,100 --> 00:11:43,940\neven having a lot of React experience, kind of learning some of those like, oh yeah, like I hadn't thought about, like I could escape from that challenge\n\n156\n00:11:44,680 --> 00:11:46,540\nthis way. And I think that's honestly\n\n157\n00:11:47,180 --> 00:11:49,820\n1 of the most important skills that we have,\n\n158\n00:11:50,740 --> 00:11:54,020\nor that we develop over time as developers, is like understanding,\n\n159\n00:11:55,320 --> 00:11:58,820\noh, I can think about this problem from a different way. Like\n\n160\n00:11:59,340 --> 00:12:00,040\nthe tools,\n\n161\n00:12:01,860 --> 00:12:02,360\neverything\n\n162\n00:12:02,720 --> 00:12:05,000\nthat I use is some kind of abstraction\n\n163\n00:12:05,340 --> 00:12:11,180\nand sometimes I need to bypass that just a little bit to get to the level that I\n\n164\n00:12:11,760 --> 00:12:13,180\nneed to solve this problem.\n\n165\n00:12:13,780 --> 00:12:20,340\nAnd I think that's 1 of the really cool things about Epic React and really excited to like continue to share that with people.\n\n166\n00:12:21,280 --> 00:12:22,160\nBecause I think\n\n167\n00:12:24,080 --> 00:12:25,420\nit can be really\n\n168\n00:12:26,380 --> 00:12:26,880\nhard\n\n169\n00:12:27,620 --> 00:12:28,580\nin this world\n\n170\n00:12:28,900 --> 00:12:30,040\nto find\n\n171\n00:12:30,660 --> 00:12:32,300\nmaterial that actually\n\n172\n00:12:32,980 --> 00:12:33,940\nhelps you.\n\n173\n00:12:37,200 --> 00:12:39,740\nWell said, yes, that was very thoughtfully\n\n174\n00:12:40,520 --> 00:12:41,020\nspoken,\n\n175\n00:12:41,600 --> 00:12:43,020\nbut I completely agree.\n\n176\n00:12:43,380 --> 00:12:49,840\nLet's expound on that a bit. Yeah, you know, it's tough because I think that, you know, the world is very\n\n177\n00:12:50,200 --> 00:12:50,700\ninfluencer-centric\n\n178\n00:12:51,220 --> 00:12:52,620\nright now and like SEO-centric.\n\n179\n00:12:52,960 --> 00:12:58,480\nAnd so a lot of people are trying to find ways to get you into their funnels\n\n180\n00:13:00,060 --> 00:13:00,560\nthrough\n\n181\n00:13:01,400 --> 00:13:08,920\nnot particularly helpful information, like that surface level, like just how do we catch people when they're Googling the thing and then\n\n182\n00:13:09,440 --> 00:13:13,860\nrun them into a pipeline? And I think it can be risky these days\n\n183\n00:13:14,200 --> 00:13:15,820\nto say like, hey,\n\n184\n00:13:16,560 --> 00:13:18,420\nI know that you already have a problem\n\n185\n00:13:18,940 --> 00:13:21,520\nand I'm going to make your problem a little bit worse\n\n186\n00:13:22,200 --> 00:13:22,700\nmomentarily\n\n187\n00:13:23,680 --> 00:13:28,200\nso that you fully understand it and can like fully move past it. Right? Yes.\n\n188\n00:13:29,200 --> 00:13:39,260\nAnd it's something that is it's not it's not an easy pill to swallow when you're already like on a deadline right and already feeling stressed out about stuff but\n\n189\n00:13:39,800 --> 00:13:44,280\nit's those moments where you you take that opportunity to stretch a little bit\n\n190\n00:13:45,060 --> 00:13:47,940\nand like grow your understanding that you really\n\n191\n00:13:51,160 --> 00:13:51,660\ndevelop.\n\n192\n00:13:52,120 --> 00:13:52,920\nRight? Like,\n\n193\n00:13:53,800 --> 00:13:59,740\nI'm overloading that word right now, right? But like develop as a developer, develop as a thinker, as a person.\n\n194\n00:14:00,060 --> 00:14:00,560\nAnd\n\n195\n00:14:01,560 --> 00:14:05,340\nI really do hope that we can continue to do that\n\n196\n00:14:05,680 --> 00:14:09,240\nin Epic React to help people be like, hey,\n\n197\n00:14:09,800 --> 00:14:13,520\nyou know, you've probably seen a lot of articles saying like, do this, don't do that.\n\n198\n00:14:14,380 --> 00:14:16,780\nAnd like, this is just how it's done.\n\n199\n00:14:17,320 --> 00:14:17,820\nAnd\n\n200\n00:14:18,260 --> 00:14:25,020\nlike, you're gonna see it the bad way and you're gonna see it the good way. And like, you just need to know how to get out of the problem\n\n201\n00:14:25,520 --> 00:14:26,780\nwhen you have it. So\n\n202\n00:14:27,560 --> 00:14:29,980\nI really think you've done an incredible job\n\n203\n00:14:30,940 --> 00:14:35,140\nof developing that content to help people understand React better.\n\n204\n00:14:35,820 --> 00:14:36,920\nThank you. Yeah,\n\n205\n00:14:37,360 --> 00:14:41,080\nI actually, my priority when I'm teaching is retention,\n\n206\n00:14:41,820 --> 00:14:42,320\nand\n\n207\n00:14:42,780 --> 00:14:43,760\nI feel like\n\n208\n00:14:44,280 --> 00:14:48,020\nI want people to retain information that will be useful to them,\n\n209\n00:14:48,700 --> 00:14:52,620\nmore than just like, do it this way because this is the way it's done,\n\n210\n00:14:52,960 --> 00:14:55,020\nbut do it this way because you understand\n\n211\n00:14:55,680 --> 00:14:56,980\nwhy we do it.\n\n212\n00:14:57,660 --> 00:14:58,160\nThere's\n\n213\n00:14:58,580 --> 00:15:00,300\na level of deep understanding.\n\n214\n00:15:00,720 --> 00:15:03,420\nSo for Epic Web, I'm working on\n\n215\n00:15:04,060 --> 00:15:08,400\nthe WebAuth workshop right now, I'm recording all those videos at the time. And\n\n216\n00:15:08,800 --> 00:15:10,300\nin fact, some of them are exporting\n\n217\n00:15:11,480 --> 00:15:12,940\non my machine right now.\n\n218\n00:15:13,280 --> 00:15:16,080\nBut... Testament to those M-series\n\n219\n00:15:16,420 --> 00:15:19,860\nApple chips. That's right, Yeah, we can run all of this at the same time.\n\n220\n00:15:20,580 --> 00:15:22,080\nYeah, so the\n\n221\n00:15:23,040 --> 00:15:24,780\nthing about the WebAuth 1,\n\n222\n00:15:25,200 --> 00:15:33,100\n1 thing I'm a little worried about is that people will look at the size of the WebAuth workshop and be like, that seems like too much.\n\n223\n00:15:33,520 --> 00:15:48,620\nWhy don't we just use a service, right? Like that's why there are services for this stuff. But the thing is that even if you, like you can use a service, that's fine. But even if you use a service, if you don't understand this stuff, you are not going to be as effective at using that service.\n\n224\n00:15:49,200 --> 00:15:54,820\nAnd so like, it is so critical. In my mind, it's so critical for people to really understand\n\n225\n00:15:57,060 --> 00:15:57,760\nthis information\n\n226\n00:15:58,260 --> 00:16:00,460\nto be able to use it effectively.\n\n227\n00:16:01,120 --> 00:16:07,400\nAnd so yeah, I go to great pains to to make that happen. So I'm glad you appreciate that\n\n228\n00:16:08,000 --> 00:16:12,460\nI do and you know, I think you know when you've been through that enough times\n\n229\n00:16:13,320 --> 00:16:14,560\nYou realize that\n\n230\n00:16:14,960 --> 00:16:18,960\nit is painful like it always kind of it always feels like a slog\n\n231\n00:16:19,440 --> 00:16:24,060\nbut then it's not as bad as you thought it would be on the other side.\n\n232\n00:16:25,680 --> 00:16:31,260\nIt's like, oh, okay, yeah, that was rough, but now I think I kind of understand it enough to\n\n233\n00:16:31,640 --> 00:16:39,780\nknow what's happening, which is better than, I don't know, I had NPM installed and I imported the library and called the function and it's not working.\n\n234\n00:16:40,240 --> 00:16:40,740\nYes,\n\n235\n00:16:41,460 --> 00:16:42,140\nfor real.\n\n236\n00:16:43,080 --> 00:16:46,820\nLike that feeling, we've all felt that, where it's just like,\n\n237\n00:16:47,540 --> 00:16:51,520\nit's not working and I don't know why. Or it's working and I don't know why.\n\n238\n00:16:51,980 --> 00:16:53,100\nWorse, yeah.\n\n239\n00:16:55,080 --> 00:16:56,120\nAnd so yeah,\n\n240\n00:16:57,840 --> 00:17:01,980\nlearning a level down, like you said, is so important.\n\n241\n00:17:02,540 --> 00:17:06,060\nWe don't have to go down to zeros and ones. I've done it, it's the worst.\n\n242\n00:17:07,119 --> 00:17:08,200\nIt's not fun.\n\n243\n00:17:09,339 --> 00:17:12,880\nWe don't have to go that far to really grasp this stuff.\n\n244\n00:17:14,160 --> 00:17:17,660\nBut going just a little bit below your level of abstraction\n\n245\n00:17:18,440 --> 00:17:22,920\ncan help you use the abstraction much better for sure. Yeah, yeah. You know,\n\n246\n00:17:24,520 --> 00:17:31,580\nit's interesting because I think, you know, we've seen enough patterns kind of come and go at this point, you know, specifically in React,\n\n247\n00:17:34,280 --> 00:17:35,460\nwhere you\n\n248\n00:17:35,860 --> 00:17:36,600\nrealize that\n\n249\n00:17:37,800 --> 00:17:45,980\nyou can kind of see those underlying patterns, right? And be like, oh, okay, that's like, you know, that's delegation or that's, you know, higher order, whatever.\n\n250\n00:17:46,860 --> 00:17:58,520\nAnd like, you can kind of see them and be like, oh, okay. Yeah. I, like, I understand them on a like programming level and then it feels less magical versus like, you know, it's like, oh, hey, this is the pattern.\n\n251\n00:17:58,860 --> 00:18:02,720\nAnd like, this is what we use. And I, I am, I, I\n\n252\n00:18:03,100 --> 00:18:08,800\nam defined by the fact that I program this way as opposed to like, okay, like, you know, you prefer\n\n253\n00:18:09,160 --> 00:18:10,580\nlazy functions versus\n\n254\n00:18:11,040 --> 00:18:13,380\nearly functions. Like, okay, cool, whatever.\n\n255\n00:18:14,160 --> 00:18:16,160\nYeah that's true. I found that\n\n256\n00:18:16,980 --> 00:18:20,960\nthe more time I spend developing software, the less I care about stuff,\n\n257\n00:18:21,500 --> 00:18:23,620\nabout some stuff, like most things.\n\n258\n00:18:25,080 --> 00:18:36,100\nLike it doesn't matter to me as much. But you know, there are other things that do matter to me a little bit more. Or even the fact that it doesn't matter, matters more to me, you know? Like\n\n259\n00:18:36,900 --> 00:18:42,220\nI'm less inclined to get into arguments about stuff that doesn't matter and that matters to me.\n\n260\n00:18:42,660 --> 00:18:43,160\nYes,\n\n261\n00:18:43,500 --> 00:18:49,080\nyeah, that's, it's huge, right? Like the kind of getting out of that like\n\n262\n00:18:49,500 --> 00:18:50,000\ntribalism\n\n263\n00:18:50,340 --> 00:18:56,060\nis like super important. I know that this is I mean this is a silly thing that I will confess but like I have\n\n264\n00:18:56,760 --> 00:18:58,100\ndifferent prettier preferences\n\n265\n00:18:58,620 --> 00:19:03,660\nfor most of my projects that I use and part of it is just as a reminder of like\n\n266\n00:19:04,240 --> 00:19:05,940\nthe specifics don't matter.\n\n267\n00:19:06,760 --> 00:19:08,720\nWhat matters is that we have\n\n268\n00:19:10,840 --> 00:19:14,360\nan area where we can communicate with other people and\n\n269\n00:19:15,040 --> 00:19:26,460\nbeing able to speak multiple dialects and not worry about it. Having a preference about tabs versus spaces is fine, but coming in and your first PR being changing 1 to another,\n\n270\n00:19:27,540 --> 00:19:28,840\nthat's not what we're about.\n\n271\n00:19:29,200 --> 00:19:29,700\nAnd\n\n272\n00:19:30,060 --> 00:19:31,280\nremembering that\n\n273\n00:19:32,060 --> 00:19:37,700\nit's fine to have your preferences, but then at the end of the day, what we're really after is being able to communicate\n\n274\n00:19:38,000 --> 00:19:41,660\nwith each other and that these are tools that service communication.\n\n275\n00:19:43,140 --> 00:19:49,180\nLike that's where the magic happens, right? Like That's where you get to meet really cool people and work on fun projects. And\n\n276\n00:19:49,540 --> 00:19:50,500\nthat's the beauty.\n\n277\n00:19:51,680 --> 00:19:52,460\nYeah, yeah, 100%.\n\n278\n00:19:53,560 --> 00:19:56,020\nSo I want to talk with you a little bit about\n\n279\n00:19:56,840 --> 00:19:58,160\nthe future of React\n\n280\n00:19:58,940 --> 00:20:01,040\nor the big thing that's happening right now.\n\n281\n00:20:02,060 --> 00:20:09,260\nWith Epic React, when I recorded it 3 years ago, it was all about suspense and it was released as an experimental feature.\n\n282\n00:20:10,080 --> 00:20:14,180\nThankfully, most of that is still relevant today. Like it's, it's\n\n283\n00:20:15,020 --> 00:20:18,160\nwhen react 18 came out, and those features were official.\n\n284\n00:20:18,740 --> 00:20:20,200\nMost of them were unchanged.\n\n285\n00:20:20,940 --> 00:20:22,620\nNow we're kind of in another\n\n286\n00:20:23,220 --> 00:20:26,180\ninteresting spot with React with server components.\n\n287\n00:20:27,040 --> 00:20:31,600\nAnd so, yeah, I wanna hear your take on server components and the future of React.\n\n288\n00:20:32,360 --> 00:20:33,180\nYeah, so\n\n289\n00:20:33,580 --> 00:20:35,820\nit's really interesting because I think that, you know,\n\n290\n00:20:36,580 --> 00:20:40,220\n3 years ago, we were all talking about suspense, right? And we didn't really know\n\n291\n00:20:40,580 --> 00:20:46,980\nexactly what it was for. Like we knew it was for, you know, data fetching. We already could use it to lazily load components,\n\n292\n00:20:47,480 --> 00:20:49,780\nwhich is an awesome thing to do, awesome practice.\n\n293\n00:20:50,200 --> 00:20:53,100\nBut then it was kind of like, okay, cool, we have\n\n294\n00:20:54,180 --> 00:20:56,780\nthis concept of suspense where we can lazily\n\n295\n00:20:57,980 --> 00:20:58,760\nget stuff.\n\n296\n00:21:00,060 --> 00:21:04,180\nAnd it wasn't entirely clear how that was going to be utilized.\n\n297\n00:21:05,660 --> 00:21:07,760\nAnd so we had these kind of like\n\n298\n00:21:08,600 --> 00:21:09,580\nguiding principles\n\n299\n00:21:10,040 --> 00:21:25,540\non how we could use suspense to like fetch data and fetch components at the same time or kind of, you know, how we could like handle rendering asynchronously from like fetching data and kind of like merge it all together. But it was all a very\n\n300\n00:21:27,180 --> 00:21:27,680\nmanual\n\n301\n00:21:28,200 --> 00:21:28,700\nprocess.\n\n302\n00:21:29,280 --> 00:21:30,960\nAnd so I think that\n\n303\n00:21:32,420 --> 00:21:32,920\nsomething\n\n304\n00:21:33,260 --> 00:21:37,980\nthat we're seeing right now is this kind of like transition to this RSC protocol,\n\n305\n00:21:38,560 --> 00:21:39,060\nwhich\n\n306\n00:21:40,680 --> 00:21:47,460\nkind of allows, I mean, it's like, it's such a weird like concept, but basically Like you can render stuff on a server\n\n307\n00:21:47,900 --> 00:21:50,940\nand then send the same type of like DOM manipulation\n\n308\n00:21:51,300 --> 00:21:51,800\ninstructions\n\n309\n00:21:52,160 --> 00:21:53,180\nover the wire\n\n310\n00:21:54,160 --> 00:22:00,840\nto the browser, which is different than just sending more HTML. You know, like there's a lot of hype around HTMX right now.\n\n311\n00:22:01,520 --> 00:22:02,680\nYeah. In this space,\n\n312\n00:22:03,100 --> 00:22:05,240\nwhich is kind of this idea of having these,\n\n313\n00:22:05,740 --> 00:22:11,260\nyou know, it's as old as, you know, Rails and, you know, all of those, you know, or maybe even ASP.net,\n\n314\n00:22:11,840 --> 00:22:20,560\nyou know, whatever their thing was. But the idea of like marking certain parts of your DOM, or you could make a request and then just get like fresh HTML for those.\n\n315\n00:22:22,660 --> 00:22:23,860\nWe're actually doing,\n\n316\n00:22:24,280 --> 00:22:27,480\nwe're actually getting those like instructions back\n\n317\n00:22:28,420 --> 00:22:29,620\nand saying like, hey,\n\n318\n00:22:30,520 --> 00:22:44,660\nchange this from this text to, you know, from this text to this text, and change this date, you know, from, you know, this date to this date, and, you know, change the number of clicks, you know, up by 1, but like actually getting that, you know, from the server and like through these like server actions.\n\n319\n00:22:46,020 --> 00:22:47,480\nSo yeah, it's a really interesting,\n\n320\n00:22:47,940 --> 00:22:50,620\nit's a really interesting idea, and it's kind of like the fruition\n\n321\n00:22:51,040 --> 00:22:51,540\nof\n\n322\n00:22:52,800 --> 00:22:55,220\nwhat suspense was like intended to be, right?\n\n323\n00:22:57,700 --> 00:23:05,140\nAnd it's very much in this like experimental phase. I think we're just now starting to see a lot of frameworks committing to it.\n\n324\n00:23:05,740 --> 00:23:06,660\nNext has,\n\n325\n00:23:07,540 --> 00:23:13,340\nyou know, led the charge in effectively like hiring a lot of the people who are like working on this\n\n326\n00:23:14,160 --> 00:23:14,660\nto\n\n327\n00:23:15,060 --> 00:23:20,460\nbuild it into next. But, you know, I know a lot of frameworks are working on RSC integrations,\n\n328\n00:23:21,000 --> 00:23:23,980\nyou know, so that includes, you know, Remix and Redwood.\n\n329\n00:23:24,400 --> 00:23:26,340\nAnd I think it'll be really interesting\n\n330\n00:23:27,540 --> 00:23:33,020\nover the next like handful of years to see like what people's different takes are on it,\n\n331\n00:23:33,540 --> 00:23:36,980\nto see like, you know, what's gonna stick, what doesn't, and\n\n332\n00:23:38,180 --> 00:23:39,980\nhave some, maybe some more,\n\n333\n00:23:42,340 --> 00:23:46,940\nit's exciting to see like what ergonomics people are going to bring to this new capability,\n\n334\n00:23:47,240 --> 00:23:47,940\nI think,\n\n335\n00:23:48,240 --> 00:24:01,900\nfor me. Because I think we're at an era in React of framework development. I think up to this point, it's been a lot of roll your own, or maybe you have a Laravel app and you've just kind of sprinkled in a little bit of React on the top.\n\n336\n00:24:03,180 --> 00:24:07,160\nAnd so it'll be really interesting, I think, over the next year to see what, like,\n\n337\n00:24:08,440 --> 00:24:08,940\nfirst-class,\n\n338\n00:24:09,340 --> 00:24:11,360\nlike, you know, React architecture,\n\n339\n00:24:11,660 --> 00:24:12,160\nfront-to-back,\n\n340\n00:24:12,660 --> 00:24:13,160\nfull-stack,\n\n341\n00:24:13,700 --> 00:24:15,740\nyou know, client and server integration\n\n342\n00:24:16,500 --> 00:24:21,300\nlooks like and, like, what people's different takes are on that. Because I think it's going to be\n\n343\n00:24:21,940 --> 00:24:24,940\nsuper cool to work at that level. And\n\n344\n00:24:25,260 --> 00:24:30,940\nI know working on Epic Web Dev, just getting to that point where it's less about technology and more about building stuff.\n\n345\n00:24:31,740 --> 00:24:32,520\nYeah, yeah.\n\n346\n00:24:33,060 --> 00:24:36,960\nJust listen to my opinions. I promise it'll probably be fine.\n\n347\n00:24:39,660 --> 00:24:40,820\nTotally, totally.\n\n348\n00:24:41,400 --> 00:24:45,260\nYeah, and that like that's the whole premise of the Epic Stack is just like\n\n349\n00:24:46,340 --> 00:24:53,460\nyou can choose so many different options and most of them will be fine, whatever you choose It doesn't really matter as much as you think it does\n\n350\n00:24:54,020 --> 00:24:57,540\nYeah, and so it given that is the reality\n\n351\n00:24:58,080 --> 00:25:00,600\nthen what do you have against just using\n\n352\n00:25:00,920 --> 00:25:02,000\nsomeone else's opinions?\n\n353\n00:25:03,100 --> 00:25:06,420\nAnd moving forward with your life and just building your thing.\n\n354\n00:25:06,960 --> 00:25:10,380\nYeah, you know, you had this, you had a tweet I think recently,\n\n355\n00:25:11,820 --> 00:25:13,220\nmight have to find it,\n\n356\n00:25:14,540 --> 00:25:15,520\nbut it was about,\n\n357\n00:25:16,260 --> 00:25:20,740\nyou put it so concisely and I really appreciated it, but you were talking about off\n\n358\n00:25:21,580 --> 00:25:30,520\nspecifically and how like rails has built in off solutions and Laura Vell has built in off solutions and like react. It's kind of like\n\n359\n00:25:30,860 --> 00:25:32,520\nwe delegated to services,\n\n360\n00:25:32,980 --> 00:25:34,100\nI think because\n\n361\n00:25:34,860 --> 00:25:42,260\nit's all, you know, we've been building client-side apps and like it kind of, I don't know, there's maybe like a different line or whatever, but like we just\n\n362\n00:25:42,780 --> 00:25:43,280\nhaven't\n\n363\n00:25:44,640 --> 00:25:48,900\nbeen building frameworks and I don't know, I need to catch myself here, but like\n\n364\n00:25:49,220 --> 00:25:54,820\nit hasn't been as much of a priority as it has in some of those like full server side libraries.\n\n365\n00:25:55,480 --> 00:25:55,980\nAnd\n\n366\n00:25:56,800 --> 00:26:01,220\nit feels like an omission now that we're kind of building full stack re-app\n\n367\n00:26:01,560 --> 00:26:03,180\napplications to not have\n\n368\n00:26:03,940 --> 00:26:06,140\nlike auth come out of the box when you\n\n369\n00:26:06,500 --> 00:26:14,540\ninstall the thing. Yes, you know that so I found that tweet that you were talking about. It was yeah just like\n\n370\n00:26:15,540 --> 00:26:17,140\nsomebody had said to\n\n371\n00:26:17,980 --> 00:26:25,120\nI have this take where I say most web apps should not use a third party auth service. They should just ship auth themselves.\n\n372\n00:26:26,980 --> 00:26:31,300\nAnd somebody had said that they'd never seen anybody building real software\n\n373\n00:26:33,080 --> 00:26:36,140\nwith that take. And I was just really taken aback by that.\n\n374\n00:26:36,660 --> 00:26:41,540\nThen they prefaced it by saying, no offense, Kent, but it's like, how is that not offensive?\n\n375\n00:26:42,280 --> 00:26:45,820\nYou're saying that I don't build real software. So, Okay, whatever.\n\n376\n00:26:46,560 --> 00:26:47,180\nBut anyway,\n\n377\n00:26:48,400 --> 00:26:52,060\nI don't hold a grudge. He actually apologized later, so it is fine.\n\n378\n00:26:52,480 --> 00:26:55,780\nSo anyway, I was just saying that most\n\n379\n00:26:58,060 --> 00:27:03,540\nremix apps are rolling their own auth. Rails and Laravel and Django all ship their own auth.\n\n380\n00:27:04,240 --> 00:27:08,160\nAnd so I think a big reason why the React community hasn't\n\n381\n00:27:09,080 --> 00:27:16,720\njumped on board with this idea as much and that the React community uses third party auth is because they\n\n382\n00:27:17,900 --> 00:27:19,940\nnever really had control over their server.\n\n383\n00:27:20,380 --> 00:27:23,240\nThey're all just client-side apps. And so,\n\n384\n00:27:24,520 --> 00:27:26,520\nI don't wanna ship a server,\n\n385\n00:27:27,100 --> 00:27:28,280\nbut I need to have\n\n386\n00:27:28,920 --> 00:27:36,360\nsecure auth, so I'm gonna use a service, and they're gonna run the server, and they're gonna do the auth, and then I can communicate\n\n387\n00:27:37,360 --> 00:27:38,440\nproperly with\n\n388\n00:27:38,940 --> 00:27:44,180\nanother service which is where my data is stored or whatever, right? So we just got really used to this\n\n389\n00:27:44,640 --> 00:27:53,300\nworld of I'm only in the client, but that's not secure. We have to have some auth, but I don't wanna roll a server, and so I'm not gonna roll my auth, right? Yeah.\n\n390\n00:27:54,060 --> 00:27:55,900\nAnd so we're kinda coming back\n\n391\n00:27:56,740 --> 00:28:03,920\nto what everybody else is doing, which is like I'm rolling a server, but people are just kinda used to using services for auth,\n\n392\n00:28:04,380 --> 00:28:06,700\nand kinda feel like auth is scary.\n\n393\n00:28:07,740 --> 00:28:09,020\nAnd I remember before\n\n394\n00:28:09,780 --> 00:28:15,180\nReact was a thing for me, I built an express server, I'd used Passport JS and I did\n\n395\n00:28:15,840 --> 00:28:20,100\nAuth myself, it was fine. And then I went on this detour around with client-side rendered apps\n\n396\n00:28:21,260 --> 00:28:22,100\nand with React\n\n397\n00:28:22,700 --> 00:28:27,600\nfor quite a while, and I was using Firebase Auth and I was using other services.\n\n398\n00:28:28,100 --> 00:28:30,980\nAnd then when I come back to the server side with Remix,\n\n399\n00:28:31,660 --> 00:28:34,420\nI remember talking with Ryan Florence and he was saying,\n\n400\n00:28:35,820 --> 00:28:37,440\nyou should just do Auth yourself.\n\n401\n00:28:38,000 --> 00:28:41,740\nHere's the steps, the different things you need to do to make that happen.\n\n402\n00:28:42,080 --> 00:28:43,880\nAnd I did it in like 2 hours.\n\n403\n00:28:45,040 --> 00:28:45,860\nI was like, wow.\n\n404\n00:28:46,280 --> 00:28:50,280\nI mean, of course it didn't have 2 factor auth. It didn't have like all those different things\n\n405\n00:28:50,740 --> 00:28:52,860\nin 2 hours. But the thing is now,\n\n406\n00:28:53,240 --> 00:28:59,740\nlike, I'm sorry I'm talking a lot. I know you have something you want to say, but I want to add just something interesting. Sometimes people\n\n407\n00:29:00,180 --> 00:29:03,480\nwill tell me that, hey, Kent, you don't have a good\n\n408\n00:29:03,900 --> 00:29:04,400\nmeasure\n\n409\n00:29:04,900 --> 00:29:15,180\nof your value of time. Like, you don't value your time very well. If you're working on all of this, spending all this time implementing auth, well, you could just use a third-party service and move on with your life. But for me,\n\n410\n00:29:15,560 --> 00:29:16,960\nI'm building like\n\n411\n00:29:17,780 --> 00:29:19,900\ninstructional material and I'm building\n\n412\n00:29:20,800 --> 00:29:24,880\na framework that people can use from the get-go, I'm building libraries.\n\n413\n00:29:25,960 --> 00:29:29,540\nAnd so I'm not just investing, like saving time for myself,\n\n414\n00:29:30,040 --> 00:29:44,840\nI'm looking at all the people who are watching this right now and all the people going through Epic Web and I'm thinking how much time I'm saving them. Because they can just boot up a new Epic stack and they have two-factor auth and third-party like O-auth and all of the other things just from day 1, right? From the get-go. Yeah. And so,\n\n415\n00:29:45,180 --> 00:29:45,680\nAnyway,\n\n416\n00:29:46,560 --> 00:29:48,580\nI definitely have feelings about\n\n417\n00:29:49,020 --> 00:29:55,420\nland rolling off and I think that most people should be doing that. Yeah, you know, it's interesting because it's like the,\n\n418\n00:29:55,940 --> 00:29:59,940\nit is very much a side effect of Jamstack.\n\n419\n00:30:00,480 --> 00:30:03,480\nI mean, I, I guess, right? Like it,\n\n420\n00:30:03,980 --> 00:30:05,140\nwe had this JAMstack\n\n421\n00:30:05,540 --> 00:30:15,560\nnotion. I think it is less in favor than it was. I think maybe to the point that JAMstack is probably a retired Jersey. I think that we got what we needed from\n\n422\n00:30:16,560 --> 00:30:19,900\nthe concept and we have moved on.\n\n423\n00:30:22,020 --> 00:30:29,980\nBut yeah, I think that there is like so, there are so many services that allow you to stay strictly in the client side,\n\n424\n00:30:30,380 --> 00:30:33,480\nBut it does feel like we are seeing a renaissance\n\n425\n00:30:33,820 --> 00:30:35,100\nof people controlling\n\n426\n00:30:36,280 --> 00:30:37,040\ntheir server.\n\n427\n00:30:37,960 --> 00:30:38,460\nAnd\n\n428\n00:30:39,480 --> 00:30:46,260\nit's going to be, I think it's going to be really interesting to see how all of that stuff works. I mean, especially, I think that's the thing that I'm most interested in\n\n429\n00:30:46,960 --> 00:30:48,220\nRSCs for\n\n430\n00:30:48,560 --> 00:30:49,460\nis just,\n\n431\n00:30:50,420 --> 00:30:54,320\nyou know, React used to be a really great way to build half of an application.\n\n432\n00:30:57,060 --> 00:30:58,280\nAnd it feels like\n\n433\n00:30:58,620 --> 00:30:59,120\nnow\n\n434\n00:30:59,600 --> 00:31:08,980\nyou really can't, You know, it's so funny too, like the idea that, you know, real people don't hand roll their own auth. I have only worked at, or like real software,\n\n435\n00:31:09,400 --> 00:31:11,880\nI have only worked at companies that like\n\n436\n00:31:12,280 --> 00:31:15,740\nhad their own auths, like these predated these services.\n\n437\n00:31:16,360 --> 00:31:25,460\nSo It's kind of like hilarious, the idea that real software, like so the real software that we built in the last, you know, like 5 years. Like,\n\n438\n00:31:27,500 --> 00:31:32,300\nyeah, but yeah, like and coming from a, you know, more Rails background, It's like,\n\n439\n00:31:33,080 --> 00:31:34,580\nyeah, it was like, you know,\n\n440\n00:31:35,460 --> 00:31:41,980\nI built my Rails app, I installed, I can't remember, devise maybe it was, was the the library and,\n\n441\n00:31:42,280 --> 00:31:45,360\nyou know, I mean, sure I was using a library, but\n\n442\n00:31:45,720 --> 00:31:47,300\nI wasn't using a service.\n\n443\n00:31:47,680 --> 00:31:50,780\nUh-huh, Yeah, and that's exactly the way I think it should be.\n\n444\n00:31:51,100 --> 00:31:58,680\nThat you should be using libraries. And eventually a lot of the stuff that is built into the Epic stack will be moved over into libraries. That's already started happening.\n\n445\n00:31:59,060 --> 00:31:59,560\nYeah.\n\n446\n00:32:01,240 --> 00:32:12,260\nSometimes when I say, I think you should roll your own auth, people are like, oh, okay, so you're gonna write your own crypto. Like, no, no, that's not what I mean by that. I just mean I don't want to pay somebody per user.\n\n447\n00:32:13,380 --> 00:32:14,180\nYeah, yes.\n\n448\n00:32:14,680 --> 00:32:23,200\nYeah. And that's like I think that's I mean, now we're talking about like business, but I think that that is like such an interesting thing. I think that those strategies, like,\n\n449\n00:32:23,940 --> 00:32:26,400\nI don't think there's anything wrong with using a service,\n\n450\n00:32:26,980 --> 00:32:27,940\nbut like\n\n451\n00:32:28,320 --> 00:32:28,820\nknowing\n\n452\n00:32:29,180 --> 00:32:32,760\nwhat you're in for is really important, right? Like, you know, because\n\n453\n00:32:33,100 --> 00:32:37,840\nif you know that you can spin it up and like, you know, buy X number of users,\n\n454\n00:32:38,500 --> 00:32:45,060\nhave enough money to make it worth it still when you start getting paid, like, that's great. Like, you know, make your decisions.\n\n455\n00:32:46,380 --> 00:32:46,880\nBut,\n\n456\n00:32:48,220 --> 00:32:53,220\nyou know, if you don't have that plan, like maybe control your own destiny a little bit and\n\n457\n00:32:53,940 --> 00:32:54,440\nnot,\n\n458\n00:32:54,920 --> 00:32:59,080\nyou know, I don't know. There's so many reasons to make that decision, I guess.\n\n459\n00:32:59,380 --> 00:33:00,740\nYeah, yeah. So\n\n460\n00:33:01,580 --> 00:33:06,660\nthere was a couple of years ago, you were talking about working in rails and everything.\n\n461\n00:33:06,980 --> 00:33:13,220\nAnd I remember a couple of years ago, I was listening to you were a guest on a podcast. I can't remember which 1,\n\n462\n00:33:13,820 --> 00:33:17,780\nbut I was mowing the lawn and you said something about like,\n\n463\n00:33:18,580 --> 00:33:20,780\nmore people should be full stack or\n\n464\n00:33:22,360 --> 00:33:25,820\nyou should have more control over the whole stack, something like that.\n\n465\n00:33:26,120 --> 00:33:30,360\nAnd I remember at the time I was way into JAMstack stuff. And I was like,\n\n466\n00:33:31,020 --> 00:33:33,220\nMichael, I love you, but I super disagree.\n\n467\n00:33:33,940 --> 00:33:38,960\nI just feel like that full stack developer does not exist. It's too hard to\n\n468\n00:33:39,320 --> 00:33:40,400\ndo all the things,\n\n469\n00:33:41,060 --> 00:33:41,560\nand\n\n470\n00:33:41,920 --> 00:33:50,300\nyou should just specialize and focus. And that was my epic React days when I was just like, yeah, we're gonna go hard on React and that's what we're doing.\n\n471\n00:33:51,180 --> 00:33:54,600\nAnd then Remix shows up and changes everything for me.\n\n472\n00:33:55,520 --> 00:33:57,540\nWhere all of a sudden I can specialize\n\n473\n00:33:58,080 --> 00:33:59,160\nin the full stack.\n\n474\n00:34:00,060 --> 00:34:11,440\nWhich just blows my mind. So you weren't there when I said that mowing my lawn, but I apologize. You were right. We can do the full stack. It's amazing.\n\n475\n00:34:12,540 --> 00:34:15,139\nIsn't it so beautiful that we can disagree and\n\n476\n00:34:15,460 --> 00:34:17,460\nstill like each other? It's amazing.\n\n477\n00:34:18,300 --> 00:34:22,620\nThere's so much evidence to the contrary these days, but you know, we figured out how to make it work, Kent.\n\n478\n00:34:25,239 --> 00:34:26,980\nYeah, you know, it's, it's,\n\n479\n00:34:28,860 --> 00:34:31,159\nI think something that I hope\n\n480\n00:34:32,219 --> 00:34:35,040\nfor everyone who is getting into like web development.\n\n481\n00:34:36,820 --> 00:34:51,520\nIs that they get to build the things that they wanna build. I think that's why like, that's what got me excited about the web is like, the first thing that I built on the web was a single PHP page that connected to it was a single file, right?\n\n482\n00:34:52,480 --> 00:35:00,040\nI bought a cheap server. I put a single PHP file on the Internet that had a form, and when you hit submit, it would take\n\n483\n00:35:00,620 --> 00:35:14,000\na was it a New Year's resolution? It was like for me and my friends. Like I just wanted to collect New Year's resolutions. I didn't even have a way of viewing them except for like looking into the MySQL database via cPanel or something like that.\n\n484\n00:35:17,220 --> 00:35:27,740\nAnd I still like think about that as like the pinnacle of web development, not like that specific thing, but like the idea that I could\n\n485\n00:35:28,780 --> 00:35:29,580\nmake something\n\n486\n00:35:30,860 --> 00:35:32,860\nthat anyone could use from anywhere\n\n487\n00:35:34,280 --> 00:35:35,140\nthat made\n\n488\n00:35:35,680 --> 00:35:36,180\nus\n\n489\n00:35:36,500 --> 00:35:37,000\nhappier\n\n490\n00:35:37,300 --> 00:35:42,340\nand like our lives a little bit better. And I think that, you know, we've gotten so\n\n491\n00:35:42,880 --> 00:35:44,480\nfar into the\n\n492\n00:35:45,860 --> 00:35:50,700\ncommercial side of web dev, but I really do think that there's this\n\n493\n00:35:51,020 --> 00:35:55,320\nrenaissance of us just building the stuff that we like again. And\n\n494\n00:35:56,300 --> 00:35:57,440\nI think that's what\n\n495\n00:35:59,660 --> 00:36:02,060\nI hope. I just hope that people have\n\n496\n00:36:02,580 --> 00:36:03,700\nlives that are\n\n497\n00:36:04,120 --> 00:36:10,620\nfun and meaningful and memorable for themselves. And I think that building software for your needs\n\n498\n00:36:11,020 --> 00:36:12,140\nis a superpower.\n\n499\n00:36:12,660 --> 00:36:16,060\nAnd we forget sometimes with all of the, you know,\n\n500\n00:36:16,860 --> 00:36:19,300\ntrying to make, you know, money on everything.\n\n501\n00:36:20,420 --> 00:36:23,300\nWe possess this superpower that allows us to\n\n502\n00:36:23,940 --> 00:36:27,680\nlook at our lives and be like, what's something that I could solve for myself today?\n\n503\n00:36:28,520 --> 00:36:29,020\nAnd\n\n504\n00:36:30,020 --> 00:36:32,540\nthat's like, That's a beautiful thing. And I think that,\n\n505\n00:36:32,980 --> 00:36:33,480\nunfortunately,\n\n506\n00:36:34,820 --> 00:36:39,060\nfor people who just want to learn 1 part of the stack or become a specialist professionally,\n\n507\n00:36:41,480 --> 00:36:51,600\nyou do have to either depend on services or know a little bit more, like enough full stack to be able to at least, you know, protect, you know, protect a single route from intruders.\n\n508\n00:36:52,720 --> 00:36:53,220\nAnd,\n\n509\n00:36:53,720 --> 00:36:59,540\nyou know, like, I guess, like, be able to use an authentication library in a database. But\n\n510\n00:36:59,960 --> 00:37:01,400\nI don't know, I feel like,\n\n511\n00:37:01,860 --> 00:37:08,140\nI feel like there's some some really fun things on the horizon as people get better at coding and we kind of\n\n512\n00:37:08,440 --> 00:37:10,020\nget to maybe our like post-consumer\n\n513\n00:37:10,440 --> 00:37:15,680\nera of the web where not everything is about monetization and we can just be like, hey, I made this thing because\n\n514\n00:37:16,720 --> 00:37:26,180\nit makes me happy. Yes, yes. I think more people should do that, for sure. And I love Remix because, for me, it made that more possible.\n\n515\n00:37:26,720 --> 00:37:28,440\nWhere before it was\n\n516\n00:37:28,780 --> 00:37:32,700\nlike, okay, I'm super solid on the front end piece. It takes like\n\n517\n00:37:33,100 --> 00:37:36,760\na jumble of nonsense to integrate with some third party\n\n518\n00:37:37,080 --> 00:37:45,140\ndatabase provider and everything like that, but I can make that work. Whereas now I just feel like I have so much more control over my own destiny.\n\n519\n00:37:46,340 --> 00:37:48,140\nAnd I don't need to ask permission\n\n520\n00:37:49,020 --> 00:37:52,480\nto ship stuff. And it's not just because I have more experience,\n\n521\n00:37:53,100 --> 00:37:56,340\nbut like Remix just totally changed the game for me. Yeah.\n\n522\n00:37:57,260 --> 00:38:01,860\nAnd I have said before, I'll say it again, Remix tricked me into becoming a full stack developer.\n\n523\n00:38:04,240 --> 00:38:12,680\nI came in and I was like, I'm going to build a sick front end. And all of a sudden I'm like working with databases and stuff. And like, yeah, I haven't done that in a while.\n\n524\n00:38:13,320 --> 00:38:18,700\nOh man, that's so great. Yeah. Tricking front end developers into full stack since, you know, 2020.\n\n525\n00:38:19,240 --> 00:38:28,580\nYeah. Yeah. That's right. And then do the same in reverse too. Like some people will come in traditionally back-end and find themselves building like pretty excellent and\n\n526\n00:38:29,180 --> 00:38:42,900\ninteractive UIs that they never built before. Yeah. Like people who are just used to building single file PHP apps, right? Yes. And now they're able to like make some really cool interactivity in a way that's actually maintainable\n\n527\n00:38:43,260 --> 00:38:45,600\nand they enjoy working in. Yeah.\n\n528\n00:38:46,020 --> 00:38:46,520\nAnd\n\n529\n00:38:47,120 --> 00:38:48,480\nI think that that is,\n\n530\n00:38:49,600 --> 00:39:03,900\nwe talked a little bit about the specifics of like, you know, what RSCs like technically are, which, you know, I'm still kind of like a little bit fuzzy on, but like, I think that the practical part of that is what I'm excited about, right? There is a return\n\n531\n00:39:04,440 --> 00:39:04,940\nto\n\n532\n00:39:06,140 --> 00:39:07,060\nfull stack,\n\n533\n00:39:07,360 --> 00:39:12,480\nbut not in the like full stack, like at scale kind of idea,\n\n534\n00:39:12,800 --> 00:39:14,180\nbut like full stack\n\n535\n00:39:14,680 --> 00:39:18,000\nas in I can make those silly things again\n\n536\n00:39:18,480 --> 00:39:20,960\nand control the whole product, right?\n\n537\n00:39:22,280 --> 00:39:26,260\nAnd I think that that's what I'm excited to see is like those,\n\n538\n00:39:27,340 --> 00:39:33,980\nsee more ideas like come to light because people have a framework that allows them to do it top to bottom again,\n\n539\n00:39:34,660 --> 00:39:35,940\nas opposed to\n\n540\n00:39:36,980 --> 00:39:44,180\nkind of stitching a bunch of, you know, services together. Again, nothing wrong with that, but I think there is an incredible freedom.\n\n541\n00:39:45,520 --> 00:39:46,800\nLike, we haven't yet\n\n542\n00:39:47,680 --> 00:39:52,980\ngotten back to the glory of a single PHP file that like sits on a server\n\n543\n00:39:53,420 --> 00:39:56,140\nand just like sends data to MySQL.\n\n544\n00:39:56,720 --> 00:39:57,780\nYeah, you know,\n\n545\n00:39:59,020 --> 00:40:09,020\nwe're about out of time, but Remix V3 is that future that you're looking for. Yeah. It is gonna be like, seriously, single file. This is your server\n\n546\n00:40:10,080 --> 00:40:14,880\nand away you go. Like the stuff that I've seen that Ryan has shown me,\n\n547\n00:40:15,280 --> 00:40:17,020\nI'm really looking forward to\n\n548\n00:40:17,380 --> 00:40:30,560\nthose days. That'll be pretty sweet. Right now it's just a bunch of like conventional routes and files all over the place, but I think we're going to get there and it's going to be sweet. Yeah. And I, you know, honestly, that's what I'm most excited about. I think that there's this,\n\n549\n00:40:31,580 --> 00:40:36,420\nthere's this moment that I want to like connect that full circle where it's just like\n\n550\n00:40:36,900 --> 00:40:43,760\n1 file on the internet and like, man, when we can get there with react, like I, I'm going to be happy camper.\n\n551\n00:40:44,060 --> 00:40:47,540\nYeah. Yeah. Yep. Yep. Well, and, and even like\n\n552\n00:40:48,280 --> 00:40:54,660\nfiguring out a way to do that without a build tool, but still get all of the stuff that we're looking for, that'd be sweet. But right now\n\n553\n00:40:55,240 --> 00:40:59,640\nit might be like 1 file plus 30 config files. Right? So.\n\n554\n00:41:00,780 --> 00:41:05,640\nThe true nature of JavaScript. Yes, welcome to the wonderful world of the web.\n\n555\n00:41:07,660 --> 00:41:11,020\nYeah, well, Michael, this has been such a pleasure to chat with you as always.\n\n556\n00:41:11,820 --> 00:41:17,380\nIs there any other things that we didn't really talk about that you wanted to bring up before we wrap up? No, this\n\n557\n00:41:17,740 --> 00:41:35,520\nhas been awesome. I love kind of talking about what we love seeing in the world. And, yeah, I think I just hope that as people are going through Epic Web that they don't forget to just build stuff that they enjoy. I think that the greatest things that we've ever done are things that\n\n558\n00:41:36,180 --> 00:41:38,040\nreally just made us happy probably.\n\n559\n00:41:39,060 --> 00:41:39,780\nAnd so,\n\n560\n00:41:40,200 --> 00:41:42,540\nyeah, I hope that people take what they learn\n\n561\n00:41:43,940 --> 00:41:45,040\nfrom Epic Web\n\n562\n00:41:47,080 --> 00:41:50,400\nand explore and have fun and kind of engage their curiosity\n\n563\n00:41:50,900 --> 00:41:52,860\nand solve a need that, you know,\n\n564\n00:41:53,640 --> 00:41:54,800\nfor only themselves\n\n565\n00:41:55,380 --> 00:41:57,940\nand just make the web a better place\n\n566\n00:41:58,320 --> 00:41:59,440\nthrough joy alone.\n\n567\n00:42:00,060 --> 00:42:02,300\nYes, yeah, fill the world with joy.\n\n568\n00:42:02,620 --> 00:42:05,660\nAwesome, thank you Michael, and thanks everybody for watching.\n\n569\n00:42:06,100 --> 00:42:09,440\nHope you have an awesome time with Epic Web. See ya!",
            "text": "[00:00:00] Kent:\nWhat is up everybody I'm joined by my friend chantastic Michael Chan Michael say hi. \n\n[00:00:08] Michael:\nHey. Hello everyone. \n\n[00:00:09] Kent:\nI am so thrilled to be joined by Michael We we just finished having an hour-long conversation before recording. We just enjoy each other's company \n\n[00:00:19] Michael:\nwe enjoy each other's company a lot, actually. \n\n[00:00:22] Kent:\nIt's so good. So yeah, Michael, I'm so happy that you're here with us. I'm trying to remember, I always like to start off introductions by saying where our paths crossed. And I'm sure that it was on Twitter. And then we ran into each other at, I think React \n\n[00:00:42] Conf was probably where we, or maybe React Rally. \n\n[00:00:45] Michael:\nPossibly. Yeah, for some reason I think React Rally, but it might have been React Conf. I'm not sure. \n\n[00:00:52] Kent:\nWe go back to like 2016 probably. \n\n[00:00:55] Michael:\nYeah, I know that the first time I interviewed you was at I think the 2017 React Rally maybe? \n\n[00:01:04] Kent:\nOkay, yeah, yeah. That sounds about right \n\n[00:01:06] Michael:\nit must have been before that but you know probably not too much I don't know \n\n[00:01:10] Kent:\nyou're 1 of you've got to be 1 of my oldest friends who are still a friend like that like we still chat and hang out and stuff. Really? Oh yeah. Like all, all the friends that I had in college and high school and stuff, like, I don't really, certainly none of my friends in high school are still, I see it all. Some friends in college will, will \n\n[00:01:30] do like a movie night occasionally, but, yeah, I don't have a lot of those. So yeah, I graduated college in 2014. So yeah, you're 1 of my oldest friends. \n\n[00:01:40] Michael:\nThat's so funny. I, you know, I have a really weird concept of time. And so it, I miss the part where like new friends become old friends. So all of my friends in my mind are new friends. And so it's just really wild to think, oh yeah, like \n\n[00:02:00] 2016, 2015, whenever that was, whatever that timeframe was, that's like 8 years ago. Like, that's crazy. It's wild. \n\n[00:02:10] Kent:\nThat's amazing. I mean, it's all BC, right? Before COVID. \n\n[00:02:15] Michael:\nSo. Before COVID. Yeah, it's like, there's like a 3 year window where it's like time just stopped. Yeah, like I do. We have no way to account for it anymore. \n\n[00:02:22] Kent:\nYeah, \n\n[00:02:23] Michael:\nit's funny though, because I do feel like during that time, all of my online friendships became, It's hard to, there became like this tactility to them where it's like, I couldn't remember if I'd actually met certain people in real life or if \n\n[00:02:40] Kent:\nI'd just \n\n[00:02:41] Michael:\nlike had podcast conversations with them and we just became like fast friends. Like it's really wild, like how, like that time shifted that for me. Whereas like, there wasn't as much of a difference. \n\n[00:02:53] Kent:\nYes, yeah, 100%. I've had a couple of these interviews, and I'll start out being like, I don't think we've met in person, have \n\n[00:03:00] Michael:\nwe? Like... Yeah, like, Cassidy Williams, like, I consider her a great friend at this point and we've never met in 3D. Like we could just be avatars to each other. It's really, really wild. \n\n[00:03:14] Kent:\nYeah, it's pretty interesting, this internet thing. Speaking of the internet thing, you're on the internet and you have some life experiences too. I wanna get an intro to you. So Michael, why don't you intro yourself to people watching for those who don't know you already? \n\n[00:03:31] Michael:\nYeah, so my name is, my official name is Michael Chan. I go by Chantastic most places. And yeah, kind of like a weird amalgamation of things. I'm definitely a second career dev, kind of came into this a little bit later in my career, around like \n\n[00:03:51] 2010-ish maybe. And just really, I had always loved the web and it wasn't really until that time where I had, I was like, you know what, I could probably do this. I could probably just do something that's fun that I like and like make stuff for a living. Like that's a thing that people do, right? And yeah, I just I \n\n[00:04:12] really got into it and kind of, you know, through the years I was fortunate enough to kind of get in really early on and react and be able to build a, you know, a react project that was all real time at this job that I was doing at the time. And, you know, kind of in that, you know, it was like late 2013, early \n\n[00:04:32] 2014, like, like right when it was like brand new and got to meet all of these really cool people and take part in this awesome community of developers and just kind of change the way that the web works, which is really exciting. And so yeah, I had a podcast for a while called React Podcast, and I just have enjoyed \n\n[00:04:53] the process of getting to meet some of the, like, you know, funnest, coolest people I've ever met. So yeah, that's that's a little bit of about me and and my intersection with the web. \n\n[00:05:04] Kent:\nSick, yeah. So that podcast reminds me of podcasts that I've done and the primary reason that I would do the podcast is so I could talk with cool people. And so yeah, you've been able to talk with a lot of people. Also gave you, I'm guessing, a major reason that \n\n[00:05:25] you were asked to participate in the React documentary was because you were like the voice of React for all that time. \n\n[00:05:31] Michael:\nYeah, you know, that was a super fun project. I, you know, Ida reached out to me and said, hey, we want to do a react documentary. And I have this kind of wild idea that, you know, you know, because you spent so much time doing the react podcast that you could be the voice of the documentary. And I was like, that would be like the biggest honor for me. And I, \n\n[00:05:51] it was so fun to be able to do, to I think just be a part of acknowledging the incredible work that people had done and like the unlikeliness of React to have become what it is today. I just think that Ida did such an incredible job with that documentary. \n\n[00:06:12] It's such a fun story, Especially, you know, what is it, I guess, 10 plus years later now, to hear that maybe it was never going to be a thing feels impossible. React feels like an inevitability now. And I love stories like that. Like, you know, \n\n[00:06:32] the story of Nike, Shoe Dog, like, is like 1 of my favorite books because it is like, okay, Nike is eternal, right? Like, it always has been. And no, There was a very long period of Nike not being a possibility at all. And so I \n\n[00:06:52] love stories like that. Underdog stories are so much fun. And the documentary does a really good job of that. But yeah, I'd say that that's how we met. I think that we probably have like 3 episodes maybe where we \n\n[00:07:04] Kent:\njust talk about React stuff. Yeah, oh well, and then we've got a whole series on Epic React, podcast episodes too, which is pretty sweet. And then you also appeared on my own podcast. We did 2 episodes back to back, I think. \n\n[00:07:19] Michael:\nI feel like we have like a, you know, between all of those, we got like a full like series. Like just, yeah. \n\n[00:07:27] Kent:\nWe just like talking. So, speaking of Epic React, why don't you, by the time people watch this, the announcement will probably be made, but we'll pretend that that's not the case. Why don't you talk about Epic React a bit? \n\n[00:07:42] Michael:\nYeah, so something I'm really excited about is, you've done an incredible, first, I'm just gonna like gush on you for a second. You've done an incredible job of educating web developers. And it's been so fun to see you developing \n\n[00:08:02] your skills of just improving people's life through making the web a better place. \n\n[00:08:09] Kent:\nAw, thanks. \n\n[00:08:09] Michael:\nIt's been really awesome. You've asked me to work on Epic React and put out an updated version. Again, a huge honor. My life is full of these incredible honors, to be asked to participate and work with just really incredible people. \n\n[00:08:30] And so, yeah, so we're working on a V2 of Epic React. And that's actually 1 of the reasons we were talking so long beforehand is just kind of identifying, man, like in 3 years, the React ecosystem has changed so much, \n\n[00:08:51] down to the level of like the contributors, where they're contributing from, the builders that we use to, you know, bundle react, like the way things are tested, you know, kind of where the new features are being developed it's just like the ecosystem has gone through this huge shift just over the last \n\n[00:09:11] you know 3 years I mean even to the point where there's just every day there's like a new better way finger quotes to like do components. \n\n[00:09:22] Kent:\nYeah, it definitely is a challenge. Like I have mixed feelings about the whole thing because Epic Reacts was launched 3 years ago and it's still like super relevant and super helpful for people. So like a huge testament to React itself and being stable. There are some \n\n[00:09:42] methodologies that we don't really do as much anymore because there are better, frankly, there are libraries to do those things better. So like, we teach how to do fetching and components, and then actually in the Bookshelf app, at the very end, we teach how to use React Query instead, which is, you \n\n[00:10:03] know, in at the final bookshelf app, we don't do any data fetching in components anymore. It's all happening inside React Query. But still like there are a number of things that are changes, but most of it is still super relevant. But it's also not \n\n[00:10:23] in TypeScript. It's not using, or the suspense workshop was experimental at the time. Now suspense is a real thing. And then all of the tools around this, like our build tools and testing tools and everything else. Yeah, things change over time. So I'm super excited that you're \n\n[00:10:43] taking on the mantle because I'm working on Epic Web, I can't do it all. And you're gonna do an awesome job with this. So I'm excited for what you're working on. \n\n[00:10:51] Michael:\nThank you, thank you, I appreciate that. And yeah, it's been really eye-opening. I think 1 of the things that has been really cool to see is to go through the content and realize how well you, you do such a great \n\n[00:11:12] job of directing people to look down a little bit. So not just learning at the level that you need to like execute something but like really understanding that level that's like just underneath you don't have to understand the whole world but like understanding just enough like below the surface that you can kind of escape if you get into like a sticky sticky situation And \n\n[00:11:32] I think that's been a really rewarding experience going through the content, even having a lot of React experience, kind of learning some of those like, oh yeah, like I hadn't thought about, like I could escape from that challenge this way. And I think that's honestly 1 of the most important skills that we have, or that we develop over time \n\n[00:11:52] as developers, is like understanding, oh, I can think about this problem from a different way. Like the tools, everything that I use is some kind of abstraction and sometimes I need to bypass that just a little bit to get to the level that I need to solve \n\n[00:12:12] this problem. And I think that's 1 of the really cool things about Epic React and really excited to like continue to share that with people. Because I think it can be really hard in this world to find material that actually \n\n[00:12:32] helps you. \n\n[00:12:37] Kent:\nWell said, yes, that was very thoughtfully spoken, but I completely agree. Let's expound on that a bit. \n\n[00:12:45] Michael:\nYeah, you know, it's tough because I think that, you know, the world is very influencer-centric right now and like SEO-centric. And so a lot of people are trying to find ways to get you into their funnels through not particularly helpful information, like that surface level, like just how \n\n[00:13:05] do we catch people when they're Googling the thing and then run them into a pipeline? And I think it can be risky these days to say like, hey, I know that you already have a problem and I'm going to make your problem a little bit worse momentarily so that you fully understand it \n\n[00:13:25] and can like fully move past it. Right? Yes. And it's something that is it's not it's not an easy pill to swallow when you're already like on a deadline right and already feeling stressed out about stuff but it's those moments where you you take that opportunity to stretch a little bit and \n\n[00:13:45] like grow your understanding that you really develop. Right? Like, I'm overloading that word right now, right? But like develop as a developer, develop as a thinker, as a person. And I really do hope that we can continue to do that \n\n[00:14:05] in Epic React to help people be like, hey, you know, you've probably seen a lot of articles saying like, do this, don't do that. And like, this is just how it's done. And like, you're gonna see it the bad way and you're gonna see it the good way. And like, you just need to know how to get out of the problem when you \n\n[00:14:25] have it. So I really think you've done an incredible job of developing that content to help people understand React better. \n\n[00:14:35] Kent:\nThank you. Yeah, I actually, my priority when I'm teaching is retention, and I feel like I want people to retain information that will be useful to them, more than just like, do it this way because this is the way it's done, but do it this way because you understand why \n\n[00:14:56] we do it. There's a level of deep understanding. So for Epic Web, I'm working on the WebAuth workshop right now, I'm recording all those videos at the time. And in fact, some of them are exporting on my machine right now. But... \n\n[00:15:13] Michael:\nTestament to those M-series Apple chips. \n\n[00:15:17] Kent:\nThat's right, Yeah, we can run all of this at the same time. Yeah, so the thing about the WebAuth 1, 1 thing I'm a little worried about is that people will look at the size of the WebAuth workshop and be like, that seems like too much. Why don't we just use a service, right? Like that's why there are services for this \n\n[00:15:37] stuff. But the thing is that even if you, like you can use a service, that's fine. But even if you use a service, if you don't understand this stuff, you are not going to be as effective at using that service. And so like, it is so critical. In my mind, it's so critical for people to really understand this \n\n[00:15:57] information to be able to use it effectively. And so yeah, I go to great pains to to make that happen. So I'm glad you appreciate that \n\n[00:16:08] Michael:\nI do and you know, I think you know when you've been through that enough times You realize that it is painful like it always kind of it always feels like a slog but then it's not as bad as you thought it would be on the other side. It's like, oh, okay, yeah, that was rough, \n\n[00:16:28] but now I think I kind of understand it enough to know what's happening, \n\n[00:16:32] Kent:\nwhich is \n\n[00:16:33] Michael:\nbetter than, I don't know, I had NPM installed and I imported the library and called the function and it's not working. \n\n[00:16:40] Kent:\nYes, for real. Like that feeling, we've all felt that, where it's just like, it's not working and I don't know why. Or it's working and I don't know why. \n\n[00:16:51] Michael:\nWorse, yeah. \n\n[00:16:55] Kent:\nAnd so yeah, learning a level down, like you said, is so important. We don't have to go down to zeros and ones. I've done it, it's the worst. It's not fun. We don't have to go that far to really grasp this stuff. But going just \n\n[00:17:15] a little bit below your level of abstraction can help you use the abstraction much better for sure. \n\n[00:17:21] Michael:\nYeah, yeah. You know, it's interesting because I think, you know, we've seen enough patterns kind of come and go at this point, you know, specifically in React, where you realize that you can kind of see those underlying patterns, right? And be like, oh, okay, that's like, \n\n[00:17:41] you know, that's delegation or that's, you know, higher order, whatever. And like, you can kind of see them and be like, oh, okay. Yeah. I, like, I understand them on a like programming level and then it feels less magical versus like, you know, it's like, oh, hey, this is the pattern. And like, this is what we use. And I, \n\n[00:18:01] I am, I, I am defined by the fact that I program this way as opposed to like, okay, like, you know, you prefer lazy functions versus early functions. Like, okay, cool, whatever. \n\n[00:18:14] Kent:\nYeah that's true. I found that the more time I spend developing software, the less I care about stuff, about some stuff, like most things. Like it doesn't matter to me as much. But you know, there are other things that do matter to me a little bit more. Or even the fact that it doesn't matter, \n\n[00:18:34] matters more to me, you know? Like I'm less inclined to get into arguments about stuff that doesn't matter and that matters to me. \n\n[00:18:42] Michael:\nYes, yeah, that's, it's huge, right? Like the kind of getting out of that like tribalism is like super important. I know that this is I mean this is a silly thing that I will confess but like I have different prettier preferences for most of my projects that I use and part of it is just as a reminder \n\n[00:19:02] of like the specifics don't matter. What matters is that we have an area where we can communicate with other people and being able to speak multiple dialects and not worry about it. Having a preference about tabs versus spaces is fine, but coming \n\n[00:19:23] in and your first PR being changing 1 to another, that's not what we're about. And remembering that it's fine to have your preferences, but then at the end of the day, what we're really after is being able to communicate with each other and that these are tools that service communication. \n\n[00:19:43] Like that's where the magic happens, right? Like That's where you get to meet really cool people and work on fun projects. And that's the beauty. \n\n[00:19:51] Kent:\nYeah, yeah, 100%. So I want to talk with you a little bit about the future of React or the big thing that's happening right now. With Epic React, when I recorded it 3 years ago, it was all about suspense and it was released as an experimental feature. Thankfully, most of that \n\n[00:20:11] is still relevant today. Like it's, it's when react 18 came out, and those features were official. Most of them were unchanged. Now we're kind of in another interesting spot with React with server components. And so, yeah, I wanna hear your take on server components and the future of React. \n\n[00:20:32] Michael:\nYeah, so it's really interesting because I think that, you know, 3 years ago, we were all talking about suspense, right? And we didn't really know exactly what it was for. Like we knew it was for, you know, data fetching. We already could use it to lazily load components, which is an awesome thing to do, awesome practice. But then it was kind of like, okay, cool, \n\n[00:20:52] we have this concept of suspense where we can lazily get stuff. And it wasn't entirely clear how that was going to be utilized. And so we had these kind of like guiding principles on how we could use suspense \n\n[00:21:12] to like fetch data and fetch components at the same time or kind of, you know, how we could like handle rendering asynchronously from like fetching data and kind of like merge it all together. But it was all a very manual process. And so I think that something \n\n[00:21:33] that we're seeing right now is this kind of like transition to this RSC protocol, which kind of allows, I mean, it's like, it's such a weird like concept, but basically Like you can render stuff on a server and then send the same type of like DOM manipulation instructions over the wire \n\n[00:21:54] to the browser, which is different than just sending more HTML. You know, like there's a lot of hype around HTMX right now. Yeah. In this space, which is kind of this idea of having these, you know, it's as old as, you know, Rails and, you know, all of those, you know, or maybe even ASP.net, you know, whatever their thing was. But the \n\n[00:22:14] idea of like marking certain parts of your DOM, or you could make a request and then just get like fresh HTML for those. We're actually doing, we're actually getting those like instructions back and saying like, hey, change this from this text to, you know, from this text to this text, \n\n[00:22:34] and change this date, you know, from, you know, this date to this date, and, you know, change the number of clicks, you know, up by 1, but like actually getting that, you know, from the server and like through these like server actions. So yeah, it's a really interesting, it's a really interesting idea, and it's kind of like the fruition of what suspense was like intended to \n\n[00:22:54] be, right? And it's very much in this like experimental phase. I think we're just now starting to see a lot of frameworks committing to it. Next has, you know, led the charge in effectively like hiring a lot of the people who are like working on this to \n\n[00:23:15] build it into next. But, you know, I know a lot of frameworks are working on RSC integrations, you know, so that includes, you know, Remix and Redwood. And I think it'll be really interesting over the next like handful of years to see like what people's different takes are on it, to see like, you know, what's gonna stick, \n\n[00:23:35] what doesn't, and have some, maybe some more, it's exciting to see like what ergonomics people are going to bring to this new capability, I think, for me. Because I think we're at an era in React of framework development. I think up to this point, \n\n[00:23:55] it's been a lot of roll your own, or maybe you have a Laravel app and you've just kind of sprinkled in a little bit of React on the top. And so it'll be really interesting, I think, over the next year to see what, like, first-class, like, you know, React architecture, front-to-back, full-stack, you know, client and server integration \n\n[00:24:16] looks like and, like, what people's different takes are on that. Because I think it's going to be super cool to work at that level. And I know working on Epic Web Dev, just getting to that point where it's less about technology and more about building stuff. \n\n[00:24:31] Kent:\nYeah, yeah. Just listen to my opinions. I promise it'll probably be fine. \n\n[00:24:39] Michael:\nTotally, totally. \n\n[00:24:41] Kent:\nYeah, and that like that's the whole premise of the Epic Stack is just like you can choose so many different options and most of them will be fine, whatever you choose It doesn't really matter as much as you think it does Yeah, and so it given that is the reality then what do you have against just using someone else's \n\n[00:25:01] opinions? And moving forward with your life and just building your thing. \n\n[00:25:06] Michael:\nYeah, you know, you had this, you had a tweet I think recently, might have to find it, but it was about, you put it so concisely and I really appreciated it, but you were talking about off specifically and how like rails has built in off solutions and Laura Vell has \n\n[00:25:26] built in off solutions and like react. It's kind of like we delegated to services, I think because it's all, you know, we've been building client-side apps and like it kind of, I don't know, there's maybe like a different line or whatever, but like we just haven't been building frameworks and I don't know, \n\n[00:25:46] I need to catch myself here, but like it hasn't been as much of a priority as it has in some of those like full server side libraries. And it feels like an omission now that we're kind of building full stack re-app applications to not have like auth come out of the box when you install the \n\n[00:26:07] thing. Yes, \n\n[00:26:08] Kent:\nyou know that so I found that tweet that you were talking about. It was yeah just like somebody had said to I have this take where I say most web apps should not use a third party auth service. They should just ship auth themselves. And somebody had said that they'd never \n\n[00:26:28] seen anybody building real software with that take. And I was just really taken aback by that. Then they prefaced it by saying, no offense, Kent, but it's like, how is that not offensive? You're saying that I don't build real software. So, Okay, whatever. But anyway, I don't \n\n[00:26:48] hold a grudge. He actually apologized later, so it is fine. So anyway, I was just saying that most remix apps are rolling their own auth. Rails and Laravel and Django all ship their own auth. And so I think a big reason why the React community hasn't \n\n[00:27:09] jumped on board with this idea as much and that the React community uses third party auth is because they never really had control over their server. They're all just client-side apps. And so, I don't wanna ship a server, but I need to have secure \n\n[00:27:29] auth, so I'm gonna use a service, and they're gonna run the server, and they're gonna do the auth, and then I can communicate properly with another service which is where my data is stored or whatever, right? So we just got really used to this world of I'm only in the client, but that's not secure. We have to have some \n\n[00:27:49] auth, but I don't wanna roll a server, and so I'm not gonna roll my auth, right? \n\n[00:27:52] Michael:\nYeah. \n\n[00:27:54] Kent:\nAnd so we're kinda coming back to what everybody else is doing, which is like I'm rolling a server, but people are just kinda used to using services for auth, and kinda feel like auth is scary. And I remember before React was a thing for me, I built an express server, I'd used Passport JS \n\n[00:28:14] and I did Auth myself, it was fine. And then I went on this detour around with client-side rendered apps and with React for quite a while, and I was using Firebase Auth and I was using other services. And then when I come back to the server side with Remix, I remember talking with Ryan Florence and he was saying, \n\n[00:28:35] you should just do Auth yourself. Here's the steps, the different things you need to do to make that happen. And I did it in like 2 hours. I was like, wow. I mean, of course it didn't have 2 factor auth. It didn't have like all those different things in 2 hours. But the thing is now, like, I'm sorry I'm talking a lot. I know you have something you want to \n\n[00:28:55] say, but I want to add just something interesting. Sometimes people will tell me that, hey, Kent, you don't have a good measure of your value of time. Like, you don't value your time very well. If you're working on all of this, spending all this time implementing auth, well, you could just use a third-party service and move on with your life. But for me, I'm building \n\n[00:29:16] like instructional material and I'm building a framework that people can use from the get-go, I'm building libraries. And so I'm not just investing, like saving time for myself, I'm looking at all the people who are watching this right now and all the people going through Epic Web and I'm thinking how much time I'm saving them. Because they can just boot \n\n[00:29:36] up a new Epic stack and they have two-factor auth and third-party like O-auth and all of the other things just from day 1, right? From the get-go. Yeah. And so, Anyway, I definitely have feelings about land rolling off and I think that most people should be doing that. \n\n[00:29:52] Michael:\nYeah, you know, it's interesting because it's like the, it is very much a side effect of Jamstack. I mean, I, I guess, right? Like it, we had this JAMstack notion. I think it is less in favor than it was. I think maybe to the point that JAMstack is probably a \n\n[00:30:12] retired Jersey. I think that we got what we needed from the concept and we have moved on. But yeah, I think that there is like so, there are so many services that allow you to stay strictly in the client side, But it does feel like we are seeing \n\n[00:30:32] a renaissance of people controlling their server. And it's going to be, I think it's going to be really interesting to see how all of that stuff works. I mean, especially, I think that's the thing that I'm most interested in RSCs for is just, you know, React used to be a really great way \n\n[00:30:53] to build half of an application. And it feels like now you really can't, You know, it's so funny too, like the idea that, you know, real people don't hand roll their own auth. I have only worked at, or like real software, I have only worked at companies that like had their own \n\n[00:31:13] auths, like these predated these services. So It's kind of like hilarious, the idea that real software, like so the real software that we built in the last, you know, like 5 years. Like, yeah, but yeah, like and coming from a, you know, more Rails background, It's like, yeah, \n\n[00:31:33] it was like, you know, I built my Rails app, I installed, I can't remember, devise maybe it was, was the the library and, you know, I mean, sure I was using a library, but I wasn't using a service. \n\n[00:31:47] Kent:\nUh-huh, Yeah, and that's exactly the way I think it should be. That you should be using libraries. And eventually a lot of the stuff that is built into the Epic stack will be moved over into libraries. That's already started happening. Yeah. Sometimes when I say, I think you should roll your own auth, people are like, oh, okay, so you're gonna write your own crypto. \n\n[00:32:07] Like, no, no, that's not what I mean by that. I just mean I don't want to pay somebody per user. \n\n[00:32:13] Michael:\nYeah, yes. Yeah. And that's like I think that's I mean, now we're talking about like business, but I think that that is like such an interesting thing. I think that those strategies, like, I don't think there's anything wrong with using a service, but like knowing what you're in for is really important, right? Like, you know, because if you \n\n[00:32:33] know that you can spin it up and like, you know, buy X number of users, have enough money to make it worth it still when you start getting paid, like, that's great. Like, you know, make your decisions. But, you know, if you don't have that plan, like maybe control your own destiny a little bit and \n\n[00:32:53] not, you know, I don't know. There's so many reasons to make that decision, I guess. \n\n[00:32:59] Kent:\nYeah, yeah. So there was a couple of years ago, you were talking about working in rails and everything. And I remember a couple of years ago, I was listening to you were a guest on a podcast. I can't remember which 1, but I was mowing the lawn and you said something about like, more people should \n\n[00:33:19] be full stack or you should have more control over the whole stack, something like that. And I remember at the time I was way into JAMstack stuff. And I was like, Michael, I love you, but I super disagree. I just feel like that full stack developer does not exist. It's too hard to do \n\n[00:33:39] all the things, and you should just specialize and focus. And that was my epic React days when I was just like, yeah, we're gonna go hard on React and that's what we're doing. And then Remix shows up and changes everything for me. Where all of a sudden I can specialize in the full stack. \n\n[00:34:00] Which just blows my mind. So you weren't there when I said that mowing my lawn, but I apologize. You were right. We can do the full stack. It's amazing. \n\n[00:34:12] Michael:\nIsn't it so beautiful that we can disagree and still like each other? It's amazing. There's so much evidence to the contrary these days, but you know, we figured out how to make it work, Kent. Yeah, you know, it's, it's, I think something that I hope for \n\n[00:34:32] everyone who is getting into like web development. Is that they get to build the things that they wanna build. I think that's why like, that's what got me excited about the web is like, the first thing that I built on the web was a single PHP page that connected to it was a single file, right? I \n\n[00:34:52] bought a cheap server. I put a single PHP file on the Internet that had a form, and when you hit submit, it would take a was it a New Year's resolution? It was like for me and my friends. Like I just wanted to collect New Year's resolutions. I didn't even have a way of viewing them except for like looking into the MySQL database via cPanel \n\n[00:35:12] or something like that. And I still like think about that as like the pinnacle of web development, not like that specific thing, but like the idea that I could make something that anyone could use from anywhere \n\n[00:35:34] that made us happier and like our lives a little bit better. And I think that, you know, we've gotten so far into the commercial side of web dev, but I really do think that there's this renaissance of us just building the stuff that we like again. \n\n[00:35:54] And I think that's what I hope. I just hope that people have lives that are fun and meaningful and memorable for themselves. And I think that building software for your needs is a superpower. And we forget sometimes with all of \n\n[00:36:14] the, you know, trying to make, you know, money on everything. We possess this superpower that allows us to look at our lives and be like, what's something that I could solve for myself today? And that's like, That's a beautiful thing. And I think that, unfortunately, for \n\n[00:36:35] people who just want to learn 1 part of the stack or become a specialist professionally, you do have to either depend on services or know a little bit more, like enough full stack to be able to at least, you know, protect, you know, protect a single route from intruders. And, you know, like, I guess, like, \n\n[00:36:55] be able to use an authentication library in a database. But I don't know, I feel like, I feel like there's some some really fun things on the horizon as people get better at coding and we kind of get to maybe our like post-consumer era of the web where not everything is about monetization and we can just be like, hey, I made this thing because \n\n[00:37:16] it makes me happy. \n\n[00:37:18] Kent:\nYes, yes. I think more people should do that, for sure. And I love Remix because, for me, it made that more possible. Where before it was like, okay, I'm super solid on the front end piece. It takes like a jumble of nonsense to integrate with some third party database provider \n\n[00:37:38] and everything like that, but I can make that work. Whereas now I just feel like I have so much more control over my own destiny. And I don't need to ask permission to ship stuff. And it's not just because I have more experience, but like Remix just totally changed the game for me. Yeah. And I have said before, \n\n[00:37:58] I'll say it again, Remix tricked me into becoming a full stack developer. I came in and I was like, I'm going to build a sick front end. And all of a sudden I'm like working with databases and stuff. And like, yeah, I haven't done that in a while. \n\n[00:38:13] Michael:\nOh man, that's so great. Yeah. Tricking front end developers into full stack since, you know, 2020. \n\n[00:38:19] Kent:\nYeah. Yeah. That's right. And then do the same in reverse too. Like some people will come in traditionally back-end and find themselves building like pretty excellent and interactive UIs that they never built before. Yeah. Like people who are just used to building single file PHP apps, right? Yes. And now they're able to like make \n\n[00:38:39] some really cool interactivity in a way that's actually maintainable and they enjoy working in. \n\n[00:38:45] Michael:\nYeah. And I think that that is, we talked a little bit about the specifics of like, you know, what RSCs like technically are, which, you know, I'm still kind of like a little bit fuzzy on, but like, I think that the practical part of that is what I'm excited about, right? There is a return to \n\n[00:39:06] full stack, but not in the like full stack, like at scale kind of idea, but like full stack as in I can make those silly things again and control the whole product, right? And I think that that's what I'm excited to see is like those, \n\n[00:39:27] see more ideas like come to light because people have a framework that allows them to do it top to bottom again, as opposed to kind of stitching a bunch of, you know, services together. Again, nothing wrong with that, but I think there is an incredible freedom. Like, we haven't yet \n\n[00:39:47] gotten back to the glory of a single PHP file that like sits on a server and just like sends data to MySQL. \n\n[00:39:56] Kent:\nYeah, you know, we're about out of time, but Remix V3 is that future that you're looking for. \n\n[00:40:04] Michael:\nYeah. \n\n[00:40:04] Kent:\nIt is gonna be like, seriously, single file. This is your server and away you go. Like the stuff that I've seen that Ryan has shown me, I'm really looking forward to those days. That'll be pretty sweet. Right now it's just a bunch of like conventional routes and files all over the place, but I think we're \n\n[00:40:24] going to get there and it's going to be sweet. \n\n[00:40:26] Michael:\nYeah. And I, you know, honestly, that's what I'm most excited about. I think that there's this, there's this moment that I want to like connect that full circle where it's just like 1 file on the internet and like, man, when we can get there with react, like I, I'm going to be happy camper. \n\n[00:40:44] Kent:\nYeah. Yeah. Yep. Yep. Well, and, and even like figuring out a way to do that without a build tool, but still get all of the stuff that we're looking for, that'd be sweet. But right now it might be like 1 file plus 30 config files. Right? So. \n\n[00:41:00] Michael:\nThe true nature of JavaScript. \n\n[00:41:02] Kent:\nYes, welcome to the wonderful world of the web. Yeah, well, Michael, this has been such a pleasure to chat with you as always. Is there any other things that we didn't really talk about that you wanted to bring up before we wrap up? \n\n[00:41:16] Michael:\nNo, this has been awesome. I love kind of talking about what we love seeing in the world. And, yeah, I think I just hope that as people are going through Epic Web that they don't forget to just build stuff that they enjoy. I think that the greatest things that we've ever done are things that really \n\n[00:41:36] just made us happy probably. And so, yeah, I hope that people take what they learn from Epic Web and explore and have fun and kind of engage their curiosity and solve a need that, you know, for only themselves and just make \n\n[00:41:56] the web a better place through joy alone. \n\n[00:42:00] Kent:\nYes, yeah, fill the world with joy. Awesome, thank you Michael, and thanks everybody for watching. Hope you have an awesome time with Epic Web. See ya!"
          },
          "state": "ready",
          "title": "Michael Chan.mp4",
          "originalMediaUrl": "https://egghead-video-uploads.s3.amazonaws.com/epic-web/interviews/Michael+Chan.mp4",
          "_createdAt": "2023-10-18T17:50:57Z",
          "_type": "videoResource"
        },
        "_type": "interview",
        "_updatedAt": "2023-10-18T18:20:59Z",
        "title": "Building Deep Skills with Michael Chan",
        "description": "Michael Chan, aka Chantastic, on React's evolution. Deep dive into ecosystem changes, skills for modern web dev. Emphasis on depth over surface knowledge.",
        "body": "Michael Chan, commonly known as Chantastic, discusses the evolving landscape of React. The conversation took an in-depth look at the changes in the React ecosystem and the skills needed to excel in today's web development world.\n\nNew additions like TypeScript and React Query have been game-changers, and both Kent and Michael expressed optimism about upcoming features such as server components and the RSC protocol.\n\nThe pair criticized the prevailing trend of focusing on surface-level information, advocating instead for a deeper understanding and problem-solving skills. They noted the value of comprehensive resources like the Epic React workshop, arguing that such initiatives are crucial for fostering genuine skill development.\n\nFinally, Michael and Kent urge developers to find satisfaction in crafting projects that not only meet personal needs but also contribute to a better web. They reiterated the importance of full-stack understanding, even for specialists, and looked forward to a future less driven by monetary gains and more by the joy of creation.\n\n## Resources\n\n- [Michael Chan on Twitter](https://twitter.com/chantastic)\n- [Epic React](https://epicreact.dev/)",
        "slug": "building-deep-skills-with-michael-chan",
        "solution": null,
        "_id": "WBQDSVdErPwEcA4Fd0g97f"
      },
      {
        "description": "Monica Powell, senior software engineer, and React community leader. Founder of React Robins. MDX for interactive content. ",
        "videoResource": {
          "duration": 1888.033333,
          "_rev": "6LaeqP6n94P8FD3sVhYJ71",
          "originalMediaUrl": "https://egghead-video-uploads.s3.amazonaws.com/epic-web/interviews/Monica+Powell.mp4",
          "transcript": {
            "srt": "1\n00:00:00,359 --> 00:00:05,100\nHey everybody, I am excited to be joined by Monica Powell say hi Monica\n\n2\n00:00:07,580 --> 00:00:11,340\nAll right, so if you haven't met Monica yet, she's just a delight I\n\n3\n00:00:11,719 --> 00:00:12,219\nhave\n\n4\n00:00:12,519 --> 00:00:16,660\nwe've crossed paths a number of times I think every time has been at conferences\n\n5\n00:00:17,539 --> 00:00:18,699\nat least in person\n\n6\n00:00:19,460 --> 00:00:21,840\nThat conferences bring people together, I guess.\n\n7\n00:00:23,720 --> 00:00:24,720\nBut yeah, Monica,\n\n8\n00:00:25,080 --> 00:00:25,860\nI think,\n\n9\n00:00:27,259 --> 00:00:36,520\nI'm pretty sure that I met you on Twitter first, but this is like quite a while ago now, maybe 2018 or something like that. Certainly before COVID, that's the new BC.\n\n10\n00:00:38,920 --> 00:00:42,340\nAnd so, yeah, it's just been a pleasure to know you all this time.\n\n11\n00:00:42,700 --> 00:00:44,420\nMonica, could you give our\n\n12\n00:00:45,120 --> 00:00:47,520\nviewers a little intro to yourself?\n\n13\n00:00:48,260 --> 00:00:52,280\nSure, hi everyone, I'm Monica Powell. I am a senior software engineer\n\n14\n00:00:52,580 --> 00:00:59,880\nat Newzeala. I work in educational technology, so building software for K through 12 teachers and students.\n\n15\n00:01:00,240 --> 00:01:01,900\nAnd I'm also a\n\n16\n00:01:02,340 --> 00:01:07,320\nvery excited member of the Rack community. So met Kent at a bunch of Rack conferences.\n\n17\n00:01:07,900 --> 00:01:12,420\nI founded a React meetup for women at non-binary Rack developers\n\n18\n00:01:12,740 --> 00:01:15,120\nin New York City. This was pre-pandemic.\n\n19\n00:01:17,140 --> 00:01:20,620\nAnd I'm also just like super excited about like the JavaScript ecosystem\n\n20\n00:01:21,040 --> 00:01:28,600\nand how folks are eager to like open source things and do like knowledge sharing within the community.\n\n21\n00:01:29,280 --> 00:01:38,200\nAnd In general, I'm excited about open source. I am a GitHub star, so I help encourage other folks to contribute to open source and also contribute\n\n22\n00:01:38,520 --> 00:01:39,780\nwhen I'm able to.\n\n23\n00:01:40,520 --> 00:01:45,940\nAwesome, wow, that's quite the list of things that you're involved with. I wanna dive in\n\n24\n00:01:46,500 --> 00:01:48,340\nbriefly to the\n\n25\n00:01:48,660 --> 00:01:56,380\nReact Robins, I think is what you were talking about. Can you tell us a little bit about that? And is it still running post-COVID or\n\n26\n00:01:57,040 --> 00:01:59,479\ndid COVID kind of slow that down?\n\n27\n00:01:59,840 --> 00:02:16,360\nYeah. So I would definitely say that COVID slowed down the meetup a little bit. So before the pandemic, I was based in New York City. I relocated during the pandemic. And so currently like the, the meetup is still exists like in, I guess, New York. We had hosted an event earlier this year\n\n28\n00:02:16,720 --> 00:02:20,460\nwith some other React groups in New York City. And so that was\n\n29\n00:02:20,860 --> 00:02:21,580\nwell attended.\n\n30\n00:02:22,200 --> 00:02:22,700\nBut\n\n31\n00:02:23,100 --> 00:02:26,640\nyeah, we're not having like regular meetups right now, just in terms of logistics,\n\n32\n00:02:26,980 --> 00:02:31,760\nbecause like I and some of the other organizers have moved out of the area, some folks out of the country.\n\n33\n00:02:33,480 --> 00:02:34,560\nSo yeah,\n\n34\n00:02:35,380 --> 00:02:38,060\nI'm trying to figure out what it looks like.\n\n35\n00:02:39,280 --> 00:02:39,780\n2020.\n\n36\n00:02:40,900 --> 00:02:41,400\nBut,\n\n37\n00:02:43,420 --> 00:02:45,460\nI originally started it in 2018.\n\n38\n00:02:46,240 --> 00:02:50,280\nSo I was starting to learn more about React and I\n\n39\n00:02:50,820 --> 00:02:57,100\nwas like, I'm interested in connecting with other folks who are using React. And I had gone to a lot of women-focused\n\n40\n00:02:57,740 --> 00:03:01,860\nmeetup groups and I found them to be very supportive spaces. So like Women Who Code,\n\n41\n00:03:02,720 --> 00:03:14,940\nI've also gone to like Rights-Free Code and some other ones that either like focus specifically on women or women and non-binary folks. And I felt like it was like a supportive way to learn new technologies and also\n\n42\n00:03:16,520 --> 00:03:18,040\nhave the opportunity to\n\n43\n00:03:18,459 --> 00:03:27,140\nlike speak and things like that, which is also available at other meetups as well that are open to a wider audience or focus on a wider audience.\n\n44\n00:03:27,440 --> 00:03:29,280\nBut I really wanted to create something\n\n45\n00:03:29,640 --> 00:03:33,240\nwhere I felt like I could have an impact on improving\n\n46\n00:03:33,740 --> 00:03:37,400\nthe experience for other women and non-binary folks. And I also had the opportunity\n\n47\n00:03:38,200 --> 00:03:47,000\nto collaborate with some of the other meetups in New York City from the beginning. So I definitely felt like there was a lot of support both within the local\n\n48\n00:03:47,540 --> 00:03:52,040\nReact community and then also from the React core team as well to\n\n49\n00:03:52,340 --> 00:03:56,180\nfigure out how they could best support the initiatives that I was learning.\n\n50\n00:03:56,720 --> 00:03:58,680\nI just think that is so awesome.\n\n51\n00:04:00,180 --> 00:04:00,680\nIt's\n\n52\n00:04:02,140 --> 00:04:04,540\njust an example of somebody seeing\n\n53\n00:04:05,020 --> 00:04:10,620\na need in the community and filling it. And so thank you for doing that. I think it's great.\n\n54\n00:04:11,060 --> 00:04:17,740\nAnd I hope that somebody picks up the torch in New York and also like in other places as well. Definitely.\n\n55\n00:04:18,060 --> 00:04:19,740\nI want people to follow your example.\n\n56\n00:04:21,380 --> 00:04:22,700\nOkay, great. So\n\n57\n00:04:23,040 --> 00:04:24,520\nlet's also talk about\n\n58\n00:04:25,080 --> 00:04:27,260\nthe thing you talked about at RemixConf\n\n59\n00:04:27,800 --> 00:04:29,660\nearlier this year, which was MDX.\n\n60\n00:04:30,300 --> 00:04:30,800\nSo,\n\n61\n00:04:31,920 --> 00:04:36,400\nyou know what, actually, before we get into that, I'm kind of curious about your job as well.\n\n62\n00:04:37,300 --> 00:04:40,160\nSo you said you work at a company that\n\n63\n00:04:40,520 --> 00:04:41,660\nhelps with the\n\n64\n00:04:42,180 --> 00:04:48,260\nelementary education or that sort of thing. Can you kind of explain a little bit more about what your company does?\n\n65\n00:04:48,680 --> 00:04:50,400\nYeah, so I work at New Zella.\n\n66\n00:04:50,980 --> 00:05:04,780\nWe provide a lot of different types of content and resources that teachers can use to teach concepts to their students, whether that's in like English, language arts, science, other areas as well. And 1 of the great things about the\n\n67\n00:05:06,820 --> 00:05:29,440\ncontent that we have available to students is that teachers can adjust the level of the content based off of where the specific student is at. So everyone in the classroom is able to get access to the same like core concepts in terms of like learning key terms or learning about historical events. But they're able to read it at their reading level. So if they're\n\n68\n00:05:30,060 --> 00:05:34,620\nat a higher reading level, then their vocabulary would be more complex and\n\n69\n00:05:35,080 --> 00:05:36,540\nthe article may be longer.\n\n70\n00:05:36,900 --> 00:05:40,220\nIf they're at a different reading level, then there may be like different\n\n71\n00:05:40,840 --> 00:05:47,980\nwords that are better suited to where they're at so that they're able to really get the most out of the material that they're\n\n72\n00:05:48,960 --> 00:05:51,240\nconsuming. And we have a lot of different activities,\n\n73\n00:05:51,580 --> 00:05:52,220\nlike quizzes\n\n74\n00:05:53,080 --> 00:05:57,240\nand ways to check whether or not a student is actually\n\n75\n00:05:58,360 --> 00:05:58,860\ngaining\n\n76\n00:06:00,060 --> 00:06:08,940\nthe knowledge inside that we're hoping from specific pieces of content. And at Nozella, I focus specifically on our assignments feature. So the\n\n77\n00:06:10,240 --> 00:06:12,020\nmain way that teachers are interfacing\n\n78\n00:06:12,440 --> 00:06:13,380\nwith their students.\n\n79\n00:06:14,380 --> 00:06:16,180\nYeah, well, That's very interesting.\n\n80\n00:06:17,320 --> 00:06:25,900\nI imagine you're probably not doing this, but my first thought was, oh, well, like you have the same content just like adjusted for the reading level.\n\n81\n00:06:26,280 --> 00:06:33,360\nIt sounds like a job that AI could help with a lot, actually, like just start with the, here's the full, like most complex\n\n82\n00:06:33,900 --> 00:06:34,400\ncontent,\n\n83\n00:06:35,980 --> 00:06:39,120\nand then could you make this, but make it\n\n84\n00:06:39,440 --> 00:06:45,120\nprogressively lower reading levels? Are you using AI for that, or is that all by humans right now?\n\n85\n00:06:46,660 --> 00:06:50,560\nSo my understanding is that we're not currently using AI for that. We have\n\n86\n00:06:51,020 --> 00:06:51,880\nhad this functionality\n\n87\n00:06:52,280 --> 00:06:54,300\nsince before I joined in 2020.\n\n88\n00:06:54,600 --> 00:06:55,940\nSo it has been around\n\n89\n00:06:56,840 --> 00:06:57,600\nthat functionality\n\n90\n00:06:58,080 --> 00:06:58,760\nsince pre-AI,\n\n91\n00:06:59,140 --> 00:07:02,060\nbut I do know that we are exploring ways that we can\n\n92\n00:07:02,440 --> 00:07:07,160\nincorporate AI to like increase our impact in scale in different areas. So\n\n93\n00:07:07,660 --> 00:07:09,020\nyeah, it's definitely something\n\n94\n00:07:09,440 --> 00:07:10,820\nthat is a conversation.\n\n95\n00:07:11,760 --> 00:07:13,840\nYeah, yeah, it's very interesting. How cool.\n\n96\n00:07:14,640 --> 00:07:15,460\nOkay, great.\n\n97\n00:07:15,760 --> 00:07:22,860\nThat just was very interesting to me. And I always really appreciate people who are working in the education, especially for\n\n98\n00:07:23,300 --> 00:07:31,020\nyouth. I think that is just really critical. So thank you for working there. I think that's a really awesome thing you're doing.\n\n99\n00:07:31,560 --> 00:07:33,940\nOkay, so let's talk about MDX then.\n\n100\n00:07:34,640 --> 00:07:35,140\nSo,\n\n101\n00:07:36,060 --> 00:07:39,340\nmaybe, I always like to try and start with the problems\n\n102\n00:07:39,960 --> 00:07:47,460\nand then introduce the solution that way. Can you kind of talk about some of the problems that MDX is intended to solve and then how it solves it.\n\n103\n00:07:48,820 --> 00:07:53,900\nOkay, so if you're writing a blog and you decide that you want to use Markdown\n\n104\n00:07:54,440 --> 00:07:58,200\nfor like the language or syntax that you're using to write your content,\n\n105\n00:07:58,940 --> 00:07:59,440\nit's\n\n106\n00:08:00,360 --> 00:08:03,540\nsimple if someone's familiar with Markdown to quickly\n\n107\n00:08:04,020 --> 00:08:05,660\njust like get information\n\n108\n00:08:06,000 --> 00:08:08,200\nout of their head and into Markdown.\n\n109\n00:08:09,120 --> 00:08:11,360\nBut when you want to create a more complex\n\n110\n00:08:11,680 --> 00:08:13,720\nexperience, so if you want to have those interactive\n\n111\n00:08:14,040 --> 00:08:15,220\nelements within\n\n112\n00:08:15,600 --> 00:08:20,960\nyour content that are ad hoc, depending on the content, are very specific to that specific\n\n113\n00:08:21,340 --> 00:08:22,480\npiece of content.\n\n114\n00:08:23,320 --> 00:08:28,580\nMarkdown isn't super flexible about creating these custom elements and custom experiences.\n\n115\n00:08:30,040 --> 00:08:32,299\nAnd then there's also a lot of like\n\n116\n00:08:34,240 --> 00:08:41,340\nsomething in Markdown, then Markdown is going to like output the same HTML given like similar like input.\n\n117\n00:08:41,679 --> 00:08:52,000\nBut there's going to be sometimes where you may be writing a link in markdown and depending on if it's like an internal link or an external link, you may want the markup for that content to look different.\n\n118\n00:08:52,900 --> 00:08:53,600\nSo with\n\n119\n00:08:54,720 --> 00:08:58,000\nmarkdown, it's always going to give you like the same output, which is,\n\n120\n00:08:59,480 --> 00:09:00,980\nit's probably okay,\n\n121\n00:09:01,420 --> 00:09:02,940\nbut it depends on like,\n\n122\n00:09:04,340 --> 00:09:06,920\nyou may have requirements that you need\n\n123\n00:09:07,780 --> 00:09:08,280\nthe\n\n124\n00:09:09,000 --> 00:09:19,780\nstarting links to have different markup for accessibility purposes. Or if you're using a framework and you want to like preload internal links, but not external links, things like that, then you would,\n\n125\n00:09:20,660 --> 00:09:23,240\nit would be helpful if you had a way where you could\n\n126\n00:09:24,480 --> 00:09:31,860\nstart in markdown that's written, output different markup, as opposed to always like treating the same types of HTML elements the same.\n\n127\n00:09:32,540 --> 00:09:34,180\nYeah, yeah, that makes lots of sense.\n\n128\n00:09:35,140 --> 00:09:39,660\nSo in my mind, it kind of is, well, it's MDX. So like, it's very intentional\n\n129\n00:09:39,960 --> 00:09:40,460\nin,\n\n130\n00:09:40,840 --> 00:09:41,880\nyou know, the JSX\n\n131\n00:09:42,620 --> 00:09:43,760\nrelationship there.\n\n132\n00:09:44,240 --> 00:09:46,360\nAnd in my mind, it's kind of like\n\n133\n00:09:47,220 --> 00:09:53,340\ndoing for Markdown what JSX did for HTML, which is like bring it into something that can be dynamic\n\n134\n00:09:54,020 --> 00:09:54,880\ninto like\n\n135\n00:09:55,200 --> 00:09:59,700\na language that we can write rules around and stuff like that.\n\n136\n00:10:00,180 --> 00:10:10,380\nAnd so for my own blog, when I started wanting to use MDX, it was because I wanted interactive pieces in my blog posts. So like you can click buttons and different things like that. So\n\n137\n00:10:11,680 --> 00:10:19,020\nyeah, I think it's a really cool idea. I remember when MDX first came out, there were a lot of different experiments\n\n138\n00:10:20,940 --> 00:10:23,960\nof trying to make Markdown a little bit more\n\n139\n00:10:24,400 --> 00:10:24,900\ndynamic\n\n140\n00:10:25,760 --> 00:10:29,600\nand MDX just really rocks. So what do\n\n141\n00:10:30,060 --> 00:10:31,580\nyou use MDX for?\n\n142\n00:10:32,180 --> 00:10:37,280\nYeah, so I use MDX on my website. So when I create blog articles,\n\n143\n00:10:38,040 --> 00:10:38,860\nthere's certain\n\n144\n00:10:39,520 --> 00:10:43,100\nelements that I may want to stand out or have more interactive\n\n145\n00:10:43,660 --> 00:10:44,160\ntypes\n\n146\n00:10:44,580 --> 00:10:45,080\nof\n\n147\n00:10:45,400 --> 00:10:46,240\ncode elements.\n\n148\n00:10:48,140 --> 00:10:59,440\nIf I'm writing an article about a React component, I can actually import the React component into the article. So you can also you can see the code, but then you can see like, how does this component actually\n\n149\n00:11:00,180 --> 00:11:02,460\nbehave in inside of\n\n150\n00:11:02,960 --> 00:11:09,240\nthe article and you don't have to have like an external embed. Like you can do, you can have everything\n\n151\n00:11:10,080 --> 00:11:11,500\nlocal to your\n\n152\n00:11:11,820 --> 00:11:14,880\nsite if you're using MDX or local to\n\n153\n00:11:15,280 --> 00:11:19,180\nlike, maybe local is not the right word, but basically you don't have to rely on\n\n154\n00:11:19,940 --> 00:11:22,940\nlike an external site like CodeSandbox or\n\n155\n00:11:23,640 --> 00:11:29,760\nCodePen in order to host these code samples, you can do everything like locally using React components and MDS.\n\n156\n00:11:30,480 --> 00:11:48,260\nThere's a lot that I want to do with MDX that I feel like I haven't fully, fully explored yet, but I'm super excited about the potential and opportunities for if there's something that I do want to deliver within a content experience, I know that I can do that with MDX.\n\n157\n00:11:48,960 --> 00:11:50,460\nSome examples of\n\n158\n00:11:51,560 --> 00:11:57,100\nhow MDX uses a learning tool is if you've seen the new React documentation,\n\n159\n00:11:58,140 --> 00:12:05,780\nit's a lot more interactive now. So that if you want to get more information about certain parts of the documentation\n\n160\n00:12:06,340 --> 00:12:06,840\nor\n\n161\n00:12:07,800 --> 00:12:10,340\ndo quiz questions or interact with\n\n162\n00:12:12,040 --> 00:12:17,760\ncode samples and things like that, that's all powered by NDX on the new React site.\n\n163\n00:12:18,140 --> 00:12:20,780\nAnd Then I've seen on the Prisma documentation,\n\n164\n00:12:21,680 --> 00:12:28,940\nthey have their examples are all, you can either switch it from TypeScript or JavaScript to the examples that they show.\n\n165\n00:12:29,380 --> 00:12:31,580\nThat's a React component that they created.\n\n166\n00:12:32,080 --> 00:12:33,540\nSo they can write the\n\n167\n00:12:33,900 --> 00:12:35,420\ndocumentation and markdown,\n\n168\n00:12:36,040 --> 00:12:36,540\nhave\n\n169\n00:12:36,880 --> 00:12:40,340\na React component inside the documentation, and then based off of\n\n170\n00:12:41,040 --> 00:12:44,940\nthe state of that component, then it can switch back and forth between TypeScript\n\n171\n00:12:45,360 --> 00:12:51,180\nand JavaScript so that folks are able to quickly get the information they need in the language that they need.\n\n172\n00:12:51,580 --> 00:12:55,660\nSo, I definitely feel like there's a lot of opportunities to like enhance\n\n173\n00:12:55,960 --> 00:12:59,200\nthe learning experience like how you're doing on your website.\n\n174\n00:13:00,420 --> 00:13:04,260\nYeah, yeah. I am also using MDX on my current website\n\n175\n00:13:04,640 --> 00:13:08,700\nAnd in fact the folks who are going through epic web right now are\n\n176\n00:13:09,020 --> 00:13:11,140\nall of the instructions and everything\n\n177\n00:13:11,740 --> 00:13:13,540\neven like the diff tab\n\n178\n00:13:14,380 --> 00:13:17,820\nThat will show you the difference between your work and the finished version.\n\n179\n00:13:18,220 --> 00:13:19,660\nThat's all powered by MDX.\n\n180\n00:13:20,440 --> 00:13:22,180\nAnd so it's a very\n\n181\n00:13:22,940 --> 00:13:23,440\npowerful\n\n182\n00:13:23,760 --> 00:13:24,660\npiece of technology.\n\n183\n00:13:25,900 --> 00:13:27,040\nAnd yeah,\n\n184\n00:13:28,480 --> 00:13:30,600\nI'm a super fan, for sure.\n\n185\n00:13:31,260 --> 00:13:33,060\nThere's a lot that you can do with it.\n\n186\n00:13:34,020 --> 00:13:34,520\nNow,\n\n187\n00:13:34,960 --> 00:13:36,160\nfor a lot of people,\n\n188\n00:13:36,500 --> 00:13:38,660\nthis is all about content is the primary\n\n189\n00:13:39,440 --> 00:13:40,780\nidea behind MDX.\n\n190\n00:13:41,320 --> 00:13:42,940\nFor a lot of folks, I think\n\n191\n00:13:44,340 --> 00:13:44,840\nthe\n\n192\n00:13:45,780 --> 00:13:52,100\ncontent management systems don't typically deal in MDX. Like most CMSs, whether they're headless or otherwise,\n\n193\n00:13:52,440 --> 00:13:58,220\nare more like WYSIWYG or something like that. So where do you feel like MDX fits in with,\n\n194\n00:13:59,740 --> 00:14:00,900\nlike, If you were building\n\n195\n00:14:02,080 --> 00:14:03,540\na blog for a client,\n\n196\n00:14:04,300 --> 00:14:07,940\nwould you use MDX or where would that make sense?\n\n197\n00:14:09,240 --> 00:14:10,740\nYeah, that's a good question.\n\n198\n00:14:13,580 --> 00:14:17,300\nI'm imagining that there's like some abstractions that could be built\n\n199\n00:14:18,220 --> 00:14:19,700\non top of MDX.\n\n200\n00:14:20,940 --> 00:14:23,540\nSo I would think probably like if it was like a\n\n201\n00:14:25,320 --> 00:14:32,460\neditor that someone could use, whether they do or don't know Markdown and then maybe have that under the hood.\n\n202\n00:14:32,980 --> 00:14:37,260\nThere'll be like some MDX. So like if they like inserted a certain like\n\n203\n00:14:37,660 --> 00:14:38,660\nalmost like a\n\n204\n00:14:39,280 --> 00:14:44,320\nWordPress shortcode that I would be like actually under the hood like a React component or something.\n\n205\n00:14:44,680 --> 00:14:45,800\nBut I haven't,\n\n206\n00:14:46,120 --> 00:14:46,780\nI haven't,\n\n207\n00:14:47,500 --> 00:14:49,840\nI guess I've mostly used MDX as like,\n\n208\n00:14:50,740 --> 00:14:51,240\neither\n\n209\n00:14:52,360 --> 00:14:56,440\nI'm writing or maintaining the MDX, or like I've seen a lot of like technical\n\n210\n00:14:57,100 --> 00:15:02,300\ndocumentation is written in MDX where the folks that are contributing to the documentation are\n\n211\n00:15:02,620 --> 00:15:10,320\nsomewhat technical since they're interested and are actually contributing to the technical documentation, but I do think that if it's going to be used like\n\n212\n00:15:11,840 --> 00:15:14,560\noutside of that context that it's helpful\n\n213\n00:15:15,720 --> 00:15:19,180\nto probably like have some additional abstraction because it is\n\n214\n00:15:19,940 --> 00:15:22,400\na bit more complicated than simple,\n\n215\n00:15:22,900 --> 00:15:23,900\nstraight like vanilla\n\n216\n00:15:24,240 --> 00:15:24,740\nMarkdown.\n\n217\n00:15:26,040 --> 00:15:27,900\nSo there definitely is some complexity\n\n218\n00:15:28,780 --> 00:15:31,220\nand like it'd be helpful if the person is familiar\n\n219\n00:15:31,720 --> 00:15:38,800\nwith React. So I do think that there are some trade-offs depending on how familiar someone is with different parts of\n\n220\n00:15:39,520 --> 00:15:40,220\nthe technologies\n\n221\n00:15:40,580 --> 00:15:45,700\nthat are make up MDX, so Markdown and JSX. If they're familiar with those syntax\n\n222\n00:15:46,420 --> 00:15:50,640\nor somewhat familiar with Markdown, then I think that they can be quickly\n\n223\n00:15:51,040 --> 00:15:59,080\nput up to speed. But I would have concerns about using that in like a CMS where someone's primary job is like I need to deliver information and they\n\n224\n00:15:59,720 --> 00:16:02,060\ndon't necessarily want to learn like a whole new\n\n225\n00:16:02,560 --> 00:16:04,220\nsyntax to deliver that information.\n\n226\n00:16:04,900 --> 00:16:07,240\nYeah, yeah, that makes a lot of sense. I think\n\n227\n00:16:07,800 --> 00:16:08,300\nMarkdown\n\n228\n00:16:08,680 --> 00:16:12,080\nin general is probably better suited for more technical\n\n229\n00:16:13,120 --> 00:16:14,080\ncontent writers,\n\n230\n00:16:15,060 --> 00:16:23,380\nWhich is a shame, honestly, because I really enjoy it and I wish everybody just knew how to write Markdown and it would simplify a lot of things, I think.\n\n231\n00:16:23,940 --> 00:16:25,740\nBut yeah, there are existing CMSs.\n\n232\n00:16:26,460 --> 00:16:26,960\nEpicweb.dev\n\n233\n00:16:27,620 --> 00:16:28,120\nuses\n\n234\n00:16:28,500 --> 00:16:30,980\nSanity and it's super great.\n\n235\n00:16:31,300 --> 00:16:31,800\nSo\n\n236\n00:16:32,140 --> 00:16:33,180\nyeah, good\n\n237\n00:16:33,740 --> 00:16:38,540\nfor our own content that we're writing Documentation blogs and stuff like that. That's cool\n\n238\n00:16:39,020 --> 00:16:42,020\nSo what are the tools that you use along with MDX\n\n239\n00:16:42,340 --> 00:16:45,220\nand or actually maybe let's take it a step lower\n\n240\n00:16:45,820 --> 00:16:50,940\nHow does MDX work like it if I were to say I want to build a blog in MDX\n\n241\n00:16:51,900 --> 00:17:06,800\ntoday and I want it to be in Remix because I'm learning Epic Web Dev, we're learning Remix and stuff, I want to practice my skills. What would be the first couple of things that I'd want to do to be able to start writing content in MDX?\n\n242\n00:17:07,800 --> 00:17:08,300\nOkay,\n\n243\n00:17:09,000 --> 00:17:18,099\nso depending on like what framework you're using, there may be built in support for MDX. So Revex has built in support for MDX. So if you\n\n244\n00:17:18,480 --> 00:17:19,800\ncreate a file\n\n245\n00:17:20,280 --> 00:17:22,220\nand have the MDX extension,\n\n246\n00:17:22,640 --> 00:17:27,940\nthen you're able to immediately start using the MDX syntax, so you can look at the documentation\n\n247\n00:17:28,480 --> 00:17:30,040\nand start writing\n\n248\n00:17:31,100 --> 00:17:34,240\na Markdown file, and then if you had a React component,\n\n249\n00:17:34,920 --> 00:17:40,740\nimporting that into the file and being able to render that. But depending on your needs\n\n250\n00:17:41,040 --> 00:17:41,760\nfor markdown\n\n251\n00:17:42,440 --> 00:17:43,480\nor for MDX,\n\n252\n00:17:44,140 --> 00:17:48,160\nI would definitely recommend folks consider using a tool like MDX Bundler, which you\n\n253\n00:17:48,620 --> 00:17:49,120\ncreated.\n\n254\n00:17:49,540 --> 00:17:54,220\nSo that is a framework agnostic tool that can be used to\n\n255\n00:17:54,960 --> 00:17:55,460\ntransform\n\n256\n00:17:55,880 --> 00:18:03,060\nMDX files into the format that they need to be in to actually be rendered in the browser.\n\n257\n00:18:04,160 --> 00:18:04,660\nSo\n\n258\n00:18:06,040 --> 00:18:14,560\nI guess I would recommend maybe people start with, if they're using a framework, start with what is the built-in MDX support, but then consider a tool like MDX Bundler if\n\n259\n00:18:15,060 --> 00:18:22,440\ntheir needs become more complex or there are certain things that they want to do that are not supported out of the box with their framework. So\n\n260\n00:18:23,140 --> 00:18:28,800\nmost frameworks that have the, if not all of them, that have the built-in MDX support, they're going to\n\n261\n00:18:30,320 --> 00:18:36,600\ntry, they're going to create like or compile those MDX files at build time. So if you have a lot of content,\n\n262\n00:18:38,200 --> 00:18:44,960\ncreate more MDX content, it's going to make it slower for you to build your site. Whereas with MDX Bundler, it would\n\n263\n00:18:45,720 --> 00:18:49,780\nactually do those, compile the MDX into the format that needs to be\n\n264\n00:18:50,160 --> 00:18:52,400\non demand, so as you make a request,\n\n265\n00:18:52,960 --> 00:18:55,460\nso that if you have a ton of content,\n\n266\n00:18:55,840 --> 00:18:58,200\nthat's not going to, like the MDX\n\n267\n00:18:59,340 --> 00:19:02,460\nprocessing isn't going to affect how long your website\n\n268\n00:19:02,920 --> 00:19:03,940\ntakes to build.\n\n269\n00:19:04,900 --> 00:19:10,820\nSo those are, I guess, the 2 places I would recommend people look into as they start to consider using MDX.\n\n270\n00:19:11,520 --> 00:19:13,880\nAnd then MDX, in general, is\n\n271\n00:19:14,600 --> 00:19:17,980\npart of a much larger ecosystem called Unify,\n\n272\n00:19:18,840 --> 00:19:26,700\nwhich is a, they call it a collective. So it's an open source collective of various, like hundreds and hundreds of open source\n\n273\n00:19:27,540 --> 00:19:28,040\nprojects\n\n274\n00:19:28,380 --> 00:19:32,220\nthat are focusing on using content as structured\n\n275\n00:19:32,780 --> 00:19:33,280\ndata.\n\n276\n00:19:34,940 --> 00:19:38,140\nSo with software, you could think of structured data as abstract\n\n277\n00:19:38,760 --> 00:19:39,800\nsyntax trees,\n\n278\n00:19:40,280 --> 00:19:41,340\nwhich are like\n\n279\n00:19:41,820 --> 00:19:46,860\na more verbose representation of the human readable JavaScript that you may be writing\n\n280\n00:19:47,680 --> 00:19:51,240\nthat is closer to what your computer is actually interpreting\n\n281\n00:19:52,540 --> 00:19:53,680\nas it's rendering\n\n282\n00:19:54,060 --> 00:19:56,380\nthe JavaScript logic and things of that nature.\n\n283\n00:19:56,740 --> 00:19:59,940\nBut the cool thing about abstract syntax trees is\n\n284\n00:20:00,560 --> 00:20:01,060\nthat\n\n285\n00:20:01,560 --> 00:20:03,660\nit makes it a lot easier to programmatically\n\n286\n00:20:04,500 --> 00:20:06,400\nmanipulate and change\n\n287\n00:20:07,380 --> 00:20:07,880\nthe\n\n288\n00:20:08,320 --> 00:20:10,300\ncontent or the data\n\n289\n00:20:10,760 --> 00:20:12,780\nor the code that is written\n\n290\n00:20:13,260 --> 00:20:15,040\nin a safe and predictable\n\n291\n00:20:16,100 --> 00:20:24,520\nway. So if you've used ES1 or Pretty or Under the Hood, they're working with objects and textures to actually do those transformations.\n\n292\n00:20:25,900 --> 00:20:29,440\nAnd MDX is similar in some ways in terms of\n\n293\n00:20:30,140 --> 00:20:33,420\nthe ways that it's actually like figuring out given\n\n294\n00:20:33,900 --> 00:20:34,940\ncertain MDX,\n\n295\n00:20:36,280 --> 00:20:40,780\nwhat is the like desired output that we need to have and like the final\n\n296\n00:20:41,440 --> 00:20:51,140\nbundle so that it has like the content that you wrote, but it also has the React components that you've imported or created within this file, and everything is working\n\n297\n00:20:51,960 --> 00:20:52,660\nas expected.\n\n298\n00:20:53,740 --> 00:20:59,000\nOr you can also, oh, OK, I'll let you. No, no, no. You can also what?\n\n299\n00:21:01,680 --> 00:21:03,180\nSo I guess,\n\n300\n00:21:04,900 --> 00:21:14,280\nin terms of the abstract and text trees and MDX part of it is like actually like getting MDX into something that the browser can render. But then there's also like, if you,\n\n301\n00:21:15,660 --> 00:21:21,140\nwritten something in MDX, which I kind of pointed to earlier, of like, say you have a link\n\n302\n00:21:22,440 --> 00:21:28,260\nthat you've written within an MDX file, you can use something called component shadowing in MDX,\n\n303\n00:21:29,100 --> 00:21:31,100\nwhere you override the functionality\n\n304\n00:21:31,400 --> 00:21:34,540\nof HTML elements. So you're basically like given,\n\n305\n00:21:35,080 --> 00:21:36,840\nI know that like this MDX\n\n306\n00:21:37,360 --> 00:21:40,620\ntypically would render like this HTML element,\n\n307\n00:21:41,480 --> 00:21:47,140\nbut instead whenever I have this HTML element that would be rendered, I want to like have some\n\n308\n00:21:47,700 --> 00:21:48,680\ncustom component\n\n309\n00:21:49,300 --> 00:21:59,560\nthat is rendered. So you could have your own custom link component that has additional markup beyond what you would get out of the box with MDX. And so all of those transformations\n\n310\n00:22:00,120 --> 00:22:02,660\nare happening with the different tools within\n\n311\n00:22:03,000 --> 00:22:03,500\nMDX\n\n312\n00:22:04,340 --> 00:22:04,840\necosystem.\n\n313\n00:22:05,940 --> 00:22:11,360\nYeah, yeah, I actually use that quite a bit because you get not only\n\n314\n00:22:11,760 --> 00:22:14,660\ncomponent shadowing with like, well, so as an example,\n\n315\n00:22:15,140 --> 00:22:17,860\nthe headings in the Epic Web Dev\n\n316\n00:22:18,240 --> 00:22:18,740\nWorkshop\n\n317\n00:22:19,180 --> 00:22:31,540\ninstructions. Those are all linkable, and I'm using a component for component shadowing. So instead of a regular H1, it's rendering my component instead, which will render an H1, but also renders the link and all that.\n\n318\n00:22:32,100 --> 00:22:34,780\nAnd then on top of that, you can also\n\n319\n00:22:35,380 --> 00:22:37,400\nuse that same feature for adding\n\n320\n00:22:37,720 --> 00:22:43,800\ncomponents that your MDX can render without actually having to import that. And so\n\n321\n00:22:44,380 --> 00:23:01,420\nI have like the people who've gone through the workshops now probably have found a couple of places where it has like a file and then you click on that and it'll open up in your editor and stuff. That's a component that I'm using called like launching editor or something like that or inline file.\n\n322\n00:23:02,220 --> 00:23:05,460\nYeah, using that a lot. It's very, very, very cool\n\n323\n00:23:05,800 --> 00:23:07,300\nthat you can do that.\n\n324\n00:23:07,640 --> 00:23:10,900\nSo you mentioned a bunch of things I wanted to also talk about,\n\n325\n00:23:11,320 --> 00:23:13,680\nor just reiterate what you said,\n\n326\n00:23:14,060 --> 00:23:19,620\nthat you recommend people use the built-in support for MDX in the frameworks that they're using.\n\n327\n00:23:20,140 --> 00:23:21,800\nI agree with that because\n\n328\n00:23:22,200 --> 00:23:23,180\na lot of times\n\n329\n00:23:23,560 --> 00:23:28,000\npeople will jump straight into the more complex solution with MDX Bundler\n\n330\n00:23:28,520 --> 00:23:31,160\nand find out that like, wow, this is actually,\n\n331\n00:23:32,040 --> 00:23:33,220\nit is non-trivial\n\n332\n00:23:33,640 --> 00:23:36,260\nto implement that because compiling MDX\n\n333\n00:23:36,960 --> 00:23:46,940\ncan take some time. Like it's multiple milliseconds, and you know, hundreds of milliseconds in some cases. And so you don't want your users to be waiting for that. So now you have to add caching.\n\n334\n00:23:47,780 --> 00:23:50,820\nIt's a whole thing. And so, yeah, I agree.\n\n335\n00:23:52,120 --> 00:23:57,880\nIf you're just planning on a dozen blog posts or something, probably just use the built-in stuff.\n\n336\n00:23:58,860 --> 00:24:01,340\nSo, yeah, that was a good call out too.\n\n337\n00:24:02,640 --> 00:24:06,680\nAnd yeah, we got into abstract syntax trees. Like we've got\n\n338\n00:24:07,120 --> 00:24:09,520\non my personal blog and also on\n\n339\n00:24:09,920 --> 00:24:10,780\nEpic Web,\n\n340\n00:24:11,820 --> 00:24:12,840\nwe've got automatic\n\n341\n00:24:13,400 --> 00:24:14,680\ntransforms that are happening\n\n342\n00:24:15,180 --> 00:24:19,740\non the MDX. That's actually how the diff works is I have a transform on the,\n\n343\n00:24:20,220 --> 00:24:33,860\nwell, actually, no, I'm generating the MDX there, but like I've got a number of transforms that will automatically add things to different URLs and stuff. So that unified ecosystem that you mentioned is super, super powerful. You can do a lot of stuff with that.\n\n344\n00:24:35,240 --> 00:24:35,740\nSo\n\n345\n00:24:36,820 --> 00:24:40,580\nyeah, I think like we covered a lot of ground. Is there anything\n\n346\n00:24:41,400 --> 00:24:44,760\nthat you wanted to talk about with MDX that we didn't really get to?\n\n347\n00:24:45,900 --> 00:24:47,460\nYes, So I guess\n\n348\n00:24:47,780 --> 00:24:52,880\njust like 1 more specific thing about like the unified ecosystem. So if you're using MDX,\n\n349\n00:24:53,500 --> 00:24:56,500\nlike 2 probably most relevant would be\n\n350\n00:24:56,840 --> 00:24:57,340\nlike,\n\n351\n00:24:58,260 --> 00:25:14,180\nI guess areas that you should look into are re-height plugins and re-mark plugins. So those are, can be used to transform HTML and they can also be used to transform a markdown depending on what part of the process you would like to manipulate the\n\n352\n00:25:14,640 --> 00:25:17,620\ncode in. And so there are some like pre-existing\n\n353\n00:25:18,580 --> 00:25:20,260\nRemark and Rehype plugins\n\n354\n00:25:20,840 --> 00:25:24,420\nthat exist, but you can also create your own like custom\n\n355\n00:25:26,320 --> 00:25:33,760\nRehype and Remark plugins. And the naming would be based off of like which if you're editing the transforming the markdown or transforming the HTML.\n\n356\n00:25:34,200 --> 00:25:35,780\nAnd so I know in,\n\n357\n00:25:36,140 --> 00:25:44,020\nI think that's on the unified site. They have some examples or unified and the MDFGS site. They have examples of how you would,\n\n358\n00:25:45,140 --> 00:25:46,560\nwrite your own plugins.\n\n359\n00:25:47,320 --> 00:25:47,820\nSo.\n\n360\n00:25:49,800 --> 00:25:51,120\n1 that I had written,\n\n361\n00:25:51,440 --> 00:25:53,980\nwas to like create a table of content\n\n362\n00:25:55,860 --> 00:25:57,080\ndynamically given\n\n363\n00:25:57,560 --> 00:26:04,500\na content or it's more so not creating the table of contents but creating the data that we would need to construct the table of contents.\n\n364\n00:26:05,020 --> 00:26:07,900\nSo for every single header, getting the ID,\n\n365\n00:26:08,360 --> 00:26:10,740\nwhich would be like, if it's like a multi-word\n\n366\n00:26:11,120 --> 00:26:13,240\nheader, like making sure it's slugified\n\n367\n00:26:13,820 --> 00:26:14,320\nand,\n\n368\n00:26:15,040 --> 00:26:20,340\nthen also having like the human readable name that we would want to display in the table of contents.\n\n369\n00:26:21,600 --> 00:26:24,060\nSo that can be done by creating\n\n370\n00:26:24,520 --> 00:26:25,620\na rehype plugin,\n\n371\n00:26:25,960 --> 00:26:26,460\nwhich\n\n372\n00:26:27,340 --> 00:26:28,400\nat a high level,\n\n373\n00:26:28,740 --> 00:26:31,860\nwe use like this Unis util visit\n\n374\n00:26:32,860 --> 00:26:33,360\npackage,\n\n375\n00:26:33,740 --> 00:26:40,620\nwhich would allow you to recursively walk through the content and identify all of the H2 headings. So like I said,\n\n376\n00:26:41,340 --> 00:26:44,200\nnested, you could you could just find them all\n\n377\n00:26:45,040 --> 00:26:46,580\nand then grab the anchor text\n\n378\n00:26:47,840 --> 00:26:51,140\nand return an object that has, like I said earlier,\n\n379\n00:26:51,960 --> 00:26:58,360\nthe ID that you set, actually navigate to that heading as well as the text associated with that heading.\n\n380\n00:26:59,140 --> 00:27:01,580\nAnd then that data can then be\n\n381\n00:27:02,320 --> 00:27:06,720\nautomatically for every single piece of MDX content. As it's processed, you have access\n\n382\n00:27:07,040 --> 00:27:07,540\nto\n\n383\n00:27:10,080 --> 00:27:25,240\nthe table of contents data. So that's something, I guess like the specifics of how that's implemented is a little bit more complex, but the high level is like to create this Rehive plugin to get all of the H2 headings and then actually returning that. So whenever you have\n\n384\n00:27:25,640 --> 00:27:26,400\nyour MDX,\n\n385\n00:27:27,380 --> 00:27:30,900\nyou'll have access to, if you wanted to grab that data\n\n386\n00:27:31,940 --> 00:27:36,640\nalongside Azure rendering the MDX, you can also have access to the Table of Contents data,\n\n387\n00:27:37,040 --> 00:27:37,940\nand then conditionally\n\n388\n00:27:38,440 --> 00:27:39,340\ncreate a\n\n389\n00:27:39,640 --> 00:27:43,840\nTable of Contents component, where you're passing in the data that was parked\n\n390\n00:27:44,480 --> 00:27:44,980\nfrom\n\n391\n00:27:46,460 --> 00:27:53,620\nthe Rehite plugin as opposed to having to manually write the Table of Contents every single time you create an article\n\n392\n00:27:54,160 --> 00:27:55,580\nor having to,\n\n393\n00:27:56,680 --> 00:27:57,600\nwhat's it called?\n\n394\n00:27:58,680 --> 00:28:04,180\nOr having to, if you're editing something and something changes, like making sure that it's always in\n\n395\n00:28:05,140 --> 00:28:11,680\nsync. So that's definitely something I think I would encourage folks to look into, like how they could create their own plugins if there's some functionality\n\n396\n00:28:12,560 --> 00:28:14,180\nthat they want. And\n\n397\n00:28:15,220 --> 00:28:19,780\nBecause, yes, there's a lot of plugins in the ecosystem, but there's also the potential to\n\n398\n00:28:20,460 --> 00:28:24,520\nreally customize the experience based on what you need for your site.\n\n399\n00:28:26,120 --> 00:28:39,680\nOpening the file in the code editor, I'm sure that wasn't necessarily an existing plugin, but it was super relevant to your use case and you were able to create that. So I think everyone who's interested in like using IndieOx should feel empowered\n\n400\n00:28:40,080 --> 00:28:42,460\nto explore like how they could\n\n401\n00:28:42,880 --> 00:28:44,740\ncan really like transform and tailor\n\n402\n00:28:45,040 --> 00:28:46,740\ntheir content experience to\n\n403\n00:28:47,360 --> 00:28:48,380\nwhat they need.\n\n404\n00:28:49,860 --> 00:28:53,080\nAnd yeah, I think that those cover some of the high.\n\n405\n00:28:53,800 --> 00:29:10,680\nYeah, yeah. High level parts of India. I think that, so the custom plugins are awesome. And I've got some custom plugins that are like 7 lines long, and I've got others that are hundreds of lines long. And so like you can just do a lot of things. And I have 1 that's similar to your table of contents\n\n406\n00:29:11,000 --> 00:29:12,260\nplugin that's kind of interesting.\n\n407\n00:29:13,020 --> 00:29:14,940\nSo like you don't have to\n\n408\n00:29:16,740 --> 00:29:17,240\nmodify\n\n409\n00:29:17,540 --> 00:29:21,680\nthe output. You can just use it to read the structured data\n\n410\n00:29:22,060 --> 00:29:26,340\nfrom that input. And it's not just Markdown, but also as you mentioned, the Rehype\n\n411\n00:29:26,840 --> 00:29:31,420\npackage allows you to parse HTML and turn that into structured content. And\n\n412\n00:29:31,780 --> 00:29:33,340\nit's really, really cool.\n\n413\n00:29:34,820 --> 00:29:35,500\nIf anybody's\n\n414\n00:29:36,460 --> 00:29:38,900\nheard of the Chats with Kent podcast,\n\n415\n00:29:39,480 --> 00:29:41,380\nthat I actually have,\n\n416\n00:29:41,820 --> 00:29:49,260\nand you've been on that podcast actually. I think you were on season 3, so anybody want to go hear more from Monica, you can go listen to that.\n\n417\n00:29:49,740 --> 00:29:51,660\nBut in that I have\n\n418\n00:29:51,980 --> 00:29:55,940\nall of the content is hosted on Simplecast, that's the podcast provider.\n\n419\n00:29:56,740 --> 00:30:05,780\nAnd it's all written in Markdown over there. And then I, or maybe it's, I think they actually turned it into HTML, but I parse it with Rehype, and then I'm able to read,\n\n420\n00:30:06,180 --> 00:30:12,220\nwe have a convention on how we do that so that I can read all of that and then convert it into something that looks more presentable\n\n421\n00:30:12,640 --> 00:30:16,520\non my own website. So it's pretty powerful what you can do with\n\n422\n00:30:17,220 --> 00:30:17,920\nthese plugins.\n\n423\n00:30:18,660 --> 00:30:22,320\nAnd yeah, that's super awesome. Thank you for kind of explaining\n\n424\n00:30:22,800 --> 00:30:25,060\nhow all of that pieces together.\n\n425\n00:30:27,100 --> 00:30:34,440\nYeah, this has been a fun chat. Monica, what's the best way for people to keep up with what you're working on and follow you?\n\n426\n00:30:35,740 --> 00:30:38,500\nI don't know. I used to have a favorite website.\n\n427\n00:30:42,980 --> 00:30:45,040\nI'm on Twitter at IndigitalColor.\n\n428\n00:30:47,220 --> 00:30:49,080\nAnd my website is aboutmonica.com.\n\n429\n00:30:49,920 --> 00:30:50,420\nSo\n\n430\n00:30:50,800 --> 00:30:54,000\nyou can find me there for sure. I don't know about other\n\n431\n00:30:55,520 --> 00:30:58,040\nplaces, but I am on the web and\n\n432\n00:30:58,940 --> 00:31:00,120\nI think Blue Sky\n\n433\n00:31:00,560 --> 00:31:03,360\nand Macedon, I have like the same handle.\n\n434\n00:31:04,700 --> 00:31:06,760\nSo folks can find me in digital color.\n\n435\n00:31:07,660 --> 00:31:08,760\nAll right, awesome.\n\n436\n00:31:09,100 --> 00:31:16,900\nWell, Monica, it's been just such a pleasure to chat with you as always. Thank you so much for giving us some of your time today to chat and hopefully people take a look at MDX\n\n437\n00:31:17,680 --> 00:31:18,180\nand\n\n438\n00:31:18,560 --> 00:31:23,420\nbuild up their own blog or whatever it is that they wanna put together with some dynamic content.\n\n439\n00:31:24,660 --> 00:31:25,160\nYeah.\n\n440\n00:31:25,680 --> 00:31:27,000\nAll right, see y'all later.",
            "text": "[00:00:00] Kent:\nHey everybody, I am excited to be joined by Monica Powell say hi Monica All right, so if you haven't met Monica yet, she's just a delight I have we've crossed paths a number of times I think every time has been at conferences at least in person That conferences bring \n\n[00:00:20] people together, I guess. But yeah, Monica, I think, I'm pretty sure that I met you on Twitter first, but this is like quite a while ago now, maybe 2018 or something like that. Certainly before COVID, that's the new BC. And so, yeah, it's just been a pleasure \n\n[00:00:40] to know you all this time. Monica, could you give our viewers a little intro to yourself? \n\n[00:00:48] Monica:\nSure, hi everyone, I'm Monica Powell. I am a senior software engineer at Newzeala. I work in educational technology, so building software for K through 12 teachers and students. And I'm also a very excited member of the Rack community. So met Kent at a bunch of Rack conferences. I \n\n[00:01:08] founded a React meetup for women at non-binary Rack developers in New York City. This was pre-pandemic. And I'm also just like super excited about like the JavaScript ecosystem and how folks are eager to like open source things and do like knowledge sharing within the community. \n\n[00:01:29] And In general, I'm excited about open source. I am a GitHub star, so I help encourage other folks to contribute to open source and also contribute when I'm able to. \n\n[00:01:40] Kent:\nAwesome, wow, that's quite the list of things that you're involved with. I wanna dive in briefly to the React Robins, I think is what you were talking about. Can you tell us a little bit about that? And is it still running post-COVID or did COVID kind of slow that down? \n\n[00:01:59] Monica:\nYeah. So I would definitely say that COVID slowed down the meetup a little bit. So before the pandemic, I was based in New York City. I relocated during the pandemic. And so currently like the, the meetup is still exists like in, I guess, New York. We had hosted an event earlier this year with some other React groups in New York City. And so that \n\n[00:02:19] was well attended. But yeah, we're not having like regular meetups right now, just in terms of logistics, because like I and some of the other organizers have moved out of the area, some folks out of the country. So yeah, I'm trying to figure out what it looks like. 2020. \n\n[00:02:40] But, I originally started it in 2018. So I was starting to learn more about React and I was like, I'm interested in connecting with other folks who are using React. And I had gone to a lot of women-focused meetup groups and I found them to be very supportive spaces. So like Women \n\n[00:03:01] Who Code, I've also gone to like Rights-Free Code and some other ones that either like focus specifically on women or women and non-binary folks. And I felt like it was like a supportive way to learn new technologies and also have the opportunity to like speak and things like that, which is also \n\n[00:03:21] available at other meetups as well that are open to a wider audience or focus on a wider audience. But I really wanted to create something where I felt like I could have an impact on improving the experience for other women and non-binary folks. And I also had the opportunity to collaborate with some of the other meetups in New \n\n[00:03:41] York City from the beginning. So I definitely felt like there was a lot of support both within the local React community and then also from the React core team as well to figure out how they could best support the initiatives that I was learning. \n\n[00:03:56] Kent:\nI just think that is so awesome. It's just an example of somebody seeing a need in the community and filling it. And so thank you for doing that. I think it's great. And I hope that somebody picks up the torch in New York and also like in other places as well. \n\n[00:04:17] Definitely. I want people to follow your example. Okay, great. So let's also talk about the thing you talked about at RemixConf earlier this year, which was MDX. So, you know what, actually, before we get into that, I'm kind of curious about your job as well. \n\n[00:04:37] So you said you work at a company that helps with the elementary education or that sort of thing. Can you kind of explain a little bit more about what your company does? \n\n[00:04:48] Monica:\nYeah, so I work at New Zella. We provide a lot of different types of content and resources that teachers can use to teach concepts to their students, whether that's in like English, language arts, science, other areas as well. And 1 of the great things about the content that we have available to \n\n[00:05:08] students is that teachers can adjust the level of the content based off of where the specific student is at. So everyone in the classroom is able to get access to the same like core concepts in terms of like learning key terms or learning about historical events. But they're able to read it at their reading level. So if \n\n[00:05:28] they're at a higher reading level, then their vocabulary would be more complex and the article may be longer. If they're at a different reading level, then there may be like different words that are better suited to where they're at so that they're able to really get the most out of the material that they're \n\n[00:05:48] consuming. And we have a lot of different activities, like quizzes and ways to check whether or not a student is actually gaining the knowledge inside that we're hoping from specific pieces of content. And at Nozella, I focus specifically on our assignments feature. So the \n\n[00:06:10] main way that teachers are interfacing with their students. \n\n[00:06:14] Kent:\nYeah, well, That's very interesting. I imagine you're probably not doing this, but my first thought was, oh, well, like you have the same content just like adjusted for the reading level. It sounds like a job that AI could help with a lot, actually, like just start with the, here's the full, like most complex content, \n\n[00:06:35] and then could you make this, but make it progressively lower reading levels? Are you using AI for that, or is that all by humans right now? \n\n[00:06:46] Monica:\nSo my understanding is that we're not currently using AI for that. We have had this functionality since before I joined in 2020. So it has been around that functionality since pre-AI, but I do know that we are exploring ways that we can incorporate AI to like increase our impact in scale in different areas. \n\n[00:07:06] So yeah, it's definitely something that is a conversation. \n\n[00:07:11] Kent:\nYeah, yeah, it's very interesting. How cool. Okay, great. That just was very interesting to me. And I always really appreciate people who are working in the education, especially for youth. I think that is just really critical. So thank you for working there. I think that's a really awesome thing you're doing. Okay, \n\n[00:07:31] so let's talk about MDX then. So, maybe, I always like to try and start with the problems and then introduce the solution that way. Can you kind of talk about some of the problems that MDX is intended to solve and then how it solves it. \n\n[00:07:48] Monica:\nOkay, so if you're writing a blog and you decide that you want to use Markdown for like the language or syntax that you're using to write your content, it's simple if someone's familiar with Markdown to quickly just like get information out of their head and into Markdown. \n\n[00:08:09] But when you want to create a more complex experience, so if you want to have those interactive elements within your content that are ad hoc, depending on the content, are very specific to that specific piece of content. Markdown isn't super flexible about creating these custom elements and custom experiences. \n\n[00:08:30] And then there's also a lot of like something in Markdown, then Markdown is going to like output the same HTML given like similar like input. But there's going to be sometimes where you may be writing a link in markdown and depending on if it's like an internal link or an external link, you may want the markup \n\n[00:08:50] for that content to look different. So with markdown, it's always going to give you like the same output, which is, it's probably okay, but it depends on like, you may have requirements that you need the starting links to have different \n\n[00:09:10] markup for accessibility purposes. Or if you're using a framework and you want to like preload internal links, but not external links, things like that, then you would, it would be helpful if you had a way where you could start in markdown that's written, output different markup, as opposed to always like treating the same types of HTML \n\n[00:09:30] elements the same. \n\n[00:09:32] Kent:\nYeah, yeah, that makes lots of sense. So in my mind, it kind of is, well, it's MDX. So like, it's very intentional in, you know, the JSX relationship there. And in my mind, it's kind of like doing for Markdown what JSX did for HTML, which is like bring it into something that can \n\n[00:09:52] be dynamic into like a language that we can write rules around and stuff like that. And so for my own blog, when I started wanting to use MDX, it was because I wanted interactive pieces in my blog posts. So like you can click buttons and different things like that. So yeah, I think \n\n[00:10:12] it's a really cool idea. I remember when MDX first came out, there were a lot of different experiments of trying to make Markdown a little bit more dynamic and MDX just really rocks. So what do you use MDX for? \n\n[00:10:32] Monica:\nYeah, so I use MDX on my website. So when I create blog articles, there's certain elements that I may want to stand out or have more interactive types of code elements. If I'm writing an article about a React component, I can actually import the React \n\n[00:10:52] component into the article. So you can also you can see the code, but then you can see like, how does this component actually behave in inside of the article and you don't have to have like an external embed. Like you can do, you can have everything local to your site if \n\n[00:11:12] you're using MDX or local to like, maybe local is not the right word, but basically you don't have to rely on like an external site like CodeSandbox or CodePen in order to host these code samples, you can do everything like locally using React components and MDS. There's a lot that I want to do with \n\n[00:11:32] MDX that I feel like I haven't fully, fully explored yet, but I'm super excited about the potential and opportunities for if there's something that I do want to deliver within a content experience, I know that I can do that with MDX. Some examples of how MDX uses \n\n[00:11:53] a learning tool is if you've seen the new React documentation, it's a lot more interactive now. So that if you want to get more information about certain parts of the documentation or do quiz questions or interact with code samples \n\n[00:12:13] and things like that, that's all powered by NDX on the new React site. And Then I've seen on the Prisma documentation, they have their examples are all, you can either switch it from TypeScript or JavaScript to the examples that they show. That's a React component that they created. So they can write the \n\n[00:12:33] documentation and markdown, have a React component inside the documentation, and then based off of the state of that component, then it can switch back and forth between TypeScript and JavaScript so that folks are able to quickly get the information they need in the language that they need. So, I definitely feel like there's a lot of \n\n[00:12:54] opportunities to like enhance the learning experience like how you're doing on your website. \n\n[00:13:00] Kent:\nYeah, yeah. I am also using MDX on my current website And in fact the folks who are going through epic web right now are all of the instructions and everything even like the diff tab That will show you the difference between your work and the finished version. That's all powered by MDX. \n\n[00:13:20] And so it's a very powerful piece of technology. And yeah, I'm a super fan, for sure. There's a lot that you can do with it. Now, for a lot of people, this is all about content is the primary idea behind MDX. \n\n[00:13:41] For a lot of folks, I think the content management systems don't typically deal in MDX. Like most CMSs, whether they're headless or otherwise, are more like WYSIWYG or something like that. So where do you feel like MDX fits in with, like, If you were building \n\n[00:14:02] a blog for a client, would you use MDX or where would that make sense? \n\n[00:14:09] Monica:\nYeah, that's a good question. I'm imagining that there's like some abstractions that could be built on top of MDX. So I would think probably like if it was like a editor that someone could use, whether they do or \n\n[00:14:29] don't know Markdown and then maybe have that under the hood. There'll be like some MDX. So like if they like inserted a certain like almost like a WordPress shortcode that I would be like actually under the hood like a React component or something. But I haven't, I haven't, I guess I've mostly used MDX as \n\n[00:14:49] like, either I'm writing or maintaining the MDX, or like I've seen a lot of like technical documentation is written in MDX where the folks that are contributing to the documentation are somewhat technical since they're interested and are actually contributing to the technical documentation, but I do think that if it's going to \n\n[00:15:09] be used like outside of that context that it's helpful to probably like have some additional abstraction because it is a bit more complicated than simple, straight like vanilla Markdown. So there definitely is some complexity and like it'd \n\n[00:15:29] be helpful if the person is familiar with React. So I do think that there are some trade-offs depending on how familiar someone is with different parts of the technologies that are make up MDX, so Markdown and JSX. If they're familiar with those syntax or somewhat familiar with Markdown, then I think that \n\n[00:15:49] they can be quickly put up to speed. But I would have concerns about using that in like a CMS where someone's primary job is like I need to deliver information and they don't necessarily want to learn like a whole new syntax to deliver that information. \n\n[00:16:04] Kent:\nYeah, yeah, that makes a lot of sense. I think Markdown in general is probably better suited for more technical content writers, Which is a shame, honestly, because I really enjoy it and I wish everybody just knew how to write Markdown and it would simplify a lot of things, I think. But yeah, there are existing \n\n[00:16:25] CMSs. Epicweb.dev uses Sanity and it's super great. So yeah, good for our own content that we're writing Documentation blogs and stuff like that. That's cool So what are the tools that you use along with MDX and or actually maybe let's take it a step lower \n\n[00:16:45] How does MDX work like it if I were to say I want to build a blog in MDX today and I want it to be in Remix because I'm learning Epic Web Dev, we're learning Remix and stuff, I want to practice my skills. What would be the first couple of things that I'd want to do to be able to start writing content \n\n[00:17:06] in MDX? \n\n[00:17:07] Monica:\nOkay, so depending on like what framework you're using, there may be built in support for MDX. So Revex has built in support for MDX. So if you create a file and have the MDX extension, then you're able to immediately start using the MDX syntax, so you can look at the documentation \n\n[00:17:28] and start writing a Markdown file, and then if you had a React component, importing that into the file and being able to render that. But depending on your needs for markdown or for MDX, I would definitely recommend folks consider using a tool like MDX Bundler, which you \n\n[00:17:48] created. So that is a framework agnostic tool that can be used to transform MDX files into the format that they need to be in to actually be rendered in the browser. So I guess I would recommend maybe people start with, if \n\n[00:18:08] they're using a framework, start with what is the built-in MDX support, but then consider a tool like MDX Bundler if their needs become more complex or there are certain things that they want to do that are not supported out of the box with their framework. So most frameworks that have the, if not all of them, that have the built-in MDX support, they're going to \n\n[00:18:30] try, they're going to create like or compile those MDX files at build time. So if you have a lot of content, create more MDX content, it's going to make it slower for you to build your site. Whereas with MDX Bundler, it would actually do those, compile the MDX into the format that needs to be on \n\n[00:18:50] demand, so as you make a request, so that if you have a ton of content, that's not going to, like the MDX processing isn't going to affect how long your website takes to build. So those are, I guess, the 2 places I would recommend people look into as they start to consider using MDX. \n\n[00:19:11] And then MDX, in general, is part of a much larger ecosystem called Unify, which is a, they call it a collective. So it's an open source collective of various, like hundreds and hundreds of open source projects that are focusing on using content as \n\n[00:19:31] structured data. So with software, you could think of structured data as abstract syntax trees, which are like a more verbose representation of the human readable JavaScript that you may be writing that is closer to what your computer is actually interpreting \n\n[00:19:52] as it's rendering the JavaScript logic and things of that nature. But the cool thing about abstract syntax trees is that it makes it a lot easier to programmatically manipulate and change the content or the data or the code that is written \n\n[00:20:13] in a safe and predictable way. So if you've used ES1 or Pretty or Under the Hood, they're working with objects and textures to actually do those transformations. And MDX is similar in some ways in terms of the ways that it's actually like figuring out given \n\n[00:20:33] certain MDX, what is the like desired output that we need to have and like the final bundle so that it has like the content that you wrote, but it also has the React components that you've imported or created within this file, and everything is working as expected. Or \n\n[00:20:54] you can also, oh, OK, I'll let you. \n\n[00:20:56] Kent:\nNo, no, no. You can also what? \n\n[00:21:01] Monica:\nSo I guess, in terms of the abstract and text trees and MDX part of it is like actually like getting MDX into something that the browser can render. But then there's also like, if you, written something in MDX, which I kind of pointed to earlier, of like, say you have a link \n\n[00:21:22] that you've written within an MDX file, you can use something called component shadowing in MDX, where you override the functionality of HTML elements. So you're basically like given, I know that like this MDX typically would render like this HTML element, but instead \n\n[00:21:42] whenever I have this HTML element that would be rendered, I want to like have some custom component that is rendered. So you could have your own custom link component that has additional markup beyond what you would get out of the box with MDX. And so all of those transformations are happening with the different tools within \n\n[00:22:03] MDX ecosystem. \n\n[00:22:05] Kent:\nYeah, yeah, I actually use that quite a bit because you get not only component shadowing with like, well, so as an example, the headings in the Epic Web Dev Workshop instructions. Those are all linkable, and I'm using a component for component shadowing. So instead of a regular H1, it's \n\n[00:22:26] rendering my component instead, which will render an H1, but also renders the link and all that. And then on top of that, you can also use that same feature for adding components that your MDX can render without actually having to import that. And so I have like the people \n\n[00:22:46] who've gone through the workshops now probably have found a couple of places where it has like a file and then you click on that and it'll open up in your editor and stuff. That's a component that I'm using called like launching editor or something like that or inline file. Yeah, using that a lot. It's very, very, very cool that you can \n\n[00:23:06] do that. So you mentioned a bunch of things I wanted to also talk about, or just reiterate what you said, that you recommend people use the built-in support for MDX in the frameworks that they're using. I agree with that because a lot of times people will jump straight into the more complex solution \n\n[00:23:26] with MDX Bundler and find out that like, wow, this is actually, it is non-trivial to implement that because compiling MDX can take some time. Like it's multiple milliseconds, and you know, hundreds of milliseconds in some cases. And so you don't want your users to be waiting for that. So now you have to add caching. \n\n[00:23:47] It's a whole thing. And so, yeah, I agree. If you're just planning on a dozen blog posts or something, probably just use the built-in stuff. So, yeah, that was a good call out too. And yeah, we got into abstract syntax trees. Like we've got on my personal \n\n[00:24:07] blog and also on Epic Web, we've got automatic transforms that are happening on the MDX. That's actually how the diff works is I have a transform on the, well, actually, no, I'm generating the MDX there, but like I've got a number of transforms that will automatically add things to different URLs and stuff. \n\n[00:24:28] So that unified ecosystem that you mentioned is super, super powerful. You can do a lot of stuff with that. So yeah, I think like we covered a lot of ground. Is there anything that you wanted to talk about with MDX that we didn't really get to? \n\n[00:24:45] Monica:\nYes, So I guess just like 1 more specific thing about like the unified ecosystem. So if you're using MDX, like 2 probably most relevant would be like, I guess areas that you should look into are re-height plugins and re-mark plugins. So those are, can be used to transform HTML \n\n[00:25:06] and they can also be used to transform a markdown depending on what part of the process you would like to manipulate the code in. And so there are some like pre-existing Remark and Rehype plugins that exist, but you can also create your own like custom Rehype \n\n[00:25:26] and Remark plugins. And the naming would be based off of like which if you're editing the transforming the markdown or transforming the HTML. And so I know in, I think that's on the unified site. They have some examples or unified and the MDFGS site. They have examples of how you would, write your own plugins. \n\n[00:25:47] So. 1 that I had written, was to like create a table of content dynamically given a content or it's more so not creating the table of contents but creating the data that we would need to construct the table of contents. So for every single header, getting the \n\n[00:26:07] ID, which would be like, if it's like a multi-word header, like making sure it's slugified and, then also having like the human readable name that we would want to display in the table of contents. So that can be done by creating a rehype plugin, which at \n\n[00:26:27] a high level, we use like this Unis util visit package, which would allow you to recursively walk through the content and identify all of the H2 headings. So like I said, nested, you could you could just find them all and then grab the anchor text \n\n[00:26:47] and return an object that has, like I said earlier, the ID that you set, actually navigate to that heading as well as the text associated with that heading. And then that data can then be automatically for every single piece of MDX content. As it's processed, you have access to \n\n[00:27:10] the table of contents data. So that's something, I guess like the specifics of how that's implemented is a little bit more complex, but the high level is like to create this Rehive plugin to get all of the H2 headings and then actually returning that. So whenever you have your MDX, you'll have access to, if you wanted to grab that \n\n[00:27:30] data alongside Azure rendering the MDX, you can also have access to the Table of Contents data, and then conditionally create a Table of Contents component, where you're passing in the data that was parked from the Rehite plugin as opposed to having to manually write the Table \n\n[00:27:50] of Contents every single time you create an article or having to, what's it called? Or having to, if you're editing something and something changes, like making sure that it's always in sync. So that's definitely something I think I would encourage folks to look into, like how they could create their own plugins \n\n[00:28:10] if there's some functionality that they want. And Because, yes, there's a lot of plugins in the ecosystem, but there's also the potential to really customize the experience based on what you need for your site. Opening the file in the code editor, I'm sure that wasn't necessarily an existing \n\n[00:28:31] plugin, but it was super relevant to your use case and you were able to create that. So I think everyone who's interested in like using IndieOx should feel empowered to explore like how they could can really like transform and tailor their content experience to what they need. And yeah, I think that \n\n[00:28:51] those cover some of the high. \n\n[00:28:53] Kent:\nYeah, yeah. \n\n[00:28:54] Monica:\nHigh level parts of India. \n\n[00:28:55] Kent:\nI think that, so the custom plugins are awesome. And I've got some custom plugins that are like 7 lines long, and I've got others that are hundreds of lines long. And so like you can just do a lot of things. And I have 1 that's similar to your table of contents plugin that's kind of interesting. So like you don't have to \n\n[00:29:16] modify the output. You can just use it to read the structured data from that input. And it's not just Markdown, but also as you mentioned, the Rehype package allows you to parse HTML and turn that into structured content. And it's really, really cool. If anybody's heard \n\n[00:29:36] of the Chats with Kent podcast, that I actually have, and you've been on that podcast actually. I think you were on season 3, so anybody want to go hear more from Monica, you can go listen to that. But in that I have all of the content is hosted on Simplecast, that's the podcast provider. \n\n[00:29:56] And it's all written in Markdown over there. And then I, or maybe it's, I think they actually turned it into HTML, but I parse it with Rehype, and then I'm able to read, we have a convention on how we do that so that I can read all of that and then convert it into something that looks more presentable on my own website. So it's pretty powerful what you can do with \n\n[00:30:17] these plugins. And yeah, that's super awesome. Thank you for kind of explaining how all of that pieces together. Yeah, this has been a fun chat. Monica, what's the best way for people to keep up with what you're working on and follow you? \n\n[00:30:35] Monica:\nI don't know. I used to have a favorite website. I'm on Twitter at IndigitalColor. And my website is aboutmonica.com. So you can find me there for sure. I don't know about other places, \n\n[00:30:56] but I am on the web and I think Blue Sky and Macedon, I have like the same handle. So folks can find me in digital color. \n\n[00:31:07] Kent:\nAll right, awesome. Well, Monica, it's been just such a pleasure to chat with you as always. Thank you so much for giving us some of your time today to chat and hopefully people take a look at MDX and build up their own blog or whatever it is that they wanna put together with some dynamic content. \n\n[00:31:24] Monica:\nYeah. \n\n[00:31:25] Kent:\nAll right, see y'all later."
          },
          "_type": "videoResource",
          "_id": "1WsDj4v3O4C48HJG2vnDcF",
          "_updatedAt": "2024-03-19T20:25:28Z",
          "muxAsset": {
            "_type": "muxAsset",
            "muxPlaybackId": "4BKcexiW827dC1uGAPHrbA01oVQBBDf7Egnj5SzR9Dh00",
            "muxAssetId": "m3MpBLOQ2VSWlWzDyTtu5Ql9ve7lOU501iFQvMdGPlBA"
          },
          "state": "ready",
          "_createdAt": "2023-10-18T18:09:21Z",
          "title": "Monica Powell.mp4"
        },
        "_id": "B9MrGEg0NpGWTknnF8Pjt1",
        "_updatedAt": "2023-10-18T18:21:24Z",
        "body": "Monica Powell, a senior software engineer specializing in educational technology for K-12 teachers and students, sat down to discuss her work and her involvement in the React community.\n\nMonica is also the founder of React Robins, a meetup group in New York City for women and non-binary React developers. Kent and Monica delve into her journey, discussing the challenges that React Robins has faced due to the COVID-19 pandemic.\n\nThey dive into discussing the potential for MDX, a blend of Markdown and JSX, for creating interactive and rich content. MDX is versatile. Powering blog articles, complex technical documentation, and more.\n\nMonica further elaborates on how MDX integrates into the Unify ecosystem and can be tailored for specific needs through plugins like MDX Bundler.\n\nThe dialogue also covers some of the perceived downsides of MDX, notably its steep learning curve for beginners and its integration challenges with Content Management Systems.\n\nAs the conversation draws to a close, Monica encourages listeners to delve into MDX technology and its myriad applications.\n\n## Resources\n\n- [Monica Powell on Twitter](https://twitter.com/indigitalcolor)\n- [React Robins](https://www.reactrobins.com/)",
        "slug": "examining-mdx-with-monica-powell",
        "solution": null,
        "_type": "interview",
        "title": "Examining MDX with Monica Powell"
      },
      {
        "_id": "WBQDSVdErPwEcA4Fd0g9VU",
        "slug": "efficient-form-management-with-sandrina-pereira",
        "solution": null,
        "_type": "interview",
        "_updatedAt": "2023-10-19T15:13:08Z",
        "title": "Efficient Form Management with Sandrina Pereira",
        "description": "Sandrina Pereira, remote.com staff front-end engineer, advocates digital accessibility. P-O-U-R framework. Streamlining global form management. ",
        "body": "Sandrina Pereira, a staff front-end engineer at remote.com, specializes in digital accessibility and large-scale form management. In a recent podcast, she shares her insights on why digital accessibility is crucial, not just as a human right but also for enhancing user experience.\n\nDigital accessibility is as a multi-faceted domain that benefits everyone. Sandrina follows the P-O-U-R framework to categorize the elements of accessibility: making content Perceivable, Operable, Understandable, and Robust.\n\nWhen discussing her specialization in large-scale form management, Sandrina talks about the intricacies of managing onboarding forms for employees in over 100 countries. She reveals her approach to streamlining this process, which involves the development of a headless system using JSON schemas.\n\nThe podcast segues into the topic of career paths in engineering, contrasting the individual contributor and management tracks. Sandrina mentions that despite her senior role, her passion for coding remains intact. She also appreciates the privilege of aiding in the professional growth of her peers.\n\nFinally, Sandrina stresses the importance of having allies when tackling accessibility challenges and recommends improving communication skills, especially with non-engineers.\n\n## Resources\n\n- [Sandrina Pereira Twitter](https://twitter.com/a_sandrina_p)",
        "videoResource": {
          "_id": "Davc6tzHYCp36XjM2FKtTC",
          "title": "Sandrian Pereira.mp4",
          "_updatedAt": "2024-03-19T20:25:26Z",
          "transcript": {
            "srt": "1\n00:00:00,140 --> 00:00:01,079\nHello everybody,\n\n2\n00:00:01,920 --> 00:00:05,259\nI'm super excited to be joined today by my friend Sandrina.\n\n3\n00:00:06,399 --> 00:00:10,219\nI'm going to try your last name and you can correct me. It's Pereira?\n\n4\n00:00:11,259 --> 00:00:11,759\nPereira.\n\n5\n00:00:12,639 --> 00:00:13,139\nPereira.\n\n6\n00:00:17,600 --> 00:00:23,040\nWell, thank you. That's not the first time that I've tried to pronounce your name on a podcast before so\n\n7\n00:00:23,640 --> 00:00:26,260\nyeah, I don't really have a good 1. It's okay.\n\n8\n00:00:27,340 --> 00:00:29,680\nNo, it's not though like for your\n\n9\n00:00:30,180 --> 00:00:34,520\nPeople who grew up in that you're from Portugal. Is that right? Yeah. Yeah.\n\n10\n00:00:34,940 --> 00:00:41,180\nYeah, so people in Portugal It's like a normal last name. So it's just me. I I'm the 1 at fault here\n\n11\n00:00:42,040 --> 00:00:45,040\nBut yes, thank you so much for joining me and\n\n12\n00:00:45,420 --> 00:00:49,820\nas Sandrine and I go back I always like to talk about how we met.\n\n13\n00:00:50,640 --> 00:00:51,800\nAnd I think,\n\n14\n00:00:52,120 --> 00:00:54,520\nI don't know if I knew you before\n\n15\n00:00:54,940 --> 00:00:55,440\nDiscord.\n\n16\n00:00:56,200 --> 00:01:02,920\nI think that's where I met you was in my Discord. Officially, yeah. Yeah, yeah. And we did\n\n17\n00:01:03,740 --> 00:01:04,459\nsome meetups,\n\n18\n00:01:05,019 --> 00:01:07,120\nsome KCD meetups where\n\n19\n00:01:07,740 --> 00:01:13,040\nyou share your screen or answer questions, do like a little, kind of like a talk sort of thing\n\n20\n00:01:13,740 --> 00:01:14,240\nvirtually.\n\n21\n00:01:14,720 --> 00:01:17,180\nAnd You did a couple of those about accessibility.\n\n22\n00:01:17,720 --> 00:01:19,780\nA bunch of people joined, it was pretty cool.\n\n23\n00:01:20,260 --> 00:01:27,420\nAnd we don't really, I don't do, I have the meetups stuff anymore. The bot doesn't really facilitate those on the Discord anymore. But\n\n24\n00:01:27,900 --> 00:01:32,540\nyou, I don't know whether you've been doing this before, but after that, you\n\n25\n00:01:32,960 --> 00:01:39,060\nran a bunch of workshops on accessibility and stuff too, and just been doing a lot of cool stuff with accessibility\n\n26\n00:01:39,520 --> 00:01:40,680\nin the past. So\n\n27\n00:01:41,680 --> 00:01:53,040\nthat is how we got to know each other. I'd love for you to give your own introduction though. So can you tell our audience a little bit about who you are and what you stand for and all that?\n\n28\n00:01:53,400 --> 00:01:55,740\nYeah, so, hey there, I'm Sandrina.\n\n29\n00:01:56,040 --> 00:02:04,540\nI'm from Portugal, but currently I'm based in Copenhagen for a short period of time. That's why I apologize for any troubles with my mic.\n\n30\n00:02:05,900 --> 00:02:09,520\nBut yeah, who I am. Currently, I'm a staff front-end engineer\n\n31\n00:02:09,960 --> 00:02:10,660\nat remote.com.\n\n32\n00:02:11,100 --> 00:02:14,940\nSo it's like a remote company that literally the name is remote.\n\n33\n00:02:16,440 --> 00:02:19,940\nAnd there I'm all over, you know, React ecosystem, headless\n\n34\n00:02:20,740 --> 00:02:21,240\nsystems,\n\n35\n00:02:21,960 --> 00:02:24,220\ncurrently very focused on how to\n\n36\n00:02:24,520 --> 00:02:27,420\ncreate and manage forms at large scale.\n\n37\n00:02:28,020 --> 00:02:28,520\nSo\n\n38\n00:02:29,280 --> 00:02:30,540\nit's pretty intense.\n\n39\n00:02:31,340 --> 00:02:34,700\nAnd you know, the downside of that is that I don't touch Accessibility\n\n40\n00:02:35,260 --> 00:02:44,040\non my daily basis as much as I used to do like 1 year ago But it's still something that I'm really when I see something wrong. I always you know\n\n41\n00:02:45,060 --> 00:02:46,420\ncall out for it. So\n\n42\n00:02:46,720 --> 00:02:50,780\neven if I don't do accessibility on my day to day, it's something I care about.\n\n43\n00:02:52,540 --> 00:02:53,040\nWell,\n\n44\n00:02:53,460 --> 00:03:02,520\nyeah, that's definitely something I wanna talk about today. Also wanna get into some of the design system stuff and the forms at scale. I think that'd be really interesting.\n\n45\n00:03:03,340 --> 00:03:04,040\nAnd so\n\n46\n00:03:04,540 --> 00:03:05,340\nin the workshops,\n\n47\n00:03:05,740 --> 00:03:08,580\nwhere we get into accessibility is actually with forms.\n\n48\n00:03:09,020 --> 00:03:10,820\nWe talked about focus management\n\n49\n00:03:11,400 --> 00:03:15,560\nand proper labeling of fields and that sort of thing.\n\n50\n00:03:16,380 --> 00:03:17,880\nAnd so, yeah,\n\n51\n00:03:18,320 --> 00:03:22,940\nI'd like if you could just give us a like a quick idea of\n\n52\n00:03:24,060 --> 00:03:25,220\nwhy accessibility\n\n53\n00:03:25,800 --> 00:03:26,300\nis\n\n54\n00:03:26,640 --> 00:03:27,140\nimportant.\n\n55\n00:03:27,920 --> 00:03:32,500\nJust pretty quick, like people should know that it's important, but why is it important to you?\n\n56\n00:03:33,860 --> 00:03:39,260\nWhy is it important for me? I don't have a fancy background story like, oh, how did I start in accessibility?\n\n57\n00:03:40,080 --> 00:03:41,780\nBut for me it's important because,\n\n58\n00:03:42,480 --> 00:03:43,160\nyou know,\n\n59\n00:03:43,680 --> 00:03:52,060\nmost people when they started to code, it was for fun, you know, I build websites for fun. But the thing is, when you are a professional software engineer,\n\n60\n00:03:52,360 --> 00:03:58,040\nit's not just for fun. It's for other real people. And it's kind of, you are the architecture,\n\n61\n00:03:58,340 --> 00:04:05,180\nthe architect of the digital world, you know? So the same way we have architects with laws about how to build an accessible\n\n62\n00:04:05,800 --> 00:04:06,300\nbuilding,\n\n63\n00:04:06,860 --> 00:04:09,660\nyou know, we should do the same in the internet.\n\n64\n00:04:10,080 --> 00:04:15,040\nSo if you build something, it's not just for you to use it, it's for other people that are different\n\n65\n00:04:15,360 --> 00:04:20,140\nfrom you. So it's kind of your duty as an engineer to make sure that it's successful\n\n66\n00:04:20,860 --> 00:04:21,600\nfor everyone.\n\n67\n00:04:21,959 --> 00:04:26,260\nAs simple as that. It's like almost a human right, but yeah.\n\n68\n00:04:27,260 --> 00:04:28,580\nYeah, I think that\n\n69\n00:04:30,180 --> 00:04:31,860\nit really comes down to\n\n70\n00:04:32,420 --> 00:04:34,500\ncaring about other people, right?\n\n71\n00:04:35,140 --> 00:04:36,240\nAnd their experience.\n\n72\n00:04:36,960 --> 00:04:41,360\nAnd what I find is that the more accessible I make my application\n\n73\n00:04:41,680 --> 00:04:42,180\nto\n\n74\n00:04:43,260 --> 00:04:45,080\nblind people, or\n\n75\n00:04:45,560 --> 00:04:47,620\nto people who can only use a keyboard\n\n76\n00:04:48,340 --> 00:04:49,040\nand those\n\n77\n00:04:49,400 --> 00:04:49,900\nindividuals,\n\n78\n00:04:50,320 --> 00:04:53,720\nthe better the experience is for everybody as well. Anyway,\n\n79\n00:04:54,560 --> 00:04:55,060\nlike\n\n80\n00:04:55,440 --> 00:04:57,180\nbefore we were using the\n\n81\n00:04:57,720 --> 00:04:59,120\nphysical building metaphor,\n\n82\n00:05:00,060 --> 00:05:06,080\nhaving a ramp that leads to your front door. Like maybe you've got steps because your front door is up there\n\n83\n00:05:06,400 --> 00:05:13,160\na ways or whatever, but having a ramp is useful for wheelchair users, but it's also useful for anybody who has\n\n84\n00:05:13,480 --> 00:05:16,500\na dolly that they're pulling a big box or\n\n85\n00:05:17,720 --> 00:05:19,320\neven those kind of\n\n86\n00:05:19,740 --> 00:05:23,300\ntemporary disabilities that we talked about, or maybe you're\n\n87\n00:05:23,920 --> 00:05:25,320\ncoming back to the web,\n\n88\n00:05:26,900 --> 00:05:33,000\nmaybe you're holding a baby and so you can only use 1 hand and so being able to navigate around\n\n89\n00:05:33,540 --> 00:05:37,400\nwith 1 hand is very useful, or maybe you broke your arm or whatever. So everybody,\n\n90\n00:05:37,840 --> 00:05:41,260\nthe thing is, it's not, accessibility is not necessarily\n\n91\n00:05:41,800 --> 00:05:42,300\nabout\n\n92\n00:05:43,620 --> 00:05:44,520\n10 or 20%\n\n93\n00:05:44,840 --> 00:05:46,040\nof users.\n\n94\n00:05:47,200 --> 00:05:51,240\nIt's about 100% of the users 10 or 20% of the time.\n\n95\n00:05:53,400 --> 00:05:54,940\nAnd so like\n\n96\n00:05:55,460 --> 00:05:57,080\nyour efforts in accessibility\n\n97\n00:05:57,380 --> 00:05:58,180\nwill affect\n\n98\n00:05:58,580 --> 00:05:59,560\na lot more\n\n99\n00:06:00,060 --> 00:06:00,800\nor everybody\n\n100\n00:06:01,400 --> 00:06:09,340\nin a really positive way. Yeah. I must say though that even though we try to sell accessibility as like something that affects everyone\n\n101\n00:06:09,860 --> 00:06:11,500\nor that benefits everyone,\n\n102\n00:06:12,500 --> 00:06:16,180\nif you think about the dark theme and the light theme, which is like a trend nowadays,\n\n103\n00:06:16,720 --> 00:06:17,220\nthat's\n\n104\n00:06:18,400 --> 00:06:19,260\nlike a perk.\n\n105\n00:06:19,600 --> 00:06:22,780\nIt's like a little bonus. Oh, now I have the dark theme. So cool.\n\n106\n00:06:23,180 --> 00:06:26,060\nBut for those 10 or 20% of people,\n\n107\n00:06:26,380 --> 00:06:27,180\nthe minority,\n\n108\n00:06:28,260 --> 00:06:35,600\nthey are really the ones that really, really appreciate it because for them it's not a perk. For them it's what really makes a difference, to enjoy\n\n109\n00:06:36,000 --> 00:06:45,560\nthe web, to read the newspaper because they do it digitally more easily than in a real paper. Stuff like that that we take for granted\n\n110\n00:06:45,880 --> 00:06:51,300\nand for them is like the difference between having a good day or just you know a bad day.\n\n111\n00:06:52,200 --> 00:06:53,900\nYeah, yeah for sure that like\n\n112\n00:06:54,560 --> 00:06:59,280\nI so I said it affects 100% of the users 20 to 30% of the time\n\n113\n00:06:59,640 --> 00:07:00,340\nbut for\n\n114\n00:07:00,860 --> 00:07:10,120\nusers who use screen readers and can only use a keyboard and stuff, that affects them 100% of the time. And like, can you imagine living that kind of\n\n115\n00:07:10,760 --> 00:07:12,940\na life where you're just constantly\n\n116\n00:07:13,820 --> 00:07:16,440\nfacing these different websites or\n\n117\n00:07:17,140 --> 00:07:18,300\nreal world experiences\n\n118\n00:07:18,960 --> 00:07:19,460\nwhere\n\n119\n00:07:19,840 --> 00:07:21,220\nnobody thought about you.\n\n120\n00:07:21,660 --> 00:07:23,260\nThat just, that would stink.\n\n121\n00:07:23,860 --> 00:07:29,200\nI would hate that. That's why the secret is to really care, you know, really care about people.\n\n122\n00:07:29,700 --> 00:07:35,260\nYou'll make the difference. And it's not that hard most of the times. Sometimes it is, but most of the times it's not.\n\n123\n00:07:35,740 --> 00:07:38,700\nYes, yeah. It can get pretty complicated with\n\n124\n00:07:39,560 --> 00:07:46,980\ncomponents that are not native to the web, like a combo box or modals and stuff like that. But that's why we have libraries\n\n125\n00:07:48,120 --> 00:07:51,640\nfrom people who put those things together so we can use those.\n\n126\n00:07:52,840 --> 00:07:57,540\nSo that is cool. So, so far we've talked a little bit about screen readers and\n\n127\n00:07:59,060 --> 00:08:02,220\nlike keyboard users, but there's like lots of different categories\n\n128\n00:08:02,540 --> 00:08:08,420\nof accessibility that you need to consider on the web like Color and text and stuff like that. Do you want to talk about those 2?\n\n129\n00:08:10,320 --> 00:08:13,220\nMaybe I could start with the you know, the\n\n130\n00:08:14,200 --> 00:08:20,140\nThe I'm forgetting here the name but it's like in accessibility you have this concept, which is\n\n131\n00:08:20,680 --> 00:08:21,180\nPOUR,\n\n132\n00:08:24,280 --> 00:08:28,280\nI'm forgetting the name here, it's like the pilars of accessibility. So perceivable,\n\n133\n00:08:28,860 --> 00:08:29,360\noperable,\n\n134\n00:08:30,060 --> 00:08:31,460\nUnderstandable and robust.\n\n135\n00:08:31,800 --> 00:08:42,600\nSo perceivable is basically everything around visually, you know, whatever that you are doing visually, make sure that people cannot see, also can perceive whatever you are building.\n\n136\n00:08:42,940 --> 00:08:43,600\nYou know,\n\n137\n00:08:44,440 --> 00:08:57,540\noperable is basically everything that you interact, that you build, that is interaction like clicking buttons, check boxes, you know, whatever, make sure that those are also interacted, not only with the mouse, but maybe also with the keyboard.\n\n138\n00:08:58,260 --> 00:09:03,060\nUnderstandable is more about the text, you know, like whatever you put on your page,\n\n139\n00:09:03,780 --> 00:09:12,020\nmake sure that your users actually understand, you know, that they understand the flow, where to click, you know, that's not only about accessibility, but also about usability.\n\n140\n00:09:12,340 --> 00:09:15,180\nSo it's kind of 2 fields that merge together.\n\n141\n00:09:15,780 --> 00:09:20,300\nAnd lately, you know, yeah. Oh, sorry. Would that also be like,\n\n142\n00:09:20,720 --> 00:09:22,820\neven the way that things are worded\n\n143\n00:09:23,240 --> 00:09:25,220\nlike the words that you use and\n\n144\n00:09:25,900 --> 00:09:27,880\nHave like the content I think\n\n145\n00:09:31,100 --> 00:09:39,520\nYou know It really depends on the audience of your website and what you are trying to aim for the compliance, if it's just 1A, AA, AAA.\n\n146\n00:09:40,080 --> 00:09:42,480\nBut for example, if you want to use acronyms,\n\n147\n00:09:42,860 --> 00:09:48,900\nAAA say that you should avoid acronyms at all costs. And if you use them, it really must include\n\n148\n00:09:49,400 --> 00:09:53,100\nthe full the meaning of an acronym, you know. For example,\n\n149\n00:09:54,620 --> 00:10:19,780\nor even, you know, whatever the content that you are trying to put on a page, make sure that it's not, you know, jargon for the main audience, if that makes sense. It really depends. And this is something that goes away from your job as an engineer. It's more like a job for the designer or the product manager or the copywriter, you know. So it's like accessibility is not only for engineers. It's for, you know, a set of people, like for your entire team.\n\n150\n00:10:20,600 --> 00:10:23,260\nYeah, absolutely. And then the last 1 is robust.\n\n151\n00:10:23,680 --> 00:10:31,100\nYeah, robust. So basically it's like, please don't use divs and spans everywhere. It's basically that, it's like use HTML properly,\n\n152\n00:10:31,600 --> 00:10:32,360\nuse buttons\n\n153\n00:10:32,980 --> 00:10:41,080\nand the proper attributes, like for forms, as you mentioned, please use a proper input instead of another span with fancy JavaScript.\n\n154\n00:10:43,020 --> 00:10:46,100\nYeah, that actually, that makes me think of progressive enhancement\n\n155\n00:10:46,640 --> 00:10:55,400\nand like making it so that your application is robust enough to be able to function without any client-side JavaScript as well,\n\n156\n00:10:56,280 --> 00:10:56,780\nwhere\n\n157\n00:10:57,180 --> 00:10:59,440\nyou're using like actual form submissions\n\n158\n00:11:00,060 --> 00:11:00,560\nAnd\n\n159\n00:11:01,120 --> 00:11:03,580\nif you don't have JavaScript in the client, then let's\n\n160\n00:11:04,020 --> 00:11:07,540\ndo a full page refresh. That's fine. But like use the\n\n161\n00:11:08,040 --> 00:11:08,540\nplatform.\n\n162\n00:11:09,760 --> 00:11:10,740\nSo, cool.\n\n163\n00:11:11,400 --> 00:11:12,660\nSo- I've already bring so much.\n\n164\n00:11:13,660 --> 00:11:14,560\nYeah, yeah, totally.\n\n165\n00:11:15,240 --> 00:11:16,040\nSo P-O-U-R.\n\n166\n00:11:16,520 --> 00:11:20,440\nThat is good. I'd never heard of that before. So that really helps contextualize.\n\n167\n00:11:20,860 --> 00:11:21,360\nI'm\n\n168\n00:11:23,560 --> 00:11:25,120\nhaving a blank year.\n\n169\n00:11:25,520 --> 00:11:26,020\nIt's\n\n170\n00:11:26,880 --> 00:11:31,700\nthe principles, that's it. 4 principles of accessibility. Ah, then, you know.\n\n171\n00:11:32,080 --> 00:11:33,280\nThat's good, that's good.\n\n172\n00:11:34,260 --> 00:11:36,720\nAwesome, yeah, so that's really helpful. Now,\n\n173\n00:11:37,120 --> 00:11:38,800\nyou have been working on,\n\n174\n00:11:40,760 --> 00:11:44,660\nor like, you've been working with accessibility for a long time and then\n\n175\n00:11:45,400 --> 00:11:45,900\nyou,\n\n176\n00:11:46,420 --> 00:11:50,940\nnow, I don't know if this was a new job or you got a promotion, but now you're a staff engineer\n\n177\n00:11:51,980 --> 00:11:53,440\nPromotion awesome. Well, congratulations\n\n178\n00:11:55,580 --> 00:11:56,080\nso\n\n179\n00:11:57,040 --> 00:11:57,780\nin the\n\n180\n00:11:58,380 --> 00:12:04,020\nHow has that been being a staff engineer? And what does that really even mean for the company you're at?\n\n181\n00:12:05,540 --> 00:12:10,220\nOkay, that's a brilliant question because what it means to be a staff engineer really depends\n\n182\n00:12:10,520 --> 00:12:11,860\nfrom company to company.\n\n183\n00:12:12,180 --> 00:12:14,120\nYou know, the expectations in 1 company\n\n184\n00:12:14,700 --> 00:12:17,340\nmight be super different from another company.\n\n185\n00:12:17,740 --> 00:12:18,300\nSo whatever\n\n186\n00:12:18,740 --> 00:12:21,700\nI'm about to say might not apply in other companies.\n\n187\n00:12:22,360 --> 00:12:27,040\nBut here at particular year at remote, the staff engineer basically is an engineer\n\n188\n00:12:27,720 --> 00:12:28,220\nthat\n\n189\n00:12:28,580 --> 00:12:34,220\nimpacts multiple teams and it has a strong influence, not only technically, but on the product\n\n190\n00:12:34,660 --> 00:12:38,320\nside as well. So to kind of be the gap, not the gap, sorry,\n\n191\n00:12:38,940 --> 00:12:41,900\nthe bridge and to fill the gap between product\n\n192\n00:12:42,740 --> 00:12:47,460\nand engineering across multiple teams. Remote For those who don't know, Remote\n\n193\n00:12:47,780 --> 00:13:04,560\nis basically a HR platform where it handles all the paperwork to hire someone globally. So we deal a lot with, I have this internal joke, which is like Remote is 50% of forms and the other 50% is tables. So it's like all about gathering information about the employees, like\n\n194\n00:13:04,940 --> 00:13:06,240\nsalary, time-offs,\n\n195\n00:13:06,600 --> 00:13:07,100\nexpenses,\n\n196\n00:13:08,300 --> 00:13:10,700\nbenefits, anything that comes to your mind,\n\n197\n00:13:11,200 --> 00:13:14,360\nand managing all that data in the platform.\n\n198\n00:13:15,320 --> 00:13:15,820\nSo\n\n199\n00:13:16,220 --> 00:13:24,440\nit demands a lot of business and product knowledge. So a staff engineer also needs to have very solid knowledge about what\n\n200\n00:13:25,300 --> 00:13:26,640\nthe product is about.\n\n201\n00:13:27,180 --> 00:13:35,140\nAnd also feel the gap here from a technical perspective on how to solve those problems that the business is trying to solve. You know,\n\n202\n00:13:35,660 --> 00:13:38,900\nthat makes a lot of sense. No, it was super abstract again.\n\n203\n00:13:39,360 --> 00:13:43,680\nIt's really, no, no, it's actually, that, that does make a lot of sense. I like in,\n\n204\n00:13:44,380 --> 00:13:46,660\nlots of jobs or, or my early jobs.\n\n205\n00:13:47,120 --> 00:13:47,780\nI remember,\n\n206\n00:13:49,080 --> 00:14:01,760\nlike I worked at a business intelligence company, and then I worked at a voiceover IP company, and then I worked at a task manager, like not really a JIRA, but like sort of that type of a thing.\n\n207\n00:14:03,620 --> 00:14:04,120\nAnd\n\n208\n00:14:04,440 --> 00:14:06,300\neach 1 of those early jobs,\n\n209\n00:14:06,940 --> 00:14:14,620\nlike the business itself was like, yeah, that's kind of interesting, but I'm more interested in the code. And I wanted to be like, just really deep into the code. But\n\n210\n00:14:15,060 --> 00:14:24,500\nThe longer that I've been an engineer, the more I have realized that the ones who make the biggest impact are the ones who really understand the needs of the business\n\n211\n00:14:24,960 --> 00:14:27,840\nand what your code is actually being\n\n212\n00:14:28,380 --> 00:14:29,980\ndeployed to actually accomplish.\n\n213\n00:14:30,300 --> 00:14:33,420\nAnd so that makes sense that as you get higher in the ranks,\n\n214\n00:14:34,280 --> 00:14:34,780\nyou're\n\n215\n00:14:35,500 --> 00:14:41,260\nexpected to make a bigger impact. And so you're also expected to understand the business at a much deeper level.\n\n216\n00:14:41,980 --> 00:14:43,520\nYeah. Yeah, 1 thing that I've learned,\n\n217\n00:14:43,940 --> 00:14:48,220\nso before I was a staff engineer, I was a manager of a team\n\n218\n00:14:48,980 --> 00:15:00,420\nand there was a lot of things that I've learned there as a manager. And 1 of the things was like, well, maybe the code is not the most important thing at the end of the day, you know, because if your business,\n\n219\n00:15:01,000 --> 00:15:01,820\nI don't know,\n\n220\n00:15:02,780 --> 00:15:10,300\nIf this particular business problem is not solved on time, maybe your perfect code will never go live, you know?\n\n221\n00:15:11,400 --> 00:15:13,640\nIt's a balance, you know? Like that's\n\n222\n00:15:14,680 --> 00:15:22,100\na hard lesson that you learn when you are a manager. And even as a staff is like, it's a trade off, you know, it's a constant trade off here.\n\n223\n00:15:23,760 --> 00:15:29,340\nBut you don't find yourself as you go like higher in the ranks, you don't really find yourself\n\n224\n00:15:30,300 --> 00:15:30,800\nworking\n\n225\n00:15:31,340 --> 00:15:32,680\nin the code as much.\n\n226\n00:15:33,280 --> 00:15:34,520\nHas that been your experience?\n\n227\n00:15:36,760 --> 00:15:40,460\nCurrently, I'm still working a lot closely to the code.\n\n228\n00:15:40,840 --> 00:15:43,940\nI might not be the 1 coding directly,\n\n229\n00:15:44,440 --> 00:15:47,700\nbut I'm definitely involved in the decision, in the code reviews,\n\n230\n00:15:48,320 --> 00:15:49,100\nin prototypes,\n\n231\n00:15:49,900 --> 00:15:50,400\nin\n\n232\n00:15:50,940 --> 00:15:51,880\nspecial documentation.\n\n233\n00:15:52,800 --> 00:15:57,340\nI'm part of a team that is kind of creating a new internal technology,\n\n234\n00:15:58,080 --> 00:16:03,660\nand I'm helping other engineers to learn this technology, to adopt the technology in their own projects.\n\n235\n00:16:04,120 --> 00:16:06,360\nSo I'm kind of an advocate internally.\n\n236\n00:16:08,040 --> 00:16:10,660\nBut no, I don't code as much as I\n\n237\n00:16:11,140 --> 00:16:11,640\ndid\n\n238\n00:16:12,100 --> 00:16:14,560\nbefore. But the thing is, as a staff, you are not expected\n\n239\n00:16:15,020 --> 00:16:16,960\nto code as much as before.\n\n240\n00:16:17,320 --> 00:16:19,660\nOtherwise, you are not a staff, you are just a senior\n\n241\n00:16:20,740 --> 00:16:21,960\nplus, you know.\n\n242\n00:16:23,320 --> 00:16:24,980\nYeah, that does make sense.\n\n243\n00:16:25,520 --> 00:16:26,880\nAnd so you,\n\n244\n00:16:28,260 --> 00:16:30,800\nI'm guessing that the teams that you're\n\n245\n00:16:31,820 --> 00:16:33,220\nkind of responsible for\n\n246\n00:16:33,580 --> 00:16:39,220\nbridging that gap. They're all like related teams and you just have to like,\n\n247\n00:16:39,520 --> 00:16:40,620\ndo you end up\n\n248\n00:16:41,400 --> 00:16:43,580\nbeing kind of like a team lead\n\n249\n00:16:43,940 --> 00:16:49,620\nrole or do those teams have their own team leads. They have, they have their own managers here.\n\n250\n00:16:50,320 --> 00:16:52,780\nIf you, by team lead, you mean tech lead?\n\n251\n00:16:53,400 --> 00:17:09,880\nYeah, yeah, tech lead. Usually I'm not, if I'm a, when I'm a tech lead, it's not tech lead of people, it's a tech lead of projects. So I have a couple of projects and I'm leading that project and then whoever is in the project with me if that makes sense Yeah, so managers are\n\n252\n00:17:10,240 --> 00:17:11,619\nresponsible for people\n\n253\n00:17:11,920 --> 00:17:13,220\nand staffs are responsible\n\n254\n00:17:13,579 --> 00:17:14,079\nof\n\n255\n00:17:14,480 --> 00:17:14,980\nprojects\n\n256\n00:17:15,660 --> 00:17:23,980\nYeah, cool. That makes sense. And 1 of the projects that you're working on right now is a design system. Is that right? You want to tell us a little bit about that?\n\n257\n00:17:24,339 --> 00:17:29,620\nNot exactly the design system. It's a system, but not part of the design system.\n\n258\n00:17:30,040 --> 00:17:32,120\nOkay, Okay. Let's hear about that.\n\n259\n00:17:32,780 --> 00:17:39,020\nOh, okay. How can I try to explain this? It's like, as I said before, off of remote is forms.\n\n260\n00:17:39,400 --> 00:17:44,600\nAnd when I say half is like, imagine that when you are on board, someone from United States,\n\n261\n00:17:45,460 --> 00:17:47,860\nlike when you need a new employee, like\n\n262\n00:17:48,240 --> 00:17:51,180\nyou have a company and you want to hire someone\n\n263\n00:17:51,580 --> 00:17:57,540\nin the United States, the employee needs to fill a bunch of forms, like your personal details, your bank details, address details.\n\n264\n00:17:58,660 --> 00:18:02,140\nAnd then you need to fill the salary, the time off, all the benefits.\n\n265\n00:18:02,720 --> 00:18:03,660\nYou can imagine\n\n266\n00:18:04,280 --> 00:18:10,220\nthe number of forms. And I'll multiply that by 100 countries, which is more or less.\n\n267\n00:18:11,140 --> 00:18:12,480\nSo we are talking about\n\n268\n00:18:13,100 --> 00:18:14,520\nthousands of forms.\n\n269\n00:18:15,100 --> 00:18:21,240\nHow do you imagine these forms are? They cannot be hardcoded in the code ways. No, no, you got to have a CMS for that.\n\n270\n00:18:21,580 --> 00:18:25,100\nYou're going to need a headless system to handle all these forms.\n\n271\n00:18:25,520 --> 00:18:26,340\nAnd then imagine,\n\n272\n00:18:26,780 --> 00:18:37,000\nOK, you have this picture, right? Now let's go back to the very simple form. For example, a form that asks for the time off. And it says, oh, the time off\n\n273\n00:18:38,000 --> 00:18:43,060\nin United States needs to be at least 10 days, right? I think it's 10 days. I have no idea.\n\n274\n00:18:43,440 --> 00:18:47,980\nNo, 10 days, which is another topic, but okay, it's 10 days minimum.\n\n275\n00:18:51,200 --> 00:18:52,340\nAnd you do that validation\n\n276\n00:18:52,640 --> 00:18:59,080\non the front end, you have your front end, minimum 10, then it goes to the API and the API also needs a validation,\n\n277\n00:18:59,800 --> 00:19:14,560\nminimum 10. And now you have duplicated validation. So you don't only need to build a form on the front end, you also do it on the back end. So you twice the work. So we need a system that works on both front end and back end where you can share the logic,\n\n278\n00:19:14,880 --> 00:19:15,560\nthe validations,\n\n279\n00:19:16,020 --> 00:19:23,500\nyou know, conditional fields, the label descriptions, all of that. How can you do it? So that headless system is what I'm working on.\n\n280\n00:19:24,000 --> 00:19:26,080\nOkay, okay. Yeah, we actually,\n\n281\n00:19:26,400 --> 00:19:29,880\nso that aligns really nicely with the workshop because\n\n282\n00:19:30,600 --> 00:19:35,320\nthere's an exercise in the workshop where I show schema validation\n\n283\n00:19:36,000 --> 00:19:39,240\nand we use Zod Schema to do that. And\n\n284\n00:19:39,760 --> 00:19:43,240\nthen a library called Conform will convert that Zod Schema\n\n285\n00:19:44,340 --> 00:19:44,840\ninto\n\n286\n00:19:45,480 --> 00:19:53,140\nHTML attributes that you can apply. And it also runs the Zod parsing on the client as well as on the server to share that.\n\n287\n00:19:53,480 --> 00:19:55,820\nSo yeah, that actually aligns really well.\n\n288\n00:19:56,400 --> 00:19:57,240\nSo, so far,\n\n289\n00:19:57,840 --> 00:20:07,840\nhow do you accomplish that? Or I guess you're still working on it. Yeah, so we are not using Zod. It was 1 of the things that we looked into it, but we are using this\n\n290\n00:20:08,800 --> 00:20:12,000\ntool, not tool, a specification called JSON Schemas.\n\n291\n00:20:12,400 --> 00:20:17,140\nOh yeah, yeah, sure. Yeah, so basically we are using JSON Schemas to describe\n\n292\n00:20:17,860 --> 00:20:18,360\nthese,\n\n293\n00:20:19,120 --> 00:20:22,320\nfirst these rules, like what we call country rules, for example,\n\n294\n00:20:22,800 --> 00:20:26,180\nthe time off for United States is at least 10 days.\n\n295\n00:20:26,580 --> 00:20:30,360\nAnd then we also use those same JSON schemas to describe\n\n296\n00:20:30,900 --> 00:20:31,660\nthe forms.\n\n297\n00:20:32,000 --> 00:20:36,780\nSo field 1, field 2, field 3, with all the labels, description, validations, conditionals.\n\n298\n00:20:37,200 --> 00:20:42,620\nAnd it can be super powerful. And the thing is, it's JSON, so JSON, the advantage of it is that\n\n299\n00:20:43,220 --> 00:20:44,880\nit works with any\n\n300\n00:20:45,520 --> 00:20:54,460\nlanguage. You can put it on the back end with any language, you can put it on the front end with any language. You just need to build kind of the validators or the parsers\n\n301\n00:20:55,040 --> 00:20:55,740\nto understand\n\n302\n00:20:56,040 --> 00:20:59,080\nand compile that JSON in actual, you know,\n\n303\n00:20:59,500 --> 00:21:02,340\ncode. For example, on our side, the back end is Elixir,\n\n304\n00:21:02,720 --> 00:21:12,740\non the front end is React. So we kind of have a parser that transforms that to JavaScript and to React. And then eventually you have an actual form, with all the validations\n\n305\n00:21:13,040 --> 00:21:20,960\nand accessibility in mind. But the thing is, the actual form is already that, yeah, that's the design system, the visual thing, I'm a little bit\n\n306\n00:21:22,120 --> 00:21:26,340\nbehind that. I'm just on the headless part with the JSON schemas.\n\n307\n00:21:26,980 --> 00:21:28,920\nYeah, yeah, that makes a lot of sense. And actually,\n\n308\n00:21:29,540 --> 00:21:31,340\nif I can validate your decision\n\n309\n00:21:31,960 --> 00:21:33,060\nfor what it's worth.\n\n310\n00:21:34,640 --> 00:21:39,340\nYears ago, I worked on a form library for Angular called Angular Formly.\n\n311\n00:21:40,520 --> 00:21:41,020\nAnd\n\n312\n00:21:42,040 --> 00:21:43,760\n1 of the really awesome\n\n313\n00:21:44,180 --> 00:21:47,420\nthings that a contributor did was put together\n\n314\n00:21:47,840 --> 00:21:48,980\na JSON schema\n\n315\n00:21:49,600 --> 00:21:52,460\nconverter. So it would convert it from JSON schema into\n\n316\n00:21:52,840 --> 00:21:53,540\nour API.\n\n317\n00:21:54,520 --> 00:21:57,180\nAnd they had like thousands of forms. And\n\n318\n00:21:57,900 --> 00:22:06,920\nthe real, really nice benefit of JSON Schema is that it's serializable, so you can save it in a database. And I'm guessing that's probably what you're doing. Yeah.\n\n319\n00:22:07,540 --> 00:22:09,120\nExactly. So that's also our solution\n\n320\n00:22:10,080 --> 00:22:11,960\nto not have the forms are coded\n\n321\n00:22:12,280 --> 00:22:15,220\nin your code base. So each time, for example, you need to\n\n322\n00:22:15,520 --> 00:22:22,580\nimagine that the law changes tomorrow, and now it will be 20 days in the United States. We don't need engineers to change it.\n\n323\n00:22:22,920 --> 00:22:25,060\nThen the thing is we have\n\n324\n00:22:26,200 --> 00:22:31,900\nUIs, like tools in our back office for our internal operations to go there and change directly.\n\n325\n00:22:32,580 --> 00:22:42,380\nAnd that will change the JSON schema that is stored on the database. So we kind of also have this meta level where you have JSON schemas to generate JSON schemas.\n\n326\n00:22:43,140 --> 00:22:44,200\nOh yeah, sure.\n\n327\n00:22:44,540 --> 00:22:45,200\nYou know?\n\n328\n00:22:46,020 --> 00:23:03,380\nYeah, yeah. And then you have the form builder where the operations can, you know, literally create, oh, I have this field and now I ask this and this and that and that. And then you need the JSON schema for each type of field that you allow the operations to create, like a JSON scheme for a number and JSON scheme for a select field.\n\n329\n00:23:03,840 --> 00:23:06,240\nSo it can be very, you know,\n\n330\n00:23:06,960 --> 00:23:08,540\nmeta JSON scheme averse.\n\n331\n00:23:09,840 --> 00:23:10,780\nYeah, yeah, totally.\n\n332\n00:23:11,280 --> 00:23:11,780\nSo\n\n333\n00:23:12,440 --> 00:23:13,580\nyou have like\n\n334\n00:23:14,180 --> 00:23:17,520\na special app that's, you're kind of building a CMS\n\n335\n00:23:18,340 --> 00:23:22,860\nfor managing forms. Yeah, CMS, CMS sounds boring, but yeah.\n\n336\n00:23:23,260 --> 00:23:23,760\nYeah.\n\n337\n00:23:24,780 --> 00:23:25,820\nYeah, cool. So\n\n338\n00:23:26,180 --> 00:23:29,940\n1 challenge that I, that just occurred to me is,\n\n339\n00:23:30,320 --> 00:23:33,900\nWhat do you do about when the law changes and now\n\n340\n00:23:35,920 --> 00:23:37,660\nthere's a new field that's required?\n\n341\n00:23:38,160 --> 00:23:43,700\nAnd so you've got all this data in your database that previous employees had already filled out and saved,\n\n342\n00:23:44,100 --> 00:23:46,980\nbut now we've got this new required field. Do you\n\n343\n00:23:47,440 --> 00:23:50,780\nhave to do some sort of migration? You set a default value\n\n344\n00:23:51,180 --> 00:23:56,620\nfor that field for them? Or do you have to email them all and say, you've got to fill this out? Yeah, that's the thing.\n\n345\n00:23:57,940 --> 00:24:02,120\nThe thing about this is that all this data is attached to a contract.\n\n346\n00:24:02,980 --> 00:24:14,280\nYour contract says that you have 10 days off. If the law changes tomorrow, basically we need to do a new contract. So we cannot do a migration like that, you know, and change everyone\n\n347\n00:24:14,760 --> 00:24:15,700\nin 1 sec.\n\n348\n00:24:16,120 --> 00:24:18,380\nI wish we could because it would simplify\n\n349\n00:24:18,720 --> 00:24:20,660\neveryone's life, but as you can imagine,\n\n350\n00:24:21,020 --> 00:24:28,760\nto be compliant, we cannot do that. So basically what we have in mind here is like we have a kind of automated system that\n\n351\n00:24:30,140 --> 00:24:32,720\nyou know, search through every employment,\n\n352\n00:24:33,040 --> 00:24:35,420\ncheck the ones that are not compliant anymore,\n\n353\n00:24:35,940 --> 00:24:37,760\nand then triggers a notification\n\n354\n00:24:38,240 --> 00:24:39,500\nfor their employers.\n\n355\n00:24:39,860 --> 00:24:42,080\nSo, you know, the boss of each employee\n\n356\n00:24:42,740 --> 00:24:53,580\nand, you know, it creates a new, what we call a new contract amendment or, you know, so basically a new version of the contract where both parties need to assign and okay, now you are compliant again with the law.\n\n357\n00:24:54,240 --> 00:24:54,740\nInteresting.\n\n358\n00:24:56,600 --> 00:25:03,420\nSo some of them are super easy. Some of them, it, it cannot be automated. You know, it really is to be case by case,\n\n359\n00:25:03,820 --> 00:25:09,260\ndepending on the country and depending on the law and depending on the effective date that the law changes.\n\n360\n00:25:09,720 --> 00:25:11,260\nFor example, oh, you know,\n\n361\n00:25:11,680 --> 00:25:20,340\nthe new salary will be, I don't know, 3000, but only applied next month. So we also need a system to deal with that.\n\n362\n00:25:21,140 --> 00:25:24,680\nYeah. Wow. Sounds complicated. I guess that's why it can be a company.\n\n363\n00:25:26,460 --> 00:25:28,540\nExactly. This is a real problem.\n\n364\n00:25:28,940 --> 00:25:34,140\nWhen you try to build a remote global team and you need to handle all these\n\n365\n00:25:34,660 --> 00:25:35,160\nlaw\n\n366\n00:25:35,500 --> 00:25:37,540\nlittle things across all the countries.\n\n367\n00:25:38,680 --> 00:25:42,460\nYeah, obviously remote as here a solid business\n\n368\n00:25:42,980 --> 00:25:44,020\ncase to solve.\n\n369\n00:25:44,760 --> 00:25:45,920\nYeah, absolutely.\n\n370\n00:25:47,060 --> 00:25:48,480\nWell, very cool. So,\n\n371\n00:25:49,460 --> 00:25:58,400\nyeah, I, I think that I've kind of asked all the things that I had on my mind. Is there anything else that you think it would be really useful to chat about before we wrap up?\n\n372\n00:26:00,040 --> 00:26:06,060\nAbout accessibility or being a staff or anything else? Yeah, any of those things. I think like, so we covered\n\n373\n00:26:07,200 --> 00:26:07,700\nseveral\n\n374\n00:26:08,120 --> 00:26:09,220\ntopics on accessibility\n\n375\n00:26:09,620 --> 00:26:10,120\nand\n\n376\n00:26:10,520 --> 00:26:16,280\nbeing a staff engineer. I guess 1 question I have about the staff engineer is Do you miss coding\n\n377\n00:26:16,720 --> 00:26:18,260\nas much as you were before?\n\n378\n00:26:18,740 --> 00:26:20,840\nLike working on the actual product\n\n379\n00:26:21,200 --> 00:26:25,220\nrather than just doing reviews and prototypes and stuff like that?\n\n380\n00:26:26,000 --> 00:26:28,680\nI still work on the code.\n\n381\n00:26:29,540 --> 00:26:43,280\nSo I don't miss it. When I was a manager, yes, I miss it because I didn't code as much. But now as a staff, I still code, you know, I'm still close to the code. At least I'm close to the code. I'm close to\n\n382\n00:26:43,780 --> 00:26:45,080\nunderstanding the technical\n\n383\n00:26:46,780 --> 00:26:47,980\ndetails about something.\n\n384\n00:26:48,380 --> 00:26:52,120\nSo I don't miss it. And I quite enjoy being a little, you know,\n\n385\n00:26:53,440 --> 00:26:54,900\ngiving room for others\n\n386\n00:26:55,680 --> 00:27:00,980\nto also grow. There is this book that I really, really love is the Stuff Engineer Path by\n\n387\n00:27:01,340 --> 00:27:02,480\nTanya Rayleigh.\n\n388\n00:27:03,300 --> 00:27:06,100\nAnd 1 of the things that she said on the book\n\n389\n00:27:06,500 --> 00:27:07,000\nis\n\n390\n00:27:07,500 --> 00:27:08,920\nif you have like\n\n391\n00:27:09,340 --> 00:27:11,460\nif you have time to do everything\n\n392\n00:27:12,180 --> 00:27:14,320\nthen you don't allow others to grow\n\n393\n00:27:15,040 --> 00:27:18,840\nAnd that's the thing that kind of clicked for me as a staff, is like, okay,\n\n394\n00:27:19,400 --> 00:27:26,680\nlet me do something else and the others, or let me help others to do it so that I don't need to take the lead all the time.\n\n395\n00:27:27,180 --> 00:27:34,900\nAnd that's quite beautiful because then you can learn so many other things about, you know, an engineer. It's code is not the only thing that\n\n396\n00:27:36,200 --> 00:27:37,740\nmatters on your day to day.\n\n397\n00:27:38,460 --> 00:27:50,140\nOh, I think that's fantastic. And I'm glad to hear that you do have plenty of opportunity to code. I know a lot of people kind of as you go higher in the ranks of\n\n398\n00:27:51,040 --> 00:27:51,920\nin the company,\n\n399\n00:27:52,540 --> 00:27:55,300\nyou often people complain that they don't get to code as much.\n\n400\n00:27:55,920 --> 00:28:02,540\nBut I guess you were able to take a track that allows you to keep doing what you enjoy. You know, the IC track\n\n401\n00:28:03,180 --> 00:28:15,460\nyou are allowed to, if it was a management track, then yeah, it's not expected for you to code. So it's kind of this balance. And again, it really depends from company to company, even at remote, like we have staff that code every day\n\n402\n00:28:16,220 --> 00:28:17,920\nAnd they are just a different\n\n403\n00:28:19,020 --> 00:28:19,520\narchetype\n\n404\n00:28:20,200 --> 00:28:21,960\nof stuff compared to me.\n\n405\n00:28:22,500 --> 00:28:25,580\nSo it's not just 1 is better than the other. It's just different\n\n406\n00:28:26,400 --> 00:28:26,900\npersonas\n\n407\n00:28:27,500 --> 00:28:28,300\nof stuff.\n\n408\n00:28:29,920 --> 00:28:30,420\nYeah.\n\n409\n00:28:30,780 --> 00:28:36,140\nBut yeah, to answer your question, I don't know what else I have to say here. With accessibility,\n\n410\n00:28:37,440 --> 00:28:43,360\nyou don't need to solve it all alone. I think that's my tip for the developers. You need to find an ally here\n\n411\n00:28:43,740 --> 00:28:45,260\nto help you solve the problems.\n\n412\n00:28:45,720 --> 00:28:47,660\nThat would be a tip here.\n\n413\n00:28:48,480 --> 00:28:48,980\nAnd\n\n414\n00:28:49,380 --> 00:28:50,780\nfor people who are\n\n415\n00:28:51,200 --> 00:28:53,140\nlooking to become a staff,\n\n416\n00:28:55,940 --> 00:28:59,880\ntry to improve your communication skills with people who are not engineers.\n\n417\n00:29:00,180 --> 00:29:01,420\nI think that would be\n\n418\n00:29:01,820 --> 00:29:04,800\na way to improve your skills as an engineer.\n\n419\n00:29:05,940 --> 00:29:11,820\nI think those are great tips. Thank you for bringing those up. Now, if anybody has\n\n420\n00:29:12,260 --> 00:29:14,560\na desire to reach out to you or\n\n421\n00:29:15,100 --> 00:29:17,360\nfollow what you're doing and stuff like that.\n\n422\n00:29:18,040 --> 00:29:20,220\nWhat is the best way for them to do that?\n\n423\n00:29:21,480 --> 00:29:22,540\nWell, you have\n\n424\n00:29:23,100 --> 00:29:26,080\nnot Twitter anymore, but the X platform.\n\n425\n00:29:27,040 --> 00:29:28,500\nSo I'm there, you know,\n\n426\n00:29:28,820 --> 00:29:32,240\nat a underscore Sundrina underscore P and\n\n427\n00:29:32,980 --> 00:29:36,240\nThere you'll find everything else about me, you know the website contact\n\n428\n00:29:36,600 --> 00:29:37,100\nBlah-blah-blah,\n\n429\n00:29:37,440 --> 00:29:42,420\nyou know traditional LinkedIn if you want to so I'm pretty easily reachable online\n\n430\n00:29:43,780 --> 00:29:44,280\nSuper.\n\n431\n00:29:44,860 --> 00:29:51,020\nAll right, Sandrina. Thank you so much. This has been just a pleasure to visit with you. Always enjoy our chats.\n\n432\n00:29:52,200 --> 00:29:54,840\nAnd yeah, we'll keep up with you as\n\n433\n00:29:55,240 --> 00:30:05,500\nyou continue on your journey. So thank you so much. Thank you so much, Kent, and good luck with everything with Epic Dev and, you know, epic success with you\n\n434\n00:30:06,100 --> 00:30:08,380\nThank you very much. Bye everybody\n\n435\n00:30:09,400 --> 00:30:09,900\nBye",
            "text": "[00:00:00] Kent:\nHello everybody, I'm super excited to be joined today by my friend Sandrina. I'm going to try your last name and you can correct me. It's Pereira? \n\n[00:00:11] Sandrian:\nPereira. \n\n[00:00:12] Kent:\nPereira. Well, thank you. That's not the first time that I've tried to pronounce your name on a podcast before so yeah, I don't really \n\n[00:00:24] Sandrian:\nhave a good 1. It's okay. \n\n[00:00:27] Kent:\nNo, it's not though like for your People who grew up in that you're from Portugal. Is that right? \n\n[00:00:33] Sandrian:\nYeah. Yeah. \n\n[00:00:34] Kent:\nYeah, so people in Portugal It's like a normal last name. So it's just me. I I'm the 1 at fault here But yes, thank you so much for joining me and as Sandrine and I go back I always like to talk about how we met. And I think, I don't know if I knew you before \n\n[00:00:54] Discord. I think that's where I met you was in my Discord. \n\n[00:00:59] Sandrian:\nOfficially, yeah. \n\n[00:01:00] Kent:\nYeah, yeah. And we did some meetups, some KCD meetups where you share your screen or answer questions, do like a little, kind of like a talk sort of thing virtually. And You did a couple of those about accessibility. A bunch of people joined, it was pretty cool. And we don't really, \n\n[00:01:21] I don't do, I have the meetups stuff anymore. The bot doesn't really facilitate those on the Discord anymore. But you, I don't know whether you've been doing this before, but after that, you ran a bunch of workshops on accessibility and stuff too, and just been doing a lot of cool stuff with accessibility in the past. So \n\n[00:01:41] that is how we got to know each other. I'd love for you to give your own introduction though. So can you tell our audience a little bit about who you are and what you stand for and all that? \n\n[00:01:53] Sandrian:\nYeah, so, hey there, I'm Sandrina. I'm from Portugal, but currently I'm based in Copenhagen for a short period of time. That's why I apologize for any troubles with my mic. But yeah, who I am. Currently, I'm a staff front-end engineer at remote.com. So it's like a remote company that literally \n\n[00:02:13] the name is remote. And there I'm all over, you know, React ecosystem, headless systems, currently very focused on how to create and manage forms at large scale. So it's pretty intense. And you know, the downside of that is that I don't touch \n\n[00:02:34] Accessibility on my daily basis as much as I used to do like 1 year ago But it's still something that I'm really when I see something wrong. I always you know call out for it. So even if I don't do accessibility on my day to day, it's something I care about. \n\n[00:02:52] Kent:\nWell, yeah, that's definitely something I wanna talk about today. Also wanna get into some of the design system stuff and the forms at scale. I think that'd be really interesting. And so in the workshops, where we get into accessibility is actually with forms. We talked about focus management and proper labeling \n\n[00:03:13] of fields and that sort of thing. And so, yeah, I'd like if you could just give us a like a quick idea of why accessibility is important. Just pretty quick, like people should know that it's important, but why is it important to you? \n\n[00:03:33] Sandrian:\nWhy is it important for me? I don't have a fancy background story like, oh, how did I start in accessibility? But for me it's important because, you know, most people when they started to code, it was for fun, you know, I build websites for fun. But the thing is, when you are a professional software engineer, it's not just for fun. It's \n\n[00:03:53] for other real people. And it's kind of, you are the architecture, the architect of the digital world, you know? So the same way we have architects with laws about how to build an accessible building, you know, we should do the same in the internet. So if you build something, it's not just for you to use it, it's for other people \n\n[00:04:14] that are different from you. So it's kind of your duty as an engineer to make sure that it's successful for everyone. As simple as that. It's like almost a human right, but yeah. \n\n[00:04:27] Kent:\nYeah, I think that it really comes down to caring about other people, right? And their experience. And what I find is that the more accessible I make my application to blind people, or to people who can only use a keyboard \n\n[00:04:48] and those individuals, the better the experience is for everybody as well. Anyway, like before we were using the physical building metaphor, having a ramp that leads to your front door. Like maybe you've got steps because your front door is up there a ways or whatever, but having a ramp \n\n[00:05:08] is useful for wheelchair users, but it's also useful for anybody who has a dolly that they're pulling a big box or even those kind of temporary disabilities that we talked about, or maybe you're coming back to the web, maybe you're holding a baby \n\n[00:05:28] and so you can only use 1 hand and so being able to navigate around with 1 hand is very useful, or maybe you broke your arm or whatever. So everybody, the thing is, it's not, accessibility is not necessarily about 10 or 20% of users. It's about 100% of the \n\n[00:05:49] users 10 or 20% of the time. And so like your efforts in accessibility will affect a lot more or everybody in a really positive way. \n\n[00:06:02] Sandrian:\nYeah. I must say though that even though we try to sell accessibility as like something that affects everyone or that benefits everyone, if you think about the dark theme and the light theme, which is like a trend nowadays, that's like a perk. It's like a little bonus. Oh, now I have the dark theme. So cool. \n\n[00:06:23] But for those 10 or 20% of people, the minority, they are really the ones that really, really appreciate it because for them it's not a perk. For them it's what really makes a difference, to enjoy the web, to read the newspaper because they do it digitally more easily than in a real paper. \n\n[00:06:43] Stuff like that that we take for granted and for them is like the difference between having a good day or just you know a bad day. \n\n[00:06:52] Kent:\nYeah, yeah for sure that like I so I said it affects 100% of the users 20 to 30% of the time but for users who use screen readers and can only use a keyboard and stuff, that affects them 100% of the time. And like, can you imagine living that kind of a life where you're just \n\n[00:07:12] constantly facing these different websites or real world experiences where nobody thought about you. That just, that would stink. I would hate that. \n\n[00:07:25] Sandrian:\nThat's why the secret is to really care, you know, really care about people. You'll make the difference. And it's not that hard most of the times. Sometimes it is, but most of the times it's not. \n\n[00:07:35] Kent:\nYes, yeah. It can get pretty complicated with components that are not native to the web, like a combo box or modals and stuff like that. But that's why we have libraries from people who put those things together so we can use those. So that is cool. So, so far we've talked a little \n\n[00:07:55] bit about screen readers and like keyboard users, but there's like lots of different categories of accessibility that you need to consider on the web like Color and text and stuff like that. Do you want to talk about those 2? \n\n[00:08:10] Sandrian:\nMaybe I could start with the you know, the The I'm forgetting here the name but it's like in accessibility you have this concept, which is POUR, I'm forgetting the name here, it's like the pilars of accessibility. So perceivable, operable, Understandable \n\n[00:08:30] and robust. So perceivable is basically everything around visually, you know, whatever that you are doing visually, make sure that people cannot see, also can perceive whatever you are building. You know, operable is basically everything that you interact, that you build, that is interaction like clicking buttons, check \n\n[00:08:50] boxes, you know, whatever, make sure that those are also interacted, not only with the mouse, but maybe also with the keyboard. Understandable is more about the text, you know, like whatever you put on your page, make sure that your users actually understand, you know, that they understand the flow, where to click, you know, that's not only about accessibility, \n\n[00:09:10] but also about usability. So it's kind of 2 fields that merge together. And lately, you know, yeah. \n\n[00:09:17] Kent:\nOh, sorry. Would that also be like, even the way that things are worded like the words that you use and Have like the content I think \n\n[00:09:31] Sandrian:\nYou know It really depends on the audience of your website and what you are trying to aim for the compliance, if it's just 1A, AA, AAA. But for example, if you want to use acronyms, AAA say that you should avoid acronyms at all costs. And if you use them, it really must include the full the meaning of an \n\n[00:09:51] acronym, you know. For example, or even, you know, whatever the content that you are trying to put on a page, make sure that it's not, you know, jargon for the main audience, if that makes sense. It really depends. And this is something that goes away from your job as an engineer. It's more like a job for the designer \n\n[00:10:11] or the product manager or the copywriter, you know. So it's like accessibility is not only for engineers. It's for, you know, a set of people, like for your entire team. \n\n[00:10:20] Kent:\nYeah, absolutely. And then the last 1 is robust. \n\n[00:10:23] Sandrian:\nYeah, robust. So basically it's like, please don't use divs and spans everywhere. It's basically that, it's like use HTML properly, use buttons and the proper attributes, like for forms, as you mentioned, please use a proper input instead of another span with fancy JavaScript. \n\n[00:10:43] Kent:\nYeah, that actually, that makes me think of progressive enhancement and like making it so that your application is robust enough to be able to function without any client-side JavaScript as well, where you're using like actual form submissions And if you don't have JavaScript in the client, then \n\n[00:11:03] let's do a full page refresh. That's fine. But like use the platform. \n\n[00:11:09] Sandrian:\nSo, cool. So- I've already bring so much. \n\n[00:11:13] Kent:\nYeah, yeah, totally. So P-O-U-R. That is good. I'd never heard of that before. So that really helps contextualize. \n\n[00:11:20] Sandrian:\nI'm having a blank year. It's the principles, that's it. 4 principles of accessibility. Ah, then, you know. \n\n[00:11:32] Kent:\nThat's good, that's good. Awesome, yeah, so that's really helpful. Now, you have been working on, or like, you've been working with accessibility for a long time and then you, now, I don't know if this was a new job or you got a promotion, but now you're a staff engineer Promotion \n\n[00:11:52] awesome. Well, congratulations so in the How has that been being a staff engineer? And what does that really even mean for the company you're at? \n\n[00:12:05] Sandrian:\nOkay, that's a brilliant question because what it means to be a staff engineer really depends from company to company. You know, the expectations in 1 company might be super different from another company. So whatever I'm about to say might not apply in other companies. But here at particular year at remote, the staff engineer \n\n[00:12:25] basically is an engineer that impacts multiple teams and it has a strong influence, not only technically, but on the product side as well. So to kind of be the gap, not the gap, sorry, the bridge and to fill the gap between product and engineering across multiple teams. Remote \n\n[00:12:45] For those who don't know, Remote is basically a HR platform where it handles all the paperwork to hire someone globally. So we deal a lot with, I have this internal joke, which is like Remote is 50% of forms and the other 50% is tables. So it's like all about gathering information about the employees, like salary, time-offs, \n\n[00:13:06] expenses, benefits, anything that comes to your mind, and managing all that data in the platform. So it demands a lot of business and product knowledge. So a staff engineer also needs to have very solid knowledge about what the product is about. \n\n[00:13:27] And also feel the gap here from a technical perspective on how to solve those problems that the business is trying to solve. You know, \n\n[00:13:35] Kent:\nthat makes a lot of sense. \n\n[00:13:36] Sandrian:\nNo, it was super abstract again. It's really, no, no, \n\n[00:13:40] Kent:\nit's actually, that, that does make a lot of sense. I like in, lots of jobs or, or my early jobs. I remember, like I worked at a business intelligence company, and then I worked at a voiceover IP company, and then I worked at a task manager, like not really a JIRA, but like sort of that \n\n[00:14:00] type of a thing. And each 1 of those early jobs, like the business itself was like, yeah, that's kind of interesting, but I'm more interested in the code. And I wanted to be like, just really deep into the code. But The longer that I've been an engineer, the more I have realized that the ones who \n\n[00:14:20] make the biggest impact are the ones who really understand the needs of the business and what your code is actually being deployed to actually accomplish. And so that makes sense that as you get higher in the ranks, you're expected to make a bigger impact. And so you're also expected to understand the business at a much \n\n[00:14:40] deeper level. \n\n[00:14:41] Sandrian:\nYeah. Yeah, 1 thing that I've learned, so before I was a staff engineer, I was a manager of a team and there was a lot of things that I've learned there as a manager. And 1 of the things was like, well, maybe the code is not the most important thing at the end of the day, you know, because if your business, I don't know, \n\n[00:15:02] If this particular business problem is not solved on time, maybe your perfect code will never go live, you know? It's a balance, you know? Like that's a hard lesson that you learn when you are a manager. And even as a staff is like, it's a trade off, you know, it's a constant trade off here. \n\n[00:15:23] Kent:\nBut you don't find yourself as you go like higher in the ranks, you don't really find yourself working in the code as much. Has that been your experience? \n\n[00:15:36] Sandrian:\nCurrently, I'm still working a lot closely to the code. I might not be the 1 coding directly, but I'm definitely involved in the decision, in the code reviews, in prototypes, in special documentation. I'm part of a team that is kind of creating a new internal \n\n[00:15:56] technology, and I'm helping other engineers to learn this technology, to adopt the technology in their own projects. So I'm kind of an advocate internally. But no, I don't code as much as I did before. But the thing is, as a staff, you are not expected to code as much as before. \n\n[00:16:17] Otherwise, you are not a staff, you are just a senior plus, you know. \n\n[00:16:23] Kent:\nYeah, that does make sense. And so you, I'm guessing that the teams that you're kind of responsible for bridging that gap. They're all like related teams and you just have to like, do you end up being kind of like a team lead \n\n[00:16:43] role or do those teams have their own team leads. \n\n[00:16:47] Sandrian:\nThey have, they have their own managers here. If you, by team lead, you mean tech lead? Yeah, yeah, tech lead. Usually I'm not, if I'm a, when I'm a tech lead, it's not tech lead of people, it's a tech lead of projects. So I have a couple of projects and I'm leading that project and then whoever is in the project with me if that \n\n[00:17:07] makes sense Yeah, so managers are responsible for people and staffs are responsible of projects \n\n[00:17:15] Kent:\nYeah, cool. That makes sense. And 1 of the projects that you're working on right now is a design system. Is that right? You want to tell us a little bit \n\n[00:17:23] Sandrian:\nabout that? Not exactly the design system. It's a system, but not part of the design system. \n\n[00:17:30] Kent:\nOkay, Okay. Let's hear about that. \n\n[00:17:32] Sandrian:\nOh, okay. How can I try to explain this? It's like, as I said before, off of remote is forms. And when I say half is like, imagine that when you are on board, someone from United States, like when you need a new employee, like you have a company and you want to hire someone in the United States, the employee \n\n[00:17:53] needs to fill a bunch of forms, like your personal details, your bank details, address details. And then you need to fill the salary, the time off, all the benefits. You can imagine the number of forms. And I'll multiply that by 100 countries, which is more or less. So we are talking about \n\n[00:18:13] thousands of forms. How do you imagine these forms are? They cannot be hardcoded in the code ways. \n\n[00:18:18] Kent:\nNo, no, you got to have a CMS for that. \n\n[00:18:21] Sandrian:\nYou're going to need a headless system to handle all these forms. And then imagine, OK, you have this picture, right? Now let's go back to the very simple form. For example, a form that asks for the time off. And it says, oh, the time off in United States needs to be at least 10 days, right? \n\n[00:18:41] I think it's \n\n[00:18:41] Kent:\n10 days. I have no idea. \n\n[00:18:43] Sandrian:\nNo, 10 days, which is another topic, but okay, it's 10 days minimum. And you do that validation on the front end, you have your front end, minimum 10, then it goes to the API and the API also needs a validation, minimum 10. And now you have duplicated validation. So you don't \n\n[00:19:03] only need to build a form on the front end, you also do it on the back end. So you twice the work. So we need a system that works on both front end and back end where you can share the logic, the validations, you know, conditional fields, the label descriptions, all of that. How can you do it? So that headless system is what I'm working on. \n\n[00:19:24] Kent:\nOkay, okay. Yeah, we actually, so that aligns really nicely with the workshop because there's an exercise in the workshop where I show schema validation and we use Zod Schema to do that. And then a library called Conform will convert that Zod Schema \n\n[00:19:44] into HTML attributes that you can apply. And it also runs the Zod parsing on the client as well as on the server to share that. So yeah, that actually aligns really well. So, so far, how do you accomplish that? Or I guess you're still working on it. \n\n[00:20:01] Sandrian:\nYeah, so we are not using Zod. It was 1 of the things that we looked into it, but we are using this tool, not tool, a specification called JSON Schemas. \n\n[00:20:12] Kent:\nOh yeah, yeah, sure. \n\n[00:20:13] Sandrian:\nYeah, so basically we are using JSON Schemas to describe these, first these rules, like what we call country rules, for example, the time off for United States is at least 10 days. And then we also use those same JSON schemas to describe the forms. So field 1, field 2, field 3, \n\n[00:20:34] with all the labels, description, validations, conditionals. And it can be super powerful. And the thing is, it's JSON, so JSON, the advantage of it is that it works with any language. You can put it on the back end with any language, you can put it on the front end with any language. You just need to build kind of the validators or the parsers \n\n[00:20:55] to understand and compile that JSON in actual, you know, code. For example, on our side, the back end is Elixir, on the front end is React. So we kind of have a parser that transforms that to JavaScript and to React. And then eventually you have an actual form, with all the validations and accessibility in mind. But the thing is, \n\n[00:21:15] the actual form is already that, yeah, that's the design system, the visual thing, I'm a little bit behind that. I'm just on the headless part with the JSON schemas. \n\n[00:21:26] Kent:\nYeah, yeah, that makes a lot of sense. And actually, if I can validate your decision for what it's worth. Years ago, I worked on a form library for Angular called Angular Formly. And 1 of the really awesome things that a contributor did was put together \n\n[00:21:47] a JSON schema converter. So it would convert it from JSON schema into our API. And they had like thousands of forms. And the real, really nice benefit of JSON Schema is that it's serializable, so you can save it in a database. And I'm guessing that's probably \n\n[00:22:05] Sandrian:\nwhat you're doing. Yeah. Exactly. So that's also our solution to not have the forms are coded in your code base. So each time, for example, you need to imagine that the law changes tomorrow, and now it will be 20 days in the United States. We don't need engineers to change it. Then the thing is we have \n\n[00:22:26] UIs, like tools in our back office for our internal operations to go there and change directly. And that will change the JSON schema that is stored on the database. So we kind of also have this meta level where you have JSON schemas to generate JSON schemas. \n\n[00:22:43] Kent:\nOh yeah, sure. \n\n[00:22:44] Sandrian:\nYou know? \n\n[00:22:46] Kent:\nYeah, yeah. \n\n[00:22:46] Sandrian:\nAnd then you have the form builder where the operations can, you know, literally create, oh, I have this field and now I ask this and this and that and that. And then you need the JSON schema for each type of field that you allow the operations to create, like a JSON scheme for a number and JSON scheme for a select field. So it can be very, you know, \n\n[00:23:06] meta JSON scheme averse. \n\n[00:23:09] Kent:\nYeah, yeah, totally. So you have like a special app that's, you're kind of building a CMS for managing forms. \n\n[00:23:20] Sandrian:\nYeah, CMS, CMS sounds boring, but yeah. \n\n[00:23:23] Kent:\nYeah. Yeah, cool. So 1 challenge that I, that just occurred to me is, What do you do about when the law changes and now there's a new field that's required? And so you've got all this data in your database that previous employees had already filled out and saved, \n\n[00:23:44] but now we've got this new required field. Do you have to do some sort of migration? You set a default value for that field for them? Or do you have to email them all and say, you've got to fill this out? \n\n[00:23:55] Sandrian:\nYeah, that's the thing. The thing about this is that all this data is attached to a contract. Your contract says that you have 10 days off. If the law changes tomorrow, basically we need to do a new contract. So we cannot do a migration like that, you know, and change everyone in 1 sec. \n\n[00:24:16] I wish we could because it would simplify everyone's life, but as you can imagine, to be compliant, we cannot do that. So basically what we have in mind here is like we have a kind of automated system that you know, search through every employment, check the ones that are not compliant anymore, and then \n\n[00:24:36] triggers a notification for their employers. So, you know, the boss of each employee and, you know, it creates a new, what we call a new contract amendment or, you know, so basically a new version of the contract where both parties need to assign and okay, now you are compliant again with the law. \n\n[00:24:54] Kent:\nInteresting. So \n\n[00:24:56] Sandrian:\nsome of them are super easy. Some of them, it, it cannot be automated. You know, it really is to be case by case, depending on the country and depending on the law and depending on the effective date that the law changes. For example, oh, you know, the new salary will be, I don't know, 3000, but only applied next month. \n\n[00:25:16] So we also need a system to deal with that. \n\n[00:25:21] Kent:\nYeah. Wow. Sounds complicated. I guess that's why it can be a company. \n\n[00:25:26] Sandrian:\nExactly. This is a real problem. When you try to build a remote global team and you need to handle all these law little things across all the countries. Yeah, obviously remote as here a solid business case to solve. \n\n[00:25:44] Kent:\nYeah, absolutely. Well, very cool. So, yeah, I, I think that I've kind of asked all the things that I had on my mind. Is there anything else that you think it would be really useful to chat about before we wrap up? \n\n[00:26:00] Sandrian:\nAbout accessibility or being a staff or anything else? \n\n[00:26:03] Kent:\nYeah, any of those things. I think like, so we covered several topics on accessibility and being a staff engineer. I guess 1 question I have about the staff engineer is Do you miss coding as much as you were before? Like working on the actual product rather than just doing reviews \n\n[00:26:23] and prototypes and stuff like that? \n\n[00:26:26] Sandrian:\nI still work on the code. So I don't miss it. When I was a manager, yes, I miss it because I didn't code as much. But now as a staff, I still code, you know, I'm still close to the code. At least I'm close to the code. I'm close to understanding the technical \n\n[00:26:46] details about something. So I don't miss it. And I quite enjoy being a little, you know, giving room for others to also grow. There is this book that I really, really love is the Stuff Engineer Path by Tanya Rayleigh. And 1 of the things that she said on the book is \n\n[00:27:07] if you have like if you have time to do everything then you don't allow others to grow And that's the thing that kind of clicked for me as a staff, is like, okay, let me do something else and the others, or let me help others to do it so that I don't need to take the lead all the time. And that's \n\n[00:27:27] quite beautiful because then you can learn so many other things about, you know, an engineer. It's code is not the only thing that matters on your day to day. \n\n[00:27:38] Kent:\nOh, I think that's fantastic. And I'm glad to hear that you do have plenty of opportunity to code. I know a lot of people kind of as you go higher in the ranks of in the company, you often people complain that they don't get to code as much. But I guess you were able to take a track \n\n[00:27:58] that allows you to keep doing what you enjoy. \n\n[00:28:00] Sandrian:\nYou know, the IC track you are allowed to, if it was a management track, then yeah, it's not expected for you to code. So it's kind of this balance. And again, it really depends from company to company, even at remote, like we have staff that code every day And they are just a different archetype of stuff compared \n\n[00:28:21] to me. So it's not just 1 is better than the other. It's just different personas of stuff. Yeah. But yeah, to answer your question, I don't know what else I have to say here. With accessibility, you don't need to solve it all alone. I think that's my tip for the developers. You \n\n[00:28:41] need to find an ally here to help you solve the problems. That would be a tip here. And for people who are looking to become a staff, try to improve your communication skills with people who are not engineers. I think that would be \n\n[00:29:01] a way to improve your skills as an engineer. \n\n[00:29:05] Kent:\nI think those are great tips. Thank you for bringing those up. Now, if anybody has a desire to reach out to you or follow what you're doing and stuff like that. What is the best way for them to do that? \n\n[00:29:21] Sandrian:\nWell, you have not Twitter anymore, but the X platform. So I'm there, you know, at a underscore Sundrina underscore P and There you'll find everything else about me, you know the website contact Blah-blah-blah, you know traditional LinkedIn if you want to so I'm pretty easily reachable \n\n[00:29:41] online \n\n[00:29:43] Kent:\nSuper. All right, Sandrina. Thank you so much. This has been just a pleasure to visit with you. Always enjoy our chats. And yeah, we'll keep up with you as you continue on your journey. So thank you so much. \n\n[00:29:58] Sandrian:\nThank you so much, Kent, and good luck with everything with Epic Dev and, you know, epic success with you \n\n[00:30:06] Kent:\nThank you very much. Bye everybody \n\n[00:30:09] Sandrian:\nBye"
          },
          "state": "ready",
          "originalMediaUrl": "https://egghead-video-uploads.s3.amazonaws.com/epic-web/interviews/Sandrian+Pereira.mp4",
          "_createdAt": "2023-10-18T18:26:57Z",
          "_rev": "9CeTKuUcQZRsVUft8VlbTW",
          "_type": "videoResource",
          "duration": 1810.4,
          "muxAsset": {
            "muxAssetId": "78whiG00uLfTQK8GE4V02ZcoGRx5NLht0212YRz02Sb02N5c",
            "_type": "muxAsset",
            "muxPlaybackId": "6g1YrSZWmbMO33Kcz800cu602O8ihqMMe02StDZAqoIEZE"
          }
        }
      },
      {
        "videoResource": {
          "_rev": "6LaeqP6n94P8FD3sVhYIyk",
          "_id": "1WsDj4v3O4C48HJG2vogPW",
          "_createdAt": "2023-10-18T18:49:41Z",
          "title": "Sergio Xalambr.mp4",
          "_type": "videoResource",
          "muxAsset": {
            "muxPlaybackId": "R6xAZCsqeTqCPQetP3iQ4y5F2RKXd1DYhx7AdtcvSUU",
            "muxAssetId": "rF2p2rosLiiqTgdUUDA1Rh8Rxw6hH3HaeBl5iK0202jE8",
            "_type": "muxAsset"
          },
          "_updatedAt": "2024-03-19T20:25:24Z",
          "duration": 2357.833333,
          "state": "ready",
          "originalMediaUrl": "https://egghead-video-uploads.s3.amazonaws.com/epic-web/interviews/Sergio+Xalambr.mp4",
          "transcript": {
            "srt": "1\n00:00:00,199 --> 00:00:02,940\nHello everybody, this is Sergio Zalambri.\n\n2\n00:00:03,340 --> 00:00:04,200\nSay hi Sergio.\n\n3\n00:00:05,319 --> 00:00:06,000\nHi Sergio.\n\n4\n00:00:06,980 --> 00:00:08,160\nThere you go, nice.\n\n5\n00:00:08,940 --> 00:00:10,460\nGood. So Sergio,\n\n6\n00:00:10,760 --> 00:00:14,400\nyou've definitely, as you've been going through these workshops, Sergio\n\n7\n00:00:14,719 --> 00:00:16,540\nis the author of a number\n\n8\n00:00:16,900 --> 00:00:25,020\nof the packages and even patterns of different things that we've been doing in the workshops. So super thrilled to have Sergio in here.\n\n9\n00:00:26,040 --> 00:00:32,379\nSergio and I met as part of Remix, so like I think Sergio and I are among the first\n\n10\n00:00:33,040 --> 00:00:40,100\ndozen or so people who got licenses to Remix. Is that right, Sergio? Were you 1 of the first to get a license?\n\n11\n00:00:40,420 --> 00:00:43,160\nI'm not sure if I was 1 of the first, but I was 1 of the\n\n12\n00:00:43,860 --> 00:00:45,560\nones who got a license.\n\n13\n00:00:45,940 --> 00:00:47,000\nYeah, yeah.\n\n14\n00:00:47,440 --> 00:00:50,860\nSo we go back, it's a couple of years now.\n\n15\n00:00:51,400 --> 00:01:02,620\nAnd yeah, it's just been such a pleasure to get to know you, Sergio. Can you introduce yourself to everybody for us? Yes, I'm Sergio. I am a web developer working at a startup fintech\n\n16\n00:01:02,980 --> 00:01:03,480\nslash\n\n17\n00:01:04,060 --> 00:01:04,560\nnot-for-profit\n\n18\n00:01:05,019 --> 00:01:06,480\ncompany called Daffy\n\n19\n00:01:06,820 --> 00:01:10,700\nin the United States. I live in Peru. I am originally from Argentina.\n\n20\n00:01:12,660 --> 00:01:16,220\nAnd yeah, I've been working on this for a long time, like almost 10 years.\n\n21\n00:01:18,340 --> 00:01:19,460\nI'm happy to be here.\n\n22\n00:01:19,820 --> 00:01:21,420\nAwesome, yeah, good stuff.\n\n23\n00:01:22,400 --> 00:01:26,640\nSo I wanna ask you, since you were so early in the Remix\n\n24\n00:01:27,380 --> 00:01:29,700\nworld, what drew you to Remix initially?\n\n25\n00:01:30,560 --> 00:01:32,060\nWell, I was working\n\n26\n00:01:34,300 --> 00:01:36,640\non an internal application for my previous company,\n\n27\n00:01:37,380 --> 00:01:39,300\nand we have been doing some\n\n28\n00:01:39,720 --> 00:01:40,220\npatterns\n\n29\n00:01:40,840 --> 00:01:41,340\nthat\n\n30\n00:01:41,640 --> 00:01:46,100\nin the newsletter of Remix, when they were just talking about the idea they have,\n\n31\n00:01:46,840 --> 00:01:48,740\nI found that, hey, this is similar\n\n32\n00:01:49,120 --> 00:01:53,160\nto what I'm doing, because we also have moved it from using\n\n33\n00:01:53,800 --> 00:01:58,979\na React query on every component to move it to the root. I have some kind of loader,\n\n34\n00:01:59,820 --> 00:02:00,320\nbasically.\n\n35\n00:02:02,760 --> 00:02:08,600\nAnd some of the ideas basically resonated with me, like this is a great way to do it, makes a lot of sense.\n\n36\n00:02:10,300 --> 00:02:15,220\nSo when they made the option to purchase the license, I just went\n\n37\n00:02:15,620 --> 00:02:24,560\nand got 1 to try to use it and see if we can use it at work. I never used it at that company, but I am using it now as my current 1.\n\n38\n00:02:25,680 --> 00:02:27,880\nAnd at the current company, though,\n\n39\n00:02:28,940 --> 00:02:38,100\nyou didn't start from scratch with Remix. You had to migrate, right? Can you describe your migration experience a little bit? Yeah, we originally started with a React Router application\n\n40\n00:02:38,440 --> 00:02:39,400\nserver from\n\n41\n00:02:39,920 --> 00:02:43,380\nRails URL. So we had this Rails monolith\n\n42\n00:02:43,740 --> 00:02:47,420\nthat served an API and also served in HTML\n\n43\n00:02:47,900 --> 00:02:50,040\nthat loaded the React Router application.\n\n44\n00:02:50,980 --> 00:02:52,980\nWe realized soon that\n\n45\n00:02:53,420 --> 00:02:54,520\nwe need SEO,\n\n46\n00:02:56,260 --> 00:02:59,640\nso we had to move to something that could serve and render\n\n47\n00:03:00,060 --> 00:03:02,980\nthat React Router application and we moved it to Next because\n\n48\n00:03:03,740 --> 00:03:07,860\n1 of my co-workers is 1 of the original authors of Next.js.\n\n49\n00:03:08,320 --> 00:03:12,380\nOh, really? Oh, okay. From the G1. And I also had been using it\n\n50\n00:03:12,740 --> 00:03:13,880\nfor a lot of time.\n\n51\n00:03:15,060 --> 00:03:18,300\nAnd we started doing that, but I also liked it a lot how\n\n52\n00:03:18,840 --> 00:03:22,980\nRemix worked, so we followed with some of the patterns of Remix inside\n\n53\n00:03:23,800 --> 00:03:24,940\nof our Next application.\n\n54\n00:03:26,040 --> 00:03:27,180\nAnd after a while,\n\n55\n00:03:27,840 --> 00:03:29,980\nwe eventually decided to migrate\n\n56\n00:03:31,340 --> 00:03:35,400\nto Remix, so we had to do this gradual migration where\n\n57\n00:03:35,860 --> 00:03:41,440\nwe use Express to run both Next and Remix at the same time and move it root by root,\n\n58\n00:03:42,040 --> 00:03:43,820\nwell, URL by URL actually,\n\n59\n00:03:45,060 --> 00:03:45,560\nto\n\n60\n00:03:46,080 --> 00:03:49,300\nfrom Next to Remix until we eventually migrated everything\n\n61\n00:03:49,820 --> 00:03:52,220\nand we could remove the next part.\n\n62\n00:03:52,820 --> 00:04:05,820\nYeah, so can you describe a little bit more technically how that was accomplished? Like how you, because I'm sure there are a number of people who are listening right now going through the workshops and they're like, this sounds really nice, it's too bad I'm using Next, or you know,\n\n63\n00:04:07,080 --> 00:04:09,800\nthey are interested. So what was the technical\n\n64\n00:04:10,360 --> 00:04:12,320\naspect of how you accomplished that?\n\n65\n00:04:13,260 --> 00:04:16,200\nWell, the most important part was actually the\n\n66\n00:04:17,519 --> 00:04:20,880\nHTTP server, the Next, the express 1, because\n\n67\n00:04:21,620 --> 00:04:28,520\nat least on the next version we have, I'm not sure right now, but we could use next as a middleware\n\n68\n00:04:28,860 --> 00:04:29,360\nin\n\n69\n00:04:29,760 --> 00:04:30,260\nexpress,\n\n70\n00:04:30,780 --> 00:04:35,580\nsimilar to how Remix works. So what we did was set up this express server\n\n71\n00:04:35,980 --> 00:04:37,280\nfrom express\n\n72\n00:04:38,140 --> 00:04:38,940\nthrough express.\n\n73\n00:04:39,840 --> 00:04:45,460\nSo express receive the request and pass it to next. Every request went to next, except the static files.\n\n74\n00:04:46,060 --> 00:04:49,180\nAnd then we started adding before the next request\n\n75\n00:04:49,940 --> 00:04:50,440\nmiddleware,\n\n76\n00:04:51,100 --> 00:04:52,800\nthe remix 1.\n\n77\n00:04:53,860 --> 00:04:59,000\nSo this line, that's where we configured it. We say a slash something\n\n78\n00:04:59,600 --> 00:05:02,780\ngoes to remix. Everything else goes to Next.\n\n79\n00:05:03,480 --> 00:05:14,940\nAnd then we add another 1 and another 1. And as we migrated 1 by 1, we keep adding to this list of routes that were on the express server configured to go to REMIX. So we had a long\n\n80\n00:05:16,500 --> 00:05:18,500\nlist of routes until we migrated\n\n81\n00:05:19,200 --> 00:05:19,700\nthe\n\n82\n00:05:20,900 --> 00:05:24,220\nuser profiles because user profiles were a catch-all route.\n\n83\n00:05:24,960 --> 00:05:27,760\nSo we were last whatever is a user profile.\n\n84\n00:05:28,380 --> 00:05:30,560\nWhen we, once we migrated that to Remix,\n\n85\n00:05:30,920 --> 00:05:32,140\nwe did a switch\n\n86\n00:05:32,920 --> 00:05:33,420\nand\n\n87\n00:05:33,840 --> 00:05:34,340\nconfigured\n\n88\n00:05:34,760 --> 00:05:37,660\nwhat routes, what URLs went to Next\n\n89\n00:05:38,260 --> 00:05:41,020\nand send everything else to Remix.\n\n90\n00:05:41,820 --> 00:05:44,840\nAnd then we started removing the lines 1 by 1.\n\n91\n00:05:46,400 --> 00:05:48,120\nSo we had to change\n\n92\n00:05:48,700 --> 00:05:58,920\nhow authentication works. That was 1 of the first thing we had to do because we wanted to share the authentication between Next and Remix, and we were using NextOut at that moment.\n\n93\n00:05:59,600 --> 00:06:03,220\nSo We switched to RemixOut, I created RemixOut for that.\n\n94\n00:06:05,860 --> 00:06:07,560\nAnd because the session\n\n95\n00:06:08,240 --> 00:06:08,740\nstorage\n\n96\n00:06:09,320 --> 00:06:16,080\nobject from Remix is actually not tied at Remix at all. It's just an object to work with cookies and sessions.\n\n97\n00:06:16,580 --> 00:06:18,900\nWe just used that same object in Next.\n\n98\n00:06:19,340 --> 00:06:22,940\nSo we just imported it from Remix inside the Next application\n\n99\n00:06:24,320 --> 00:06:29,740\nand used that to know if the user was authenticated. And we did the same thing we were doing before,\n\n100\n00:06:30,100 --> 00:06:35,420\nbut with the Remix Session Storage. And in the Remix application, we just use a Remix app.\n\n101\n00:06:36,500 --> 00:06:41,080\nYeah, yeah, yeah. That makes sense. How did you make it so that, cause actually\n\n102\n00:06:41,460 --> 00:06:42,420\nto step back,\n\n103\n00:06:43,180 --> 00:06:44,280\nduring this transition,\n\n104\n00:06:45,800 --> 00:06:51,400\nno pun intended, The transitions between 1 app to another had to be a full page refresh. Is that right?\n\n105\n00:06:51,780 --> 00:06:52,280\nBecause,\n\n106\n00:06:52,660 --> 00:06:53,540\nyeah. So\n\n107\n00:06:54,960 --> 00:06:59,340\nwith that in mind, when you migrated your first route to Remix,\n\n108\n00:06:59,640 --> 00:07:04,460\nhow did you communicate to Next.js that that page transition needed to be a full page refresh?\n\n109\n00:07:04,780 --> 00:07:09,980\nWe did the simplest thing that we could do. We just replaced the Next link component with an anchor tag.\n\n110\n00:07:10,600 --> 00:07:12,460\nAnd every link from Remix\n\n111\n00:07:13,380 --> 00:07:20,040\nto Next was also an anchor tag. It was actually a link tag, a link component, but with a reload document prop.\n\n112\n00:07:20,460 --> 00:07:21,240\nOh, sure.\n\n113\n00:07:21,660 --> 00:07:23,800\nSo we just did that and everything\n\n114\n00:07:24,100 --> 00:07:25,580\nwas like a normal navigation.\n\n115\n00:07:26,600 --> 00:07:28,000\nSo then as you migrated\n\n116\n00:07:28,520 --> 00:07:35,420\nthings from Next to Remix, you could change them from anchor tags to link tags? We actually just keep everything\n\n117\n00:07:35,800 --> 00:07:37,160\nin Remix to reload\n\n118\n00:07:37,680 --> 00:07:39,880\nthe page because sometimes some routes\n\n119\n00:07:41,120 --> 00:07:41,620\nredirected\n\n120\n00:07:42,180 --> 00:07:43,160\nto a next\n\n121\n00:07:44,380 --> 00:07:44,880\nURL,\n\n122\n00:07:45,540 --> 00:07:46,200\nbut it\n\n123\n00:07:46,520 --> 00:07:50,640\nwas initially a Remix route, and we send a post to a Remix route.\n\n124\n00:07:51,260 --> 00:07:55,760\nSo it was easy to just let everything reload, work everything as an MPA.\n\n125\n00:07:57,500 --> 00:08:14,600\nAnd when we migrated everything, we removed the reload document perhaps. Yeah, that sounds pretty like the safe option there too, for sure. Yeah, we actually had some issues with that before. Before we started doing this, we had some cases where a remix is shown with a 404\n\n126\n00:08:15,560 --> 00:08:16,060\npage,\n\n127\n00:08:17,280 --> 00:08:22,560\nthen you reload it, it work out because it was not being routed to Next.js\n\n128\n00:08:23,560 --> 00:08:31,020\nor the inverse too. Next tried to load the page, the page didn't exist, it showed an error, you reloaded, it worked because now it was Remix.\n\n129\n00:08:32,500 --> 00:08:39,440\nYeah, that makes plenty of sense. OK, so in the process of doing that, you mentioned that you built\n\n130\n00:08:39,799 --> 00:08:40,299\nRemixAuth\n\n131\n00:08:40,960 --> 00:08:41,460\nto\n\n132\n00:08:42,179 --> 00:08:43,880\nmake that easier to\n\n133\n00:08:44,360 --> 00:08:45,540\nmigrate. And then\n\n134\n00:08:45,920 --> 00:08:49,460\nyou also, I'm guessing, lots of the utilities that are in RemixUtils\n\n135\n00:08:50,800 --> 00:08:54,300\ncame as a result of all the work that you were doing there, is that right? Yeah.\n\n136\n00:08:54,620 --> 00:08:55,120\nYeah.\n\n137\n00:08:55,640 --> 00:08:57,140\nAll my packages are\n\n138\n00:08:57,720 --> 00:08:59,700\nfrom things I needed to do\n\n139\n00:09:00,020 --> 00:09:00,940\nat 1 point.\n\n140\n00:09:01,620 --> 00:09:02,940\nSo RemixAu was,\n\n141\n00:09:03,620 --> 00:09:04,880\nI needed to do authentication.\n\n142\n00:09:05,280 --> 00:09:06,920\nWe used Auth0 for that.\n\n143\n00:09:07,740 --> 00:09:13,840\nAnd we tried a lot of things. I tried Passport, JS, FIRS, it worked, of course, because it was an express.\n\n144\n00:09:14,700 --> 00:09:19,700\nBut I wanted to have that as part of Remix, not as part of Express.\n\n145\n00:09:20,320 --> 00:09:21,140\nI also\n\n146\n00:09:21,600 --> 00:09:22,100\ntried\n\n147\n00:09:22,540 --> 00:09:23,240\nthe Auth0,\n\n148\n00:09:23,800 --> 00:09:24,640\nReact, SDK.\n\n149\n00:09:24,960 --> 00:09:30,780\nIt worked too, but we had issues with server-side rendering because it's all intended to work client-side.\n\n150\n00:09:32,260 --> 00:09:34,400\nAnd at the end, I just decided to\n\n151\n00:09:35,340 --> 00:09:36,640\ncreate Remix Auth.\n\n152\n00:09:37,660 --> 00:09:41,700\nThe original version was completely intended to use with OutZero.\n\n153\n00:09:42,400 --> 00:09:44,440\nI eventually realized that I could just,\n\n154\n00:09:44,760 --> 00:09:45,980\neverything OutZero do,\n\n155\n00:09:46,800 --> 00:09:48,360\nit was actually just OAuth2\n\n156\n00:09:49,300 --> 00:09:52,160\nflow and that's standard so I could move it to\n\n157\n00:09:52,780 --> 00:09:59,420\na strategy and create this pattern. But it's not, I didn't create it, it's the same thing as Passport does.\n\n158\n00:10:00,100 --> 00:10:00,880\nI just\n\n159\n00:10:01,720 --> 00:10:03,180\nstarted creating these strategies\n\n160\n00:10:04,020 --> 00:10:06,300\nand created the OAuth2 strategy.\n\n161\n00:10:06,820 --> 00:10:09,160\nSo the Oauth2 strategy extends from there\n\n162\n00:10:09,800 --> 00:10:14,640\nand then created other strategies mostly to show how this can be done.\n\n163\n00:10:15,060 --> 00:10:17,860\nAnd a lot of people created more strategies after that.\n\n164\n00:10:18,420 --> 00:10:22,500\nYeah, that was a good call on doing the strategies following Passport's\n\n165\n00:10:24,520 --> 00:10:26,620\npatterns there. I think that like,\n\n166\n00:10:27,280 --> 00:10:32,340\nPassport is still very relevant for people doing Express apps and Node.js\n\n167\n00:10:33,140 --> 00:10:34,020\nbased apps\n\n168\n00:10:34,400 --> 00:10:37,900\nand for a good reason, because it's just, it's good. It's good stuff.\n\n169\n00:10:38,760 --> 00:10:40,740\nAnd I've been enjoying using RemixAuth\n\n170\n00:10:41,580 --> 00:10:42,080\nfor\n\n171\n00:10:42,440 --> 00:10:45,820\nespecially the more complicated stuff. I found Originally,\n\n172\n00:10:46,260 --> 00:10:48,740\nI just said, okay, I'm gonna use RemixAuth for everything.\n\n173\n00:10:49,440 --> 00:10:50,820\nAnd I found that\n\n174\n00:10:51,180 --> 00:10:52,560\nthe web forms\n\n175\n00:10:52,960 --> 00:10:53,460\nstrategy\n\n176\n00:10:54,140 --> 00:10:54,640\nwasn't\n\n177\n00:10:55,200 --> 00:11:05,580\ngiving me a whole lot on top of, just implementing that myself, which I thought was kind of interesting. And I mentioned that to you and you said yeah that doesn't really do too much. So where I find\n\n178\n00:11:06,100 --> 00:11:06,600\nRemixAuth\n\n179\n00:11:06,980 --> 00:11:10,940\nbeing really useful, like extremely useful, is in the really complicated\n\n180\n00:11:11,300 --> 00:11:11,800\nOAuth2\n\n181\n00:11:12,880 --> 00:11:13,380\nflows\n\n182\n00:11:14,040 --> 00:11:15,320\nand OIDC\n\n183\n00:11:16,780 --> 00:11:18,260\nand that sort of thing.\n\n184\n00:11:18,620 --> 00:11:27,620\nIt's been extremely useful. In fact, today I will be recording those videos for Epic Web. So if you're watching this video as a part of those workshop exercises,\n\n185\n00:11:28,460 --> 00:11:30,120\nboth of those things happened today.\n\n186\n00:11:32,460 --> 00:11:32,960\nYeah.\n\n187\n00:11:33,680 --> 00:11:38,500\nYeah, I think it's interesting because the original form strategy was called a\n\n188\n00:11:38,860 --> 00:11:44,940\nlocal strategy. That's how password also call it. And it's completely focused on you have 2 inputs,\n\n189\n00:11:45,360 --> 00:11:51,420\na username input that can be the email and a password input and that's it. And you just receive those\n\n190\n00:11:51,820 --> 00:11:54,440\nvalues directly on the strategy callback.\n\n191\n00:11:55,200 --> 00:12:04,940\nAnd then I realized that what if you want 3 inputs? Like I use apps that needs 3 inputs. I use some, the app I use to pay my taxes needs 3 inputs,\n\n192\n00:12:05,740 --> 00:12:07,940\nmy ID, my username and my password.\n\n193\n00:12:09,800 --> 00:12:13,600\nSo I just created the form 1 and then when I build the form strategy,\n\n194\n00:12:14,060 --> 00:12:14,560\nit\n\n195\n00:12:15,020 --> 00:12:15,620\nwas like\n\n196\n00:12:16,080 --> 00:12:22,000\nthis doesn't do a lot of things. It just call requests from data for you and that's it. Yeah.\n\n197\n00:12:23,560 --> 00:12:34,540\nIt's useful if you already have everything. If you want to keep everything in RemixAuth, it's useful to have that. But if you don't, it's okay to just don't use it because it's not gonna do a lot of things.\n\n198\n00:12:34,900 --> 00:12:40,140\nYes, yeah. And yeah, I found that with that approach then,\n\n199\n00:12:40,520 --> 00:12:46,160\nI pretty much just use RemixAuth for handling the OAuth flow. And once I get\n\n200\n00:12:46,500 --> 00:12:49,340\nthe user from GitHub or from Google or from wherever,\n\n201\n00:12:50,080 --> 00:12:53,600\nthen I feed that into my regular auth flow\n\n202\n00:12:53,940 --> 00:12:58,300\nwith my own session storage management and everything like that. And that's worked out really well.\n\n203\n00:12:58,700 --> 00:13:00,560\nSo RemixAuth really\n\n204\n00:13:00,920 --> 00:13:01,420\nsimplified\n\n205\n00:13:02,220 --> 00:13:02,720\nthe\n\n206\n00:13:03,340 --> 00:13:12,160\nauth flow for the complicated stuff, but then allows me to have a lot of control over the lot simpler things, which I think is a really nice aspect of it.\n\n207\n00:13:13,860 --> 00:13:14,660\nYeah, so\n\n208\n00:13:16,060 --> 00:13:19,140\nI also am kind of curious what your thoughts are on\n\n209\n00:13:19,540 --> 00:13:20,040\nmore,\n\n210\n00:13:20,660 --> 00:13:21,720\nshall we say modern\n\n211\n00:13:22,160 --> 00:13:26,260\napproaches to authentication or like the up and coming approaches to authentication.\n\n212\n00:13:26,980 --> 00:13:29,180\nSpecifically, I'm talking about pass keys.\n\n213\n00:13:29,640 --> 00:13:35,520\nCause This is something that I think I had heard about a while ago, but it's really been picking up steam from the standards\n\n214\n00:13:35,840 --> 00:13:36,340\napproach.\n\n215\n00:13:36,760 --> 00:13:38,860\nSo can you tell us a little bit about Passkeys?\n\n216\n00:13:39,440 --> 00:13:39,940\nYeah.\n\n217\n00:13:40,480 --> 00:13:51,980\nFor those who don't know what Passkeys is, it's this new thing that Apple, Google, and other companies created that's basically similar to how two-factor authentication works. You have\n\n218\n00:13:52,760 --> 00:13:53,800\nthis hardware thing\n\n219\n00:13:54,280 --> 00:13:57,780\nin the passkey scenario is your computer or your cell phone\n\n220\n00:13:59,000 --> 00:13:59,980\nand you start\n\n221\n00:14:00,360 --> 00:14:00,980\nto authenticate\n\n222\n00:14:01,520 --> 00:14:05,820\nwith a website or application by using a private and public key. It's\n\n223\n00:14:06,540 --> 00:14:13,220\na private and public key authentication but using your device directly instead of a second device like a YubiKey.\n\n224\n00:14:15,440 --> 00:14:16,820\nI like a lot the pattern.\n\n225\n00:14:17,320 --> 00:14:18,000\nI hope\n\n226\n00:14:18,480 --> 00:14:20,100\nevery website use\n\n227\n00:14:20,740 --> 00:14:25,180\npasskey in the future because it's way simpler to just click a button and log in.\n\n228\n00:14:25,760 --> 00:14:26,260\nAnd\n\n229\n00:14:26,660 --> 00:14:35,260\nthere are a lot of other things you can do, like automatically log in users. You don't need to wait for them to click a button. You can just check with JavaScript.\n\n230\n00:14:35,580 --> 00:14:38,380\nHey, does the user have the passkey for my website?\n\n231\n00:14:39,380 --> 00:14:41,620\nIf it does and has only 1,\n\n232\n00:14:41,980 --> 00:14:47,220\nyou can automatically log in, log the user in and that's it. You don't need to think about that.\n\n233\n00:14:48,180 --> 00:14:51,240\nYeah, I think it's a very cool thing.\n\n234\n00:14:51,580 --> 00:14:53,180\nI appreciate that it's a standard.\n\n235\n00:14:53,720 --> 00:14:57,460\nAlex Anderson put together a remix auth strategy for it.\n\n236\n00:14:58,020 --> 00:15:00,760\nAnd while he was very responsive to\n\n237\n00:15:01,260 --> 00:15:03,660\nmy needs as I was experimenting with it.\n\n238\n00:15:04,020 --> 00:15:10,400\nIt's just still too early for me to include it in the workshop. So I may add an exercise after the launch,\n\n239\n00:15:11,060 --> 00:15:18,920\nbut I need a little bit of time playing around with it before I can feel confident and say, do it this way. Because I don't, I'm not sure yet. Yeah.\n\n240\n00:15:19,940 --> 00:15:24,660\nMakes sense. Yeah, sorry, go ahead. Makes sense. Yeah, yeah. So\n\n241\n00:15:25,920 --> 00:15:27,940\nI definitely plan on the EpicStacks\n\n242\n00:15:28,580 --> 00:15:29,080\nhaving\n\n243\n00:15:29,440 --> 00:15:30,860\npass keys in the future.\n\n244\n00:15:32,780 --> 00:15:39,220\nBecause I really look forward to a future where our users don't have to worry about storing passwords and things.\n\n245\n00:15:39,720 --> 00:15:50,420\nAnd that their device just is the thing that identifies them, which I think is cool. Of course, That does come with the drawback of like, if I want to use the library's computer, how do I log in?\n\n246\n00:15:50,860 --> 00:15:53,000\nWhich I think is probably why-\n\n247\n00:15:53,500 --> 00:15:54,820\nYou can, because\n\n248\n00:15:55,440 --> 00:15:59,740\nASCII's allow you to generate a QR code. The browser actually\n\n249\n00:16:00,060 --> 00:16:16,900\ngenerates the QR code and you can use your phone, scan your code and authorize the computer. So you don't need to be on your computer. You just need to have your cell phone with you. Yes, yeah. And that is actually super cool. So when I add that to the Epic stack, we'll definitely make sure that that is supported as well.\n\n250\n00:16:17,660 --> 00:16:28,940\nAnd I don't think you have to do anything to support that. I think that just the standards, the user agent is the 1 that generates the QR code for you and everything. So it's pretty sick, actually. I love that.\n\n251\n00:16:29,340 --> 00:16:32,260\nLet's have the user agent do more for us please.\n\n252\n00:16:34,020 --> 00:16:34,520\nBut\n\n253\n00:16:35,280 --> 00:16:42,100\nthere is the drawback still of somebody loses their device and now they don't have access to any of their accounts, which I think is why\n\n254\n00:16:42,400 --> 00:16:48,980\nGoogle and Apple and 1Password and all of these are going to hook into these so that you can save those to those\n\n255\n00:16:49,500 --> 00:16:50,420\npassword managers.\n\n256\n00:16:51,660 --> 00:16:53,500\nCause yeah, otherwise you'll be in trouble.\n\n257\n00:16:54,840 --> 00:16:57,380\nYeah, I think Apple does that already with\n\n258\n00:16:58,660 --> 00:17:01,340\nKeychain, with Apple Keychain, the password manager.\n\n259\n00:17:02,640 --> 00:17:07,359\nAnd I remember I read that 1 password already supports that too.\n\n260\n00:17:09,660 --> 00:17:10,440\nYeah, so\n\n261\n00:17:11,000 --> 00:17:13,060\nit is gonna be an awesome world.\n\n262\n00:17:13,660 --> 00:17:15,859\nI do think we will not get away from\n\n263\n00:17:16,560 --> 00:17:18,339\nhaving some sort of password\n\n264\n00:17:18,740 --> 00:17:25,579\nat some level. Like you're gonna need a password for your Apple account. You're gonna need a password for your 1Password account. Like\n\n265\n00:17:26,040 --> 00:17:31,360\nat some place you're going to need to provide a password to get into this wonderful world of passkeys,\n\n266\n00:17:32,920 --> 00:17:33,840\nfor it to\n\n267\n00:17:34,540 --> 00:17:38,400\nwork for those edge cases if I lost my device or whatever. But\n\n268\n00:17:39,620 --> 00:17:44,720\nI definitely appreciate not having to enter a username and password everywhere. So\n\n269\n00:17:45,040 --> 00:17:46,580\nHopefully that is in our future.\n\n270\n00:17:48,480 --> 00:17:50,780\nSo I wanna ask you about with RemixAuth,\n\n271\n00:17:51,860 --> 00:17:57,080\nhow do you decide what gets included in Remix, or sorry, not RemixAuth, RemixUtils.\n\n272\n00:17:58,000 --> 00:18:00,740\nHow do you decide what gets included into RemixUtils\n\n273\n00:18:01,200 --> 00:18:02,300\nand how do you,\n\n274\n00:18:03,520 --> 00:18:08,460\nwhere did lots of these ideas for these utilities come from? Well, most of them were\n\n275\n00:18:08,760 --> 00:18:10,760\nthings I built for myself\n\n276\n00:18:11,200 --> 00:18:11,700\nor\n\n277\n00:18:12,280 --> 00:18:13,640\nthe work I do at Daffy.\n\n278\n00:18:15,180 --> 00:18:18,360\nMost helpers you do for there, like get\n\n279\n00:18:19,300 --> 00:18:20,240\na client,\n\n280\n00:18:20,900 --> 00:18:23,240\na user, the client IP address\n\n281\n00:18:24,280 --> 00:18:27,480\nfunction to get the IP of the user. We need that\n\n282\n00:18:27,900 --> 00:18:30,840\nto localize the user. So I build that.\n\n283\n00:18:31,760 --> 00:18:32,260\nAnd\n\n284\n00:18:32,560 --> 00:18:33,060\nothers\n\n285\n00:18:33,380 --> 00:18:40,220\nare things I saw people in the communities talking about on this call and I can get this is useful\n\n286\n00:18:40,520 --> 00:18:45,120\nand more people should benefit from that and I can put it on. Let me get those.\n\n287\n00:18:45,580 --> 00:18:46,860\nThere's a\n\n288\n00:18:47,460 --> 00:18:49,640\nserver-side event. You did this for examples\n\n289\n00:18:50,020 --> 00:18:51,880\nwere created originally by,\n\n290\n00:18:52,200 --> 00:18:52,900\nby Ryan.\n\n291\n00:18:53,460 --> 00:18:56,900\nAnd I just copied from the linear copy example\n\n292\n00:18:57,280 --> 00:18:58,400\nthat he built,\n\n293\n00:19:00,600 --> 00:19:02,640\ngrabbed those utils, put them on RemixUtils,\n\n294\n00:19:02,980 --> 00:19:04,260\nimprove them a little bit,\n\n295\n00:19:06,140 --> 00:19:07,620\nand went back to the project\n\n296\n00:19:08,080 --> 00:19:12,340\nand send the PR tools, just use RemixUtils, so you don't need to copy that.\n\n297\n00:19:13,600 --> 00:19:15,600\nYeah, I definitely appreciate that\n\n298\n00:19:15,900 --> 00:19:19,940\nas a user of many Remix Utils utilities, especially\n\n299\n00:19:21,100 --> 00:19:21,600\nthe\n\n300\n00:19:22,280 --> 00:19:25,220\nauthenticity token for cross-site request forgery\n\n301\n00:19:26,100 --> 00:19:27,840\nstuff and the Honeypot\n\n302\n00:19:28,840 --> 00:19:30,040\nare both like,\n\n303\n00:19:31,260 --> 00:19:33,980\nHoneypot is, I wouldn't say it's trivial.\n\n304\n00:19:34,940 --> 00:19:38,860\nIt's like, there are a couple things you need to think about and certainly the\n\n305\n00:19:39,720 --> 00:19:42,680\nauthenticity token, not a trivial thing either.\n\n306\n00:19:43,480 --> 00:19:46,060\nAnd so just having an easy way to do that\n\n307\n00:19:46,560 --> 00:19:48,480\nis quite nice. And then of course,\n\n308\n00:19:49,020 --> 00:19:56,680\nthere's smaller things that I don't wanna have to copy around all over the place that I really appreciate. I just install Remix Utils and I can use it all over the place.\n\n309\n00:19:57,040 --> 00:19:58,480\nYeah, that's a good idea.\n\n310\n00:19:58,860 --> 00:19:59,360\nYeah,\n\n311\n00:20:00,060 --> 00:20:00,560\nSo\n\n312\n00:20:01,780 --> 00:20:04,500\nRemix Utils is kind of about like filling in some,\n\n313\n00:20:05,140 --> 00:20:07,840\nsome things that might be considered gaps in Remix,\n\n314\n00:20:08,800 --> 00:20:14,360\nor just like some things that we end up doing a lot that would be nice to not have to do over and over again.\n\n315\n00:20:15,040 --> 00:20:15,740\nAre there\n\n316\n00:20:16,320 --> 00:20:22,800\nlike, but we can't fill in all of the gaps that Remix has, like, there are some things that need to be done\n\n317\n00:20:23,240 --> 00:20:25,460\nin Remix core to improve\n\n318\n00:20:25,900 --> 00:20:29,280\nRemix itself. What are some of those things for you? Like,\n\n319\n00:20:29,600 --> 00:20:34,180\nwhere is Remix lacking and what are you looking forward to in the future for Remix improving?\n\n320\n00:20:34,840 --> 00:20:36,520\nI would love to have\n\n321\n00:20:36,960 --> 00:20:37,460\nbetter\n\n322\n00:20:37,900 --> 00:20:38,400\ninternationalization\n\n323\n00:20:38,860 --> 00:20:41,340\nsupport. Ooh, yeah. In Remix.\n\n324\n00:20:42,440 --> 00:20:44,480\nRight now, you can do a lot of things\n\n325\n00:20:45,480 --> 00:20:47,420\nwith external packages like Remix\n\n326\n00:20:48,540 --> 00:20:49,040\nI18next,\n\n327\n00:20:51,200 --> 00:20:51,700\nBut\n\n328\n00:20:52,900 --> 00:20:56,080\nit's still, there are things that are harder to do.\n\n329\n00:20:56,460 --> 00:20:58,840\nBut if you want to translate the path\n\n330\n00:20:59,440 --> 00:21:00,320\non the URL.\n\n331\n00:21:00,840 --> 00:21:01,580\nYeah, yeah.\n\n332\n00:21:03,180 --> 00:21:04,960\nI personally don't care about that\n\n333\n00:21:05,380 --> 00:21:08,040\nas a user, but I know a lot of people\n\n334\n00:21:08,440 --> 00:21:12,260\ndo it. Like they translate slash about to whatever in\n\n335\n00:21:12,720 --> 00:21:14,520\nthat's translated in another language.\n\n336\n00:21:17,140 --> 00:21:18,680\nThey do it for SEO reasons.\n\n337\n00:21:19,820 --> 00:21:27,320\nSo that's something I would love to have more support directly in Remix. Also maybe a way to load the translation files directly.\n\n338\n00:21:29,820 --> 00:21:30,320\nIdeally\n\n339\n00:21:31,060 --> 00:21:34,320\neverything in YMTnext is supported directly by\n\n340\n00:21:34,700 --> 00:21:37,960\nRemix, but It's hard to do because how do you render\n\n341\n00:21:38,500 --> 00:21:40,740\ntext that includes a\n\n342\n00:21:41,340 --> 00:21:48,340\ncomponent inside, for example, that needs more work to be done and it's the job that react in NextLoss.\n\n343\n00:21:49,640 --> 00:21:50,740\nI think that\n\n344\n00:21:51,460 --> 00:21:53,540\nat least for translating the URL,\n\n345\n00:21:53,920 --> 00:21:58,940\nfrom what I understand with what Remix is working on with version 3, that should be possible.\n\n346\n00:22:00,060 --> 00:22:00,980\nSo you can\n\n347\n00:22:01,720 --> 00:22:05,140\nread what the user's locale is and then dynamically\n\n348\n00:22:05,580 --> 00:22:06,880\ngenerate the routes\n\n349\n00:22:07,260 --> 00:22:12,420\nbased on that, which pretty wild. I don't know how they're gonna manage that, but yeah,\n\n350\n00:22:12,740 --> 00:22:21,900\npretty cool stuff. That would be amazing. Yeah. Right now you can do it. Everything you need to do, you can do it some way right now because Remix is really pluggable.\n\n351\n00:22:22,540 --> 00:22:25,340\nBut you need to go to the Remix config\n\n352\n00:22:26,760 --> 00:22:28,220\nand add the roots functions\n\n353\n00:22:28,620 --> 00:22:37,700\nand use define roots to define all the possible translation. And if you add a new 1, you need to deploy again to build the app again. Yeah. And you need to ensure the root IDs\n\n354\n00:22:38,260 --> 00:22:38,960\nare not\n\n355\n00:22:39,400 --> 00:22:39,900\ncolliding.\n\n356\n00:22:40,900 --> 00:22:41,820\nA lot of things\n\n357\n00:22:42,260 --> 00:22:45,820\nthat will be great if the framework do it directly for you.\n\n358\n00:22:46,220 --> 00:22:50,820\nYeah, yeah, totally. Is there anything else that you're hoping for in the future of Remix?\n\n359\n00:22:51,820 --> 00:22:52,860\nWell, I have some\n\n360\n00:22:54,440 --> 00:22:56,260\nproposals I have to listen to.\n\n361\n00:22:57,380 --> 00:22:59,200\nThere is 1 that I think\n\n362\n00:23:00,240 --> 00:23:03,480\nRed server components may solve for me. That's a\n\n363\n00:23:04,020 --> 00:23:04,880\nsibling roots\n\n364\n00:23:06,060 --> 00:23:07,220\nbecause I have\n\n365\n00:23:08,000 --> 00:23:09,800\na dashboard like UI\n\n366\n00:23:10,320 --> 00:23:15,000\nthat has many widgets on the right side the right sidebar\n\n367\n00:23:15,560 --> 00:23:18,480\nand they need to load their own data and sometimes\n\n368\n00:23:19,220 --> 00:23:19,980\nthey do mutations.\n\n369\n00:23:20,740 --> 00:23:23,420\nAnd I need to support all of that in\n\n370\n00:23:23,800 --> 00:23:26,020\nthe root loader and the root action.\n\n371\n00:23:27,520 --> 00:23:29,160\nBut if we can\n\n372\n00:23:29,540 --> 00:23:36,800\nsay this root has all of these other sibling roots and now rendered in this place. Like I just say, he rendered\n\n373\n00:23:37,120 --> 00:23:40,820\nthe sibling number 1, the sibling number 2, the sibling number 3,\n\n374\n00:23:41,200 --> 00:23:44,700\nand have each sibling root had a loader and an action.\n\n375\n00:23:45,620 --> 00:23:50,060\nSo they can work in isolation. And I don't need to care about that on the main content\n\n376\n00:23:50,460 --> 00:23:52,900\nroot which is the primary root.\n\n377\n00:23:53,420 --> 00:23:59,280\nYeah, yeah, yeah. So Remix v3 with server components, that 100% will solve that problem.\n\n378\n00:24:00,140 --> 00:24:06,240\nYeah, from at least from what I've seen, I'm not on the Remix team anymore, so I can't really say for sure, but\n\n379\n00:24:06,940 --> 00:24:09,360\nfrom what I've seen, that is definitely\n\n380\n00:24:09,840 --> 00:24:13,280\na use case that will be completely satisfied by\n\n381\n00:24:13,820 --> 00:24:16,100\nV3. So in that world,\n\n382\n00:24:16,400 --> 00:24:17,860\nthings actually get simpler\n\n383\n00:24:19,280 --> 00:24:19,780\nthan\n\n384\n00:24:20,160 --> 00:24:20,960\nmore complicated\n\n385\n00:24:21,340 --> 00:24:21,840\nbecause\n\n386\n00:24:22,500 --> 00:24:25,460\nit changes from being root specific to being components.\n\n387\n00:24:26,000 --> 00:24:27,540\nAnd then you can\n\n388\n00:24:27,920 --> 00:24:29,160\nkind of opt into\n\n389\n00:24:30,060 --> 00:24:33,100\na component having URL by configuring it as\n\n390\n00:24:33,540 --> 00:24:34,840\npart of the router.\n\n391\n00:24:36,040 --> 00:24:36,800\nAnd so,\n\n392\n00:24:37,120 --> 00:24:40,740\nyeah, every single component can have a loader and an action and\n\n393\n00:24:41,780 --> 00:24:44,980\nall of that. It basically takes the full stack component\n\n394\n00:24:46,240 --> 00:24:46,740\nconcept\n\n395\n00:24:47,100 --> 00:24:52,900\nand turns it into like a legit thing where every component can be its own quote unquote route\n\n396\n00:24:53,600 --> 00:24:55,340\nwith a letter and an action.\n\n397\n00:24:55,680 --> 00:24:58,020\nSo it's going to be a pretty sweet\n\n398\n00:24:58,340 --> 00:25:01,100\nworld in the future. I'm looking forward to it myself.\n\n399\n00:25:01,920 --> 00:25:10,300\nYeah, same. Another thing I'm looking for is to have some root constraints. That's how they're called in Rails world.\n\n400\n00:25:10,920 --> 00:25:15,400\nThe idea that you can say this root only match if the UR is a param\n\n401\n00:25:16,100 --> 00:25:16,920\nin the URoot\n\n402\n00:25:17,520 --> 00:25:18,020\nhas\n\n403\n00:25:19,600 --> 00:25:21,000\nthis constraint, like\n\n404\n00:25:21,340 --> 00:25:22,480\nit starts with\n\n405\n00:25:23,420 --> 00:25:26,700\na specific character, or it starts with a number,\n\n406\n00:25:27,740 --> 00:25:32,540\nor it has at least 1 dash, and things like that. So you can have\n\n407\n00:25:33,060 --> 00:25:35,400\n2 routes at the same level\n\n408\n00:25:35,860 --> 00:25:36,720\nof the URL\n\n409\n00:25:37,360 --> 00:25:40,620\nand the same segment, but they can match different values.\n\n410\n00:25:40,940 --> 00:25:42,460\nLike you can say,\n\n411\n00:25:43,380 --> 00:25:44,360\nif it starts\n\n412\n00:25:44,760 --> 00:25:45,260\nwith\n\n413\n00:25:46,120 --> 00:25:46,620\nthe\n\n414\n00:25:47,780 --> 00:25:48,740\nU character,\n\n415\n00:25:49,540 --> 00:25:50,720\nU dash something,\n\n416\n00:25:51,100 --> 00:25:53,260\nit's a user name, it's a user profile,\n\n417\n00:25:53,740 --> 00:25:57,940\nand if it's not, it's something else, it's a landing page,\n\n418\n00:25:58,520 --> 00:25:59,980\nand you can have\n\n419\n00:26:00,520 --> 00:26:10,640\nthese 2 routes as separate files with the separate loaders and everything, and You don't need to start doing conditions based on the URL that I had to do right now. Yeah.\n\n420\n00:26:14,240 --> 00:26:18,840\nAnother constraint Rails has that will be great to have is to say this param\n\n421\n00:26:19,180 --> 00:26:19,900\nis actually\n\n422\n00:26:20,220 --> 00:26:20,880\na subdomain.\n\n423\n00:26:23,040 --> 00:26:25,340\nSo you can have things like\n\n424\n00:26:26,040 --> 00:26:26,540\nkent.something.application.com\n\n425\n00:26:30,560 --> 00:26:32,720\nand that's gonna be the\n\n426\n00:26:33,220 --> 00:26:36,660\nversion of the application that only match for your company.\n\n427\n00:26:38,440 --> 00:26:41,180\nSo you can do multi tenant applications\n\n428\n00:26:41,500 --> 00:26:45,960\nthat use the URL directly and it's encoded in the router itself.\n\n429\n00:26:46,700 --> 00:26:49,020\nYes, yeah, that would be pretty sweet.\n\n430\n00:26:49,560 --> 00:26:57,680\nYeah, Another thing that I'm looking forward to, and I think you've actually got a workaround for this, so it's probably not a pain for you, but\n\n431\n00:26:58,840 --> 00:27:01,260\nbeing able to have a set of\n\n432\n00:27:01,820 --> 00:27:03,000\nroutes that are,\n\n433\n00:27:03,940 --> 00:27:05,460\nthat require authentication\n\n434\n00:27:06,140 --> 00:27:07,780\nand like get the user\n\n435\n00:27:08,140 --> 00:27:12,040\nin the 1 place. And so then all the routes don't need to worry about getting the user\n\n436\n00:27:12,660 --> 00:27:18,460\nor like an admin route. So it not only does it require the user, but also requires certain permissions or roles.\n\n437\n00:27:19,380 --> 00:27:24,180\nRight now, you've got to work around for that. I'll let you describe if I understand correctly.\n\n438\n00:27:24,720 --> 00:27:25,360\nThe middlewares.\n\n439\n00:27:26,100 --> 00:27:29,240\nYeah, what I do is basically move that to the HTTP server.\n\n440\n00:27:30,480 --> 00:27:34,660\nI embrace the HTTP server there and just say, move that there.\n\n441\n00:27:35,380 --> 00:27:39,500\nI also had to do it because on my blog, I use Cloudflare\n\n442\n00:27:39,960 --> 00:27:42,000\nand a lot of things need invariables\n\n443\n00:27:43,040 --> 00:27:44,980\nthat are not global in Cloudflare.\n\n444\n00:27:45,400 --> 00:27:50,820\nSo things like session storage needs to be created on the HTTP server and pass it to Remix.\n\n445\n00:27:51,260 --> 00:27:53,660\nAnd because of that I also need to create the authenticator\n\n446\n00:27:54,480 --> 00:27:55,700\nand pass to Remix.\n\n447\n00:27:56,040 --> 00:28:01,860\nAnd once I was there I said, why I don't do authentication right there? And I authenticate only once.\n\n448\n00:28:02,620 --> 00:28:03,120\nSo\n\n449\n00:28:03,580 --> 00:28:13,220\nit's way simpler to just go there and go to Express or Hono, I like Hono a lot for this because you use web APIs instead of some things like Express.\n\n450\n00:28:15,620 --> 00:28:16,720\nJust put your\n\n451\n00:28:17,280 --> 00:28:25,020\nmiddle words there like you would do in an express application and say, if you are on a Labs admin, you need to authenticate and also need to\n\n452\n00:28:25,840 --> 00:28:27,620\nensure the user is an admin.\n\n453\n00:28:28,820 --> 00:28:33,060\nAnd you just pass the user object to the Remix app. And you know, in the loader run,\n\n454\n00:28:33,840 --> 00:28:35,040\nyou are already authenticated\n\n455\n00:28:35,840 --> 00:28:37,320\nand you already have permissions.\n\n456\n00:28:39,020 --> 00:28:40,180\nYeah, that,\n\n457\n00:28:41,200 --> 00:28:44,980\nI actually thought a lot about doing that as part of the workshops\n\n458\n00:28:47,040 --> 00:28:47,540\nand\n\n459\n00:28:47,860 --> 00:28:49,900\nas part of the Epic stack.\n\n460\n00:28:50,280 --> 00:28:55,440\nAnd I think that 1 of the biggest reasons that I decided not to is because\n\n461\n00:28:55,840 --> 00:29:01,360\nI don't find it actually saves a lot of boilerplate because of the extra work you have to do\n\n462\n00:29:02,620 --> 00:29:04,940\nto make sure your loader context\n\n463\n00:29:05,280 --> 00:29:06,140\nis typed.\n\n464\n00:29:07,700 --> 00:29:08,600\nRight, so\n\n465\n00:29:09,520 --> 00:29:12,480\ncorrect me if I'm wrong, but you are using get load context\n\n466\n00:29:12,800 --> 00:29:15,780\nto get the user data and everything in there.\n\n467\n00:29:16,240 --> 00:29:16,740\nBut\n\n468\n00:29:17,060 --> 00:29:21,380\nthe types for that are, for the load context are,\n\n469\n00:29:22,040 --> 00:29:33,200\nlike you have to define it, it's set to any. So I'm guessing you have like a custom type for loaders in action, is that right? Yeah, you can use a TypeScript declaration version to extend\n\n470\n00:29:34,300 --> 00:29:37,500\nthe upload context interface that Remix has,\n\n471\n00:29:38,480 --> 00:29:46,360\nwhich is a record. And because it's a record, you can just say, this key has this value and extend it that way. So I usually have\n\n472\n00:29:46,980 --> 00:29:48,400\nan app, app.dts,\n\n473\n00:29:50,500 --> 00:29:56,020\na file where I put this and extend it and make my tsconfig load that file.\n\n474\n00:29:57,340 --> 00:29:58,040\nThat way\n\n475\n00:29:58,680 --> 00:30:03,740\nmy app load context is always typed correctly as in 1. It's not\n\n476\n00:30:04,600 --> 00:30:05,100\nreally\n\n477\n00:30:05,500 --> 00:30:06,000\ntyped\n\n478\n00:30:06,540 --> 00:30:12,600\nin the same way. I type safe because you are saying this has this type and you trust\n\n479\n00:30:13,480 --> 00:30:16,620\nthe HTTP server gives you the correct type.\n\n480\n00:30:18,260 --> 00:30:23,320\nBut also get load context will afford you to try to send it. So\n\n481\n00:30:24,160 --> 00:30:25,580\nwhile you can fake it,\n\n482\n00:30:25,920 --> 00:30:28,720\nit's less likely that you fake it because your\n\n483\n00:30:29,060 --> 00:30:33,840\nTypeScript will juggle you on the HTTP server side. Yeah, that makes sense.\n\n484\n00:30:34,600 --> 00:30:35,100\nSo\n\n485\n00:30:36,260 --> 00:30:38,460\n1 concern that I would have then is,\n\n486\n00:30:40,440 --> 00:30:44,340\nlike on the admin route, it would definitely say, yep, here's your user,\n\n487\n00:30:44,640 --> 00:30:46,420\nbut let's say I'm on the homepage.\n\n488\n00:30:47,100 --> 00:30:50,200\nNow it's saying that I have a user, but I don't necessarily.\n\n489\n00:30:50,640 --> 00:30:52,960\nSo do you type those as being optional?\n\n490\n00:30:54,920 --> 00:30:55,820\nI usually\n\n491\n00:30:56,720 --> 00:30:58,840\njust type everything as required.\n\n492\n00:30:59,340 --> 00:31:02,320\nOh, okay. I am using indicators all the time.\n\n493\n00:31:02,740 --> 00:31:04,140\nYeah, okay, interesting.\n\n494\n00:31:04,700 --> 00:31:05,560\nYeah, so\n\n495\n00:31:06,260 --> 00:31:08,500\nthere's something there. I think\n\n496\n00:31:09,000 --> 00:31:13,280\nthat that's another thing that I'm looking forward to with Remix v3 is having\n\n497\n00:31:13,660 --> 00:31:15,600\na built-in support for\n\n498\n00:31:16,360 --> 00:31:21,540\nthat type of middleware And the stuff that I've seen with TanStack and\n\n499\n00:31:22,300 --> 00:31:26,540\nthe router that he's working on and as type safe as it is and all of that.\n\n500\n00:31:26,920 --> 00:31:30,040\nI know that the Remix team is watching that very carefully\n\n501\n00:31:30,400 --> 00:31:33,940\nfor as far as the type safety is concerned and seeing how we can\n\n502\n00:31:35,140 --> 00:31:37,620\nget type safety for that type of thing. Cause\n\n503\n00:31:38,480 --> 00:31:46,580\nI think your solution is a good 1, especially when you've got many, many routes and you don't want to have to repeat, you know, require user ID and all that.\n\n504\n00:31:48,500 --> 00:31:57,080\nBut I do think that there's more room that Remix can do for us, and I'm looking forward to the future where Remix does that. Yeah, I think this is like a solution\n\n505\n00:31:57,440 --> 00:32:03,860\nfor now until Remix has actual middleware support. So we can do that in Remix, really.\n\n506\n00:32:04,740 --> 00:32:06,320\nAnd then I can just move there.\n\n507\n00:32:07,080 --> 00:32:09,220\nYeah, it'll be a nice feature.\n\n508\n00:32:10,120 --> 00:32:10,620\nYeah.\n\n509\n00:32:11,560 --> 00:32:12,840\nYeah, that's actually,\n\n510\n00:32:13,820 --> 00:32:16,520\nwhen Ryan first approached me to join Remix,\n\n511\n00:32:16,960 --> 00:32:19,620\nI said, this was after a year\n\n512\n00:32:21,040 --> 00:32:25,360\nof the developer preview being out, almost a year just before they went open source.\n\n513\n00:32:25,760 --> 00:32:40,680\nI was like, oh man, I really would have liked to be a part of it earlier, like much earlier, because now all the interesting and fun stuff is done. Like you already made all the decisions and turns out like there's still so much in the future of Remix that,\n\n514\n00:32:41,000 --> 00:32:44,180\nyeah, they'll be working on stuff for a long time, I think.\n\n515\n00:32:45,060 --> 00:32:46,420\nYeah, so there is\n\n516\n00:32:48,060 --> 00:32:51,300\nthis thing that Remix intends to be full stack\n\n517\n00:32:52,280 --> 00:32:55,120\nand right now it's really good at the\n\n518\n00:32:55,440 --> 00:32:55,940\ncenter\n\n519\n00:32:56,260 --> 00:32:57,080\nof the stack.\n\n520\n00:32:58,940 --> 00:33:07,060\nAnd yeah, for the front end part you have React, so you have everything that React has. But for the back-end part, there is a lot of things missing\n\n521\n00:33:07,800 --> 00:33:11,640\nthat frameworks more focused on back-end like Ruby on Rails has.\n\n522\n00:33:12,900 --> 00:33:15,360\nAnd EpicStack solves a lot of that things.\n\n523\n00:33:15,820 --> 00:33:18,060\nBut I still feel like it would be great\n\n524\n00:33:18,420 --> 00:33:19,340\nif the framework\n\n525\n00:33:19,700 --> 00:33:22,440\ngives you the things because they will be more integrated.\n\n526\n00:33:23,260 --> 00:33:26,180\nYeah. Like it's not the same having Prisma\n\n527\n00:33:26,840 --> 00:33:27,540\nand some\n\n528\n00:33:28,680 --> 00:33:29,520\nmail server\n\n529\n00:33:31,020 --> 00:33:31,960\nand Qt jobs\n\n530\n00:33:32,780 --> 00:33:33,280\nintegrated\n\n531\n00:33:33,840 --> 00:33:36,800\nby using different libraries and put all of that together,\n\n532\n00:33:37,360 --> 00:33:38,040\nthat have\n\n533\n00:33:39,440 --> 00:33:42,240\na single way to do all of that.\n\n534\n00:33:42,740 --> 00:33:48,980\nBecause the pattern is always the same and the API is always the same because they are built by the same people.\n\n535\n00:33:49,600 --> 00:33:53,100\nYeah, yeah, that is tough. I have mixed feelings about that.\n\n536\n00:33:54,520 --> 00:33:59,480\nFor 1 side of, so first of all, I've never used those other frameworks. And so I can't really,\n\n537\n00:34:00,860 --> 00:34:06,060\nI hear people talking about them and I can tell that it must be wonderful\n\n538\n00:34:06,880 --> 00:34:10,219\nto be able to have that experience. On the other hand,\n\n539\n00:34:11,920 --> 00:34:13,820\nit's nice to be able to,\n\n540\n00:34:14,340 --> 00:34:14,840\nor\n\n541\n00:34:15,940 --> 00:34:16,780\nIt's difficult\n\n542\n00:34:17,260 --> 00:34:18,840\nfor a single team\n\n543\n00:34:19,340 --> 00:34:20,520\nto build\n\n544\n00:34:20,900 --> 00:34:22,739\nthe 1 thing that will work for everybody,\n\n545\n00:34:23,300 --> 00:34:23,800\nright?\n\n546\n00:34:24,780 --> 00:34:25,659\nAnd so\n\n547\n00:34:27,179 --> 00:34:30,679\nI like that the Prisma team is just like super hyper-focused\n\n548\n00:34:31,159 --> 00:34:35,360\non ORM and making that the best thing that it can possibly be.\n\n549\n00:34:36,199 --> 00:34:37,920\nAnd I like these different\n\n550\n00:34:38,260 --> 00:34:44,179\nfocuses and being able to swap things out. I think there's just something about the JavaScript ecosystem that\n\n551\n00:34:45,239 --> 00:34:47,620\nWe just really like being able to have\n\n552\n00:34:48,260 --> 00:34:48,760\noptions\n\n553\n00:34:49,060 --> 00:34:54,900\nand being able to swap things out, which doesn't appear to be the case in like Rails or PHP\n\n554\n00:34:55,239 --> 00:34:55,940\nas much.\n\n555\n00:34:56,580 --> 00:34:58,540\nYeah, I think this is something we\n\n556\n00:34:58,920 --> 00:34:59,420\ndecided\n\n557\n00:35:00,020 --> 00:35:04,900\nyears ago when Node.js become a thing, like everything needs to be a package and\n\n558\n00:35:05,200 --> 00:35:08,400\nthey need to be single purpose like the Unix philosophy.\n\n559\n00:35:10,680 --> 00:35:14,080\nAnd then we basically condemned ourselves to not have something like Rails.\n\n560\n00:35:15,060 --> 00:35:17,820\nYes, that's true. When we did that. But\n\n561\n00:35:18,900 --> 00:35:19,900\nI liked that.\n\n562\n00:35:20,320 --> 00:35:22,700\nAnd I still like that for some things, but\n\n563\n00:35:23,260 --> 00:35:24,980\nwhen I started using Rails,\n\n564\n00:35:26,600 --> 00:35:32,700\nI saw that you can do a command. You can run 1 command on your terminal, call it Rails g scaffold.\n\n565\n00:35:33,580 --> 00:35:36,240\nAnd you can say you want to scaffold a user\n\n566\n00:35:36,600 --> 00:35:38,280\nwith some fields\n\n567\n00:35:38,720 --> 00:35:39,220\nlike\n\n568\n00:35:39,840 --> 00:35:44,520\na name that's a string, an age that is a date and things like that.\n\n569\n00:35:44,860 --> 00:35:49,400\nAnd it automatically generates the immigration file, the model, the controller,\n\n570\n00:35:49,820 --> 00:35:53,180\nthe views. You have a crude, completely do for you.\n\n571\n00:35:54,240 --> 00:35:55,660\nAnd it's like something\n\n572\n00:35:56,320 --> 00:35:57,360\nyou can do\n\n573\n00:35:58,300 --> 00:35:59,000\nin JS\n\n574\n00:35:59,640 --> 00:36:00,560\nthat easy because\n\n575\n00:36:02,220 --> 00:36:15,900\nwhat do you use for your model? What do you use for your controller? In REM, if you have loaders and action for the controller and you have react for the view, but what's the ORM? You can use Prism or you can use Drizzle, you can use Sizzle, you can use a lot of other ORMs.\n\n576\n00:36:17,000 --> 00:36:19,940\nAnd what do you want to send mails? You have a lot of options.\n\n577\n00:36:20,540 --> 00:36:23,400\nI think EpicStack had the opportunity to do that.\n\n578\n00:36:23,740 --> 00:36:30,140\nLike just create these generators so you don't need to do a lot of code and avoid a lot of boilerplate.\n\n579\n00:36:31,540 --> 00:36:34,900\nBut the framework itself doesn't have that option because\n\n580\n00:36:35,220 --> 00:36:37,060\nit doesn't provide all of the options.\n\n581\n00:36:37,360 --> 00:36:42,840\nYeah. And honestly, I don't think that that is something the Remix team is interested in.\n\n582\n00:36:43,820 --> 00:36:44,560\nI think\n\n583\n00:36:45,040 --> 00:36:48,460\nthey wanna stay focused on the thing that they're doing. I know that\n\n584\n00:36:48,760 --> 00:36:52,260\nlike they do talk about being center stack and kind of eating\n\n585\n00:36:52,580 --> 00:36:54,180\nout from the middle outwards.\n\n586\n00:36:55,760 --> 00:37:00,560\nBut yeah, I just don't really see a future where they're like, okay, we're gonna build our own ORM\n\n587\n00:37:00,860 --> 00:37:06,840\nwhen something like Prisma exists already, right? Yeah, I don't expect them to do that. I just think it would be nice\n\n588\n00:37:07,480 --> 00:37:09,160\nif there would be\n\n589\n00:37:09,560 --> 00:37:15,780\na way to do that, like maybe a framework on top of Remix that can provide all of that things.\n\n590\n00:37:17,500 --> 00:37:21,440\nRight now, for example, the way I use Remix is not as a full stack backend,\n\n591\n00:37:22,280 --> 00:37:27,840\na full stack framework. I just have a Rails application. That's my API that has all of these things.\n\n592\n00:37:28,940 --> 00:37:33,380\nAnd then I have Remix as a backend from the\n\n593\n00:37:33,740 --> 00:37:37,060\nframework that can use fetch to consume\n\n594\n00:37:37,380 --> 00:37:39,740\nthat API inside the loaders and actions.\n\n595\n00:37:40,160 --> 00:37:44,360\nSo sometimes it feels like you are duplicating calls, like a phone\n\n596\n00:37:45,580 --> 00:37:48,900\nsends the data to Remix, which sends the data\n\n597\n00:37:49,660 --> 00:37:50,700\nto Rails.\n\n598\n00:37:51,420 --> 00:37:53,260\nAnd like, you could just remove\n\n599\n00:37:54,920 --> 00:38:00,640\nRemix from there and go directly to Rails. But you can also do a lot of other things like validate early\n\n600\n00:38:01,640 --> 00:38:03,700\nand send a response earlier.\n\n601\n00:38:06,020 --> 00:38:06,520\nYeah,\n\n602\n00:38:07,240 --> 00:38:12,940\nit's an interesting feature. There's a lot of room. So for people listening, there's plenty of room for\n\n603\n00:38:13,440 --> 00:38:14,700\nmaking things better.\n\n604\n00:38:15,520 --> 00:38:16,020\nSo\n\n605\n00:38:16,640 --> 00:38:18,160\nthank you Sergio for\n\n606\n00:38:18,740 --> 00:38:21,060\ntaking the time to chat with me about this stuff.\n\n607\n00:38:21,420 --> 00:38:24,840\nIs there anything else that you wanted to bring up that we didn't talk about?\n\n608\n00:38:25,680 --> 00:38:29,600\nNo, I think we talked about a lot of things. Yeah, we covered a lot of ground.\n\n609\n00:38:30,060 --> 00:38:35,780\nOkay, so what's the best way for people to get in touch with you and keep up with what you're working on?\n\n610\n00:38:36,400 --> 00:38:37,100\nYou can\n\n611\n00:38:37,740 --> 00:38:40,120\ngo to my website, my blog, SergioDXA.com\n\n612\n00:38:43,420 --> 00:38:46,040\nand on Twitter, slash X,\n\n613\n00:38:46,620 --> 00:38:47,780\nI add SergioDXA\n\n614\n00:38:49,080 --> 00:38:53,640\nand on Discord, also I am SergioDXA. I'm SergioDXA everyone.\n\n615\n00:38:54,100 --> 00:38:55,740\nThat makes me think. And everyone else has that\n\n616\n00:38:56,600 --> 00:38:58,120\nhandle somewhere else.\n\n617\n00:38:58,780 --> 00:39:10,020\nAwesome. Well, Thank you so much, Sergio. And yeah, have a wonderful evening, afternoon, or whatever. I guess it's afternoon for you, right? It's morning. Oh, it's morning? Oh man, I gotta look at a globe.\n\n618\n00:39:11,040 --> 00:39:16,360\nYeah, have a really nice day, and we'll chat with you later. Yep, thanks.\n\n619\n00:39:16,680 --> 00:39:17,420\nBye everyone",
            "text": "[00:00:00] Kent:\nHello everybody, this is Sergio Zalambri. Say hi Sergio. \n\n[00:00:05] Sergio:\nHi Sergio. \n\n[00:00:06] Kent:\nThere you go, nice. Good. So Sergio, you've definitely, as you've been going through these workshops, Sergio is the author of a number of the packages and even patterns of different things that we've been doing in the workshops. So super thrilled to have Sergio in here. Sergio and I met \n\n[00:00:27] as part of Remix, so like I think Sergio and I are among the first dozen or so people who got licenses to Remix. Is that right, Sergio? Were you 1 of the first to get a license? \n\n[00:00:40] Sergio:\nI'm not sure if I was 1 of the first, but I was 1 of the ones who got a license. \n\n[00:00:45] Kent:\nYeah, yeah. So we go back, it's a couple of years now. And yeah, it's just been such a pleasure to get to know you, Sergio. Can you introduce yourself to everybody for us? \n\n[00:00:57] Sergio:\nYes, I'm Sergio. I am a web developer working at a startup fintech slash not-for-profit company called Daffy in the United States. I live in Peru. I am originally from Argentina. And yeah, I've been working on this for a long time, like almost 10 years. \n\n[00:01:18] I'm happy to be here. \n\n[00:01:19] Kent:\nAwesome, yeah, good stuff. So I wanna ask you, since you were so early in the Remix world, what drew you to Remix initially? \n\n[00:01:30] Sergio:\nWell, I was working on an internal application for my previous company, and we have been doing some patterns that in the newsletter of Remix, when they were just talking about the idea they have, I found that, hey, this is similar to what I'm doing, because we also \n\n[00:01:51] have moved it from using a React query on every component to move it to the root. I have some kind of loader, basically. And some of the ideas basically resonated with me, like this is a great way to do it, makes a lot of sense. So when they made \n\n[00:02:11] the option to purchase the license, I just went and got 1 to try to use it and see if we can use it at work. I never used it at that company, but I am using it now as my current 1. \n\n[00:02:25] Kent:\nAnd at the current company, though, you didn't start from scratch with Remix. You had to migrate, right? Can you describe your migration experience a little bit? \n\n[00:02:34] Sergio:\nYeah, we originally started with a React Router application server from Rails URL. So we had this Rails monolith that served an API and also served in HTML that loaded the React Router application. We realized soon that we need SEO, \n\n[00:02:56] so we had to move to something that could serve and render that React Router application and we moved it to Next because 1 of my co-workers is 1 of the original authors of Next.js. \n\n[00:03:08] Kent:\nOh, really? Oh, okay. \n\n[00:03:09] Sergio:\nFrom the G1. And I also had been using it for a lot of time. And we started doing that, but I also liked it a lot how Remix worked, so we followed with some of the patterns of Remix inside of our Next application. And after a while, we eventually decided to \n\n[00:03:29] migrate to Remix, so we had to do this gradual migration where we use Express to run both Next and Remix at the same time and move it root by root, well, URL by URL actually, to from Next to Remix until we eventually migrated everything \n\n[00:03:49] and we could remove the next part. \n\n[00:03:52] Kent:\nYeah, so can you describe a little bit more technically how that was accomplished? Like how you, because I'm sure there are a number of people who are listening right now going through the workshops and they're like, this sounds really nice, it's too bad I'm using Next, or you know, they are interested. So what was the technical aspect of how you accomplished that? \n\n[00:04:13] Sergio:\nWell, the most important part was actually the HTTP server, the Next, the express 1, because at least on the next version we have, I'm not sure right now, but we could use next as a middleware in express, similar to how Remix works. So what \n\n[00:04:33] we did was set up this express server from express through express. So express receive the request and pass it to next. Every request went to next, except the static files. And then we started adding before the next request middleware, the remix 1. \n\n[00:04:53] So this line, that's where we configured it. We say a slash something goes to remix. Everything else goes to Next. And then we add another 1 and another 1. And as we migrated 1 by 1, we keep adding to this list of routes that were on the express server configured to go to REMIX. So \n\n[00:05:13] we had a long list of routes until we migrated the user profiles because user profiles were a catch-all route. So we were last whatever is a user profile. When we, once we migrated that to Remix, we did a switch and configured \n\n[00:05:34] what routes, what URLs went to Next and send everything else to Remix. And then we started removing the lines 1 by 1. \n\n[00:05:46] Kent:\nSo we \n\n[00:05:46] Sergio:\nhad to change how authentication works. That was 1 of the first thing we had to do because we wanted to share the authentication between Next and Remix, and we were using NextOut at that moment. So We switched to RemixOut, I created RemixOut for that. And because the \n\n[00:06:07] session storage object from Remix is actually not tied at Remix at all. It's just an object to work with cookies and sessions. We just used that same object in Next. So we just imported it from Remix inside the Next application and used that to know if the user was authenticated. \n\n[00:06:27] And we did the same thing we were doing before, but with the Remix Session Storage. And in the Remix application, we just use a Remix app. \n\n[00:06:36] Kent:\nYeah, yeah, yeah. That makes sense. How did you make it so that, cause actually to step back, during this transition, no pun intended, The transitions between 1 app to another had to be a full page refresh. Is that right? Because, yeah. So with that in mind, when you \n\n[00:06:57] migrated your first route to Remix, how did you communicate to Next.js that that page transition needed to be a full page refresh? \n\n[00:07:04] Sergio:\nWe did the simplest thing that we could do. We just replaced the Next link component with an anchor tag. And every link from Remix to Next was also an anchor tag. It was actually a link tag, a link component, but with a reload document prop. \n\n[00:07:20] Kent:\nOh, sure. \n\n[00:07:21] Sergio:\nSo we just did that and everything was like a normal navigation. \n\n[00:07:26] Kent:\nSo then as you migrated things from Next to Remix, you could change them from anchor tags to link tags? \n\n[00:07:33] Sergio:\nWe actually just keep everything in Remix to reload the page because sometimes some routes redirected to a next URL, but it was initially a Remix route, and we send a post to a Remix route. So it was easy to just let everything \n\n[00:07:53] reload, work everything as an MPA. And when we migrated everything, we removed the reload document perhaps. \n\n[00:08:01] Kent:\nYeah, that sounds pretty like the safe option there too, for sure. \n\n[00:08:05] Sergio:\nYeah, we actually had some issues with that before. Before we started doing this, we had some cases where a remix is shown with a 404 page, then you reload it, it work out because it was not being routed to Next.js or the inverse too. Next tried to load the \n\n[00:08:25] page, the page didn't exist, it showed an error, you reloaded, it worked because now it was Remix. \n\n[00:08:32] Kent:\nYeah, that makes plenty of sense. OK, so in the process of doing that, you mentioned that you built RemixAuth to make that easier to migrate. And then you also, I'm guessing, lots of the utilities that are in RemixUtils came as a result of all the work that you were \n\n[00:08:52] doing there, is that right? \n\n[00:08:53] Sergio:\nYeah. Yeah. All my packages are from things I needed to do at 1 point. So RemixAu was, I needed to do authentication. We used Auth0 for that. And we tried a lot of things. I tried Passport, JS, FIRS, it worked, of course, because it was an express. \n\n[00:09:14] But I wanted to have that as part of Remix, not as part of Express. I also tried the Auth0, React, SDK. It worked too, but we had issues with server-side rendering because it's all intended to work client-side. And at the end, I just decided to \n\n[00:09:35] create Remix Auth. The original version was completely intended to use with OutZero. I eventually realized that I could just, everything OutZero do, it was actually just OAuth2 flow and that's standard so I could move it to a strategy and create this pattern. But it's \n\n[00:09:55] not, I didn't create it, it's the same thing as Passport does. I just started creating these strategies and created the OAuth2 strategy. So the Oauth2 strategy extends from there and then created other strategies mostly to show how this can be done. And a lot \n\n[00:10:15] of people created more strategies after that. \n\n[00:10:18] Kent:\nYeah, that was a good call on doing the strategies following Passport's patterns there. I think that like, Passport is still very relevant for people doing Express apps and Node.js based apps and for a good reason, because it's just, it's good. It's good stuff. \n\n[00:10:38] And I've been enjoying using RemixAuth for especially the more complicated stuff. I found Originally, I just said, okay, I'm gonna use RemixAuth for everything. And I found that the web forms strategy wasn't giving me a whole lot on top of, just implementing that \n\n[00:10:58] myself, which I thought was kind of interesting. And I mentioned that to you and you said yeah that doesn't really do too much. So where I find RemixAuth being really useful, like extremely useful, is in the really complicated OAuth2 flows and OIDC and that sort of thing. It's \n\n[00:11:18] been extremely useful. In fact, today I will be recording those videos for Epic Web. So if you're watching this video as a part of those workshop exercises, both of those things happened today. Yeah. Yeah, \n\n[00:11:33] Sergio:\nI think it's interesting because the original form strategy was called a local strategy. That's how password also call it. And it's completely focused on you have 2 inputs, a username input that can be the email and a password input and that's it. And you just receive those values directly on the strategy \n\n[00:11:53] callback. And then I realized that what if you want 3 inputs? Like I use apps that needs 3 inputs. I use some, the app I use to pay my taxes needs 3 inputs, my ID, my username and my password. So I just created the form 1 and then when I build the form strategy, \n\n[00:12:14] it was like this doesn't do a lot of things. It just call requests from data for you and that's it. Yeah. It's useful if you already have everything. If you want to keep everything in RemixAuth, it's useful to have that. But if you don't, it's okay to just don't use it because it's not gonna do a lot of things. \n\n[00:12:34] Kent:\nYes, yeah. And yeah, I found that with that approach then, I pretty much just use RemixAuth for handling the OAuth flow. And once I get the user from GitHub or from Google or from wherever, then I feed that into my regular auth flow with my own session storage \n\n[00:12:55] management and everything like that. And that's worked out really well. So RemixAuth really simplified the auth flow for the complicated stuff, but then allows me to have a lot of control over the lot simpler things, which I think is a really nice aspect of it. Yeah, so \n\n[00:13:16] I also am kind of curious what your thoughts are on more, shall we say modern approaches to authentication or like the up and coming approaches to authentication. Specifically, I'm talking about pass keys. Cause This is something that I think I had heard about a while ago, but it's really been picking up steam from the standards approach. \n\n[00:13:36] So can you tell us a little bit about Passkeys? \n\n[00:13:39] Sergio:\nYeah. For those who don't know what Passkeys is, it's this new thing that Apple, Google, and other companies created that's basically similar to how two-factor authentication works. You have this hardware thing in the passkey scenario is your computer or your cell phone and you \n\n[00:13:59] start to authenticate with a website or application by using a private and public key. It's a private and public key authentication but using your device directly instead of a second device like a YubiKey. I like a lot the pattern. I hope every website \n\n[00:14:19] use passkey in the future because it's way simpler to just click a button and log in. And there are a lot of other things you can do, like automatically log in users. You don't need to wait for them to click a button. You can just check with JavaScript. Hey, does the user have the passkey for my website? If it \n\n[00:14:39] does and has only 1, you can automatically log in, log the user in and that's it. You don't need to think about that. \n\n[00:14:48] Kent:\nYeah, I think it's a very cool thing. I appreciate that it's a standard. Alex Anderson put together a remix auth strategy for it. And while he was very responsive to my needs as I was experimenting with it. It's just still too early for me to include it in the workshop. So I may \n\n[00:15:08] add an exercise after the launch, but I need a little bit of time playing around with it before I can feel confident and say, do it this way. Because I don't, I'm not sure yet. \n\n[00:15:18] Sergio:\nYeah. Makes sense. \n\n[00:15:20] Kent:\nYeah, sorry, go ahead. \n\n[00:15:22] Sergio:\nMakes sense. \n\n[00:15:23] Kent:\nYeah, yeah. So I definitely plan on the EpicStacks having pass keys in the future. Because I really look forward to a future where our users don't have to worry about storing passwords and things. And that their device just is the thing that identifies them, which I think \n\n[00:15:43] is cool. Of course, That does come with the drawback of like, if I want to use the library's computer, how do I log in? Which I think is probably why- You can, \n\n[00:15:54] Sergio:\nbecause ASCII's allow you to generate a QR code. The browser actually generates the QR code and you can use your phone, scan your code and authorize the computer. So you don't need to be on your computer. You just need to have your cell phone with you. \n\n[00:16:09] Kent:\nYes, yeah. And that is actually super cool. So when I add that to the Epic stack, we'll definitely make sure that that is supported as well. And I don't think you have to do anything to support that. I think that just the standards, the user agent is the 1 that generates the QR code for you and everything. So it's pretty sick, actually. I love that. Let's \n\n[00:16:29] have the user agent do more for us please. But there is the drawback still of somebody loses their device and now they don't have access to any of their accounts, which I think is why Google and Apple and 1Password and all of these are going to hook into these so that you can save those to those password \n\n[00:16:49] managers. Cause yeah, otherwise you'll be in trouble. \n\n[00:16:54] Sergio:\nYeah, I think Apple does that already with Keychain, with Apple Keychain, the password manager. And I remember I read that 1 password already supports that too. \n\n[00:17:09] Kent:\nYeah, so it is gonna be an awesome world. I do think we will not get away from having some sort of password at some level. Like you're gonna need a password for your Apple account. You're gonna need a password for your 1Password account. Like at some place you're going to need to provide a password to get into \n\n[00:17:29] this wonderful world of passkeys, for it to work for those edge cases if I lost my device or whatever. But I definitely appreciate not having to enter a username and password everywhere. So Hopefully that is in our future. So I wanna ask you about \n\n[00:17:50] with RemixAuth, how do you decide what gets included in Remix, or sorry, not RemixAuth, RemixUtils. How do you decide what gets included into RemixUtils and how do you, where did lots of these ideas for these utilities come from? \n\n[00:18:06] Sergio:\nWell, most of them were things I built for myself or the work I do at Daffy. Most helpers you do for there, like get a client, a user, the client IP address function to get the IP of the user. We need \n\n[00:18:26] that to localize the user. So I build that. And others are things I saw people in the communities talking about on this call and I can get this is useful and more people should benefit from that and I can put it on. Let me get those. There's a \n\n[00:18:47] server-side event. You did this for examples were created originally by, by Ryan. And I just copied from the linear copy example that he built, grabbed those utils, put them on RemixUtils, improve them a little bit, and went back to the project \n\n[00:19:08] and send the PR tools, just use RemixUtils, so you don't need to copy that. \n\n[00:19:13] Kent:\nYeah, I definitely appreciate that as a user of many Remix Utils utilities, especially the authenticity token for cross-site request forgery stuff and the Honeypot are both like, Honeypot is, I wouldn't say it's trivial. \n\n[00:19:34] It's like, there are a couple things you need to think about and certainly the authenticity token, not a trivial thing either. And so just having an easy way to do that is quite nice. And then of course, there's smaller things that I don't wanna have to copy around all over the place that I really appreciate. I just install Remix Utils \n\n[00:19:54] and I can use it all over the place. \n\n[00:19:57] Sergio:\nYeah, that's a good idea. \n\n[00:19:58] Kent:\nYeah, So Remix Utils is kind of about like filling in some, some things that might be considered gaps in Remix, or just like some things that we end up doing a lot that would be nice to not have to do over and over again. Are there like, but we can't fill in all of the gaps \n\n[00:20:19] that Remix has, like, there are some things that need to be done in Remix core to improve Remix itself. What are some of those things for you? Like, where is Remix lacking and what are you looking forward to in the future for Remix improving? \n\n[00:20:34] Sergio:\nI would love to have better internationalization support. Ooh, yeah. In Remix. Right now, you can do a lot of things with external packages like Remix I18next, But it's still, there are things that are \n\n[00:20:54] harder to do. But if you want to translate the path on the URL. \n\n[00:21:00] Kent:\nYeah, yeah. \n\n[00:21:03] Sergio:\nI personally don't care about that as a user, but I know a lot of people do it. Like they translate slash about to whatever in that's translated in another language. They do it for SEO reasons. So that's something I would love to have more support directly \n\n[00:21:23] in Remix. Also maybe a way to load the translation files directly. Ideally everything in YMTnext is supported directly by Remix, but It's hard to do because how do you render text that includes a component inside, for example, that \n\n[00:21:43] needs more work to be done and it's the job that react in NextLoss. \n\n[00:21:49] Kent:\nI think that at least for translating the URL, from what I understand with what Remix is working on with version 3, that should be possible. So you can read what the user's locale is and then dynamically generate the routes based on that, which pretty wild. I \n\n[00:22:09] don't know how they're gonna manage that, but yeah, pretty \n\n[00:22:12] Sergio:\ncool stuff. That would be amazing. Yeah. Right now you can do it. Everything you need to do, you can do it some way right now because Remix is really pluggable. But you need to go to the Remix config and add the roots functions and use define roots to define all the possible translation. And if you add a new 1, you need to \n\n[00:22:33] deploy again to build the app again. \n\n[00:22:35] Kent:\nYeah. And you need \n\n[00:22:36] Sergio:\nto ensure the root IDs are not colliding. A lot of things that will be great if the framework do it directly for you. \n\n[00:22:46] Kent:\nYeah, yeah, totally. Is there anything else that you're hoping for in the future of Remix? \n\n[00:22:51] Sergio:\nWell, I have some proposals I have to listen to. There is 1 that I think Red server components may solve for me. That's a sibling roots because I have a dashboard like UI that has many widgets \n\n[00:23:12] on the right side the right sidebar and they need to load their own data and sometimes they do mutations. And I need to support all of that in the root loader and the root action. But if we can say this root has all of these other sibling \n\n[00:23:32] roots and now rendered in this place. Like I just say, he rendered the sibling number 1, the sibling number 2, the sibling number 3, and have each sibling root had a loader and an action. So they can work in isolation. And I don't need to care about that on the main content root which is the primary root. \n\n[00:23:53] Kent:\nYeah, yeah, yeah. So Remix v3 with server components, that 100% will solve that problem. Yeah, from at least from what I've seen, I'm not on the Remix team anymore, so I can't really say for sure, but from what I've seen, that is definitely a use case that will be completely satisfied by \n\n[00:24:13] V3. So in that world, things actually get simpler than more complicated because it changes from being root specific to being components. And then you can kind of opt into a component having URL by configuring it as part \n\n[00:24:33] of the router. And so, yeah, every single component can have a loader and an action and all of that. It basically takes the full stack component concept and turns it into like a legit thing where every component can be its own quote unquote route with \n\n[00:24:54] a letter and an action. So it's going to be a pretty sweet world in the future. I'm looking forward to it myself. \n\n[00:25:01] Sergio:\nYeah, same. Another thing I'm looking for is to have some root constraints. That's how they're called in Rails world. The idea that you can say this root only match if the UR is a param in the URoot has this constraint, like it starts \n\n[00:25:21] with a specific character, or it starts with a number, or it has at least 1 dash, and things like that. So you can have 2 routes at the same level of the URL and the same segment, but they can match different values. Like you can say, \n\n[00:25:43] if it starts with the U character, U dash something, it's a user name, it's a user profile, and if it's not, it's something else, it's a landing page, and you can have these 2 routes as separate files with the separate \n\n[00:26:03] loaders and everything, and You don't need to start doing conditions based on the URL that I had to do right now. \n\n[00:26:10] Kent:\nYeah. \n\n[00:26:14] Sergio:\nAnother constraint Rails has that will be great to have is to say this param is actually a subdomain. So you can have things like kent.something.application.com and that's gonna be the version of the application \n\n[00:26:34] that only match for your company. So you can do multi tenant applications that use the URL directly and it's encoded in the router itself. \n\n[00:26:46] Kent:\nYes, yeah, that would be pretty sweet. Yeah, Another thing that I'm looking forward to, and I think you've actually got a workaround for this, so it's probably not a pain for you, but being able to have a set of routes that are, that require authentication and like \n\n[00:27:06] get the user in the 1 place. And so then all the routes don't need to worry about getting the user or like an admin route. So it not only does it require the user, but also requires certain permissions or roles. Right now, you've got to work around for that. I'll let you describe if I understand correctly. \n\n[00:27:24] Sergio:\nThe middlewares. Yeah, what I do is basically move that to the HTTP server. I embrace the HTTP server there and just say, move that there. I also had to do it because on my blog, I use Cloudflare and a lot of things need invariables that are not global in Cloudflare. \n\n[00:27:45] So things like session storage needs to be created on the HTTP server and pass it to Remix. And because of that I also need to create the authenticator and pass to Remix. And once I was there I said, why I don't do authentication right there? And I authenticate only once. So it's way simpler to just go \n\n[00:28:05] there and go to Express or Hono, I like Hono a lot for this because you use web APIs instead of some things like Express. Just put your middle words there like you would do in an express application and say, if you are on a Labs admin, you need to authenticate and also need to \n\n[00:28:25] ensure the user is an admin. And you just pass the user object to the Remix app. And you know, in the loader run, you are already authenticated and you already have permissions. \n\n[00:28:39] Kent:\nYeah, that, I actually thought a lot about doing that as part of the workshops and as part of the Epic stack. And I think that 1 of the biggest reasons that I decided not to is because I don't find it actually saves a lot of boilerplate because \n\n[00:28:59] of the extra work you have to do to make sure your loader context is typed. Right, so correct me if I'm wrong, but you are using get load context to get the user data and everything in there. But the types for that are, for \n\n[00:29:19] the load context are, like you have to define it, it's set to any. So I'm guessing you have like a custom type for loaders in action, is that right? \n\n[00:29:28] Sergio:\nYeah, you can use a TypeScript declaration version to extend the upload context interface that Remix has, which is a record. And because it's a record, you can just say, this key has this value and extend it that way. So I usually have an app, app.dts, \n\n[00:29:50] a file where I put this and extend it and make my tsconfig load that file. That way my app load context is always typed correctly as in 1. It's not really typed in the \n\n[00:30:06] Kent:\nsame way. \n\n[00:30:07] Sergio:\nI type safe because you are saying this has this type and you trust the HTTP server gives you the correct type. But also get load context will afford you to try to send it. So while you can fake it, it's less likely that you fake \n\n[00:30:27] it because your TypeScript will juggle you on the HTTP server side. \n\n[00:30:32] Kent:\nYeah, that makes sense. So 1 concern that I would have then is, like on the admin route, it would definitely say, yep, here's your user, but let's say I'm on the homepage. Now it's saying that I have a user, but I don't necessarily. So do you type those as being optional? \n\n[00:30:54] Sergio:\nI usually just type everything as required. \n\n[00:30:59] Kent:\nOh, okay. \n\n[00:31:00] Sergio:\nI am using indicators all the time. \n\n[00:31:02] Kent:\nYeah, okay, interesting. Yeah, so there's something there. I think that that's another thing that I'm looking forward to with Remix v3 is having a built-in support for that type of middleware And the stuff that I've seen with TanStack and the router \n\n[00:31:22] that he's working on and as type safe as it is and all of that. I know that the Remix team is watching that very carefully for as far as the type safety is concerned and seeing how we can get type safety for that type of thing. Cause I think your solution is a good 1, especially when you've got many, many routes \n\n[00:31:42] and you don't want to have to repeat, you know, require user ID and all that. But I do think that there's more room that Remix can do for us, and I'm looking forward to the future where \n\n[00:31:53] Sergio:\nRemix does that. Yeah, I think this is like a solution for now until Remix has actual middleware support. So we can do that in Remix, really. And then I can just move there. \n\n[00:32:07] Kent:\nYeah, it'll be a nice feature. Yeah. Yeah, that's actually, when Ryan first approached me to join Remix, I said, this was after a year of the developer preview being out, almost a year just before they went open source. I was like, oh man, I \n\n[00:32:27] really would have liked to be a part of it earlier, like much earlier, because now all the interesting and fun stuff is done. Like you already made all the decisions and turns out like there's still so much in the future of Remix that, yeah, they'll be working on stuff for a long time, I think. \n\n[00:32:45] Sergio:\nYeah, so there is this thing that Remix intends to be full stack and right now it's really good at the center of the stack. And yeah, for the front end part you have React, so you have everything that React has. But for the back-end \n\n[00:33:05] part, there is a lot of things missing that frameworks more focused on back-end like Ruby on Rails has. And EpicStack solves a lot of that things. But I still feel like it would be great if the framework gives you the things because they will be more integrated. Yeah. Like it's not the same having \n\n[00:33:25] Prisma and some mail server and Qt jobs integrated by using different libraries and put all of that together, that have a single way to do all of that. Because the pattern is always the same and the API is always \n\n[00:33:46] the same because they are built by the same people. \n\n[00:33:49] Kent:\nYeah, yeah, that is tough. I have mixed feelings about that. For 1 side of, so first of all, I've never used those other frameworks. And so I can't really, I hear people talking about them and I can tell that it must be wonderful to be able to have that experience. On the other \n\n[00:34:09] hand, it's nice to be able to, or It's difficult for a single team to build the 1 thing that will work for everybody, right? And so I like that the Prisma team is just like \n\n[00:34:29] super hyper-focused on ORM and making that the best thing that it can possibly be. And I like these different focuses and being able to swap things out. I think there's just something about the JavaScript ecosystem that We just really like being able to have options and being able to swap \n\n[00:34:50] things out, which doesn't appear to be the case in like Rails or PHP as much. \n\n[00:34:56] Sergio:\nYeah, I think this is something we decided years ago when Node.js become a thing, like everything needs to be a package and they need to be single purpose like the Unix philosophy. And then we basically condemned ourselves to not have something like Rails. Yes, that's true. When we did that. \n\n[00:35:17] But I liked that. And I still like that for some things, but when I started using Rails, I saw that you can do a command. You can run 1 command on your terminal, call it Rails g scaffold. And you can say you want to scaffold a user with some \n\n[00:35:37] fields like a name that's a string, an age that is a date and things like that. And it automatically generates the immigration file, the model, the controller, the views. You have a crude, completely do for you. And it's like something you can do \n\n[00:35:58] in JS that easy because what do you use for your model? What do you use for your controller? In REM, if you have loaders and action for the controller and you have react for the view, but what's the ORM? You can use Prism or you can use Drizzle, you can use Sizzle, you can use a lot of other ORMs. And what do you want to send \n\n[00:36:18] mails? You have a lot of options. I think EpicStack had the opportunity to do that. Like just create these generators so you don't need to do a lot of code and avoid a lot of boilerplate. But the framework itself doesn't have that option because it doesn't provide all of the options. \n\n[00:36:37] Kent:\nYeah. And honestly, I don't think that that is something the Remix team is interested in. I think they wanna stay focused on the thing that they're doing. I know that like they do talk about being center stack and kind of eating out from the middle outwards. But yeah, I just don't really see \n\n[00:36:57] a future where they're like, okay, we're gonna build our own ORM when something like Prisma exists already, right? \n\n[00:37:03] Sergio:\nYeah, I don't expect them to do that. I just think it would be nice if there would be a way to do that, like maybe a framework on top of Remix that can provide all of that things. Right now, for example, the way I use Remix is not as a full stack backend, a full stack framework. I \n\n[00:37:23] just have a Rails application. That's my API that has all of these things. And then I have Remix as a backend from the framework that can use fetch to consume that API inside the loaders and actions. So sometimes it feels like you are duplicating calls, like a \n\n[00:37:43] phone sends the data to Remix, which sends the data to Rails. And like, you could just remove Remix from there and go directly to Rails. But you can also do a lot of other things like validate early and send a response earlier. \n\n[00:38:06] Kent:\nYeah, it's an interesting feature. There's a lot of room. So for people listening, there's plenty of room for making things better. So thank you Sergio for taking the time to chat with me about this stuff. Is there anything else that you wanted to bring up that we didn't talk about? \n\n[00:38:25] Sergio:\nNo, I think we talked about a lot of things. \n\n[00:38:27] Kent:\nYeah, we covered a lot of ground. Okay, so what's the best way for people to get in touch with you and keep up with what you're working on? \n\n[00:38:36] Sergio:\nYou can go to my website, my blog, SergioDXA.com and on Twitter, slash X, I add SergioDXA and on Discord, also I am SergioDXA. I'm SergioDXA everyone. \n\n[00:38:54] Kent:\nThat makes me think. And everyone \n\n[00:38:54] Sergio:\nelse has that handle somewhere else. \n\n[00:38:58] Kent:\nAwesome. Well, Thank you so much, Sergio. And yeah, have a wonderful evening, afternoon, or whatever. I guess it's afternoon for you, right? \n\n[00:39:06] Sergio:\nIt's morning. \n\n[00:39:07] Kent:\nOh, it's morning? Oh man, I gotta look at a globe. Yeah, have a really nice day, and we'll chat with you later. \n\n[00:39:15] Sergio:\nYep, thanks. \n\n[00:39:16] Kent:\nBye everyone"
          }
        },
        "solution": null,
        "_id": "NS5Go30oWcGEvHRq8m7uir",
        "_type": "interview",
        "title": "Transitioning from Rails to Remix with Sergio Xalambri",
        "description": "Sergio Xalambri, web developer at Daffy, shares his transition to Remix. From Rails and Next.js to Remix, adopting Express and middleware. ",
        "slug": "transitioning-from-rails-to-remix-with-sergio-xalambri",
        "_updatedAt": "2023-10-26T23:07:10Z",
        "body": "Sergio Xalambri, a seasoned web developer at the fintech startup Daffy, opens up about his journey with Remix.\n\nFrom a Rails and Next.js setup to Remix, Sergio reveals the details of this transition. This move involved adopting Express as an HTTP server and incorporating middleware for compatibility with both Next.js and Remix.\n\nThe dialogue brings to light areas where Remix could improve, notably in internationalization and middleware capabilities. The future of Remix is also contemplated, with a mention of the Epic Stack, an initiative aimed at addressing some of Remix's backend shortcomings.\n\nSergio and Kent then explore the various authentication and authorization strategies within RemixAuth, focusing on their adaptability and specific applications.\n\nBeyond the specifics of Remix, the conversation ventures into a comparison with Rails. They scrutinize the modular approach of Remix against Rails' more cohesive framework, assessing how each impacts development speed and adaptability.\n\n## Resources\n\n- [Sergio Xalambri's Twitter](https://twitter.com/sergiodxa)"
      },
      {
        "_id": "B9MrGEg0NpGWTknnF8Pk5P",
        "title": "The Capabilities and Ecosystem of Tailwind CSS with Simon Vrachliotis",
        "description": "Simon Vrachliotis, Tailwind expert at Thinkmill, dives into Tailwind's productivity, inline styling, and type safety. Versatile for various tech stacks",
        "slug": "the-capabilities-and-ecosystem-of-tailwind-css-with-simon-vrachliotis",
        "videoResource": {
          "_rev": "9CeTKuUcQZRsVUft8VlbAS",
          "title": "Simon Vrachliotis-.mp4",
          "duration": 2477.366667,
          "_id": "umRzgEK3x2YA3YfFYHEusT",
          "_type": "videoResource",
          "muxAsset": {
            "muxPlaybackId": "OWceqoAEeMOUADh2xUOeZY2mx02us01L01ylNdsGgM2QJ8",
            "muxAssetId": "qcepN4yNcss02tmIh015YTenGNs8PRDgllc1XeJqhttXU",
            "_type": "muxAsset"
          },
          "originalMediaUrl": "https://egghead-video-uploads.s3.amazonaws.com/epic-web/interviews/Simon+Vrachliotis-.mp4",
          "transcript": {
            "srt": "1\n00:00:00,220 --> 00:00:02,820\nHey everybody, this is my friend Simon Vrishliotis.\n\n2\n00:00:03,340 --> 00:00:08,360\nOh man, I practiced it. I knew I was gonna get it. And then it's Simon Vrishliotis. Vrishliotis.\n\n3\n00:00:09,719 --> 00:00:10,219\nVrishliotis,\n\n4\n00:00:10,639 --> 00:00:11,139\nyeah.\n\n5\n00:00:11,460 --> 00:00:12,460\nOh man, I'm...\n\n6\n00:00:14,059 --> 00:00:15,360\nOkay, Simon Vrishliotis.\n\n7\n00:00:17,460 --> 00:00:18,980\nAnd so Simon and I,\n\n8\n00:00:19,540 --> 00:00:23,820\nI actually, I'm trying to remember, I don't think we've ever met in person before. We haven't.\n\n9\n00:00:24,779 --> 00:00:27,900\nYeah, that's a shame. We gotta like fix that at some point.\n\n10\n00:00:28,619 --> 00:00:29,119\nBut\n\n11\n00:00:29,619 --> 00:00:30,119\nyeah,\n\n12\n00:00:30,600 --> 00:00:31,100\nSimon,\n\n13\n00:00:32,020 --> 00:00:33,120\nI think I\n\n14\n00:00:33,460 --> 00:00:40,640\ncaught up with you or got to know you initially through Tailwind, through the stuff that you're doing there, when you were actually at Tailwind\n\n15\n00:00:41,040 --> 00:00:42,940\nand creating videos there, and I admired\n\n16\n00:00:43,580 --> 00:00:44,340\nyour skill\n\n17\n00:00:44,720 --> 00:00:45,940\nat creating those videos.\n\n18\n00:00:46,980 --> 00:00:52,820\nAnd I'm sure there are many people still learning Tailwind through the videos that you produced while you were there.\n\n19\n00:00:53,260 --> 00:00:59,620\nBut you're also working on something else. So I'm gonna stop talking and let you give us a little intro to yourself. Hey,\n\n20\n00:01:00,240 --> 00:01:03,300\nYeah, first of all, thanks for having me. My pleasure to be here.\n\n21\n00:01:04,019 --> 00:01:09,600\nYeah, we had a nice chat a few times through Tailwind and Remix and different circles.\n\n22\n00:01:10,680 --> 00:01:20,780\nAs you mentioned, I've worked as a dev role for the Tailwind Labs team for a while. I'm currently working at a company called Thinkmill, which is a consultancy based in Sydney, Australia.\n\n23\n00:01:21,100 --> 00:01:21,880\nWe're pretty\n\n24\n00:01:22,200 --> 00:01:30,180\nglobally renowned for React work and design systems and slowly moving into Tailwind stuff. I think I have a little Trojan horse going in there.\n\n25\n00:01:32,000 --> 00:01:38,500\nBut Yeah, on the side of this, I am creating my own course called Pro Tailwind, which is like an advanced level\n\n26\n00:01:39,400 --> 00:01:44,560\ncourse on Tailwind CSS. So it's kind of skips the basics of trying to convince people to\n\n27\n00:01:45,360 --> 00:01:47,340\nlike Tailwind and get used to this\n\n28\n00:01:47,740 --> 00:01:48,240\nradically\n\n29\n00:01:48,740 --> 00:01:52,540\ndifferent mindset of like having presentational classes in your HTML.\n\n30\n00:01:53,080 --> 00:01:58,720\nIt assumes that you know the basics and then it goes into topics like multi-theme strategy or multi-variant\n\n31\n00:02:00,060 --> 00:02:01,920\ncomponents and even reusable\n\n32\n00:02:02,380 --> 00:02:04,860\ncomponents across multiple projects through monorepos\n\n33\n00:02:05,280 --> 00:02:07,320\nand NPM packages and stuff like that.\n\n34\n00:02:08,940 --> 00:02:16,160\nYeah, very cool. So the more advanced stuff, because the beginner stuff is like the docs are fine and\n\n35\n00:02:16,640 --> 00:02:37,660\nyour videos when you were there are still there. So yeah, you're filling a really important need there with more advanced use cases. Yeah, that's what I've identified is there's a lot of resources for beginner level and intermediate. And then there's a cliff drop where when you go at scale or try to reuse stuff or create components and then consume them in a different\n\n36\n00:02:38,240 --> 00:02:40,820\nproject or repo, there's lots of questions\n\n37\n00:02:41,400 --> 00:02:46,780\nthat I couldn't find answers for, so I thought I may as well create a course and content on that.\n\n38\n00:02:48,080 --> 00:02:50,140\nVery cool, yeah, yeah, I love it.\n\n39\n00:02:50,660 --> 00:02:52,160\nWell, great, so\n\n40\n00:02:52,800 --> 00:02:53,960\nTailwind is really\n\n41\n00:02:54,400 --> 00:02:58,440\nthe thing that you're most excited about, and I'm also excited about.\n\n42\n00:02:59,160 --> 00:02:59,940\nAnd so,\n\n43\n00:03:00,780 --> 00:03:06,980\nIt's actually in the first workshop of Epic Web, we get into Tailwind, in the first exercise even.\n\n44\n00:03:07,580 --> 00:03:19,140\nWe get into doing a little bit of Tailwind config. We don't go too deep, so if anybody wants to go really deep on Tailwind, then I will defer you over to Simon, who's got great material for that.\n\n45\n00:03:19,780 --> 00:03:20,280\nBut\n\n46\n00:03:20,680 --> 00:03:21,180\nyeah,\n\n47\n00:03:21,960 --> 00:03:26,460\nwe just get into how to get Tailwind initially set up and then\n\n48\n00:03:27,540 --> 00:03:30,120\nget it onto the page in our Remix app,\n\n49\n00:03:31,020 --> 00:03:32,540\njust using link tags.\n\n50\n00:03:32,860 --> 00:03:33,360\nAnd\n\n51\n00:03:34,300 --> 00:03:36,240\nit works out pretty well. So\n\n52\n00:03:36,940 --> 00:03:38,620\n1 of the things that\n\n53\n00:03:39,920 --> 00:03:46,100\nI want to get out of this conversation with you, Simon, for the people watching, is why should we use Tailwind?\n\n54\n00:03:46,640 --> 00:03:47,140\nBecause\n\n55\n00:03:47,800 --> 00:03:50,580\nI'm telling everybody, okay, we're gonna use Tailwind.\n\n56\n00:03:51,220 --> 00:03:57,420\nAnd I have really good reasons for why I like using Tailwind, but I wanna hear from you, Simon. What are your\n\n57\n00:03:57,900 --> 00:03:59,280\nbest reasons for\n\n58\n00:03:59,960 --> 00:04:02,020\nwhy we should use Tailwind? And maybe\n\n59\n00:04:02,980 --> 00:04:14,160\ntarget folks who are unsure, like they don't necessarily have that initial, like I hate it or I love it feeling. Yeah, that's a very open question like we took all day about.\n\n60\n00:04:15,260 --> 00:04:19,240\nThere's actually a lot of reasons why you might be drawn towards something like Tailwind.\n\n61\n00:04:20,459 --> 00:04:21,779\nI think, to me,\n\n62\n00:04:22,360 --> 00:04:25,860\nif I had to summarize in 1 or 2 little main points,\n\n63\n00:04:27,180 --> 00:04:27,880\nis it\n\n64\n00:04:28,260 --> 00:04:29,560\nmakes everything predictable\n\n65\n00:04:30,040 --> 00:04:31,460\nand easy to reason about.\n\n66\n00:04:31,840 --> 00:04:33,840\nI'll explain why in a minute.\n\n67\n00:04:34,340 --> 00:04:37,620\nAnd it supercharges your productivity in terms of speed,\n\n68\n00:04:38,140 --> 00:04:42,380\nconfidence, ability to move fast, to prototype, but also have production-ready\n\n69\n00:04:42,720 --> 00:04:44,200\ncode while you prototype.\n\n70\n00:04:45,040 --> 00:04:45,540\nAnd\n\n71\n00:04:47,100 --> 00:04:50,340\nthere's a few factors that play to that, but I think the main ones\n\n72\n00:04:50,740 --> 00:04:53,940\nis, first of all, you never stop to name things.\n\n73\n00:04:54,280 --> 00:04:57,620\nIn a traditional workflow, you take this for granted, but\n\n74\n00:04:59,120 --> 00:05:01,300\nyou write an HTML element and you're like,\n\n75\n00:05:01,940 --> 00:05:12,180\nlet's style it, How should I call it? This is a card wrapper, I guess. So you go into CSS file and create your card wrapper class and apply styles there. And you always switch between\n\n76\n00:05:12,620 --> 00:05:19,140\nthis naming things and organizing your styles and going back to the markup. And with Tailwind, you pretty much directly\n\n77\n00:05:19,540 --> 00:05:22,400\napply styles on the element inline,\n\n78\n00:05:23,200 --> 00:05:24,840\nwhich is what creates this\n\n79\n00:05:25,240 --> 00:05:26,060\nnever ending\n\n80\n00:05:27,800 --> 00:05:29,700\nriots on the internet because\n\n81\n00:05:30,040 --> 00:05:32,100\nFor the longest of time, you had this\n\n82\n00:05:32,440 --> 00:05:33,420\ncontext that\n\n83\n00:05:34,120 --> 00:05:37,260\nHTML is the document and shouldn't have any presentational\n\n84\n00:05:38,220 --> 00:05:44,440\nconcerns inside it. This is the concern of CSS, right? You have document is HTML\n\n85\n00:05:45,040 --> 00:05:50,260\nAnd then the CSS is styling and JavaScript is behavior and you have separation of concerns that way.\n\n86\n00:05:51,020 --> 00:05:51,520\nAnd\n\n87\n00:05:52,540 --> 00:05:55,220\nI guess React paved the way with JSX\n\n88\n00:05:56,400 --> 00:05:57,540\nto lead this\n\n89\n00:05:58,120 --> 00:06:00,080\nmind shift of you can have separation\n\n90\n00:06:00,420 --> 00:06:02,820\nof concerns at the component level.\n\n91\n00:06:03,340 --> 00:06:09,640\nSo a button can have some markup and styles and behavior and then a dropdown can have that as well.\n\n92\n00:06:10,300 --> 00:06:12,180\nSo Tailwind kind of goes in the same\n\n93\n00:06:12,500 --> 00:06:14,560\ndirection than JSX where\n\n94\n00:06:15,040 --> 00:06:18,380\nIn JSX you write what looks like HTML inside your JavaScript\n\n95\n00:06:19,200 --> 00:06:21,980\nand with Tailwind you basically write\n\n96\n00:06:22,840 --> 00:06:26,460\nwhat looks like styles in your markup, if that makes sense.\n\n97\n00:06:27,440 --> 00:06:27,940\nYeah.\n\n98\n00:06:29,440 --> 00:06:30,420\nYou know, so\n\n99\n00:06:31,420 --> 00:06:37,460\nI'll tell my, I'll try to be brief, but I'll tell my experience and story with CSS. So\n\n100\n00:06:38,240 --> 00:06:41,460\nearly on, when I was still in school, I was working on this big project.\n\n101\n00:06:43,500 --> 00:06:44,420\nAnd I\n\n102\n00:06:44,820 --> 00:06:46,480\nactually discovered pretty quickly\n\n103\n00:06:46,820 --> 00:06:47,800\nthat having\n\n104\n00:06:48,260 --> 00:06:51,100\natomic CSS classes was really useful. So\n\n105\n00:06:51,720 --> 00:06:53,680\nI put together a stylus,\n\n106\n00:06:54,800 --> 00:06:55,940\na set of stylus\n\n107\n00:06:57,220 --> 00:06:58,980\nstyle sheets that generated\n\n108\n00:07:00,100 --> 00:07:03,580\nclasses for like the padding and margin and\n\n109\n00:07:03,960 --> 00:07:06,980\nfont size and all like basically P1, P2,\n\n110\n00:07:07,360 --> 00:07:08,160\nall of that.\n\n111\n00:07:09,020 --> 00:07:13,540\nAnd very early on. So when I saw Tailwind, I'm like, oh, this looks kind of familiar.\n\n112\n00:07:15,540 --> 00:07:21,960\nBut like that never really ended up going anywhere for me. I ended up joining a company where we were using BEM,\n\n113\n00:07:22,360 --> 00:07:23,700\na block element modifier,\n\n114\n00:07:24,520 --> 00:07:43,000\nand I'm pretty happy about that. I had a coworker who made their own version of something like that, and so we're following these conventions, And I learned very quickly that those kinds of conventions fall over very fast. Not because a convention is wrong, but because people don't understand the convention properly or don't apply it properly.\n\n115\n00:07:44,600 --> 00:07:47,700\nSo anyway, To make a long story short, I discovered\n\n116\n00:07:49,860 --> 00:07:52,420\nCSS modules and thought that was pretty cool.\n\n117\n00:07:53,480 --> 00:07:53,980\nBut\n\n118\n00:07:54,840 --> 00:07:56,540\nwhen I was working at PayPal,\n\n119\n00:07:57,440 --> 00:08:00,520\nI jumped onto a project that was using LESS\n\n120\n00:08:01,100 --> 00:08:05,820\nand as a pre-processor. I'd used LESS, and Stylus, and SAS, and all of those. They're all fine.\n\n121\n00:08:06,420 --> 00:08:08,440\nBut what I discovered at PayPal\n\n122\n00:08:08,900 --> 00:08:11,780\nwas we had a page, and I checked this recently,\n\n123\n00:08:12,100 --> 00:08:13,340\nthis is still the case.\n\n124\n00:08:13,860 --> 00:08:18,180\nThere's a page that has hundreds of thousands of kilobytes of CSS.\n\n125\n00:08:18,680 --> 00:08:19,180\nAnd\n\n126\n00:08:19,500 --> 00:08:22,780\nno matter what you do, you click around all the buttons, everything,\n\n127\n00:08:23,300 --> 00:08:24,060\nbut there's\n\n128\n00:08:25,840 --> 00:08:37,580\nthis tool in the DevTools that will allow you to check the coverage for how much of your CSS is being applied. So I would click all the buttons and everything and then look at that tool and I could not get it to\n\n129\n00:08:38,000 --> 00:08:39,280\nany less than 90%\n\n130\n00:08:39,720 --> 00:08:41,260\nof unused CSS.\n\n131\n00:08:41,740 --> 00:08:47,380\nSo we had 90% of our CSS was not necessary on that page of hundreds of kilobytes.\n\n132\n00:08:48,520 --> 00:08:55,280\nAnd that was just obviously a disaster. And the reason is you just never know when you can delete it. And so\n\n133\n00:08:55,760 --> 00:08:56,700\nit's awful.\n\n134\n00:08:57,260 --> 00:08:57,940\nAnd so\n\n135\n00:08:58,300 --> 00:09:06,220\nI jumped on the CSS and JS train Because with CSS and JS, if you delete the component, then the styles are gone too.\n\n136\n00:09:06,760 --> 00:09:10,660\nYep, and it was great. But then there are all these problems with CSS and JS.\n\n137\n00:09:11,480 --> 00:09:14,480\nFrom a performance standpoint, server rendering standpoint,\n\n138\n00:09:15,280 --> 00:09:15,780\nauthorship,\n\n139\n00:09:16,420 --> 00:09:18,980\nauthorship's pretty good. But yeah, those\n\n140\n00:09:19,340 --> 00:09:20,840\nother problems are pretty significant.\n\n141\n00:09:21,900 --> 00:09:24,020\nSo, long story short, when I\n\n142\n00:09:25,400 --> 00:09:29,720\nfinally decided to give Tailwind a try, I felt like I was jumping\n\n143\n00:09:30,060 --> 00:09:33,060\nback into all of the benefits of CSS and JS,\n\n144\n00:09:33,660 --> 00:09:38,980\nlike not having to name things and not worrying about sending too many styles to the browser.\n\n145\n00:09:39,520 --> 00:09:40,580\nAll of those benefits\n\n146\n00:09:41,920 --> 00:09:48,000\nwithout the cost of CSS and JS. So that's my story and my reasoning for why I love\n\n147\n00:09:48,340 --> 00:09:49,620\nTailwind so much.\n\n148\n00:09:51,000 --> 00:09:53,300\nSo I think there could be,\n\n149\n00:09:54,240 --> 00:09:56,260\nor there are certainly people listening\n\n150\n00:09:56,680 --> 00:09:57,180\nwho\n\n151\n00:09:57,840 --> 00:09:59,240\ndon't have any,\n\n152\n00:10:00,120 --> 00:10:03,360\nor have never like looked into how Tailwind actually works.\n\n153\n00:10:04,120 --> 00:10:08,320\nSo I'd love to ask you about that as well. Can you\n\n154\n00:10:08,680 --> 00:10:16,340\ngive people an idea of how does Tailwind work? Totally. Just before I jump on that, because you mentioned BEM and all your journey,\n\n155\n00:10:16,860 --> 00:10:23,940\nSomething you might want to link in show notes or stuff like this is I had a conference talk where I presented my journey from\n\n156\n00:10:24,320 --> 00:10:28,780\ndiscovering this, I was Tachyon's back then, but the approach is very similar.\n\n157\n00:10:29,140 --> 00:10:32,220\nDiscovering this utility first approach and being completely\n\n158\n00:10:32,800 --> 00:10:37,480\nrevolted and angry at the idea that you could do something like this. And then\n\n159\n00:10:37,900 --> 00:10:40,300\ngoing through the process of realizing that\n\n160\n00:10:40,680 --> 00:10:47,180\nthe BEM methodology I wrote and I was really proud of, as you said, started falling apart because of deadlines and quick\n\n161\n00:10:47,660 --> 00:10:59,560\nchange requests. And I think 1 thing that's key here is with BEM, you always have to have the whole project in your brain and make decisions that are like big brain decisions that take everything into account.\n\n162\n00:11:00,040 --> 00:11:08,300\nAnd when there's a big rush and the deadline for next morning, you take a shortcut. And with BEM, once you start taking shortcuts, that's when the wheels falls off.\n\n163\n00:11:08,940 --> 00:11:15,780\nAnd yeah, so instead of me trying to summarize and condense the answer in like a 3 minute thing,\n\n164\n00:11:16,220 --> 00:11:26,500\nI think watching that conference talk or just skimming through is probably a good idea. I know a lot of people said that this was the thing and the talk that kind of made them revisit their\n\n165\n00:11:27,040 --> 00:11:29,160\npreconception and then give it a try.\n\n166\n00:11:30,380 --> 00:11:33,980\nCool, cool. Yeah, I just looked for it. It's the 1 at .allcoms,\n\n167\n00:11:34,360 --> 00:11:35,340\nis that right? Yeah.\n\n168\n00:11:35,940 --> 00:11:41,020\nGreat. The title is, A Real-Life Journey Into the Opinionated World of Utility-First\n\n169\n00:11:41,400 --> 00:11:43,860\nCSS. Yeah. That's great. And it's in 2018,\n\n170\n00:11:44,240 --> 00:11:46,280\nso it's like 5 years ago.\n\n171\n00:11:46,740 --> 00:11:47,820\nAnd it's still,\n\n172\n00:11:48,400 --> 00:11:49,060\nto me,\n\n173\n00:11:49,700 --> 00:11:53,300\nI still feel like it's very relevant today and, yeah,\n\n174\n00:11:53,860 --> 00:11:55,780\npeople go through this mindset change.\n\n175\n00:11:56,200 --> 00:11:59,240\nAll right. So, to go to your next question, how\n\n176\n00:11:59,600 --> 00:12:00,560\nTailwind CSS works,\n\n177\n00:12:01,820 --> 00:12:02,320\nI'll\n\n178\n00:12:02,860 --> 00:12:06,360\ntalk about how it works today, because it has gone through different\n\n179\n00:12:07,160 --> 00:12:08,240\nmotions. But\n\n180\n00:12:08,720 --> 00:12:11,880\nthe latest version, since Tailwind CSS version 3,\n\n181\n00:12:12,340 --> 00:12:12,840\nis,\n\n182\n00:12:13,200 --> 00:12:16,220\nhas a just-in-time compiler, which really changes\n\n183\n00:12:16,560 --> 00:12:19,160\na lot of things for the better. And essentially\n\n184\n00:12:19,540 --> 00:12:24,940\nit completely addresses what you just mentioned at PayPal of 90% of unused styles.\n\n185\n00:12:25,640 --> 00:12:29,620\nTailwind will only generate the styles that you use in your templates.\n\n186\n00:12:30,060 --> 00:12:31,060\nSo by default,\n\n187\n00:12:31,880 --> 00:12:35,820\nTailwind CSS is nothing. It just has a little reset for\n\n188\n00:12:36,260 --> 00:12:39,560\nmargins and padding and font sizes. It has a pretty aggressive\n\n189\n00:12:40,240 --> 00:12:42,200\nreset as a starting point.\n\n190\n00:12:42,780 --> 00:12:49,700\nBut then it's not going to output any CSS until you use a class like p-4 for padding level 4.\n\n191\n00:12:50,740 --> 00:12:51,480\nExcuse me.\n\n192\n00:12:51,780 --> 00:12:53,460\nAnd so when you write p-4,\n\n193\n00:12:54,160 --> 00:12:57,100\nthe Just-In-Time engine detects that string and it's like,\n\n194\n00:12:57,700 --> 00:13:01,360\noh, this person is using that, so I may as well generate a class P-4.\n\n195\n00:13:02,860 --> 00:13:03,560\nAnd so\n\n196\n00:13:04,540 --> 00:13:12,180\nit used to be different. It used to have a series of tokens for spacing and colors and font sizes and font weights and all the\n\n197\n00:13:12,500 --> 00:13:21,240\ndifferent styling scales you can think of. And it would generate all of the permutation possible, like what you were explaining, like P1, P2, P3, P4.\n\n198\n00:13:21,980 --> 00:13:24,560\nAnd then you would use what you need.\n\n199\n00:13:25,080 --> 00:13:26,140\nAnd at the end,\n\n200\n00:13:26,460 --> 00:13:42,260\nyou would run something through a process called Purge CSS, which would try to figure out what you haven't used, probably the same tool that you were scanning PayPal's front end with. And then it would be like, oh, okay, you're not using 90% of this, so let me strip out what's not used.\n\n201\n00:13:42,740 --> 00:13:45,360\nAnd that's great for production, but as a developer,\n\n202\n00:13:45,860 --> 00:13:49,780\nyou're running the full CSS file with all the permutation while you develop.\n\n203\n00:13:50,460 --> 00:13:53,300\nAnd as Tailwind got bigger and got more variants\n\n204\n00:13:53,800 --> 00:13:56,180\nand more CSS features applied,\n\n205\n00:13:56,780 --> 00:13:57,280\ninvolved,\n\n206\n00:13:57,740 --> 00:14:03,080\nthe file became a problem even at dev time. Like you'd have 357\n\n207\n00:14:03,080 --> 00:14:10,940\nmegabytes of CSS. And at some point the browser starts choking a little bit. And even if it doesn't go to production, it became a problem.\n\n208\n00:14:11,360 --> 00:14:14,440\nAnd the shift to just in time engine was completely\n\n209\n00:14:15,020 --> 00:14:20,820\ntranscendent because now you can enable all the colors, all the scales, all of the everything,\n\n210\n00:14:21,240 --> 00:14:22,100\nall the variants,\n\n211\n00:14:22,540 --> 00:14:25,740\nand nothing gets generated. So it's super fast even when you develop.\n\n212\n00:14:26,100 --> 00:14:27,940\nAnd as you build your UI, you\n\n213\n00:14:28,320 --> 00:14:31,860\ncan see the outputs getting populated with the classes that are used.\n\n214\n00:14:33,740 --> 00:14:34,240\nSo\n\n215\n00:14:35,220 --> 00:14:37,740\nthe way Tailwind works in the really short,\n\n216\n00:14:38,080 --> 00:14:40,780\nit's a CSS framework generator.\n\n217\n00:14:41,400 --> 00:14:42,620\nYou give it an input,\n\n218\n00:14:43,580 --> 00:14:51,100\nyou give it a config file, which is the theme with the scales and the colors and tokens. There's a default value, but you can customize that.\n\n219\n00:14:51,680 --> 00:15:03,940\nAnd based on this config, whatever you use gets turned into a CSS output that is a normal CSS style sheets that you, like you said, bring with the link tag, there is no runtime.\n\n220\n00:15:04,300 --> 00:15:12,320\nIt's just normal CSS, which makes it even funnier when every time you tweet something about Tailwind, people are like, why don't you just use CSS?\n\n221\n00:15:13,480 --> 00:15:20,640\nAnd Tailwind is just CSS. There, There's a step that generates it, but at the end of the day, it's a style sheet that you bring\n\n222\n00:15:21,720 --> 00:15:23,660\nin your project in the document heads,\n\n223\n00:15:24,080 --> 00:15:25,080\nand there you go.\n\n224\n00:15:26,260 --> 00:15:32,420\nYeah, you know, JSX had the same kind of pushback when it was introduced too. Like people would say, just use HTML.\n\n225\n00:15:33,180 --> 00:15:34,040\nYeah, well,\n\n226\n00:15:36,040 --> 00:15:40,020\nat this point, React is pretty much 1, for better or worse. And\n\n227\n00:15:40,680 --> 00:15:41,820\nI think Tailwind\n\n228\n00:15:42,340 --> 00:15:54,600\nis on that way. I personally just totally love it. And I remember when the just-in-time compiler got added in that really made things just excellent. And it wasn't just the,\n\n229\n00:15:56,000 --> 00:15:57,840\nallowing for generating\n\n230\n00:15:59,340 --> 00:16:02,660\nthe style sheet at a run time, or yeah,\n\n231\n00:16:03,260 --> 00:16:08,700\nI guess, what do we call that? It's not even build time, like dev time as well. Just in time, yeah. But\n\n232\n00:16:09,240 --> 00:16:10,780\nyeah, just in time, yeah.\n\n233\n00:16:11,180 --> 00:16:14,020\nBut it's also the JIT compiler\n\n234\n00:16:14,680 --> 00:16:22,400\nadded some new features of things that you can do with Tailwind. Yes. Do you want to talk about those at all? Yeah. The first 1 is related to\n\n235\n00:16:23,420 --> 00:16:26,680\nthe file size where you had to first determine,\n\n236\n00:16:27,180 --> 00:16:28,540\nI want hover styles\n\n237\n00:16:28,920 --> 00:16:36,920\nand active styles, but I don't really think I'm gonna need something that has active and then focus. So you had to\n\n238\n00:16:38,400 --> 00:16:39,620\nopt in certain\n\n239\n00:16:40,440 --> 00:16:41,900\nstates or states combinations.\n\n240\n00:16:42,380 --> 00:16:44,180\nAnd then with the Just-In-Time engine,\n\n241\n00:16:44,860 --> 00:16:53,600\nall the variants under the sun became available and also stackable. So you could do something that you might never need, but you could do something\n\n242\n00:16:54,520 --> 00:17:04,419\nnth child 7 on focus on a hover at the small breakpoint. You could chain all these variants and it would work out of the box with any permutation you can think of.\n\n243\n00:17:05,500 --> 00:17:12,839\nSo that's just more power to the user. But another thing that the Just-In-Time engine brought is the concept of arbitrary\n\n244\n00:17:13,359 --> 00:17:17,700\nthings, arbitrary values, but also arbitrary properties or variance.\n\n245\n00:17:18,819 --> 00:17:27,140\nAnd the way to think about it is as an escape hatch when you want to use something that is not part of the default theme that you have.\n\n246\n00:17:28,319 --> 00:17:30,080\nIt's using a bracket syntax.\n\n247\n00:17:30,420 --> 00:17:32,580\nSo for example, padding, you have p-4\n\n248\n00:17:33,120 --> 00:17:33,820\nor p-8.\n\n249\n00:17:34,400 --> 00:17:35,580\nAnd then if you wanted\n\n250\n00:17:36,140 --> 00:17:38,200\n17 pixels or 37.2%,\n\n251\n00:17:40,900 --> 00:17:49,320\ninstead of going in the spacing scale in the config and adding that 1 of value, because you might not use it anywhere else. You can go p dash\n\n252\n00:17:49,820 --> 00:17:58,160\nbraces, brackets, square brackets, and then put any CSS value here. So 17 pixels or 2 rems or 33%.\n\n253\n00:17:59,320 --> 00:18:01,580\nAnd this is on the fly going to generate\n\n254\n00:18:02,120 --> 00:18:04,580\nthe appropriate CSS output. So\n\n255\n00:18:04,940 --> 00:18:09,900\nit's almost a way to break out of the tokens and have access to any specific 1 of values.\n\n256\n00:18:10,940 --> 00:18:12,480\nSo that's, that's really useful\n\n257\n00:18:12,800 --> 00:18:18,140\ntypically for marketing sites where you have decorative elements, where you're going to absolute position something\n\n258\n00:18:19,320 --> 00:18:23,660\n647 pixels from the top, you know, like a blob that kind of spins around\n\n259\n00:18:24,240 --> 00:18:29,280\nand typically you'd have to go in the config and add like a random value in a scale\n\n260\n00:18:30,040 --> 00:18:32,180\nAnd now it's part of your design system, but\n\n261\n00:18:32,520 --> 00:18:37,620\nit's clearly something you're never going to use anywhere else. Yeah. So I like this intentionally\n\n262\n00:18:37,940 --> 00:18:41,260\nbreaking out of the system with the square brackets. It's almost like\n\n263\n00:18:41,740 --> 00:18:44,440\na flag, like, Hey, I'm doing something custom here.\n\n264\n00:18:45,480 --> 00:18:48,100\nAnd this was so useful that then it became\n\n265\n00:18:48,740 --> 00:18:51,360\na thing that you can also have arbitrary properties.\n\n266\n00:18:51,820 --> 00:19:01,080\nAnd I've made a tongue in cheek video on that, that's Tailwind CSS supports every single CSS property under the sun, even the ones that don't exist yet.\n\n267\n00:19:01,680 --> 00:19:10,380\nBecause you can use the square bracket and pass the key and the value in there. And you can do something like clip path, polygon, whatever,\n\n268\n00:19:10,840 --> 00:19:12,260\nor the P3 color,\n\n269\n00:19:12,740 --> 00:19:14,180\nlike any CSS\n\n270\n00:19:15,040 --> 00:19:26,460\nthat you can think of can be created on the fly inside a square bracket like this. So instead of just having P dash square bracket and the value, you have square brackets and then you have the key column value\n\n271\n00:19:26,820 --> 00:19:28,280\nand you can pass any CSS.\n\n272\n00:19:29,280 --> 00:19:40,700\nSo this lets you, It doesn't mean you have to do it this way. You can still write normal CSS in a CSS file, but it lets you if you're in your jam, in your inline styles looking thing classes,\n\n273\n00:19:41,120 --> 00:19:42,540\nyou can pass any\n\n274\n00:19:43,580 --> 00:19:49,260\nCSS that is not supported by Tailwind directly inside your class name attributes and it will generate\n\n275\n00:19:50,340 --> 00:19:55,320\nthe correct CSS output with vendor prefixes and all this stuff, which is really cool.\n\n276\n00:19:56,240 --> 00:19:57,540\nYeah, that is very rad.\n\n277\n00:19:58,080 --> 00:20:05,580\nI definitely use that And I agree that that's a good use case for marketing sites where the styles are\n\n278\n00:20:06,340 --> 00:20:08,240\ntypically just kind of funny.\n\n279\n00:20:11,260 --> 00:20:19,860\nYeah, they're trying to catch the attention of people. So they wanna do something different. We're gonna turn this sideways and have it scroll like the marquee thing that we did with Rocket Rental\n\n280\n00:20:20,280 --> 00:20:21,320\na while ago.\n\n281\n00:20:22,000 --> 00:20:23,980\nSo yeah, that is\n\n282\n00:20:24,360 --> 00:20:30,600\nsuper cool. Now, a lot of people are gonna look at those class names and gonna be like, this is awful. I hate this so much.\n\n283\n00:20:30,940 --> 00:20:33,260\nI've definitely gotten this in my\n\n284\n00:20:33,940 --> 00:20:35,260\nreplies as well.\n\n285\n00:20:36,280 --> 00:20:37,320\nSo what\n\n286\n00:20:37,660 --> 00:20:41,500\ndo you say to that? Because it's certainly like, there is a legit\n\n287\n00:20:41,920 --> 00:20:42,940\nargument there\n\n288\n00:20:43,260 --> 00:20:50,780\nthat those class names can get really long. So what's your take on that? I agree that it doesn't make your HTML\n\n289\n00:20:51,300 --> 00:20:51,800\npretty.\n\n290\n00:20:52,680 --> 00:20:56,500\nIt does add a lot of noise. But 1 thing I'm trying to convey is\n\n291\n00:20:56,880 --> 00:20:57,380\nto\n\n292\n00:20:57,740 --> 00:21:00,980\na newcomer to Tailwind or someone who hasn't tried it,\n\n293\n00:21:02,020 --> 00:21:06,420\nwhat looks like noise and clutter and like, oh my God, I can't even understand anything,\n\n294\n00:21:07,800 --> 00:21:08,500\nis actually\n\n295\n00:21:08,800 --> 00:21:13,440\nreally rapidly turning into information and context about how the UI looks.\n\n296\n00:21:13,840 --> 00:21:18,420\nAnd when I look at some tailwind HTML, I can see my brain sees the UI.\n\n297\n00:21:18,900 --> 00:21:21,140\nI can almost like compile it, like\n\n298\n00:21:22,120 --> 00:21:28,400\nI can pass the HTML and the page builds in my head because I see the border spacing, padding, flex, all that stuff.\n\n299\n00:21:28,820 --> 00:21:30,320\nWhereas if I jump into\n\n300\n00:21:30,900 --> 00:21:33,340\na HTML that says card wrapper and then\n\n301\n00:21:33,900 --> 00:21:37,620\ncard contents, I have 0 idea what it looks like.\n\n302\n00:21:38,680 --> 00:21:40,860\nAnd that plays into this collocation\n\n303\n00:21:41,200 --> 00:21:48,060\nof concerns and the laser focus on you building a piece of UI and you can see the markup,\n\n304\n00:21:48,580 --> 00:21:51,240\nthe styling, the behavior if you're in React.\n\n305\n00:21:52,080 --> 00:21:54,340\nAnd you have all the pieces to assemble\n\n306\n00:21:54,720 --> 00:22:01,160\nwhat it looks like while looking at the code. So it turns really quickly from noise to useful information.\n\n307\n00:22:02,100 --> 00:22:19,860\nAnd if you really hate it, I have not done that myself, but there are tools that collapse the class name attributes to hide it. If you just want to focus on the area attributes and just the semantics, and you can hide them. But honestly, I prefer having or it's almost like the verbose\n\n308\n00:22:20,900 --> 00:22:22,080\nmodes in the\n\n309\n00:22:23,060 --> 00:22:34,060\nterminal where it tells you everything you need to know. When I look at Tailwind HTML, I'm like, I'm happy that I can see what it looks like, because I really quickly get the context of what it looks like.\n\n310\n00:22:35,140 --> 00:22:41,700\nYeah. Yeah. That makes a lot of sense. I agree. It's something that, that definitely grows on you, over time. So,\n\n311\n00:22:42,700 --> 00:22:46,680\nyou know, a lot of people threw up in their mouth when they saw JSX and now they're,\n\n312\n00:22:47,040 --> 00:22:50,740\ncoding JSX and making tons of money doing it and it's fine.\n\n313\n00:22:52,900 --> 00:23:04,800\nI mean for me too, when I first saw JSX I was like, ah, I don't think so. Didn't we learn that this is not the way to do it? But No, I love it now. And that happened to me with Tailwind as well.\n\n314\n00:23:05,340 --> 00:23:14,420\nI didn't have such a negative reaction to Tailwind, actually. I was pretty ambivalent until I actually tried it on a project and I was like, oh, now I love it. So\n\n315\n00:23:15,140 --> 00:23:17,720\nIt's definitely something that you get used to you probably\n\n316\n00:23:18,340 --> 00:23:22,940\nwent through that phase with react and JSX and then you had that little\n\n317\n00:23:23,320 --> 00:23:26,460\nLittle bailing you had say hey, I've beat I remember my\n\n318\n00:23:27,040 --> 00:23:37,400\nMy thoughts initially on JSX and turns out that it's not such a bad idea So maybe you you had that lens when approaching it because yeah, the number 1 thing that make people\n\n319\n00:23:38,800 --> 00:23:45,080\nfeel literally angry and wants to rant on Twitter about it is like it goes against everything that you've been told.\n\n320\n00:23:45,420 --> 00:23:49,700\nCSS, Zen Garden and this principle of like, it's like someone,\n\n321\n00:23:50,020 --> 00:23:59,440\na junior came in the industry and had none, they didn't want to do any homework on the past research and foundation and just build that thing that goes against it.\n\n322\n00:24:00,200 --> 00:24:05,580\nWhere it's not the case, like the creators of Tailwind and Tachyon before that were all\n\n323\n00:24:06,140 --> 00:24:12,940\nfans of CSS Zen Garden. And if you look at their previous code, Adam Watson and Adam Morse from Tailwind and Tachyon,\n\n324\n00:24:13,260 --> 00:24:19,080\nthey have blog posts about why you should use BEM and always make sure your HTML is free of design concerns.\n\n325\n00:24:20,220 --> 00:24:26,820\nThey also came from that, like, this is a terrible idea to, oh, wait a minute, it makes me productive and it's predictable.\n\n326\n00:24:28,860 --> 00:24:32,140\nYeah, yeah. You know, I think that part of what\n\n327\n00:24:32,640 --> 00:24:34,580\nbought me into it so much was\n\n328\n00:24:34,940 --> 00:24:39,980\nmy experience with CSS and JS. And the developer experience there is very good.\n\n329\n00:24:40,460 --> 00:24:42,780\nBeing able to not have to name things.\n\n330\n00:24:43,260 --> 00:24:44,080\nLike, so,\n\n331\n00:24:45,060 --> 00:24:53,420\nStyled components was like the big thing in CSS and JS. That's where things kind of exploded. But I never liked styled components because you have to name things. And then the CSS prop\n\n332\n00:24:54,360 --> 00:24:59,440\nor the style. Yeah, yeah. You can pass styles directly without naming them. Emotion.\n\n333\n00:24:59,800 --> 00:25:05,240\nYep, Exactly. And so I saw Tailwind and I saw the CSS prop. That's really what\n\n334\n00:25:05,540 --> 00:25:06,640\nit amounted to.\n\n335\n00:25:07,200 --> 00:25:08,240\nAnd with\n\n336\n00:25:08,740 --> 00:25:13,680\nthe right editor extensions, then you get the same sort of auto-complete and everything.\n\n337\n00:25:14,540 --> 00:25:16,560\nSo yeah, I'm a super fan.\n\n338\n00:25:17,780 --> 00:25:18,420\nSo that's\n\n339\n00:25:19,340 --> 00:25:20,240\nthe other thing.\n\n340\n00:25:20,840 --> 00:25:22,620\nOoh, I forgot what I was gonna say.\n\n341\n00:25:23,860 --> 00:25:25,940\nIt'll come back, I'm sure, if it's important.\n\n342\n00:25:26,480 --> 00:25:26,980\nYeah.\n\n343\n00:25:28,180 --> 00:25:32,340\nWere you gonna comment on editor extensions and stuff like that?\n\n344\n00:25:33,700 --> 00:25:36,340\nDo you have any extensions that you recommend?\n\n345\n00:25:36,820 --> 00:25:40,420\nSo like, I think I've just got Headwind. Is that a thing?\n\n346\n00:25:40,840 --> 00:25:46,140\nI think I should look. So Headwind is a third party thing, but It's pretty useful.\n\n347\n00:25:47,080 --> 00:25:52,280\nFun fact at my day job at Thinkmill, I just joined a new project that uses Tailwind.\n\n348\n00:25:52,800 --> 00:25:58,600\nAnd this morning I did 2 PRs and it's to bring the tooling that kind of helps you be productive. So\n\n349\n00:26:00,480 --> 00:26:07,940\nThe 1 thing that it was already in this project, but the 1 thing everyone should use if they use VS Code is the Tailwind CSS IntelliSense\n\n350\n00:26:08,520 --> 00:26:09,020\nextension,\n\n351\n00:26:09,520 --> 00:26:11,620\nwhich is what gives you all the auto-completes.\n\n352\n00:26:11,940 --> 00:26:16,020\nIf you type text dash, you have all the colors with the little swatch\n\n353\n00:26:16,920 --> 00:26:35,040\nsuggestions. And if you hover any Tailwind class, it tells you what the CSS output is. As a teacher myself, it's my favorite feature about Tailwind tooling is when I hover over any class, and I remember when we did the live stream, I was showing you how it composes CSS variable with opacity and stuff like that.\n\n354\n00:26:35,740 --> 00:26:38,040\nIt lets you understand what Tailwind does.\n\n355\n00:26:38,560 --> 00:26:40,620\nAnd another tool that's really useful,\n\n356\n00:26:41,320 --> 00:26:44,760\nif you use Prettier, is the Prettier plugin for Tailwind.\n\n357\n00:26:45,300 --> 00:26:47,540\nAnd this one's role is to\n\n358\n00:26:48,160 --> 00:26:49,340\nsource the classes\n\n359\n00:26:49,920 --> 00:26:52,620\nin a logical order. So you have typically\n\n360\n00:26:53,360 --> 00:27:03,880\nthe most impactful layout classes like flex or grid or margin, stuff that affects where the thing goes. And then stuff like text color or font weight or\n\n361\n00:27:04,300 --> 00:27:06,300\ndecorative stuff comes later.\n\n362\n00:27:07,280 --> 00:27:11,140\nAnd funnily enough, it represents the way in which the CSS\n\n363\n00:27:11,600 --> 00:27:12,100\noutput\n\n364\n00:27:12,520 --> 00:27:15,040\nis generated by Tailwind in the source order.\n\n365\n00:27:15,520 --> 00:27:17,060\nSo there's this sort of\n\n366\n00:27:17,500 --> 00:27:27,540\na logical approach there. And what it lets you do is just like Prettier, you don't care about inattention and you hit save and it jump into place when you save.\n\n367\n00:27:27,980 --> 00:27:28,880\nSame with Tailwind,\n\n368\n00:27:29,320 --> 00:27:38,220\nyou put a responsive class in the middle and then when you save, it's gonna plop it at the end, and it organizes everyone on the team with the same class sorting mechanism.\n\n369\n00:27:39,180 --> 00:27:41,780\nSo if you work with multiple people, I think that's\n\n370\n00:27:42,780 --> 00:27:44,120\nan essential thing.\n\n371\n00:27:45,640 --> 00:27:49,540\nYeah. Yeah, I just checked and we've got both of those.\n\n372\n00:27:50,160 --> 00:27:51,840\nSo the, the workshops\n\n373\n00:27:52,420 --> 00:27:58,720\nhave a VS code folder with the settings. So it has recommended or extensions. That's the PR I did this morning.\n\n374\n00:27:59,060 --> 00:28:00,980\nVS code, that's VS code Settings.json\n\n375\n00:28:01,560 --> 00:28:02,300\nand recommendations.json.\n\n376\n00:28:04,660 --> 00:28:07,700\nYeah, yeah, yeah. And then we also have the prettier\n\n377\n00:28:08,560 --> 00:28:14,080\nplugin too. It is fabulous, definitely. And it's actually really useful because if you\n\n378\n00:28:15,040 --> 00:28:27,940\nhave a typo in 1 of the class names and it'll send it over to the front. You're like, whoa, why did it go over there? Yeah. So 1 more thing that plugin does is if it's not a Tailwind class, it puts it at the start because you can use other CSS\n\n379\n00:28:28,480 --> 00:28:29,980\nclasses with Tailwind.\n\n380\n00:28:30,480 --> 00:28:30,980\nAnd\n\n381\n00:28:32,460 --> 00:28:52,620\nthe thinking, the reasoning here is like, oh, it's probably useful if you have something separate to put it at the start to kind of make it clear that it's outside of Tailwind. So like you said, if you make a typo, it becomes a non-Tailwind class, and it moves at the front. And it's, there's no type safety because it's just strings, but in a way this\n\n382\n00:28:53,000 --> 00:29:01,320\nclass sorting gives you a hint of safety because it makes you quickly realize, oh, hang on, it jumped at the front. Something must be, must be off.\n\n383\n00:29:02,460 --> 00:29:07,760\nYeah, that, that I think is probably the, my biggest concern with TypeScript is the lack of type safety.\n\n384\n00:29:08,220 --> 00:29:15,140\nOr with, not with TypeScript, but with Tailwind is the lack of type safety. Do you know of any projects or anything that\n\n385\n00:29:15,780 --> 00:29:16,280\nwill,\n\n386\n00:29:16,980 --> 00:29:19,540\nor anybody that's working on bringing,\n\n387\n00:29:20,820 --> 00:29:24,740\nnot necessarily type safety, but just some sort of verification,\n\n388\n00:29:25,520 --> 00:29:27,000\nautomated static analysis\n\n389\n00:29:27,480 --> 00:29:41,300\nto tell me whether I got classes that are not going to be applied. Yeah, that is a key problem. And I think it's just like the Just-In-Time engine before it came was a topic that kept coming over and over and over\n\n390\n00:29:41,680 --> 00:29:46,180\nuntil the team was like, we have to do something. Like this is the next big bottleneck.\n\n391\n00:29:46,560 --> 00:29:51,360\nI feel like this is the 1 now that keeps coming, like how do I make sure if I change\n\n392\n00:29:51,760 --> 00:29:58,780\na theme value and this class doesn't exist anymore, nothing tells me that it doesn't exist, except maybe putting it at the front.\n\n393\n00:29:59,140 --> 00:30:00,520\nThere's tools like\n\n394\n00:30:01,700 --> 00:30:08,040\nClass Variants Authority, CVA by Joe Bell, or Tailwind Variants, I think he's\n\n395\n00:30:08,800 --> 00:30:11,880\nsome sort of Vercel team working on this project.\n\n396\n00:30:12,880 --> 00:30:13,700\nAnd basically,\n\n397\n00:30:15,040 --> 00:30:17,900\nIt's typically used when you have multivariant\n\n398\n00:30:18,240 --> 00:30:20,140\ncomponents. So you have like\n\n399\n00:30:20,660 --> 00:30:27,220\na primary look and a secondary look and then a large, medium, small sizes. And you want to have strings of classes\n\n400\n00:30:27,700 --> 00:30:29,940\nand then combine them and merge them intelligently.\n\n401\n00:30:30,540 --> 00:30:34,740\nSo it kind of adds. So you define an object with all the different\n\n402\n00:30:35,580 --> 00:30:44,280\npermutation and combination and then it gives you a bit more type safety, but it's still working with strings. So there's a limitation to what you can do.\n\n403\n00:30:44,680 --> 00:30:54,600\nAnd otherwise outside, I haven't tried it myself, but I had a look and it looks really exciting. It's not Tailwind, but there's a new CSS library called Panda CSS,\n\n404\n00:30:55,320 --> 00:30:59,400\nwhich is by the creator of Chakra UI, which is also quite popular.\n\n405\n00:31:00,060 --> 00:31:04,260\nAnd it's very, very, very inspired and similar to Tailwind, but it has\n\n406\n00:31:04,820 --> 00:31:10,340\nend-to-end type safety because it's built in TypeScript rather than strings of classes.\n\n407\n00:31:12,040 --> 00:31:22,480\nYeah. But all of these tools, I just want to say 1 more thing, all of these tools, you lose that superpower of like the short class name, shorthands for CSS properties.\n\n408\n00:31:23,480 --> 00:31:35,660\nIronically, people say, why don't you just write CSS, learn the CSS key value pair, but there's something really nice to writing this really shorthand classes and instead of going padding column 3 px.\n\n409\n00:31:36,060 --> 00:31:44,980\nAnd so most of, I think Panda is that way you, you, it's closer to the CSS prop in emotion where you have a CSS in JavaScript object,\n\n410\n00:31:46,020 --> 00:31:52,700\nwhere you still have to write your key value pairs to, when you work with Tailwind long enough, it almost feels like a chore. And\n\n411\n00:31:53,560 --> 00:31:59,640\nlike, I know the key value pair in my head. I just want to go P-4 instead of padding. Oh, yeah. Yeah.\n\n412\n00:32:00,660 --> 00:32:06,880\nBut with Tailwind itself, I do not know if there is a, unless the whole thing is rewritten\n\n413\n00:32:07,720 --> 00:32:08,220\ndifferently.\n\n414\n00:32:08,560 --> 00:32:13,860\nI don't know how you can have these string classes to be completely type safe and\n\n415\n00:32:14,460 --> 00:32:17,580\nyeah. Yeah, Yeah, I wonder if,\n\n416\n00:32:18,840 --> 00:32:19,940\nI have no idea,\n\n417\n00:32:20,340 --> 00:32:24,220\nsomebody will figure something out. It seems like an important enough problem\n\n418\n00:32:25,360 --> 00:32:28,480\nthat it'll somehow work out. A tool that is adjacently\n\n419\n00:32:28,940 --> 00:32:31,520\nrelated is called Tailwind Merge.\n\n420\n00:32:32,580 --> 00:32:35,360\nTailwind Merge is doing 1 thing, it's\n\n421\n00:32:36,540 --> 00:32:49,860\nwhen you try to merge multiple class strings together, quite often you end up with 2 conflicting classes without knowing. So you might have a font-weight bold and font-weight extra bold in the same really long string.\n\n422\n00:32:50,320 --> 00:32:55,540\nAnd it comes from 2 different components that have been merged, the class attributes have been merged together.\n\n423\n00:32:56,280 --> 00:32:58,980\nAnd on the screen, you will see 1 of these values.\n\n424\n00:32:59,320 --> 00:33:09,440\nAnd it's, if you understand CSS and the cascade and the source order, it's the 1 that has been defined last in the order that wins because they have the same level of specificity.\n\n425\n00:33:10,520 --> 00:33:17,940\nAnd so sometimes it's what you expect, so you don't notice, and sometimes it's not. And then you're like, oh, there seems to be a bug, but it's really tricky\n\n426\n00:33:18,320 --> 00:33:19,060\nto understand\n\n427\n00:33:20,500 --> 00:33:21,320\nwhere the\n\n428\n00:33:21,620 --> 00:33:24,900\nduplication has happened. And Tailwind Merge essentially\n\n429\n00:33:25,320 --> 00:33:30,800\nlooks at competing Tailwind classes and then always makes the last 1 win, which is\n\n430\n00:33:31,380 --> 00:33:33,580\nmany people think that's how CSS\n\n431\n00:33:34,200 --> 00:33:34,700\nworks\n\n432\n00:33:35,020 --> 00:33:37,460\nor they wish that how it would work, that's\n\n433\n00:33:38,260 --> 00:33:41,760\nthe last thing, like if you have text blue and text red,\n\n434\n00:33:42,180 --> 00:33:45,980\nif you have text red last, you wish the text would be red always,\n\n435\n00:33:46,560 --> 00:33:55,940\nbut it's not the HTML order that matters, it's the CSS source order. And sometimes you might have text read last, but it's first in the CSS, so it loses.\n\n436\n00:33:56,520 --> 00:33:59,400\nSo that's really confusing. So Tailwind Merge basically said,\n\n437\n00:34:00,060 --> 00:34:07,860\nWhen you merge stuff, the 1 you put last is the 1 that wins all the time. So that's a really, again, not type safety, but it brings\n\n438\n00:34:08,940 --> 00:34:13,639\npredictability and confidence in doing advanced stuff with the class combinations.\n\n439\n00:34:16,020 --> 00:34:17,580\nYes, so that actually\n\n440\n00:34:18,080 --> 00:34:18,580\nwas\n\n441\n00:34:19,139 --> 00:34:21,239\nthe subject of a\n\n442\n00:34:21,560 --> 00:34:22,440\ntweet recently.\n\n443\n00:34:23,960 --> 00:34:24,460\nSo\n\n444\n00:34:25,420 --> 00:34:26,400\nif you know\n\n445\n00:34:26,800 --> 00:34:29,940\nParcel or React ARIA, React Spectrum,\n\n446\n00:34:30,420 --> 00:34:31,139\nthis is\n\n447\n00:34:31,500 --> 00:34:35,940\nDevin, yeah, Devin Govitt, I think I'm pronouncing his last name right.\n\n448\n00:34:36,780 --> 00:34:46,159\nHe just, I just saw this a couple minutes ago. Just tweeted that it would be really nice if there was a flag that you could set for your website to say,\n\n449\n00:34:47,139 --> 00:34:48,420\nmake the specificity\n\n450\n00:34:48,739 --> 00:34:57,240\norder be the order of the class names instead of the order of the style sheet. And that's like totally a thing that could be a thing.\n\n451\n00:34:57,640 --> 00:35:00,940\nI could see that being like something you can opt into.\n\n452\n00:35:01,580 --> 00:35:06,520\nAnd then we wouldn't need Tailwind merge, which would just be fabulous. Yeah. It's, it's very sneaky\n\n453\n00:35:07,200 --> 00:35:10,620\nconcepts to explain. And a lot of people don't like,\n\n454\n00:35:11,000 --> 00:35:26,880\nI think West bus or someone with a huge following did a test, like where there was text blue and then it's really funny to read. And he like, he was like, what's the final color? And 50% of people had it wrong. Cause that was, that was a play on the\n\n455\n00:35:27,720 --> 00:35:30,640\nHTML order of classes and the source order in CSS.\n\n456\n00:35:31,860 --> 00:35:32,940\nIt's very confusing.\n\n457\n00:35:33,900 --> 00:35:35,040\nAnd yeah,\n\n458\n00:35:35,380 --> 00:35:41,620\nif you were able to opt in, like say, hey, I know what I'm doing and I want to specify,\n\n459\n00:35:42,260 --> 00:35:48,460\njust like in JavaScript, when you, if you have an object and you redefine a property, the last time you redefine always wins.\n\n460\n00:35:48,960 --> 00:35:52,060\nIt's kind of what people expect with the stars as well.\n\n461\n00:35:52,440 --> 00:35:54,060\nBut it's not. Yeah. Yeah.\n\n462\n00:35:54,840 --> 00:35:55,580\nYeah, well,\n\n463\n00:35:56,240 --> 00:36:02,420\nmaybe that is a future that we could have. It's just like a meta tag on the page or something like that. Like that would be enough, I think.\n\n464\n00:36:03,080 --> 00:36:10,460\nBut you know, the standards are harder than, or things can sometimes be more complex than you might expect. Yeah.\n\n465\n00:36:11,000 --> 00:36:18,180\nSo, well, Simon, I really enjoyed our chat. Is there anything else that we didn't talk about that you'd really like to touch on. Yeah,\n\n466\n00:36:18,820 --> 00:36:20,720\nin the why would you use Tailwind's\n\n467\n00:36:21,900 --> 00:36:22,860\nbag, bucket,\n\n468\n00:36:24,140 --> 00:36:28,520\nif you just work with React, it doesn't really matter to you, but there's a very\n\n469\n00:36:31,700 --> 00:36:32,200\nundervalued\n\n470\n00:36:32,520 --> 00:36:33,580\naspect of Tailwind\n\n471\n00:36:34,120 --> 00:36:36,420\nbecause it's just CSS, it works everywhere.\n\n472\n00:36:36,840 --> 00:36:38,500\nIt works with Ruby templates,\n\n473\n00:36:38,820 --> 00:36:40,780\nPHP, WordPress, all sites,\n\n474\n00:36:41,120 --> 00:36:41,960\nplain HTML.\n\n475\n00:36:43,260 --> 00:36:46,160\nAnd I've seen team go really deep with a specific,\n\n476\n00:36:47,060 --> 00:36:56,360\nReact flavored framework, like Chakra UI, which gives you props. So instead of applying a P-4 for padding, you have a P property\n\n477\n00:36:56,980 --> 00:37:01,200\non your component and you pass 4, and then it creates that the same\n\n478\n00:37:01,940 --> 00:37:06,540\npadding value. But it's a React prop. So when you shift to\n\n479\n00:37:07,160 --> 00:37:16,660\nthe marketing sites that runs on WordPress and doesn't have a React front end, the team is like, ah, how do I recreate this? And With Tailwind, because it's just\n\n480\n00:37:17,320 --> 00:37:19,900\nCSS again, at the end of the day,\n\n481\n00:37:20,280 --> 00:37:22,560\nyou can share much easier\n\n482\n00:37:23,080 --> 00:37:30,640\nUI elements between a React front end and a legacy Java app that has like a templating language that is not JavaScript.\n\n483\n00:37:31,840 --> 00:37:33,360\nSo that's super cool. Yeah.\n\n484\n00:37:34,200 --> 00:37:40,140\nOn the bandwidth aspect of it, a lot of companies have a legacy blog in WordPress or something like this.\n\n485\n00:37:41,400 --> 00:37:45,540\nYeah, yeah, for sure. I think we don't talk about it a lot because\n\n486\n00:37:45,920 --> 00:37:46,940\nmost of us\n\n487\n00:37:47,360 --> 00:37:49,700\nare using a framework, a component-based\n\n488\n00:37:50,420 --> 00:37:54,720\nframework where this isn't a problem, but 100%. Like when I was at PayPal,\n\n489\n00:37:55,920 --> 00:37:57,640\nI was working with the design\n\n490\n00:37:58,000 --> 00:38:01,220\nteam to create a design system for PayPal. Surprisingly,\n\n491\n00:38:01,560 --> 00:38:04,740\nthey'd gone that long without having a team dedicated to that.\n\n492\n00:38:06,780 --> 00:38:09,560\nAnd so, like, I really was pushing for\n\n493\n00:38:10,240 --> 00:38:13,540\nGlamorous, which was the library that I created at PayPal,\n\n494\n00:38:14,040 --> 00:38:16,540\nfor doing CSS and JS with React.\n\n495\n00:38:19,020 --> 00:38:19,520\nBut\n\n496\n00:38:20,020 --> 00:38:29,880\nwe talked about it a lot and they were like, well, we still got some old apps and we've got apps that are never gonna move over to React. We've got some people who are starting with Angular 2 and all of this stuff.\n\n497\n00:38:30,300 --> 00:38:39,000\nAnd finally, I was convinced, I was like, yeah, you're right, even though most apps are moving over to React, we can't really rely on a React-specific\n\n498\n00:38:39,300 --> 00:38:39,800\nthing.\n\n499\n00:38:40,320 --> 00:38:47,580\nAnd so we opted for a design token system that generated CSS files, and then I would just use those in my components\n\n500\n00:38:48,240 --> 00:38:49,460\nthat I built\n\n501\n00:38:49,940 --> 00:38:53,180\nas part of our implementation of the design system for React.\n\n502\n00:38:53,740 --> 00:38:54,240\nAnd\n\n503\n00:38:55,080 --> 00:39:02,140\nI still feel really strongly that that was the right choice even though it may have been a little bit more tricky for me to implement\n\n504\n00:39:03,080 --> 00:39:06,960\ninstead of using Glamorous, which at the time was what I wanted to use. Yeah.\n\n505\n00:39:07,360 --> 00:39:08,040\nIt's certainly,\n\n506\n00:39:08,560 --> 00:39:21,660\nyeah, in hindsight, that was absolutely the right choice. So standards, they're good. On that, on that topic, I like how Redix UI, it is a React library, but it uses data attributes for most of the styling hooks.\n\n507\n00:39:22,800 --> 00:39:31,220\nAnd I realized like, because I was like, oh, use Tailwind so you can carry it over to WordPress sites. But the minute you have a component where you start having props that you've,\n\n508\n00:39:31,620 --> 00:39:35,820\neven if the styles are still CSS, you still have the behavior in props.\n\n509\n00:39:36,280 --> 00:39:45,600\nBut using data attributes instead of just a randomly named prop means that it's still valid HTML and you can, you can use that to, to\n\n510\n00:39:46,220 --> 00:39:49,260\nwork outside of React. So it's nice to see,\n\n511\n00:39:50,500 --> 00:39:54,520\neven if Radix is a React library, it kind of tries to be\n\n512\n00:39:55,080 --> 00:39:55,580\nas\n\n513\n00:39:56,140 --> 00:39:57,780\nwork everywhere as possible\n\n514\n00:39:58,180 --> 00:40:00,080\nby using stuff like data attributes.\n\n515\n00:40:01,300 --> 00:40:03,740\nYeah, yeah. I think that's actually\n\n516\n00:40:04,200 --> 00:40:04,960\nan excellent\n\n517\n00:40:05,340 --> 00:40:06,600\napproach too. So,\n\n518\n00:40:07,080 --> 00:40:18,380\nwell, Simon, this has been awesome. Thank you so much for giving me some of your time today. What's the best way for people to get in touch with you? I am spending too much time on Twitter. I am at Simon Swiss,\n\n519\n00:40:18,900 --> 00:40:20,520\nSimon Swiss in 1 word.\n\n520\n00:40:20,940 --> 00:40:24,260\nAnd if you want to check out the Pro Tailwind course, it's protailwind.com.\n\n521\n00:40:25,840 --> 00:40:31,120\nIf you find me, Simon Swiss, you'll probably find an entry point to, if you go to my website, there's a link.\n\n522\n00:40:31,720 --> 00:40:39,440\nI try to show the way to people. I, I'm sure I can do a better job, but, you, if you find me, you will find it eventually\n\n523\n00:40:40,080 --> 00:40:41,600\nand yeah, reach out to me.\n\n524\n00:40:42,700 --> 00:40:44,280\nI always enjoy conversations,\n\n525\n00:40:45,140 --> 00:40:47,880\nwith anyone. Questions about tailwind. I'm, I'm.\n\n526\n00:40:48,400 --> 00:40:57,460\nObviously passionate, has been passionate about Tailwind since the beginning, literally even before Tailwind was a thing, I was into the utility CSS\n\n527\n00:40:57,980 --> 00:41:04,020\ntrain and I always love talking about it. So yeah, hit me up. Any questions, I'm happy to try answer them.\n\n528\n00:41:05,340 --> 00:41:05,840\nAwesome.\n\n529\n00:41:06,340 --> 00:41:12,280\nWell, thanks again, Simon. And yeah, have a wonderful day. And I'm going to have a good evening.\n\n530\n00:41:13,820 --> 00:41:16,960\nAnd yeah, we'll see you all later bye bye thank you",
            "text": "[00:00:00] Kent:\nHey everybody, this is my friend Simon Vrishliotis. Oh man, I practiced it. I knew I was gonna get it. And then it's Simon Vrishliotis. Vrishliotis. Vrishliotis, yeah. Oh man, I'm... Okay, Simon Vrishliotis. And so Simon and I, I actually, I'm \n\n[00:00:20] trying to remember, I don't think we've ever met in person before. \n\n[00:00:23] Simon:\nWe haven't. \n\n[00:00:24] Kent:\nYeah, that's a shame. We gotta like fix that at some point. But yeah, Simon, I think I caught up with you or got to know you initially through Tailwind, through the stuff that you're doing there, when you were actually at Tailwind and creating videos there, and I admired your skill at \n\n[00:00:45] creating those videos. And I'm sure there are many people still learning Tailwind through the videos that you produced while you were there. But you're also working on something else. So I'm gonna stop talking and let you give us a little intro to yourself. \n\n[00:00:59] Simon:\nHey, Yeah, first of all, thanks for having me. My pleasure to be here. Yeah, we had a nice chat a few times through Tailwind and Remix and different circles. As you mentioned, I've worked as a dev role for the Tailwind Labs team for a while. I'm currently working at a company called Thinkmill, which is a consultancy \n\n[00:01:19] based in Sydney, Australia. We're pretty globally renowned for React work and design systems and slowly moving into Tailwind stuff. I think I have a little Trojan horse going in there. But Yeah, on the side of this, I am creating my own course called Pro Tailwind, which is like an advanced level \n\n[00:01:39] course on Tailwind CSS. So it's kind of skips the basics of trying to convince people to like Tailwind and get used to this radically different mindset of like having presentational classes in your HTML. It assumes that you know the basics and then it goes into topics like multi-theme strategy or multi-variant \n\n[00:02:00] components and even reusable components across multiple projects through monorepos and NPM packages and stuff like that. \n\n[00:02:08] Kent:\nYeah, very cool. So the more advanced stuff, because the beginner stuff is like the docs are fine and your videos when you were there are still there. So yeah, you're filling a really important need there with more advanced \n\n[00:02:23] Simon:\nuse cases. Yeah, that's what I've identified is there's a lot of resources for beginner level and intermediate. And then there's a cliff drop where when you go at scale or try to reuse stuff or create components and then consume them in a different project or repo, there's lots of questions that I couldn't find answers for, so I \n\n[00:02:43] thought I may as well create a course and content on that. \n\n[00:02:48] Kent:\nVery cool, yeah, yeah, I love it. Well, great, so Tailwind is really the thing that you're most excited about, and I'm also excited about. And so, It's actually in the first workshop of Epic Web, we get into Tailwind, in the first exercise even. We get into \n\n[00:03:08] doing a little bit of Tailwind config. We don't go too deep, so if anybody wants to go really deep on Tailwind, then I will defer you over to Simon, who's got great material for that. But yeah, we just get into how to get Tailwind initially set up and then get it onto the page \n\n[00:03:28] in our Remix app, just using link tags. And it works out pretty well. So 1 of the things that I want to get out of this conversation with you, Simon, for the people watching, is why should we use Tailwind? Because I'm telling \n\n[00:03:48] everybody, okay, we're gonna use Tailwind. And I have really good reasons for why I like using Tailwind, but I wanna hear from you, Simon. What are your best reasons for why we should use Tailwind? And maybe target folks who are unsure, like they don't necessarily have that initial, like I hate it or \n\n[00:04:08] I love it feeling. \n\n[00:04:10] Simon:\nYeah, that's a very open question like we took all day about. There's actually a lot of reasons why you might be drawn towards something like Tailwind. I think, to me, if I had to summarize in 1 or 2 little main points, is it makes everything predictable and \n\n[00:04:30] easy to reason about. I'll explain why in a minute. And it supercharges your productivity in terms of speed, confidence, ability to move fast, to prototype, but also have production-ready code while you prototype. And there's a few factors that play to that, but I think the main ones \n\n[00:04:50] is, first of all, you never stop to name things. In a traditional workflow, you take this for granted, but you write an HTML element and you're like, let's style it, How should I call it? This is a card wrapper, I guess. So you go into CSS file and create your card wrapper class and apply styles there. And you always \n\n[00:05:11] switch between this naming things and organizing your styles and going back to the markup. And with Tailwind, you pretty much directly apply styles on the element inline, which is what creates this never ending riots on the internet because For the longest of time, \n\n[00:05:31] you had this context that HTML is the document and shouldn't have any presentational concerns inside it. This is the concern of CSS, right? You have document is HTML And then the CSS is styling and JavaScript is behavior and you have separation of concerns that way. And \n\n[00:05:52] I guess React paved the way with JSX to lead this mind shift of you can have separation of concerns at the component level. So a button can have some markup and styles and behavior and then a dropdown can have that as well. So Tailwind kind of goes in the same direction \n\n[00:06:13] than JSX where In JSX you write what looks like HTML inside your JavaScript and with Tailwind you basically write what looks like styles in your markup, if that makes sense. \n\n[00:06:27] Kent:\nYeah. You know, so I'll tell my, I'll try to be brief, but I'll tell my experience and story with CSS. So early on, when I was still in school, I was working on this big project. And I actually discovered pretty quickly that having \n\n[00:06:48] atomic CSS classes was really useful. So I put together a stylus, a set of stylus \n\n[00:06:57] Simon:\nstyle sheets \n\n[00:06:58] Kent:\nthat generated classes for like the padding and margin and font size and all like basically P1, P2, all of that. And very early on. So when I saw Tailwind, I'm like, oh, this looks kind of familiar. But like that never really ended up going anywhere for \n\n[00:07:18] me. I ended up joining a company where we were using BEM, a block element modifier, and I'm pretty happy about that. I had a coworker who made their own version of something like that, and so we're following these conventions, And I learned very quickly that those kinds of conventions fall over very fast. Not because a convention is wrong, but because people \n\n[00:07:38] don't understand the convention properly or don't apply it properly. So anyway, To make a long story short, I discovered CSS modules and thought that was pretty cool. But when I was working at PayPal, I jumped onto a project \n\n[00:07:59] that was using LESS and as a pre-processor. I'd used LESS, and Stylus, and SAS, and all of those. They're all fine. But what I discovered at PayPal was we had a page, and I checked this recently, this is still the case. There's a page that has hundreds of thousands of kilobytes of CSS. And \n\n[00:08:19] no matter what you do, you click around all the buttons, everything, but there's this tool in the DevTools that will allow you to check the coverage for how much of your CSS is being applied. So I would click all the buttons and everything and then look at that tool and I could not get it to any less than 90% \n\n[00:08:39] of unused CSS. So we had 90% of our CSS was not necessary on that page of hundreds of kilobytes. And that was just obviously a disaster. And the reason is you just never know when you can delete it. And so it's awful. And so I jumped on the CSS and JS \n\n[00:08:59] train Because with CSS and JS, if you delete the component, then the styles are gone too. Yep, and it was great. But then there are all these problems with CSS and JS. From a performance standpoint, server rendering standpoint, authorship, authorship's pretty good. But yeah, those other problems \n\n[00:09:19] are pretty significant. So, long story short, when I finally decided to give Tailwind a try, I felt like I was jumping back into all of the benefits of CSS and JS, like not having to name things and not worrying about sending too many styles to the browser. All of those \n\n[00:09:40] benefits without the cost of CSS and JS. So that's my story and my reasoning for why I love Tailwind so much. So I think there could be, or there are certainly people listening who don't have any, \n\n[00:10:00] or have never like looked into how Tailwind actually works. So I'd love to ask you about that as well. Can you give people an idea of how does Tailwind work? \n\n[00:10:11] Simon:\nTotally. Just before I jump on that, because you mentioned BEM and all your journey, Something you might want to link in show notes or stuff like this is I had a conference talk where I presented my journey from discovering this, I was Tachyon's back then, but the approach is very similar. Discovering this utility first approach \n\n[00:10:31] and being completely revolted and angry at the idea that you could do something like this. And then going through the process of realizing that the BEM methodology I wrote and I was really proud of, as you said, started falling apart because of deadlines and quick change requests. And I think 1 thing that's key here is with BEM, \n\n[00:10:51] you always have to have the whole project in your brain and make decisions that are like big brain decisions that take everything into account. And when there's a big rush and the deadline for next morning, you take a shortcut. And with BEM, once you start taking shortcuts, that's when the wheels falls off. And yeah, so instead of me trying \n\n[00:11:11] to summarize and condense the answer in like a 3 minute thing, I think watching that conference talk or just skimming through is probably a good idea. I know a lot of people said that this was the thing and the talk that kind of made them revisit their preconception and then give it a try. \n\n[00:11:30] Kent:\nCool, cool. Yeah, I just looked for it. It's the 1 at .allcoms, is that right? Yeah. Great. The title is, A Real-Life Journey Into the Opinionated World of Utility-First CSS. \n\n[00:11:41] Simon:\nYeah. \n\n[00:11:42] Kent:\nThat's great. \n\n[00:11:42] Simon:\nAnd it's in 2018, so it's like 5 years ago. And it's still, to me, I still feel like it's very relevant today and, yeah, people go through this mindset change. All right. So, to go to your next question, how Tailwind CSS works, I'll \n\n[00:12:02] talk about how it works today, because it has gone through different motions. But the latest version, since Tailwind CSS version 3, is, has a just-in-time compiler, which really changes a lot of things for the better. And essentially it completely addresses what you just mentioned at PayPal of \n\n[00:12:22] 90% of unused styles. Tailwind will only generate the styles that you use in your templates. So by default, Tailwind CSS is nothing. It just has a little reset for margins and padding and font sizes. It has a pretty aggressive reset as a starting point. But \n\n[00:12:43] then it's not going to output any CSS until you use a class like p-4 for padding level 4. Excuse me. And so when you write p-4, the Just-In-Time engine detects that string and it's like, oh, this person is using that, so I may as well generate a class P-4. And \n\n[00:13:03] so it used to be different. It used to have a series of tokens for spacing and colors and font sizes and font weights and all the different styling scales you can think of. And it would generate all of the permutation possible, like what you were explaining, like P1, P2, P3, P4. And then you would use \n\n[00:13:23] what you need. And at the end, you would run something through a process called Purge CSS, which would try to figure out what you haven't used, probably the same tool that you were scanning PayPal's front end with. And then it would be like, oh, okay, you're not using 90% of this, so let me strip out what's not used. And that's great \n\n[00:13:43] for production, but as a developer, you're running the full CSS file with all the permutation while you develop. And as Tailwind got bigger and got more variants and more CSS features applied, involved, the file became a problem even at dev time. Like you'd have 357 megabytes \n\n[00:14:03] of CSS. And at some point the browser starts choking a little bit. And even if it doesn't go to production, it became a problem. And the shift to just in time engine was completely transcendent because now you can enable all the colors, all the scales, all of the everything, all the variants, and nothing gets generated. \n\n[00:14:23] So it's super fast even when you develop. And as you build your UI, you can see the outputs getting populated with the classes that are used. So the way Tailwind works in the really short, it's a CSS framework generator. You give it an input, you \n\n[00:14:43] give it a config file, which is the theme with the scales and the colors and tokens. There's a default value, but you can customize that. And based on this config, whatever you use gets turned into a CSS output that is a normal CSS style sheets that you, like you said, bring with the link tag, there is no runtime. \n\n[00:15:04] It's just normal CSS, which makes it even funnier when every time you tweet something about Tailwind, people are like, why don't you just use CSS? And Tailwind is just CSS. There, There's a step that generates it, but at the end of the day, it's a style sheet that you bring in your project in the document heads, and there \n\n[00:15:24] you go. \n\n[00:15:26] Kent:\nYeah, you know, JSX had the same kind of pushback when it was introduced too. Like people would say, just use HTML. Yeah, well, at this point, React is pretty much 1, for better or worse. And I think Tailwind is on that way. I personally just totally love it. And I remember \n\n[00:15:46] when the just-in-time compiler got added in that really made things just excellent. And it wasn't just the, allowing for generating the style sheet at a run time, or yeah, I guess, what do we call that? It's not even build time, like dev time \n\n[00:16:06] as well. Just in time, yeah. But yeah, just in time, yeah. But it's also the JIT compiler added some new features of things that you can do with Tailwind. Yes. Do you want to talk about those at all? \n\n[00:16:19] Simon:\nYeah. The first 1 is related to the file size where you had to first determine, I want hover styles and active styles, but I don't really think I'm gonna need something that has active and then focus. So you had to opt in certain \n\n[00:16:40] states or states combinations. And then with the Just-In-Time engine, all the variants under the sun became available and also stackable. So you could do something that you might never need, but you could do something nth child 7 on focus on a hover at the small breakpoint. You could chain all these variants \n\n[00:17:00] and it would work out of the box with any permutation you can think of. So that's just more power to the user. But another thing that the Just-In-Time engine brought is the concept of arbitrary things, arbitrary values, but also arbitrary properties or variance. And the way to think about it \n\n[00:17:20] is as an escape hatch when you want to use something that is not part of the default theme that you have. It's using a bracket syntax. So for example, padding, you have p-4 or p-8. And then if you wanted 17 pixels or 37.2%, \n\n[00:17:40] instead of going in the spacing scale in the config and adding that 1 of value, because you might not use it anywhere else. You can go p dash braces, brackets, square brackets, and then put any CSS value here. So 17 pixels or 2 rems or 33%. And this is on the fly going to \n\n[00:18:01] generate the appropriate CSS output. So it's almost a way to break out of the tokens and have access to any specific 1 of values. So that's, that's really useful typically for marketing sites where you have decorative elements, where you're going to absolute position something 647 pixels from the top, you know, \n\n[00:18:21] like a blob that kind of spins around and typically you'd have to go in the config and add like a random value in a scale And now it's part of your design system, but it's clearly something you're never going to use anywhere else. \n\n[00:18:35] Kent:\nYeah. \n\n[00:18:35] Simon:\nSo I like this intentionally breaking out of the system with the square brackets. It's almost like a flag, like, Hey, I'm doing something custom here. And this was so useful that then it became a thing that you can also have arbitrary properties. And I've made a tongue in cheek video on that, that's Tailwind CSS supports \n\n[00:18:56] every single CSS property under the sun, even the ones that don't exist yet. Because you can use the square bracket and pass the key and the value in there. And you can do something like clip path, polygon, whatever, or the P3 color, like any CSS that you can think of can \n\n[00:19:16] be created on the fly inside a square bracket like this. So instead of just having P dash square bracket and the value, you have square brackets and then you have the key column value and you can pass any CSS. So this lets you, It doesn't mean you have to do it this way. You can still write normal CSS in a CSS file, but it lets you \n\n[00:19:36] if you're in your jam, in your inline styles looking thing classes, you can pass any CSS that is not supported by Tailwind directly inside your class name attributes and it will generate the correct CSS output with vendor prefixes and all this stuff, which is really cool. \n\n[00:19:56] Kent:\nYeah, that is very rad. I definitely use that And I agree that that's a good use case for marketing sites where the styles are typically just kind of funny. Yeah, they're trying to catch the attention of people. So they wanna do something different. We're gonna turn this sideways and \n\n[00:20:16] have it scroll like the marquee thing that we did with Rocket Rental a while ago. So yeah, that is super cool. Now, a lot of people are gonna look at those class names and gonna be like, this is awful. I hate this so much. I've definitely gotten this in my replies as well. So \n\n[00:20:36] what do you say to that? Because it's certainly like, there is a legit argument there that those class names can get really long. So what's your take on that? \n\n[00:20:48] Simon:\nI agree that it doesn't make your HTML pretty. It does add a lot of noise. But 1 thing I'm trying to convey is to a newcomer to Tailwind or someone who hasn't tried it, what looks like noise and clutter and like, oh my God, I can't even understand anything, is actually \n\n[00:21:08] really rapidly turning into information and context about how the UI looks. And when I look at some tailwind HTML, I can see my brain sees the UI. I can almost like compile it, like I can pass the HTML and the page builds in my head because I see the border spacing, padding, flex, all that stuff. \n\n[00:21:28] Whereas if I jump into a HTML that says card wrapper and then card contents, I have 0 idea what it looks like. And that plays into this collocation of concerns and the laser focus on you building a piece of UI and you can see the markup, the styling, \n\n[00:21:49] the behavior if you're in React. And you have all the pieces to assemble what it looks like while looking at the code. So it turns really quickly from noise to useful information. And if you really hate it, I have not done that myself, but there are tools that collapse the class name attributes to hide it. If you \n\n[00:22:09] just want to focus on the area attributes and just the semantics, and you can hide them. But honestly, I prefer having or it's almost like the verbose modes in the terminal where it tells you everything you need to know. When I look at Tailwind HTML, I'm like, I'm happy that I can \n\n[00:22:29] see what it looks like, because I really quickly get the context of what it looks like. \n\n[00:22:35] Kent:\nYeah. Yeah. That makes a lot of sense. I agree. It's something that, that definitely grows on you, over time. So, you know, a lot of people threw up in their mouth when they saw JSX and now they're, coding JSX and making tons of money doing it and it's fine. I mean for me too, when I first saw JSX I \n\n[00:22:55] was like, ah, I don't think so. Didn't we learn that this is not the way to do it? But No, I love it now. And that happened to me with Tailwind as well. I didn't have such a negative reaction to Tailwind, actually. I was pretty ambivalent until I actually tried it on a project and I was like, oh, now I love it. So It's \n\n[00:23:15] definitely something that you get used \n\n[00:23:16] Simon:\nto you probably went through that phase with react and JSX and then you had that little Little bailing you had say hey, I've beat I remember my My thoughts initially on JSX and turns out that it's not such a bad idea So maybe you you had that lens when approaching it because yeah, the number 1 thing that make \n\n[00:23:36] people feel literally angry and wants to rant on Twitter about it is like it goes against everything that you've been told. CSS, Zen Garden and this principle of like, it's like someone, a junior came in the industry and had none, they didn't want to do any homework on the past research and foundation and \n\n[00:23:57] just build that thing that goes against it. Where it's not the case, like the creators of Tailwind and Tachyon before that were all fans of CSS Zen Garden. And if you look at their previous code, Adam Watson and Adam Morse from Tailwind and Tachyon, they have blog posts about why you should use BEM and always make sure your \n\n[00:24:17] HTML is free of design concerns. They also came from that, like, this is a terrible idea to, oh, wait a minute, it makes me productive and it's predictable. \n\n[00:24:28] Kent:\nYeah, yeah. You know, I think that part of what bought me into it so much was my experience with CSS and JS. And the developer experience there is very good. Being able to not have to name things. Like, so, Styled components was like the big thing in CSS and JS. That's where things kind of exploded. \n\n[00:24:49] But I never liked styled components because you have to name things. \n\n[00:24:51] Simon:\nAnd then the CSS prop or the style. Yeah, yeah. You can pass styles directly without naming them. Emotion. \n\n[00:24:59] Kent:\nYep, Exactly. And so I saw Tailwind and I saw the CSS prop. That's really what it amounted to. And with the right editor extensions, then you get the same sort of auto-complete and everything. So yeah, I'm a super fan. \n\n[00:25:17] Simon:\nSo that's the other thing. Ooh, I forgot what I was gonna say. It'll come back, I'm sure, if it's important. \n\n[00:25:26] Kent:\nYeah. Were you gonna comment on editor extensions and stuff like that? Do you have any extensions that you recommend? So like, I think I've just got Headwind. Is that a thing? I think I should look. \n\n[00:25:42] Simon:\nSo Headwind is a third party thing, but It's pretty useful. Fun fact at my day job at Thinkmill, I just joined a new project that uses Tailwind. And this morning I did 2 PRs and it's to bring the tooling that kind of helps you be productive. So The 1 thing that it was already \n\n[00:26:02] in this project, but the 1 thing everyone should use if they use VS Code is the Tailwind CSS IntelliSense extension, which is what gives you all the auto-completes. If you type text dash, you have all the colors with the little swatch suggestions. And if you hover any Tailwind class, it tells you what the CSS output is. As \n\n[00:26:22] a teacher myself, it's my favorite feature about Tailwind tooling is when I hover over any class, and I remember when we did the live stream, I was showing you how it composes CSS variable with opacity and stuff like that. It lets you understand what Tailwind does. And another tool that's really useful, if you use Prettier, \n\n[00:26:42] is the Prettier plugin for Tailwind. And this one's role is to source the classes in a logical order. So you have typically the most impactful layout classes like flex or grid or margin, stuff that affects where the thing goes. And then stuff like text color or font \n\n[00:27:02] weight or decorative stuff comes later. And funnily enough, it represents the way in which the CSS output is generated by Tailwind in the source order. So there's this sort of a logical approach there. \n\n[00:27:19] Kent:\nAnd \n\n[00:27:19] Simon:\nwhat it lets you do is just like Prettier, you don't care about inattention and you hit save and it jump into place when you save. Same with Tailwind, you put a responsive class in the middle and then when you save, it's gonna plop it at the end, and it organizes everyone on the team with the same class sorting mechanism. So if \n\n[00:27:39] you work with multiple people, I think that's an essential thing. \n\n[00:27:45] Kent:\nYeah. Yeah, I just checked and we've got both of those. So the, the workshops have a VS code folder with the settings. So it has recommended or extensions. \n\n[00:27:57] Simon:\nThat's the PR I did this morning. VS code, that's VS code Settings.json and recommendations.json. \n\n[00:28:04] Kent:\nYeah, yeah, yeah. And then we also have the prettier plugin too. It is fabulous, definitely. And it's actually really useful because if you have a typo in 1 of the class names and it'll send it over to the front. You're like, whoa, why did it go over there? \n\n[00:28:19] Simon:\nYeah. So 1 more thing that plugin does is if it's not a Tailwind class, it puts it at the start because you can use other CSS classes with Tailwind. And the thinking, the reasoning here is like, oh, it's probably useful if you have something separate to put it at the start to kind of make it clear \n\n[00:28:40] that it's outside of Tailwind. So like you said, if you make a typo, it becomes a non-Tailwind class, and it moves at the front. And it's, there's no type safety because it's just strings, but in a way this class sorting gives you a hint of safety because it makes you quickly realize, oh, hang on, it jumped at the front. Something must be, \n\n[00:29:00] must be off. \n\n[00:29:02] Kent:\nYeah, that, that I think is probably the, my biggest concern with TypeScript is the lack of type safety. Or with, not with TypeScript, but with Tailwind is the lack of type safety. Do you know of any projects or anything that will, or anybody that's working on bringing, not necessarily type safety, but \n\n[00:29:22] just some sort of verification, automated static analysis to tell me whether I got classes that are not going to be applied. \n\n[00:29:31] Simon:\nYeah, that is a key problem. And I think it's just like the Just-In-Time engine before it came was a topic that kept coming over and over and over until the team was like, we have to do something. Like this is the next big bottleneck. I feel like this is the 1 now that keeps coming, like how do I make sure if I change \n\n[00:29:51] a theme value and this class doesn't exist anymore, nothing tells me that it doesn't exist, except maybe putting it at the front. There's tools like Class Variants Authority, CVA by Joe Bell, or Tailwind Variants, I think he's some sort of Vercel team working on this project. \n\n[00:30:12] And basically, It's typically used when you have multivariant components. So you have like a primary look and a secondary look and then a large, medium, small sizes. And you want to have strings of classes and then combine them and merge them intelligently. So it kind of adds. So you define \n\n[00:30:33] an object with all the different permutation and combination and then it gives you a bit more type safety, but it's still working with strings. So there's a limitation to what you can do. And otherwise outside, I haven't tried it myself, but I had a look and it looks really exciting. It's not Tailwind, but there's a new CSS library \n\n[00:30:53] called Panda CSS, which is by the creator of Chakra UI, which is also quite popular. And it's very, very, very inspired and similar to Tailwind, but it has end-to-end type safety because it's built in TypeScript rather than strings of classes. Yeah. But all of \n\n[00:31:13] these tools, I just want to say 1 more thing, all of these tools, you lose that superpower of like the short class name, shorthands for CSS properties. Ironically, people say, why don't you just write CSS, learn the CSS key value pair, but there's something really nice to writing this really shorthand classes and instead of going \n\n[00:31:33] padding column 3 px. And so most of, I think Panda is that way you, you, it's closer to the CSS prop in emotion where you have a CSS in JavaScript object, where you still have to write your key value pairs to, when you work with Tailwind long enough, it almost feels like a chore. And like, \n\n[00:31:53] I know the key value pair in my head. I just want to go P-4 instead of padding. Oh, yeah. \n\n[00:31:59] Kent:\nYeah. But with Tailwind itself, I do \n\n[00:32:02] Simon:\nnot know if there is a, unless the whole thing is rewritten differently. I don't know how you can have these string classes to be completely type safe and yeah. \n\n[00:32:15] Kent:\nYeah, Yeah, I wonder if, I have no idea, somebody will figure something out. It seems like an important enough problem that it'll somehow work out. \n\n[00:32:26] Simon:\nA tool that is adjacently related is called Tailwind Merge. Tailwind Merge is doing 1 thing, it's when you try to merge multiple class strings together, quite often you end up with 2 conflicting classes without knowing. So you might have a font-weight bold \n\n[00:32:46] and font-weight extra bold in the same really long string. And it comes from 2 different components that have been merged, the class attributes have been merged together. And on the screen, you will see 1 of these values. And it's, if you understand CSS and the cascade and the source order, it's the 1 that has been defined last in the order that \n\n[00:33:06] wins because they have the same level of specificity. And so sometimes it's what you expect, so you don't notice, and sometimes it's not. And then you're like, oh, there seems to be a bug, but it's really tricky to understand where the duplication has happened. And Tailwind Merge essentially looks at competing Tailwind \n\n[00:33:27] classes and then always makes the last 1 win, which is many people think that's how CSS works or they wish that how it would work, that's the last thing, like if you have text blue and text red, if you have text red last, you wish the text would be red always, but it's \n\n[00:33:47] not the HTML order that matters, it's the CSS source order. And sometimes you might have text read last, but it's first in the CSS, so it loses. So that's really confusing. So Tailwind Merge basically said, When you merge stuff, the 1 you put last is the 1 that wins all the time. So that's a really, again, not type safety, but it \n\n[00:34:07] brings predictability and confidence in doing advanced stuff with the class combinations. \n\n[00:34:16] Kent:\nYes, so that actually was the subject of a tweet recently. So if you know Parcel or React ARIA, React Spectrum, this is Devin, yeah, Devin Govitt, I think I'm pronouncing his last name right. \n\n[00:34:36] He just, I just saw this a couple minutes ago. Just tweeted that it would be really nice if there was a flag that you could set for your website to say, make the specificity order be the order of the class names instead of the order of the style sheet. And that's like totally a thing that could be a thing. \n\n[00:34:57] I could see that being like something you can opt into. And then we wouldn't need Tailwind merge, which would just be fabulous. \n\n[00:35:04] Simon:\nYeah. It's, it's very sneaky concepts to explain. And a lot of people don't like, I think West bus or someone with a huge following did a test, like where there was text blue and then it's really funny to read. And he like, he was like, what's the final color? And 50% of people had it wrong. Cause that was, \n\n[00:35:25] that was a play on the HTML order of classes and the source order in CSS. It's very confusing. And yeah, if you were able to opt in, like say, hey, I know what I'm doing and I want to specify, just like in JavaScript, when you, if you have an object and \n\n[00:35:45] you redefine a property, the last time you redefine always wins. It's kind of what people expect with the stars as well. But it's not. \n\n[00:35:53] Kent:\nYeah. Yeah. Yeah, well, maybe that is a future that we could have. It's just like a meta tag on the page or something like that. Like that would be enough, I think. But you know, the standards are harder than, or things can sometimes be more complex than you might expect. Yeah. So, well, Simon, I really \n\n[00:36:13] enjoyed our chat. Is there anything else that we didn't talk about that you'd really like to touch on. \n\n[00:36:17] Simon:\nYeah, in the why would you use Tailwind's bag, bucket, if you just work with React, it doesn't really matter to you, but there's a very undervalued aspect of Tailwind because it's just CSS, it works everywhere. It works with Ruby \n\n[00:36:38] templates, PHP, WordPress, all sites, plain HTML. And I've seen team go really deep with a specific, React flavored framework, like Chakra UI, which gives you props. So instead of applying a P-4 for padding, you have a P property on your component \n\n[00:36:58] and you pass 4, and then it creates that the same padding value. But it's a React prop. So when you shift to the marketing sites that runs on WordPress and doesn't have a React front end, the team is like, ah, how do I recreate this? And With Tailwind, because it's just CSS again, \n\n[00:37:18] at the end of the day, you can share much easier UI elements between a React front end and a legacy Java app that has like a templating language that is not JavaScript. So that's super cool. Yeah. \n\n[00:37:34] Kent:\nOn the bandwidth \n\n[00:37:35] Simon:\naspect of it, a lot of companies have a legacy blog in WordPress or something like this. \n\n[00:37:41] Kent:\nYeah, yeah, for sure. I think we don't talk about it a lot because most of us are using a framework, a component-based framework where this isn't a problem, but 100%. Like when I was at PayPal, I was working with the design team to create a design system for PayPal. Surprisingly, \n\n[00:38:01] they'd gone that long without having a team dedicated to that. And so, like, I really was pushing for Glamorous, which was the library that I created at PayPal, for doing CSS and JS with React. But we talked about it a lot and \n\n[00:38:21] they were like, well, we still got some old apps and we've got apps that are never gonna move over to React. We've got some people who are starting with Angular 2 and all of this stuff. And finally, I was convinced, I was like, yeah, you're right, even though most apps are moving over to React, we can't really rely on a React-specific thing. And so we opted \n\n[00:38:41] for a design token system that generated CSS files, and then I would just use those in my components that I built as part of our implementation of the design system for React. And I still feel really strongly that that was the right choice even though it may have been a little bit more tricky for me to implement \n\n[00:39:03] instead of using Glamorous, which at the time was what I wanted to use. Yeah. It's certainly, yeah, in hindsight, that was absolutely the right choice. So standards, they're good. \n\n[00:39:13] Simon:\nOn that, on that topic, I like how Redix UI, it is a React library, but it uses data attributes for most of the styling hooks. And I realized like, because I was like, oh, use Tailwind so you can carry it over to WordPress sites. But the minute you have a component where you start having props that you've, even if the styles are still CSS, \n\n[00:39:33] you still have the behavior in props. But using data attributes instead of just a randomly named prop means that it's still valid HTML and you can, you can use that to, to work outside of React. So it's nice to see, even if Radix is a React library, it kind of tries \n\n[00:39:53] to be as work everywhere as possible by using stuff like data attributes. \n\n[00:40:01] Kent:\nYeah, yeah. I think that's actually an excellent approach too. So, well, Simon, this has been awesome. Thank you so much for giving me some of your time today. What's the best way for people to get in touch with you? \n\n[00:40:14] Simon:\nI am spending too much time on Twitter. I am at Simon Swiss, Simon Swiss in 1 word. And if you want to check out the Pro Tailwind course, it's protailwind.com. If you find me, Simon Swiss, you'll probably find an entry point to, if you go to my website, there's a link. I try to show the way to people. I, \n\n[00:40:34] I'm sure I can do a better job, but, you, if you find me, you will find it eventually and yeah, reach out to me. I always enjoy conversations, with anyone. Questions about tailwind. I'm, I'm. Obviously passionate, has been passionate about Tailwind since the beginning, literally even before Tailwind was \n\n[00:40:54] a thing, I was into the utility CSS train and I always love talking about it. So yeah, hit me up. Any questions, I'm happy to try answer them. \n\n[00:41:05] Kent:\nAwesome. Well, thanks again, Simon. And yeah, have a wonderful day. And I'm going to have a good evening. And yeah, we'll see you all later bye \n\n[00:41:16] Simon:\nbye thank you"
          },
          "_createdAt": "2023-10-18T19:13:24Z",
          "_updatedAt": "2024-03-19T20:25:22Z",
          "state": "ready"
        },
        "_type": "interview",
        "_updatedAt": "2023-10-18T19:16:22Z",
        "body": "Simon Vrachliotis, a Tailwind expert currently working at Thinkmill, a Sydney-based consultancy specializing in React and design systems, offers an in-depth look into the nuances of Tailwind CSS. Simon is also in the process of developing an advanced course named Pro Tailwind.\n\nThe conversation kicks off with Simon advocating for the adoption of Tailwind, highlighting its predictability, ease of use, and the productivity gains it offers. He points out how Tailwind's approach to inline styling is a departure from traditional methods, aligning more closely with the component-level separation of concerns found in React's JSX.\n\nIn terms of tooling, Simon recommends VS Code extensions such as Headwind and Tailwind CSS IntelliSense to enhance the development experience.\n\nThe conversation shifts toward the subject of type safety in Tailwind. Tools like Class Variants Authority and Tailwind Variants are discussed as solutions that aim to improve type safety within the framework.\n\nWrapping up the discussion, Simon underscores Tailwind's adaptability, stating it is not limited to projects built with React. The framework's flexibility makes it a suitable choice for design systems catering to various technologies.\n\n## Resources\n\n- [Simon Vrachliotis on Twitter](https://twitter.com/simonswiss)\n- [Pro Tailwind](https://www.protailwind.com/)",
        "solution": null
      },
      {
        "videoResource": {
          "_id": "1WsDj4v3O4C48HJG2vt12P",
          "muxAsset": {
            "muxPlaybackId": "AQgAsKEXhSX1jN423fCeLiAthn026dFdD5HfHwGvXwb4",
            "muxAssetId": "Jzu9oGgmcMY2Szjs9ATUC2jHS6cZgns00gjyB67PRsl4",
            "_type": "muxAsset"
          },
          "transcript": {
            "srt": "1\n00:00:00,480 --> 00:00:07,660\nHello everybody, this is a yeah a great day. I'm gonna be talking with my friend Tyler Benfield say hi Tyler\n\n2\n00:00:08,360 --> 00:00:08,860\neveryone\n\n3\n00:00:09,519 --> 00:00:10,019\nso\n\n4\n00:00:10,679 --> 00:00:11,179\nYeah,\n\n5\n00:00:11,500 --> 00:00:14,660\nTyler and I I think I kind of feel like we've met\n\n6\n00:00:14,960 --> 00:00:17,119\nbefore this last remix conf But\n\n7\n00:00:17,440 --> 00:00:21,180\nI can't remember it was was this remix conf the first time we met?\n\n8\n00:00:21,580 --> 00:00:22,940\nNo, so funny fact,\n\n9\n00:00:23,439 --> 00:00:24,220\nthis is\n\n10\n00:00:25,080 --> 00:00:26,599\nthe last ReactConf\n\n11\n00:00:27,040 --> 00:00:28,220\nback in Hendersonville.\n\n12\n00:00:28,939 --> 00:00:31,040\nWe briefly met at the like,\n\n13\n00:00:31,640 --> 00:00:47,220\nlittle like welcome party there. Oh, okay, yeah. That was when like, you were super into all the testing stuff and I was very much aligned with that. We were pushing that pretty hard where I was at the time. And yeah, I got the pleasure of meeting you there. Yeah, that's awesome. Yeah, That feels like ages ago. That was,\n\n14\n00:00:47,740 --> 00:00:50,300\nthat's what we call BC before COVID.\n\n15\n00:00:52,700 --> 00:00:53,200\nSo\n\n16\n00:00:53,559 --> 00:00:55,900\ncool. Yeah. So we go way back,\n\n17\n00:00:56,739 --> 00:00:58,300\nbut most recently\n\n18\n00:00:59,340 --> 00:01:00,140\nyou've gotten,\n\n19\n00:01:00,480 --> 00:01:05,519\nAnd actually I'd love to get an intro to you, but like you seem to have gotten way deep into\n\n20\n00:01:05,840 --> 00:01:06,340\ndatabases\n\n21\n00:01:06,720 --> 00:01:14,280\nand now you're at Prisma. And we had a really awesome conversation about database in full stack stuff at RemixConf this year.\n\n22\n00:01:15,040 --> 00:01:21,420\nSo yeah, I'd love to chat with you about that. But before we do, yeah, wanna get to know you a little bit. So why don't you give us an intro?\n\n23\n00:01:22,060 --> 00:01:24,180\nYeah, hey everyone, I'm Tyler Binfield.\n\n24\n00:01:25,080 --> 00:01:35,420\nI am a software engineer. I've been doing this professionally for over 10 years now. I love it. I'm really passionate about software engineering. I've worked at startups big and small. I've worked at consulting companies,\n\n25\n00:01:36,340 --> 00:01:41,380\nbrief sense of very larger companies, even a race team at 1 point doing software there.\n\n26\n00:01:41,880 --> 00:01:45,040\nSo lots of variety of stuff. And I'm currently a staff software engineer at Prisma.\n\n27\n00:01:45,480 --> 00:01:51,100\nI live in North Carolina. I love it here. I think it's the best place to live until I visit Utah, and then I'm jealous.\n\n28\n00:01:52,500 --> 00:01:56,500\nThe weather there is fantastic, and you guys get to snowboard all the time. Yeah, it's awesome.\n\n29\n00:01:56,820 --> 00:01:57,780\nYeah, it's great.\n\n30\n00:01:58,260 --> 00:02:06,640\nYeah, and I really enjoy what I do. I enjoy environments where you have to sort of get in and learn a lot of things, and that's sort of what drove me into being really heavy on databases.\n\n31\n00:02:07,800 --> 00:02:15,560\nI consider myself a full-stack engineer, but I kind of gravitated towards databases because I've seen sort of a lack of, maybe, knowledge and experience there\n\n32\n00:02:15,860 --> 00:02:19,500\nand education around it. So I really like gravitating towards that space.\n\n33\n00:02:21,020 --> 00:02:21,520\nYeah,\n\n34\n00:02:23,180 --> 00:02:28,540\nI'll give you a little context on my background too with databases. So when I was going through school,\n\n35\n00:02:29,380 --> 00:02:33,380\nI decided pretty early on that programming sounded like the most boring thing ever.\n\n36\n00:02:33,940 --> 00:02:34,780\nAnd so\n\n37\n00:02:35,240 --> 00:02:38,500\nI somehow ended up in information systems as a degree,\n\n38\n00:02:38,860 --> 00:02:39,880\nand that\n\n39\n00:02:40,320 --> 00:02:42,940\nincludes all sorts of things. Like you get\n\n40\n00:02:43,460 --> 00:02:44,320\nproduct management\n\n41\n00:02:46,120 --> 00:02:46,860\nand databases\n\n42\n00:02:47,620 --> 00:02:48,120\nand\n\n43\n00:02:49,340 --> 00:02:49,840\nstatistics,\n\n44\n00:02:50,460 --> 00:02:52,680\njust all over the place. Business, computers,\n\n45\n00:02:53,140 --> 00:02:56,940\nwherever those 2 things meet, that's what information systems was.\n\n46\n00:02:58,380 --> 00:03:02,280\nAnd I decided that I really enjoyed working in Excel\n\n47\n00:03:03,340 --> 00:03:05,940\nand I just thought it was really interesting. And so\n\n48\n00:03:06,340 --> 00:03:08,300\nthe field that sounded most\n\n49\n00:03:08,760 --> 00:03:11,020\ninteresting to me was actually business intelligence.\n\n50\n00:03:11,580 --> 00:03:12,460\nAnd so\n\n51\n00:03:13,380 --> 00:03:14,620\nmy first internship\n\n52\n00:03:15,660 --> 00:03:18,120\nwas doing business intelligence for\n\n53\n00:03:18,540 --> 00:03:21,860\nthe Church of Jesus Christ of Latter-day Saints, actually, here in Utah.\n\n54\n00:03:22,900 --> 00:03:23,400\nAnd\n\n55\n00:03:23,800 --> 00:03:31,760\nI actually, I really enjoyed it. It was very interesting. We learned about star schema and denormalized databases to optimize for query speed\n\n56\n00:03:32,080 --> 00:03:35,840\nand answering the questions of the business. Very interesting, ETLs,\n\n57\n00:03:36,300 --> 00:03:37,220\nall this stuff.\n\n58\n00:03:37,960 --> 00:03:48,780\nBut I ended up finding myself spending more time automating processes and stuff and like wiring systems together. And So I just was a software engineer at the end of the day. So\n\n59\n00:03:49,220 --> 00:03:52,360\nthat's where I went from, okay, I wanna do database over\n\n60\n00:03:53,040 --> 00:03:56,780\nto software engineering. And it's only in the last\n\n61\n00:03:57,180 --> 00:04:01,700\ncouple of years now that I've been using Remix that I started getting interested in databases again.\n\n62\n00:04:03,080 --> 00:04:05,580\nAnd so with all of that,\n\n63\n00:04:05,960 --> 00:04:08,060\nyou know, context behind us now,\n\n64\n00:04:08,720 --> 00:04:10,340\nwhy do you think that\n\n65\n00:04:11,040 --> 00:04:13,440\nfull stack engineers should care about databases?\n\n66\n00:04:14,680 --> 00:04:15,720\nYeah, I think\n\n67\n00:04:16,120 --> 00:04:20,660\n1 thing that I've learned in my career is that databases are 1 of the most critical parts of any application.\n\n68\n00:04:21,420 --> 00:04:27,840\nYet it's interesting that whether it's formal education or other means of getting into software engineering,\n\n69\n00:04:28,380 --> 00:04:38,280\nthere's like not as much attention put on how to really optimize the database. And what I've seen so many times is companies or teams just start throwing money at the problem and they\n\n70\n00:04:38,620 --> 00:05:00,640\nbuy bigger databases, buy more resources, and it doesn't really fix the underlying root problem. And it's also so important because when you're building a really fast and responsive app, you wanna have a really good user experience, you'll never be faster than your slowest database query. Oh, that's such a good, yeah, quote. Snip that, yeah, you'll never be faster than your slowest database query. That is so good.\n\n71\n00:05:01,080 --> 00:05:17,060\nYeah, so if you start there, you can only get better from there, right? Like it doesn't matter how many times a React app is re-rendering. It doesn't matter like network latency as much. Like what really matters is make your database fast and then look at the alternative things. And it's interesting that too, that oftentimes the database,\n\n72\n00:05:17,960 --> 00:05:26,960\nI wouldn't say always, but oftentimes it's 1 of the easier things, in my opinion, to actually save a lot of that on. Like sometimes it's just throwing the right index in place, right?\n\n73\n00:05:27,600 --> 00:05:30,640\nSo yeah, I guess long-winded answer. That's why I think it's important.\n\n74\n00:05:31,060 --> 00:05:31,820\nIt's fundamental.\n\n75\n00:05:32,180 --> 00:05:38,100\nMaybe there's some apps out there that don't rely entirely on a database, but most everything out built does in some fashion.\n\n76\n00:05:38,560 --> 00:05:42,140\nAbsolutely. I think there are a lot of services that will\n\n77\n00:05:42,660 --> 00:05:43,460\ndo your\n\n78\n00:05:44,380 --> 00:05:50,340\ndatabase as a service stuff, and you better believe that they know about databases, that's like what they do.\n\n79\n00:05:50,920 --> 00:05:51,420\nBut\n\n80\n00:05:51,880 --> 00:05:53,440\nat some point, I think\n\n81\n00:05:55,000 --> 00:05:57,320\nthose things work really well for\n\n82\n00:05:58,340 --> 00:05:59,980\nlike speccing something out,\n\n83\n00:06:00,300 --> 00:06:02,060\nor your hobby project or something.\n\n84\n00:06:03,180 --> 00:06:11,500\nAnd there certainly are some use cases that they have for like a big project using their service. Like they definitely shout those out on the rooftops.\n\n85\n00:06:12,500 --> 00:06:14,360\nLike we're for real stuff too.\n\n86\n00:06:15,800 --> 00:06:17,320\nBut for most stuff\n\n87\n00:06:17,860 --> 00:06:20,940\nthat you're building at work at scale, you are\n\n88\n00:06:21,340 --> 00:06:24,120\ndefinitely going to want to understand how to use\n\n89\n00:06:24,560 --> 00:06:26,180\ndatabases and optimize those.\n\n90\n00:06:26,540 --> 00:06:34,940\nSo. Yeah. And even most of the hosted vendors that I've looked at, it is actually, I have a lot of interesting thoughts about some of those modern databases coming out there, right?\n\n91\n00:06:35,260 --> 00:06:41,520\nIf we take a little tangent for a minute, you see a lot of modern ones coming out, a lot of them bringing a better developer experience, approaching\n\n92\n00:06:41,880 --> 00:06:43,220\nthe application developer,\n\n93\n00:06:43,940 --> 00:06:48,940\nwhich I think is an overlooked, surprisingly, audience to a lot of cloud vendors providing databases.\n\n94\n00:06:50,260 --> 00:06:55,320\nBut a lot of them that have been successful are fundamentally building on top of 1 of the big\n\n95\n00:06:56,260 --> 00:06:59,720\nopen source databases anyway. Like they're either Postgres compatible\n\n96\n00:07:00,040 --> 00:07:00,980\nor MySQL compatible\n\n97\n00:07:01,360 --> 00:07:01,860\nor\n\n98\n00:07:02,160 --> 00:07:04,900\nmodern stuff moving to SQLite, which is really interesting.\n\n99\n00:07:05,420 --> 00:07:05,920\nTaking\n\n100\n00:07:06,960 --> 00:07:17,700\nthe properties of SQLite and making them work in a distributed environment is super cool. Yeah. So, but what I found interesting is a lot of the ones that I've seen that don't take 1 of those approaches that try to do something entirely unique,\n\n101\n00:07:18,040 --> 00:07:19,700\nthey don't seem to get the same traction\n\n102\n00:07:20,020 --> 00:07:21,300\nthat the others do.\n\n103\n00:07:22,060 --> 00:07:25,460\nAnd I think there's maybe something to read into there. But\n\n104\n00:07:25,760 --> 00:07:33,140\nalso interesting observation that kind of stems from that is all those same things that you learn about how to do proper indexing or how to tune SQL queries,\n\n105\n00:07:33,480 --> 00:07:36,340\nthat still applies to these modern database providers\n\n106\n00:07:36,960 --> 00:07:41,180\nwith the exception of some of those more fancy ones that don't gravitate towards SQL.\n\n107\n00:07:41,720 --> 00:07:43,400\nYeah, you know, that's 100%\n\n108\n00:07:43,780 --> 00:07:44,620\ncorrect because\n\n109\n00:07:45,240 --> 00:07:45,740\nif\n\n110\n00:07:46,220 --> 00:07:46,720\nthese\n\n111\n00:07:47,840 --> 00:07:48,780\nhosting providers\n\n112\n00:07:49,640 --> 00:07:55,780\ncould figure out like which things to index automatically for you, then the database would do that too.\n\n113\n00:07:56,120 --> 00:07:56,900\nAnd so like,\n\n114\n00:07:57,340 --> 00:08:00,260\nso the fact that the database doesn't do it\n\n115\n00:08:00,780 --> 00:08:06,260\nkind of gives us some idea that like, yeah, maybe that's just a thing you need to be able to do yourself.\n\n116\n00:08:06,760 --> 00:08:10,660\nYeah. Yeah. Well, cool. So you were mentioning earlier that\n\n117\n00:08:12,660 --> 00:08:19,780\nenterprises will just throw money at the problem. They'll say, okay, let's set up a caching instance so that we can cache stuff, which, like, enormous\n\n118\n00:08:21,500 --> 00:08:25,520\ncollection of problems in addition to the cost when you introduce caching,\n\n119\n00:08:25,920 --> 00:08:33,840\nor let's just horizontally scale this out, you know, outrageously or whatever, or just, like, give this a monstrous machine\n\n120\n00:08:34,200 --> 00:08:36,620\nso that we don't have these performance problems.\n\n121\n00:08:36,980 --> 00:08:40,740\nAnd you told me about a story that you had about that I'd love to hear.\n\n122\n00:08:41,200 --> 00:08:49,420\nYeah, yeah, I've got a number of stories, but 1 of my favorite ones is a company I worked for at 1 point, I won't name any names because everybody learns\n\n123\n00:08:49,740 --> 00:08:50,640\nat some point.\n\n124\n00:08:51,760 --> 00:08:54,640\nAnd yeah, this company, we had, I think it was around 250,000\n\n125\n00:08:55,120 --> 00:08:59,440\nusers in 6 to 8 months had signed up. This was like an e-commerce type of platform.\n\n126\n00:09:00,560 --> 00:09:01,060\nAnd\n\n127\n00:09:01,580 --> 00:09:10,220\nthis might sound kind of small in terms of data size, but again, in my experience, a lot of databases that were built for like software to service stuff or e-commerce stuff, they don't get super big.\n\n128\n00:09:10,900 --> 00:09:15,080\nSo this was about 4 gigs of data stored in that 6 to 8 months of being live.\n\n129\n00:09:16,120 --> 00:09:17,460\nIt was running on\n\n130\n00:09:17,780 --> 00:09:18,920\n4 vCPU\n\n131\n00:09:19,280 --> 00:09:22,480\ninstance, 15 gigs of memory with a read replica.\n\n132\n00:09:23,200 --> 00:09:36,960\nNow keep in mind too, fun fact there, if you have more memory than you have actual data in your database, your entire database and most database engines is going to be sitting in memory. You're never going to touch disk for a read operation. You will for writes, but not for reads.\n\n133\n00:09:37,540 --> 00:09:42,180\nThat's just like a built-in thing for the database? Like it'll check how much memory do I got? Wow.\n\n134\n00:09:42,740 --> 00:09:43,540\nThat's awesome.\n\n135\n00:09:43,940 --> 00:09:50,220\nYeah, so if you can afford to just give your database enough memory to hold your actual full database, do it.\n\n136\n00:09:51,000 --> 00:09:57,900\nAnd that applies to Postgres, MySQL, SQLite is a little bit special because it's file system based, but it still does some in-memory stuff too, right?\n\n137\n00:09:58,520 --> 00:10:04,420\nYeah, so 15 gigs to 4 gigs, That's a ratio of extreme overpaying in my opinion. Yeah.\n\n138\n00:10:05,980 --> 00:10:13,520\nSo yeah, the database, like you can see it in the stats too, that it was always reading from memory. But anyway, the worst query that we had was\n\n139\n00:10:13,900 --> 00:10:17,140\nevery time a API call ran or a page loaded,\n\n140\n00:10:17,640 --> 00:10:26,260\nit had to look up some stats about who the user was for the session. Very common thing to have in any application, right? This query ran 14 to 20,000\n\n141\n00:10:26,640 --> 00:10:28,100\ntimes every hour.\n\n142\n00:10:29,720 --> 00:10:31,860\nAnd 14,000 to 20,000 times.\n\n143\n00:10:32,320 --> 00:10:40,940\nAnd its average was 140 to 200 milliseconds, which is quite a range for an average. That's another sort of symptom we could get into. But\n\n144\n00:10:41,580 --> 00:10:46,080\nyeah, 140 to 200 milliseconds, almost all of that was CPU because we were reading from memory.\n\n145\n00:10:46,880 --> 00:10:51,240\nI did some analysis and I quickly saw this database had no indexes at all.\n\n146\n00:10:52,200 --> 00:10:55,940\nAdded 1 index to that table and it took it down to 0.04 milliseconds\n\n147\n00:10:56,600 --> 00:10:57,100\naverage.\n\n148\n00:10:57,980 --> 00:11:00,820\nThat reduced the CPU by about 20%\n\n149\n00:11:01,400 --> 00:11:05,700\noverall over the whole system and the active connections reduced by 30%.\n\n150\n00:11:06,280 --> 00:11:09,740\nWow. That's like a 5,000 times improvement on performance.\n\n151\n00:11:10,400 --> 00:11:11,520\nYeah, that's amazing.\n\n152\n00:11:12,180 --> 00:11:23,440\nYeah. And then after that we scaled the database down too. Like immediately, like a week or 2 later, I was like, yeah, we're way overpaying on this database. We can half it and drop the read replica. And we did. And everything continued to operate smoothly.\n\n153\n00:11:24,440 --> 00:11:25,140\nThat's amazing.\n\n154\n00:11:26,040 --> 00:11:28,760\nLike a single index, was it just like an easy\n\n155\n00:11:29,080 --> 00:11:32,540\nprimary key or unique field? Or what was the index?\n\n156\n00:11:33,100 --> 00:11:38,820\nYeah, I think it was on like a session ID. So we had like a table of like some type of user session stuff.\n\n157\n00:11:39,140 --> 00:11:42,260\nI think it was like, if I remember right, something to get probably\n\n158\n00:11:42,620 --> 00:11:59,020\njoining from the session ID to the users table, which another principle that we've talked about before is if you don't know like any other indexes to apply, start with your foreign keys. Cause that's going to have the most bang for your buck. A DBA won't tell you that. They'll probably tell you to analyze everything about your database and see what happens.\n\n159\n00:11:59,540 --> 00:12:07,500\nI'm going to go on record saying, if you don't do anything else, start with your foreign keys. That'll take you from 0 to your first user and more\n\n160\n00:12:08,000 --> 00:12:10,140\non just indexing foreign keys alone.\n\n161\n00:12:11,440 --> 00:12:23,140\nSo yeah, I think that 1 was a foreign key somewhere in there. And I did a little bit of analysis just to see, like, if we made 2 or 3 columns in that index, like we've seen before from analyzing, sometimes you gotta compound them a little bit.\n\n162\n00:12:23,480 --> 00:12:27,600\nAnd, but overall, there was just 1 table that needed that index, and it was done.\n\n163\n00:12:28,080 --> 00:12:29,920\nAmazing, yeah, indexes.\n\n164\n00:12:30,280 --> 00:12:33,580\nSo, like, this is the thing where we talk a lot about\n\n165\n00:12:34,300 --> 00:12:39,640\nlike making our pending states look really good. And I think that's important to make our pending states look really good.\n\n166\n00:12:40,160 --> 00:12:41,180\nThere was this tweet\n\n167\n00:12:41,980 --> 00:12:44,840\nor post on X the other day that\n\n168\n00:12:45,160 --> 00:12:45,940\nsomebody was\n\n169\n00:12:46,400 --> 00:12:53,180\nsharing a cool new, I don't know if it was like a new skeleton UI for GitHub or if it was just\n\n170\n00:12:53,640 --> 00:12:56,780\na proof of concept or something, but it looks cool, you know.\n\n171\n00:12:57,540 --> 00:12:58,220\nAnd somebody\n\n172\n00:12:59,060 --> 00:13:04,400\nelse posted like, I don't know, I never really liked the way these things looked, and I replied with,\n\n173\n00:13:05,860 --> 00:13:10,340\nbetter than pending UI is just a faster app. GitHub should try it sometime.\n\n174\n00:13:12,500 --> 00:13:13,220\nAnd honestly,\n\n175\n00:13:13,740 --> 00:13:16,220\nI don't know GitHub's constraints. I'm sure that\n\n176\n00:13:16,780 --> 00:13:27,540\nwhat they're doing is very complicated, especially on some of those large diffs and stuff. Like even just rendering the DOM for some of that stuff is gonna be expensive, even if you have no JavaScript at all.\n\n177\n00:13:28,280 --> 00:13:36,540\nBut I don't understand why the profile page takes at least a second every time. And there's got to be an index hiding in there somewhere that could have just sped the whole thing up.\n\n178\n00:13:37,200 --> 00:13:38,160\nYeah, absolutely.\n\n179\n00:13:38,860 --> 00:13:44,760\nAnd that's something I also like tying into Remix. I feel like with Remix, I write so many fewer loading spinners.\n\n180\n00:13:45,400 --> 00:13:58,940\nAnd it kind of nudges me towards this, like, just make your backend faster, like do the things to get your backend faster. And then you don't have to deal with this complexity that comes from loading spinners. And granted, like, Deferred and Remix makes that so much better than it used to be, right?\n\n181\n00:13:59,380 --> 00:14:04,020\nBut even now I find myself, like, I only grabbed that as a like last resort.\n\n182\n00:14:04,360 --> 00:14:15,740\nAnd it's so oftentimes I can just look at what's happening on the back end and say, well maybe I can parallelize these 2 things. Maybe I can throw an index on this query. And now the page loads fast enough that the loading spinner just\n\n183\n00:14:16,300 --> 00:14:18,500\nflickered anyway. It wasn't all that useful.\n\n184\n00:14:19,120 --> 00:14:22,620\nYeah, yeah. Like you've got to have those pending states because\n\n185\n00:14:23,860 --> 00:14:26,980\nyou don't control the network. So no matter how fast you make everything,\n\n186\n00:14:27,340 --> 00:14:35,260\nnetwork is still going to be an issue. And you can even throw it on the edge, put it on all of Fly's regions or put it on CloudFlare everywhere,\n\n187\n00:14:35,720 --> 00:14:36,560\neven still\n\n188\n00:14:36,900 --> 00:14:43,640\nusers devices can have a poor connection. So those are important, but like I see people\n\n189\n00:14:44,200 --> 00:14:44,980\nover complicating\n\n190\n00:14:45,720 --> 00:14:48,540\na combo box experience where like\n\n191\n00:14:48,900 --> 00:14:54,360\nthey have like a bunch of debounce on it and it's a whole bunch of caching and the client\n\n192\n00:14:54,720 --> 00:14:56,180\nand really complicated stuff\n\n193\n00:14:56,720 --> 00:15:00,980\njust because their database queries are slower. And so by optimizing\n\n194\n00:15:02,520 --> 00:15:06,240\nthe backend, you end up not having to complicate the front end.\n\n195\n00:15:09,000 --> 00:15:12,840\nOkay, so 1 of the things that we're doing in the database modeling\n\n196\n00:15:13,180 --> 00:15:14,400\nworkshop is\n\n197\n00:15:14,760 --> 00:15:15,260\nanalyzing\n\n198\n00:15:15,760 --> 00:15:16,260\nSQL\n\n199\n00:15:16,980 --> 00:15:17,480\nstatements.\n\n200\n00:15:17,900 --> 00:15:21,640\nAnd this is definitely not something I'd originally planned on including, but\n\n201\n00:15:22,900 --> 00:15:24,040\nthanks to our conversations,\n\n202\n00:15:24,340 --> 00:15:27,100\nthank you so much, Tyler, for your feedback on stuff.\n\n203\n00:15:28,360 --> 00:15:35,340\nI realized that there was a query that I was doing in the Epic stack, which is what we're building as part of Epic Web,\n\n204\n00:15:35,940 --> 00:15:41,340\nthat was really slow once you added a bunch of data into it. So I was doing some profiling\n\n205\n00:15:41,720 --> 00:15:46,400\nand trying to figure out, okay, what is the problem here? Trying to figure out a good index.\n\n206\n00:15:47,040 --> 00:15:47,540\nAnd\n\n207\n00:15:47,840 --> 00:15:53,300\nin the process of figuring out what is a good index, Tyler taught me how to do the\n\n208\n00:15:53,720 --> 00:15:59,480\nquery explain stuff. So can you talk a little, actually, I'm gonna take another step back.\n\n209\n00:16:01,400 --> 00:16:10,960\nWhen you were talking about having 15 gigabytes of memory with 4, 4 gigabyte database. 1 thing that I found that's kind of interesting about that is\n\n210\n00:16:12,520 --> 00:16:19,020\neven if your database is only 4 gigabytes, you need that 15 gigabytes for a really bad query because of all the temporary\n\n211\n00:16:20,220 --> 00:16:22,660\ndata structures that the database is creating, right?\n\n212\n00:16:23,260 --> 00:16:27,340\nSo I'd like to talk, and that's why you needed 15 gigs instead of just 4.\n\n213\n00:16:27,880 --> 00:16:34,980\nSo I'd like to talk about some of the crazy things that databases have to do with suboptimal queries\n\n214\n00:16:35,340 --> 00:16:36,620\nand how you can identify\n\n215\n00:16:38,420 --> 00:16:44,660\ngood ways to optimize. And also going beyond just indexes too. So love to talk about all of that in general.\n\n216\n00:16:45,340 --> 00:16:56,260\nYeah, yeah. This is something I also love analogies for, right? We talked about, I think it was a really big time, we talked about sort of my contact list analogy, which is my favorite. I think you have a variant of that too that you talk about.\n\n217\n00:16:56,940 --> 00:16:58,880\nBut I think about indexes this way. So\n\n218\n00:17:00,040 --> 00:17:06,800\nIf you're keeping a contact list on pen and paper, right? And you meet somebody, you write their name down and their phone number, you know, some details about them.\n\n219\n00:17:07,640 --> 00:17:22,660\nYou're probably doing that, you know, just line by line, page by page in order. Well, then if I say, well, I want to call Kent up because I want to chat with him, what page was Kent on? I have to go back and flip through every page to see like, well, where was he? Like, where's his info?\n\n220\n00:17:23,680 --> 00:17:34,900\nSo that's what we would call a scan in the database world. I'm having to scan through every record. You know, what's the optimal way to do it? You could start at the back, you could start at the front, but either way, you have no idea where this record lives.\n\n221\n00:17:35,860 --> 00:17:42,080\nSo that ends up eating a lot of CPU time, and it ends up using a lot of disk if you don't have the whole database in memory.\n\n222\n00:17:42,500 --> 00:17:45,160\nAnd essentially, it's just doing a for loop over every record\n\n223\n00:17:45,660 --> 00:17:46,860\nthat matches, right?\n\n224\n00:17:47,360 --> 00:17:53,960\nEven if you filter it by a specific condition, it still has to do that because it has no idea where that record or what records might match. Yeah.\n\n225\n00:17:54,860 --> 00:18:10,060\nSo what we would do is, you know, humans, if we were to do that, databases behave a lot more like humans than you might expect. And what we're doing as humans is we might say, well, I'm gonna keep this organized by last name. So maybe I've got all these like allocated tabs, you know, by last name.\n\n226\n00:18:10,440 --> 00:18:21,240\nAnd I, you know, capture it that way. Maybe you organize it by like, I don't know, location where you met someone or something like that. Whatever way you want to organize it, you might change how you're recording the data to match that.\n\n227\n00:18:21,880 --> 00:18:26,700\nThat would be what an index essentially is. It's recording the data sort of a second time.\n\n228\n00:18:27,100 --> 00:18:42,480\nIt might be if there's a partial recording, because you might only need to record, well, let's say that that initial contact list was numbered from, you know, for every record that you recorded. Well, you might only need to record the number where Kent was in my original contact list, or you might wanna repeat\n\n229\n00:18:42,800 --> 00:18:48,540\nmore of the information in your secondary index, right? To avoid that extra like page flip.\n\n230\n00:18:49,120 --> 00:19:06,180\nBut either way, like you keep that second copy and then you can keep as many of those copies as you need that refer back to the 1 true record of origin. And that's how we could go really fast at that point because we can just flip to the specific page. Maybe we have to scan through a couple records remaining, but for the most part, everything's already narrowed down. Exactly how databases work.\n\n231\n00:19:06,820 --> 00:19:09,180\nSo your question about memory consumptions and things,\n\n232\n00:19:09,800 --> 00:19:34,200\nthere's a lot of like, it depends on the situations, but when you have a query that performs really poorly, especially when it gets into lots of joins and complex conditions, it has to load all of the stuff into memory. Sometimes it can sort of stream it where it's like not all loaded at the same time. Sometimes it has to like build up a lot more to like operate on at 1 time, especially if you do things like, I want to pull a bunch of stuff into memory, do like sort of an aggregation\n\n233\n00:19:34,540 --> 00:19:41,260\nin memory that's particularly memory problematic, right? Because it can't, there's like streaming aggregates and there's memory aggregation,\n\n234\n00:19:42,180 --> 00:20:08,220\ndiving into too much details, they're like, there's all these things that can happen, right? So having optimal queries, usually like with indexing and other solutions also kind of nudges the database in the right direction. So if you can get to a situation like for aggregates where it can stream the aggregate rather than have to buffer it all into memory at 1 time, All these things are ways that you can keep your memory footprint on the database, like sort of equivalent to what your database footprint is,\n\n235\n00:20:09,380 --> 00:20:14,940\nand make your CPU go so much farther, right? Like your database CPU should ideally be like almost idle.\n\n236\n00:20:15,480 --> 00:20:17,060\nThere's exceptions, right? But\n\n237\n00:20:17,420 --> 00:20:22,260\nif you're doing CPU computation database, it means you're probably doing a lot of scans and memory operations.\n\n238\n00:20:23,180 --> 00:20:25,740\nYeah, yeah. And that's a good place to identify\n\n239\n00:20:26,400 --> 00:20:36,300\nthat you have some suboptimal query. Like, are you seeing CPU and memory spikes? This is something you told me. If you're seeing those spikes, then something is not optimal.\n\n240\n00:20:37,200 --> 00:20:43,400\nExactly. Like memory, personally, like doesn't always concern me too much because I know the database is going to take so much anyway.\n\n241\n00:20:44,100 --> 00:20:46,040\nRight. Like it wants to take memory.\n\n242\n00:20:46,560 --> 00:21:06,540\nSQL Server is a really fun 1 because it'll just consume memory and not release it back. If you just look at like task managers, it was like, how much is this thing running? It'll just consume as much as it can unless you tell it not to, because that's what would make it most optimal, right? Like if it can pre-allocate all of this, then it doesn't have to go back to the OS to get the memory every time.\n\n243\n00:21:07,040 --> 00:21:08,160\nSo looking at memory.\n\n244\n00:21:08,680 --> 00:21:09,180\nNode.js\n\n245\n00:21:09,580 --> 00:21:10,340\nand V8\n\n246\n00:21:10,760 --> 00:21:11,860\ndo the same thing.\n\n247\n00:21:12,240 --> 00:21:13,320\nIt's just more optimal.\n\n248\n00:21:14,060 --> 00:21:14,840\nEven though\n\n249\n00:21:15,300 --> 00:21:20,820\nit looks like your app is using way more memory than it actually needs at the time.\n\n250\n00:21:21,260 --> 00:21:29,240\nIt'll eat what you give it. So maybe occasionally it'd be a good idea to just test it out and see if your app can run on half as much memory as you're giving it.\n\n251\n00:21:29,680 --> 00:21:32,140\nExactly. And that's all by design and intentional.\n\n252\n00:21:32,980 --> 00:21:36,180\nReally cool stuff, like really cool technical solutions to those problems.\n\n253\n00:21:36,680 --> 00:21:42,940\nBut that's why usually I look at CPU as a clear symptom a lot of times on databases. Like you said, like if you got CPU,\n\n254\n00:21:43,320 --> 00:21:46,200\nhigh CPU usage, you'll probably have some suboptimal queries.\n\n255\n00:21:48,060 --> 00:21:49,320\nAnd also fluctuations\n\n256\n00:21:49,700 --> 00:21:58,000\ntoo I've found is often a symptom of something like I said, that 1 query was averaging 140 to 200. That's a big swing for an average.\n\n257\n00:21:59,120 --> 00:22:03,700\nThat usually means like there's some kind of pressure happening that it's not performing consistently.\n\n258\n00:22:04,340 --> 00:22:10,060\nThat could be like external pressure. That could be other queries running that are putting, causing this 1 to get delayed,\n\n259\n00:22:10,520 --> 00:22:12,840\nor it could be something happening within that query,\n\n260\n00:22:14,600 --> 00:22:16,160\ncausing it to run slower.\n\n261\n00:22:16,860 --> 00:22:31,700\nYou can see that a lot of times too, with like if you put a limit on something, right? If I say like, just give me the first record. Well, if the first 1 was on the first page, that's gonna be like really fast, whether it had to scan or not. But if it was on the last page, well, you just had to go through everything to get there.\n\n262\n00:22:32,240 --> 00:22:37,980\nSo you'll see a lot of like fluctuation in the numbers on queries like that. Yeah, that makes a lot of sense.\n\n263\n00:22:38,500 --> 00:22:41,080\nSo with your contact list analogy,\n\n264\n00:22:42,400 --> 00:22:50,880\nsomething that I think is important to, or useful to call out is that the index that you have is going to have,\n\n265\n00:22:53,100 --> 00:22:54,740\nyou mentioned that you might\n\n266\n00:22:55,080 --> 00:22:59,160\nadd more than just the number of the contact, you might add like their name.\n\n267\n00:22:59,540 --> 00:23:05,340\nAnd So that way you don't have to go back and do that extra page flip. So would that be like having\n\n268\n00:23:05,800 --> 00:23:09,160\n2 indexes or like a dual column index?\n\n269\n00:23:10,240 --> 00:23:15,980\nYeah, yeah. It would be called, most databases I think would call this like a compound index or a composite index.\n\n270\n00:23:16,800 --> 00:23:21,720\nSo an index can be on 1 column or it can be on really any number of columns you want on the same table.\n\n271\n00:23:22,420 --> 00:23:28,100\nAnd most database engines in most cases are only gonna use 1 index per table that they had.\n\n272\n00:23:28,780 --> 00:23:52,620\nSay most, because there are like certain types of query exceptions, right? But for the most part, if 1 index is found that matches what's needed or there's a close match what's needed for the query being run, the database isn't going to try to join 2 indexes together. Yeah. Going back to our human analogy, what would you do if you had 1 like contact list by last name and another by like location?\n\n273\n00:23:53,200 --> 00:24:16,040\nLike how efficient is it for you to like flip to like where's Dodds in my last name? Okay, now where's the like location that I met him and now I have to match these things up like that's just extra cognitive load. Yeah. Faster just to go back to the origin and do the rest of the filtering sort of like from there, like in the table level. That's exactly how databases work. So you want to do like compound indexes instead where you stack those columns together.\n\n274\n00:24:16,620 --> 00:24:20,720\nAnd that will make it be like a single index hit has everything it needs to get there.\n\n275\n00:24:21,760 --> 00:24:31,500\nWhat you might want somebody to go back to the table for is any additional data. You need to look up and this is where the like being explicit about your selection and your query to is really helpful\n\n276\n00:24:31,860 --> 00:24:53,620\nbecause if your index included like first name and last name, and that was all you needed, then it doesn't have to go back to the table to get anything else. But if you just did the equivalent of like a select star, well, maybe you need a date of birth too. The database doesn't know that. So now it has to do an extra lookup back to the original table to get that extra field that wasn't in the index, just for you to throw it away on the application side.\n\n277\n00:24:53,920 --> 00:24:58,720\nYeah, I actually hadn't thought about that. But so in lots of Epic web,\n\n278\n00:24:59,180 --> 00:25:02,620\nwe're querying the user table and all we need is the user ID.\n\n279\n00:25:03,160 --> 00:25:04,620\nAnd so I always select\n\n280\n00:25:05,240 --> 00:25:09,220\nthe ID in those cases. I tell people like, always put a select.\n\n281\n00:25:09,720 --> 00:25:14,880\nAnd I hadn't considered the fact that when you do that, if you're only selecting indexed\n\n282\n00:25:15,460 --> 00:25:19,240\ncolumns, or columns that are in the same index at least, then\n\n283\n00:25:19,640 --> 00:25:37,860\nlike it doesn't even need to touch the actual data. Which is pretty cool. Yeah, there's another side effect of that, that if you happen to, what I like to talk about is like, if you happen to go back into that table and you add a very expensive column, like let's say that you add an avatar image and you're just gonna say, I'm just gonna stick the binary right on this user.\n\n284\n00:25:38,240 --> 00:25:42,420\nHow many queries in your app are now gonna start returning that big binary data\n\n285\n00:25:43,020 --> 00:25:43,520\naccidentally\n\n286\n00:25:44,380 --> 00:25:48,380\nbecause it was like equivalent of a select star. And now you just see the performance suffer\n\n287\n00:25:48,900 --> 00:26:01,860\nall the way through the app. It's so much easier, in my opinion, to sort of like, as you go, just say this is exactly what I need from this query. And now if I have to do that in the future, I don't have any worries about, well, what's this gonna do to everything else because\n\n288\n00:26:02,480 --> 00:26:03,780\nnothing else needed it.\n\n289\n00:26:04,120 --> 00:26:05,780\nYeah, yeah. So\n\n290\n00:26:06,460 --> 00:26:07,400\nlisten to\n\n291\n00:26:07,740 --> 00:26:10,420\nus here, kids. You gotta put your selects,\n\n292\n00:26:10,760 --> 00:26:12,260\nselect what you want.\n\n293\n00:26:14,020 --> 00:26:17,940\nYeah, that's very interesting. Now, another thing that people talk about,\n\n294\n00:26:18,420 --> 00:26:23,080\nand I'd like to get beyond indexes, but there's still so much to talk about. There's so much depth.\n\n295\n00:26:23,860 --> 00:26:27,280\nBut another thing about indexes that people will talk about is\n\n296\n00:26:27,620 --> 00:26:45,820\nthe write speed and the space, the disk space, because these aren't free. It doesn't like come out of nowhere. Like in your contacts analogy, you've got a separate book. Then you know, you've got your main contact book over here but you've got this separate book that has a, you know, pointers over to the regular table just to make it easier to find things.\n\n297\n00:26:46,920 --> 00:26:52,860\nIf I'm like a person in this context analogy, like I don't want to have 30 other books that I'm carrying around.\n\n298\n00:26:53,840 --> 00:26:57,900\nSo yeah, there is like a balance here maybe, or trade-offs.\n\n299\n00:26:58,260 --> 00:26:59,880\nWhat are your thoughts around that?\n\n300\n00:27:00,220 --> 00:27:04,940\nYeah, I would say for us humans, it's a lot of work to carry a lot of those gun type lists around.\n\n301\n00:27:05,460 --> 00:27:07,000\nFor databases, it's,\n\n302\n00:27:07,660 --> 00:27:08,540\nI would say,\n\n303\n00:27:08,860 --> 00:27:09,720\nnearly negligible.\n\n304\n00:27:10,680 --> 00:27:14,620\nAnd the reason for that is if applications I've worked on, typical applications,\n\n305\n00:27:16,100 --> 00:27:18,640\nare going to be way more read-heavy than write-heavy.\n\n306\n00:27:19,900 --> 00:27:22,620\nI would say that's pretty common to see. So,\n\n307\n00:27:23,440 --> 00:27:31,100\nand also we've talked about this before too, that users are way more forgiving of a slow save button than they are a slow page load.\n\n308\n00:27:31,980 --> 00:27:38,500\nIt's just something inherent in our brains. We're used to like, this is an expensive thing versus I'm just trying to see some stuff.\n\n309\n00:27:39,840 --> 00:27:51,000\nSo I would much rather put that load on the, I'll take the right overhead trade off and I'll take the extra disk space too, because the disk space, disk is cheap nowadays, right? Compute is expensive,\n\n310\n00:27:51,560 --> 00:27:52,540\ntime is expensive,\n\n311\n00:27:53,040 --> 00:27:53,980\ndisk is cheap.\n\n312\n00:27:54,660 --> 00:28:00,400\nSo I'll take that extra disk space and I'll take the very small write overhead in most cases,\n\n313\n00:28:01,400 --> 00:28:09,180\nwith the trade off of my users get to see data really fast and that's what they're doing most of the time. There's exceptions to that, right? Like if you're building a really heavy analytics database,\n\n314\n00:28:10,520 --> 00:28:13,880\nmost of this advice probably doesn't apply the same way in general, right?\n\n315\n00:28:14,720 --> 00:28:21,980\nBut for most like software as a service apps, e-commerce apps, the things that most developers I think are probably building,\n\n316\n00:28:22,440 --> 00:28:23,660\nthe most common applications\n\n317\n00:28:24,860 --> 00:28:26,340\nthat would hold true, I think.\n\n318\n00:28:26,640 --> 00:28:27,760\nAbsolutely, yeah.\n\n319\n00:28:28,080 --> 00:28:31,880\nAnd another thing that you kind of\n\n320\n00:28:32,780 --> 00:28:34,140\ntuned me in on was\n\n321\n00:28:35,140 --> 00:28:46,420\neven though, like, so in the context analogy, if I add a new contact, I not only have to add it to the contacts list, but I also have to go to every index that is affected and update them in there,\n\n322\n00:28:46,960 --> 00:28:49,460\nwhich takes longer to write it down.\n\n323\n00:28:50,080 --> 00:28:52,940\nBut, and that's the same thing in databases.\n\n324\n00:28:53,560 --> 00:29:06,360\nAnd so a lot of people are concerned, well, okay, so the writes are gonna take a long time, but as you mentioned, users are okay with that typically. And then at a certain scale, like it's not that much longer than it takes.\n\n325\n00:29:07,040 --> 00:29:18,340\nAnd then it also, the index could also potentially speed up the write. Can you explain why? Yeah. Yeah. So there's a certain times where the index can help, especially if you're doing like bulk updates.\n\n326\n00:29:19,000 --> 00:29:31,100\nSo going back to that like system of record, like you have 1 table that's really the source of truth for all the data. The indexes are really kind of like a replica of that. Well, if you wanted to update like a first name in the table\n\n327\n00:29:31,560 --> 00:29:33,660\nbased on a, let's say, date of birth\n\n328\n00:29:34,080 --> 00:29:41,920\nas a thing. Well, if you want to run that update just based on date of birth, you have to scan through, just like you would on the query, all the records\n\n329\n00:29:42,360 --> 00:30:07,400\nfor the date of birth that matches that and then make the update. So that has to scan the entire table to update like a handful of records. Where if you had an index on data birth in that case, it would first use the index to find these are the 5 records or so that I actually care about. And then go back to the table, perform the update and then push that out to like all the indexes, you know, whatever order the database does all those operations in, it's all like a transaction.\n\n330\n00:30:08,260 --> 00:30:08,940\nBut essentially,\n\n331\n00:30:09,320 --> 00:30:21,680\nif your updates can do scans just like a read can, and if you put the right index in place, you can make the update so much faster that it's actually faster to have the index than it costs to do the additional update.\n\n332\n00:30:23,040 --> 00:30:27,820\nYeah, there it is right there, folks. So add your indexes, unless you're building\n\n333\n00:30:28,320 --> 00:30:29,560\na time series data,\n\n334\n00:30:30,200 --> 00:30:35,580\ncrazy amount of data input sort of thing, which you are an outlier, you should know that.\n\n335\n00:30:37,640 --> 00:30:39,180\nI would like to talk about\n\n336\n00:30:39,660 --> 00:30:43,380\na concern that a lot of people bring up with Prisma, and that is joins.\n\n337\n00:30:45,140 --> 00:30:46,860\nPeople talk about this a lot.\n\n338\n00:30:47,420 --> 00:30:48,360\nIn the workshop,\n\n339\n00:30:48,780 --> 00:30:52,940\nwe have 1 exercise where we're doing a bra SQL because we need to\n\n340\n00:30:53,500 --> 00:30:54,000\ndo\n\n341\n00:30:54,400 --> 00:30:55,220\na nested\n\n342\n00:30:56,600 --> 00:30:57,680\norder by query\n\n343\n00:30:58,080 --> 00:31:00,400\nso that we can sort users by a certain way.\n\n344\n00:31:00,780 --> 00:31:04,980\nYeah, there's no chance. I can't even imagine what an API for that would look like\n\n345\n00:31:05,460 --> 00:31:10,120\nwith the Prisma API currently. I actually do mention in the video that like,\n\n346\n00:31:10,580 --> 00:31:19,340\nI can't see a reason why Prisma couldn't add a drizzle like API in the future. That seems like a reasonable thing it could do in the future which would be sick.\n\n347\n00:31:19,860 --> 00:31:20,840\nBut anyway,\n\n348\n00:31:23,000 --> 00:31:25,140\nPrisma does get a fair bit of criticism\n\n349\n00:31:25,920 --> 00:31:26,420\nfor\n\n350\n00:31:27,540 --> 00:31:31,420\nwhat a lot of people call suboptimal queries. So I'd love for you to talk about that.\n\n351\n00:31:32,040 --> 00:31:44,780\nYeah, happy to share my opinion of it. I think, you know, you talk to others on the team, you'll probably get like different, you know, sort of take some like some of the history behind it and some of the, you know, the outcomes. And we're definitely embracing the feedback too.\n\n352\n00:31:46,120 --> 00:31:50,820\nAnd we're looking for opportunities. Like there's the last release had a couple\n\n353\n00:31:51,600 --> 00:31:56,140\nof improvements already to leverage some of this better. So there's improvements coming,\n\n354\n00:31:56,520 --> 00:32:01,720\nbut we have to be really careful about them because ORMs in general, and sort of like, when you're\n\n355\n00:32:02,460 --> 00:32:06,720\ndoing like a drizzle like API or sort of like a query builder type API,\n\n356\n00:32:07,200 --> 00:32:16,280\nyou get so much control over all the specific things that you wanna do, that it almost translates 1 for 1 with the SQL. Not always, but like it gets really close.\n\n357\n00:32:17,360 --> 00:32:17,860\nFor\n\n358\n00:32:18,180 --> 00:32:24,440\nan API like Prisma, it has to run through almost like a processor to see like, okay, how do I turn this JavaScript representation\n\n359\n00:32:25,200 --> 00:32:28,180\ninto the actual like SQL queries that need to do the exchange?\n\n360\n00:32:28,780 --> 00:32:36,700\nAnd databases historically, relational databases are not very good at handling like nested data with complex sort of filtering\n\n361\n00:32:37,360 --> 00:32:39,780\nnested deeply. Right. Like you can return,\n\n362\n00:32:40,640 --> 00:32:43,120\nlike do joins and stuff. But like, if you.\n\n363\n00:32:43,520 --> 00:33:12,840\nSo I come from a C-sharp background too, early in my career and I used ORMs there that would do like these complex join scenarios. And what happened is every time I got a reasonably complex query, the whole thing would just fall apart. And I would end up splitting it down into multiple individual queries anyway, because it would always try to build a single table results that coming back from the query, like whatever I gave it as like an expression, like you would in Prisma, it would try to build 1 monolithic SQL query for that.\n\n364\n00:33:13,260 --> 00:33:24,560\nAnd what you end up having is like, if I have all these joins, I have data that's repeated, you know, multiple times across rows. Cause it's like, this thing has 10 sub records. So how do I model that in a single table?\n\n365\n00:33:26,100 --> 00:33:34,260\nIf you apply filters on those nested things, it's like, depending on how it tries to generate the SQL, like where do I put this condition? Do I put it in an optimal place?\n\n366\n00:33:34,740 --> 00:33:35,440\nAnd especially\n\n367\n00:33:35,940 --> 00:33:50,440\nwhenever you have a forked sort of relationship in a single query. So you've got like a parent that now needs like 2 different child entities and those might go multiple layers deep. Well now it's like the query is taking 2 different join paths. And they're like,\n\n368\n00:33:50,740 --> 00:33:58,700\nif you were to write that by hand, it's not really clear what exactly you would write, in my opinion, like, to do that, I would probably write 2 separate queries to get.\n\n369\n00:33:59,720 --> 00:34:05,640\nSo Prisma takes a pretty, like, simple stance to that. And It says, well, every layer is more or less like a SQL query.\n\n370\n00:34:06,680 --> 00:34:12,340\nAnd what I've found personally in my experience is that is like super optimal for most workloads\n\n371\n00:34:12,719 --> 00:34:28,940\nbecause it's very clear to index. I can see like if I log my Prisma queries which I highly suggest you do, any ORM, I would suggest you log the SQL, just especially on development, just to see what it's doing. I can take that, drop it into like explain, analyze, and it says, here's where you're missing an index, more or less.\n\n372\n00:34:29,380 --> 00:34:29,880\nAnd\n\n373\n00:34:30,179 --> 00:34:34,139\nit's very easy for me to say like, okay, I put an index here, that query is now faster.\n\n374\n00:34:35,219 --> 00:34:46,719\nThis overall Prisma query now that might've been multiple other queries in it is now faster. Where would you get these like really complex ones? Sometimes it's not clear which specific direction I need to take the index.\n\n375\n00:34:47,900 --> 00:34:52,040\nAnd sometimes the optimizer doesn't even, like in my experience, those other\n\n376\n00:34:53,000 --> 00:34:54,659\nC sharp engines that I've run,\n\n377\n00:34:55,320 --> 00:34:58,060\nthe optimizer in SQL server would pick like,\n\n378\n00:34:58,440 --> 00:35:08,160\nto use an index I totally didn't expect it to, but it was because the query was so complex that the optimizer just chose like what it thought was the best path, but maybe I knew wasn't the best path.\n\n379\n00:35:09,440 --> 00:35:16,560\nSo yeah, I'm not saying that it's not going to be beneficial when we get there. I think it will be tremendously beneficial, but I think it's\n\n380\n00:35:17,300 --> 00:35:21,100\nright now it's covering a breadth of workloads pretty well.\n\n381\n00:35:21,500 --> 00:35:22,000\nAnd\n\n382\n00:35:22,700 --> 00:35:26,060\nthe penalty that you could pay on a really like massive,\n\n383\n00:35:26,480 --> 00:35:27,420\nnasty query\n\n384\n00:35:27,800 --> 00:35:33,780\nis so much worse than the penalty that's paid on like little, small queries running, in my experience.\n\n385\n00:35:34,340 --> 00:35:36,140\nThat is so good.\n\n386\n00:35:36,660 --> 00:35:38,100\nThat makes so much sense.\n\n387\n00:35:39,200 --> 00:35:40,440\nAnd like\n\n388\n00:35:41,120 --> 00:35:42,380\nfrom my perspective,\n\n389\n00:35:43,100 --> 00:35:45,820\nbecause I ship SQLite to production,\n\n390\n00:35:46,640 --> 00:36:02,860\nI don't care how many queries are going because like it's on disk. So like you send tons of queries, it doesn't matter. It's fine because we're just, there's no latency. It's amazing. So the N plus 1 problem that they always talk about with ORMs, It's not really a problem with SQL either.\n\n391\n00:36:05,080 --> 00:36:06,780\nYeah, that is very interesting\n\n392\n00:36:08,420 --> 00:36:11,680\nthat exploding those things out into a giant query,\n\n393\n00:36:12,040 --> 00:36:13,360\nit feels more,\n\n394\n00:36:14,180 --> 00:36:17,620\nit feels better. But I actually hadn't considered the fact that\n\n395\n00:36:18,280 --> 00:36:25,940\nwhen you're building out this query, the result is flat, right? Like that's how SQL works. And so you will absolutely\n\n396\n00:36:26,580 --> 00:36:55,940\nhave repeat data in there. Yeah. And that's why I encourage, Like if you ever get a curiosity of like, oh, wouldn't this be really like so much better with the joins, try to write it by hand 1 time. If you have like a very linear sort of relationship, it's not so bad. You do have repeat stuff sometimes, but like it's not terrible. If you get into those like branching scenarios, that's where like for me it's like, okay, I don't even know which way I want to take this. Like I could go this way and then it's like a suboptimal query, but I'm probably going to lean towards multiple queries like every time anyway.\n\n397\n00:36:57,040 --> 00:37:02,300\nThere are some like newer tools in the databases and some engines to like help with some of this. That's I think where\n\n398\n00:37:02,680 --> 00:37:03,400\nthe ORM\n\n399\n00:37:03,740 --> 00:37:06,000\nteam might be exploring some of those things.\n\n400\n00:37:06,820 --> 00:37:12,260\nI don't know exactly like which directions it's going. Yeah, I just know it's like a big topic for the team.\n\n401\n00:37:13,860 --> 00:37:14,720\nBut yeah,\n\n402\n00:37:15,060 --> 00:37:20,260\nThere's ways you can sort of like do JSON, you know, sort of data to like get subgroups and stuff back in certain formats.\n\n403\n00:37:20,940 --> 00:37:34,500\nBack when I was doing this in like .NET world, that didn't exist, right? Yeah. So we were just like exploding this single table result set. I ended up building something that behaved very similar to Prisma, like, I don't know, 7, 8 years ago,\n\n404\n00:37:35,140 --> 00:37:42,780\nbecause of that, I was hitting that wall of like, I'm trying to do, this was just before GraphQL came out and I was trying to build something similar to GraphQL.\n\n405\n00:37:43,360 --> 00:37:52,100\nI wanted to have this like thing I could talk to my front, or from my front and ask for specific fields to my API and it could do all the filtering and stuff for me.\n\n406\n00:37:52,660 --> 00:38:04,940\nAnd I ended up landing on, well I just need to do this layer by layer because otherwise I'm hitting this wall of, this is a really suboptimal query and I can't optimize it with indexes because the optimizer just discards them.\n\n407\n00:38:05,660 --> 00:38:09,460\nYeah, yeah, because it can't make sense of the complexity. Yeah,\n\n408\n00:38:09,960 --> 00:38:11,180\nyeah, that's very interesting.\n\n409\n00:38:12,180 --> 00:38:13,440\nSo I'm sold.\n\n410\n00:38:16,120 --> 00:38:17,940\nIt's not so simple as\n\n411\n00:38:19,220 --> 00:38:21,020\nthe feature exists, use it.\n\n412\n00:38:21,500 --> 00:38:26,780\nThere's a time and a place for that. And I am satisfied with knowing that the team is\n\n413\n00:38:27,400 --> 00:38:27,900\naware,\n\n414\n00:38:28,360 --> 00:38:29,940\nof course, of occasionally\n\n415\n00:38:30,780 --> 00:38:31,820\nin some instances,\n\n416\n00:38:32,320 --> 00:38:34,840\njoin being more efficient than what is being done.\n\n417\n00:38:35,280 --> 00:38:36,920\nI really appreciate tools\n\n418\n00:38:37,340 --> 00:38:38,600\nthat say,\n\n419\n00:38:39,060 --> 00:38:39,800\nthe default\n\n420\n00:38:40,580 --> 00:38:41,260\nis great\n\n421\n00:38:41,640 --> 00:38:46,440\nin like 90% of cases and in 10% of cases, it's not great.\n\n422\n00:38:47,100 --> 00:38:51,100\nAnd we can optimize those cases rather than optimizing every case.\n\n423\n00:38:51,880 --> 00:38:54,940\nYeah, absolutely. And that's what I like about like the query raw\n\n424\n00:38:55,240 --> 00:39:06,600\nexample you mentioned earlier. Like I love that escape hatch because I always felt like with using Prisma prior to joining the team, I always had this option of like, if I can't model this the way that I want to at Prisma,\n\n425\n00:39:07,120 --> 00:39:17,300\nI can get back into SQL world and I can write something that does exactly what I want it to, right? And I do that so rarely that the benefit of the ORM is still very much there.\n\n426\n00:39:18,340 --> 00:39:23,460\nAnd when I've looked at other options too in the past that are more like query builder type tools,\n\n427\n00:39:24,440 --> 00:39:42,260\nI personally don't lean towards that type of API because I find that I'm just repeating what I already know in SQL. Like I'm having to go reference like this API spec to see like, how do I write what columns I want to select? How do I write how I do this filter? Where like at that point, I could have just wrote the SQL by hand.\n\n428\n00:39:42,700 --> 00:39:47,700\nI don't think that's true for everyone, right? Like, and there's like, I lose type safety, you know, when I do that.\n\n429\n00:39:48,400 --> 00:39:49,500\nBut like\n\n430\n00:39:49,820 --> 00:39:52,400\nI do it so infrequently that I'm happy with it.\n\n431\n00:39:52,840 --> 00:40:03,900\nYeah. And I love your option too, the type safety using Zod afterwards. Like if you don't have 10,000 records or whatever that you have to like churn through, just throw it through a Zod parser and see what it is or just do it in development mode to see like,\n\n432\n00:40:04,280 --> 00:40:05,880\nmake sure it matches up right.\n\n433\n00:40:06,500 --> 00:40:11,860\nThat's like a nice sweet spot for me. Yeah, yeah. You know, I actually hadn't thought about that.\n\n434\n00:40:12,620 --> 00:40:13,520\nThe big\n\n435\n00:40:13,980 --> 00:40:28,300\nidea behind these query builders is that like we're totally type safe and of course they're not running a runtime type checker. So they're development type safe, which is, that's what we're looking for most of the time when we're talking type safety. You can do the same thing with Zod.\n\n436\n00:40:28,860 --> 00:40:29,360\nBut\n\n437\n00:40:30,080 --> 00:40:30,580\nlike\n\n438\n00:40:31,020 --> 00:40:35,340\nI hadn't considered the fact that it is an API, it's not exactly SQL.\n\n439\n00:40:36,060 --> 00:40:37,240\nAnd so there is\n\n440\n00:40:38,760 --> 00:40:40,300\na little bit of difference there.\n\n441\n00:40:41,240 --> 00:40:42,680\nAnd I'm not a super fan\n\n442\n00:40:43,620 --> 00:40:45,260\nof writing SQL. In fact,\n\n443\n00:40:45,940 --> 00:40:48,300\nin the videos where we're doing SQL,\n\n444\n00:40:48,740 --> 00:40:59,660\nI have 1 video where I have GitHub Copilot, do like, I give it the instructions for the exercise and I say, okay, do this, and it did, and it was perfect, it was awesome. And that's 100%,\n\n445\n00:41:00,480 --> 00:41:07,700\nwell, it wasn't perfect, I fixed like 1 or 2 things, but like that is how I recommend people write languages they're unfamiliar with.\n\n446\n00:41:08,100 --> 00:41:15,860\nAnd you know, it's not like you just ship that and pretend and not even test it. So you test it and you feel good about it and then you move on. So\n\n447\n00:41:16,260 --> 00:41:23,760\nI like SQL and I think it's a really, really powerful language. I don't mind having to dip in and write it manually occasionally\n\n448\n00:41:24,720 --> 00:41:41,780\nbecause of all the other things that you get from Prisma outside of that. Yeah, absolutely. And I think like that goes to like sort of a fundamental principle I have to have, like just the knowledge transfer, the transferability of knowledge across things that I work on, right? That's like something I love about Remix is I feel like all the things I knew from working in the browser\n\n449\n00:41:42,260 --> 00:41:48,980\nand like on web platforms prior to that, like just work the way I want them to in Remix. And I feel like what I've learned in Remix\n\n450\n00:41:49,280 --> 00:41:57,100\nalso translates to whatever I might use in the future because it's just platform APIs. And that's sort of where SQL fits in some ways to me of like,\n\n451\n00:41:57,440 --> 00:42:06,020\nI learned this once and it more or less translates across Postgres and MySQL and SQLite and all these like databases that use SQL as a language,\n\n452\n00:42:07,060 --> 00:42:11,260\nall these like concepts and everything like mostly work across them,\n\n453\n00:42:11,680 --> 00:42:14,580\nwhere like if I learn a specific API for something,\n\n454\n00:42:15,280 --> 00:42:20,900\nlike what happens when the next thing comes out and this thing is no longer relevant. I have to relearn all this stuff again.\n\n455\n00:42:22,280 --> 00:42:27,180\nNot to mention like reviewing the query after it's generated, like it's always review the query afterwards,\n\n456\n00:42:27,560 --> 00:42:29,840\nregardless just to see like what it did.\n\n457\n00:42:30,580 --> 00:42:38,340\nIt's good to have some knowledge of like SQL to be able to review that and see that it did more or less the optimal thing for your use case.\n\n458\n00:42:38,860 --> 00:42:42,380\nYeah, yeah. I think it's probably fair to mention also though,\n\n459\n00:42:42,740 --> 00:42:52,440\nthat Prisma is not exactly transferable knowledge either. It's very much like, yeah. But when it comes down to, okay, I have to step outside of Prisma.\n\n460\n00:42:53,040 --> 00:42:55,660\nI do prefer to step into standards,\n\n461\n00:42:55,960 --> 00:42:58,100\nwhich I think is pretty cool.\n\n462\n00:42:58,520 --> 00:42:59,620\nYeah, it's absolutely true.\n\n463\n00:43:00,060 --> 00:43:17,720\nSo, you know, we're over our time that I was anticipating already, but I really would like to touch on this because I think a lot of people are gonna be thinking about this. So if you've got the time, then I'd like to ask you about your opinion on the database that we're using in Epic Web and in the Epic Stack. So\n\n464\n00:43:18,180 --> 00:43:33,420\nI think a lot of people, when they first see that we're using SQLite, they're thinking, oh, well that's just to make the workshop easier, right? Like I can literally commit the database to the workshop so that your data looks exactly the same as my data and it's really nice that way,\n\n465\n00:43:33,760 --> 00:43:37,760\ndespite seeding and stuff. Like even the IDs are exactly the same, which is cool.\n\n466\n00:43:38,940 --> 00:43:46,060\nSo that is a side effect. That's not the reason we're using SQLite. The reason I use SQLite is because I think it's a great production\n\n467\n00:43:46,400 --> 00:43:50,300\ndatabase and I'm using it in production for years now and it's awesome.\n\n468\n00:43:50,900 --> 00:43:58,040\nBut there are other databases I've used others myself so I'd love to hear your thoughts around using SQLite and\n\n469\n00:43:58,520 --> 00:44:00,680\ncases where you think it might not be suited.\n\n470\n00:44:01,600 --> 00:44:05,460\nYeah I think if you had asked me a few years ago, I'd have been like shocked,\n\n471\n00:44:05,800 --> 00:44:08,400\nlike SQLite in production, like what are you talking about?\n\n472\n00:44:09,720 --> 00:44:12,380\nBut that to me was not so much the actual\n\n473\n00:44:13,140 --> 00:44:21,840\nSQLite, I guess sort of like technology of it. It was the fact that the underlying engine didn't have these tools available like replication\n\n474\n00:44:23,000 --> 00:44:31,860\nor the like distribution problem where like I'm essentially saying like this database is running on a disk somewhere on a single node and I've got a point of failure now. Yeah\n\n475\n00:44:32,540 --> 00:44:40,700\nBut that's all changed and it's actively changing right now, which I think is really fascinating. I've been following a lot of these companies that are doing this.\n\n476\n00:44:41,900 --> 00:45:00,120\nAnd I'm seeing it more and more as being like, I'm glad that that's where EpicSec is taking it. Cause I think that's going to be like a next wave of things. Like these other databases are really, really good. Most of my experiences with Postgres and SQL Server in my career, and I've gotten really far on them. Like that example I shared earlier, like that was with Postgres.\n\n477\n00:45:01,720 --> 00:45:19,020\nAnd I still like those databases, but I think that SQLite's sort of been untapped because it didn't have these things that you needed to run a really like high scale system. And now it's getting that, but it's bringing with it the benefits that it still had in that sort of like embedded systems environment,\n\n478\n00:45:19,460 --> 00:45:27,420\nwhich is where it's really like cool to me. Like these different vendors are taking it. Like I think flies is a virtual file system approach to the replication.\n\n479\n00:45:28,040 --> 00:45:30,260\nSuper fascinating to see like how that works.\n\n480\n00:45:31,100 --> 00:45:31,860\nThere's also\n\n481\n00:45:32,460 --> 00:45:35,360\nI think it's torso that has done a fork of SQLite\n\n482\n00:45:36,140 --> 00:45:36,920\ninto libsql,\n\n483\n00:45:37,640 --> 00:45:42,160\nand adding things like a write-ahead log, which is essentially how replication happens.\n\n484\n00:45:42,800 --> 00:45:47,420\nLike it's a change stream of all the events happening in the database that can then broadcast to\n\n485\n00:45:47,800 --> 00:45:50,580\nevery other node you have throughout the world.\n\n486\n00:45:51,960 --> 00:45:54,440\nThat brings like all those replication concerns forward.\n\n487\n00:45:54,900 --> 00:45:59,360\nI think it's gonna be a really good choice. And like I said, too, if you ever think like,\n\n488\n00:46:00,040 --> 00:46:02,460\nI wanna use Postgres or MySQL in my production environment.\n\n489\n00:46:02,760 --> 00:46:05,320\nWell, the things that you learn working on SQLite,\n\n490\n00:46:05,740 --> 00:46:07,700\na lot of it can transfer over.\n\n491\n00:46:09,720 --> 00:46:18,340\nPrisma is not always transferable knowledge, but 1 nice thing is that you can mostly switch from SQLite to Postgres or MySQL, and a lot of things do work that way.\n\n492\n00:46:18,740 --> 00:46:19,240\nYeah.\n\n493\n00:46:19,600 --> 00:46:29,000\nSo yeah, I think it's a great choice. I think we'll still see improvements on some of the tooling, the advanced tooling. Like when I do performance insights, like we've looked at the explain plan before,\n\n494\n00:46:30,180 --> 00:46:36,140\nMy complaint has always been I get so much more out of SQL Server or Postgres than I do out of SQLite.\n\n495\n00:46:36,700 --> 00:46:38,340\nBut I think that will change too.\n\n496\n00:46:39,080 --> 00:46:45,800\nWe'll continue to see, I think that's been a symptom of SQLite not being as used in these types of environments.\n\n497\n00:46:46,400 --> 00:46:50,140\nAnd now that it is, we're gonna see more tooling come for that too.\n\n498\n00:46:51,180 --> 00:46:53,400\nAnd I think that the technology\n\n499\n00:46:54,080 --> 00:46:56,180\nspeaks for itself as something that\n\n500\n00:46:56,680 --> 00:47:01,740\nis worth investing that type of effort into. Yeah, I completely agree.\n\n501\n00:47:02,900 --> 00:47:03,400\nAnd\n\n502\n00:47:04,300 --> 00:47:10,100\nI migrated from Postgres to SQLite, which is kind of the backwards for a lot of people,\n\n503\n00:47:10,840 --> 00:47:11,340\nbut\n\n504\n00:47:11,680 --> 00:47:13,480\nnot for long, I don't know, we'll see.\n\n505\n00:47:13,920 --> 00:47:14,660\nBut yeah,\n\n506\n00:47:15,660 --> 00:47:19,060\nPrisma made that like way easier than it should have been.\n\n507\n00:47:19,440 --> 00:47:22,760\nSo yeah, that's, you know, a win for an ORM.\n\n508\n00:47:24,520 --> 00:47:32,740\nAnd actually, so you mentioned Fly and Terso. There's also Cloudflare Durable Objects is built on top of SQLite too, which is like,\n\n509\n00:47:33,320 --> 00:47:35,140\nI mean, that's pretty hardcore.\n\n510\n00:47:35,740 --> 00:47:42,460\nSo. Yeah, I've been looking at D1, I think is there, I think it's in beta right now. There's a SQLite\n\n511\n00:47:42,900 --> 00:47:45,280\noffering and it is very cool.\n\n512\n00:47:46,980 --> 00:47:51,940\nI believe there's gonna be a lot of exciting stuff coming for that when it gets out of the beta phase.\n\n513\n00:47:53,260 --> 00:47:57,940\nYeah, a lot of benefits to SQLite and solving, like you said, solving the distribution\n\n514\n00:47:58,680 --> 00:48:01,040\nand single point of failure problems.\n\n515\n00:48:01,560 --> 00:48:02,320\nKind of\n\n516\n00:48:02,860 --> 00:48:09,680\nnow that those are being, you know, I wouldn't say that they're solved. There's still like some challenges with those, but\n\n517\n00:48:10,080 --> 00:48:13,060\nlike there is a path forward for all of that.\n\n518\n00:48:13,380 --> 00:48:17,300\nAnd it's so cool how, Like I said earlier, it brings those benefits\n\n519\n00:48:17,680 --> 00:48:20,140\nwith it too. Like when you like, is it running\n\n520\n00:48:20,860 --> 00:48:26,700\nthe queries against SQLite on fly is so fast that you don't even notice some of the penalties you get.\n\n521\n00:48:27,100 --> 00:48:35,040\nLike index is still a help, but some of the other things that we've been concerned with in the past, I think, like latency between the database and the application.\n\n522\n00:48:35,740 --> 00:48:36,860\nThose things just disappear.\n\n523\n00:48:38,480 --> 00:48:44,520\nEven like, you know, I was talking about the CPU and memory of that database instance I had, like that wasn't the application, that was the database\n\n524\n00:48:45,400 --> 00:48:45,900\nprovision.\n\n525\n00:48:46,260 --> 00:48:52,400\nLike in SQLite, you don't even really have that concern. It's just part of like your application in many ways.\n\n526\n00:48:52,740 --> 00:48:53,940\nYes, and\n\n527\n00:48:54,240 --> 00:49:05,520\nthat can't be understated. That was 1 of the main reasons that I switched or started thinking about switching from Postgres to SQLite was to eliminate the extra service that I had running. Because I had my application,\n\n528\n00:49:06,040 --> 00:49:08,340\nit's still distributed all over the world,\n\n529\n00:49:08,920 --> 00:49:14,040\nbut that's not very useful if your data isn't also distributed all over the world. And so\n\n530\n00:49:14,340 --> 00:49:17,440\nI had Postgres and ReadReplicas in all those places,\n\n531\n00:49:18,340 --> 00:49:26,180\nAnd so I had twice the number of services. I also had Redis actually in all of those regions. So I had 3 times the number of services.\n\n532\n00:49:27,040 --> 00:49:32,340\nAnd then I switched over to SQLite and used SQLite for my cache as well. And\n\n533\n00:49:33,060 --> 00:49:35,140\nI cut my services to a third.\n\n534\n00:49:35,860 --> 00:49:36,720\nThat was nice.\n\n535\n00:49:38,200 --> 00:49:47,260\nIt's cheaper. Fewer things to fail. Yeah, fewer things to fail. Yeah, actually, that's funny, because SQLite was like single point of failure, and now I'm like,\n\n536\n00:49:47,920 --> 00:49:53,300\nI don't have that problem because it's distributed, but also I have newer points of failure, which is pretty sweet.\n\n537\n00:49:53,940 --> 00:50:02,540\nAnd additive points of failure too, I haven't really thought about this before, but if your application is down, how useful is your database? Yeah, yeah, sure. So,\n\n538\n00:50:03,720 --> 00:50:13,880\nthere's arguments to be made either way, I guess, that like your data, like I said earlier, database is your most critical thing, but if you move it to be part of your application, you only have 1 thing that's either up or down now. Yeah.\n\n539\n00:50:14,720 --> 00:50:21,780\nSomething to think about. Yeah, it's very interesting. Yeah, SQLite is phenomenal. I feel like there was something else I wanted to mention about it.\n\n540\n00:50:22,540 --> 00:50:23,800\nBut yeah,\n\n541\n00:50:24,240 --> 00:50:26,300\nI think that's all that I got.\n\n542\n00:50:27,340 --> 00:50:42,420\nThis conversation has just been really fun for me, Tyler. Thank you for giving us some of your time to chat about these things. Is there anything we didn't talk about that you wanted to make sure to bring up? Oh, no, I think we're good. I always appreciate talking with you, Ken. It's a pleasure to be here. Yeah, thank you, likewise.\n\n543\n00:50:43,080 --> 00:50:50,780\nAnd what is the best place for people to get in contact with you or the Prisma team or if they have any follow-up questions?\n\n544\n00:50:51,400 --> 00:50:54,040\nYeah, you can find me on Twitter. RTBinfield's\n\n545\n00:50:54,440 --> 00:50:54,940\nmy\n\n546\n00:50:55,360 --> 00:50:58,640\nname on pretty much everything, Twitter X, whatever you prefer to call it.\n\n547\n00:50:59,240 --> 00:51:00,820\nDiscord as well, RTBinfield,\n\n548\n00:51:01,380 --> 00:51:02,880\nI'm pretty responsible on there.\n\n549\n00:51:03,340 --> 00:51:08,900\nFor Prisma, we have our Prisma handle on Twitter. We're very active on there. And we also have our Discord and Slack.\n\n550\n00:51:09,440 --> 00:51:11,620\nI actively look at the Discord quite a bit\n\n551\n00:51:11,980 --> 00:51:13,280\nand enjoy working there.\n\n552\n00:51:13,700 --> 00:51:18,220\nSo yeah, check out the Prisma Discord, hit me up, ask me any database questions. I love tuning databases.\n\n553\n00:51:18,760 --> 00:51:19,400\nThrow me\n\n554\n00:51:19,940 --> 00:51:22,760\nyour best tuning scenarios and I'll see what I can crack.\n\n555\n00:51:23,400 --> 00:51:24,980\nAwesome, that sounds great.\n\n556\n00:51:25,800 --> 00:51:35,140\nOkay, very good. Actually, you know what? There was something that I wanted to mention. Because earlier you, I remembered the thing, earlier you mentioned that\n\n557\n00:51:35,460 --> 00:51:36,240\nin SQLite,\n\n558\n00:51:36,820 --> 00:51:42,000\nit's some of the indexes are less important, still important, but maybe a little less so, just\n\n559\n00:51:42,440 --> 00:51:44,840\nbecause of the nature. And I just wanted to\n\n560\n00:51:45,840 --> 00:51:48,360\ndouble click on that, which is a phrase that I don't use very often.\n\n561\n00:51:49,340 --> 00:51:50,720\nAnd just say, like,\n\n562\n00:51:52,660 --> 00:52:04,580\nin my database on my website, I have over half a million rows. I should look again, but I have, you know, it's not a small amount of data. For lots of the apps that people watching are building, unless you're working at Amazon,\n\n563\n00:52:05,080 --> 00:52:05,840\nyou're probably\n\n564\n00:52:06,160 --> 00:52:08,180\nnot at a half a million rows.\n\n565\n00:52:08,540 --> 00:52:13,120\nThere are just tons of apps that aren't all that huge. So anyway, I feel like I have a pretty sizable\n\n566\n00:52:13,660 --> 00:52:14,480\nset of data.\n\n567\n00:52:15,060 --> 00:52:19,040\nAnd on every page load, I execute this query,\n\n568\n00:52:19,340 --> 00:52:21,400\nor this set of queries, to determine\n\n569\n00:52:22,300 --> 00:52:22,800\nthe\n\n570\n00:52:23,940 --> 00:52:35,140\nteam rankings. So on my site, you can log in and you choose a team, and based on which blog post you've read, you score a point for your team. So on every page load I wanna calculate those team rankings\n\n571\n00:52:35,460 --> 00:52:40,460\nand just by nature of the way that that calculation has to work, because I\n\n572\n00:52:41,280 --> 00:52:41,780\ndo,\n\n573\n00:52:42,380 --> 00:52:50,580\nhow recently active, or how many recently active members there are. Well to know how many recently active members there are, you need to know how many post reads\n\n574\n00:52:50,940 --> 00:53:02,500\nthey've had in the last 6 months. And all, like, there's a bunch of stuff. And they have to have read something in the last year to be counted as recently active. So there's, like, it's more complicated than you might think. So at the end of it all,\n\n575\n00:53:02,800 --> 00:53:05,420\nit's 9 queries that I have to execute to determine\n\n576\n00:53:06,140 --> 00:53:06,940\nthe rankings.\n\n577\n00:53:07,540 --> 00:53:08,040\nAnd\n\n578\n00:53:08,380 --> 00:53:08,880\nbefore\n\n579\n00:53:09,400 --> 00:53:11,600\nI had your help on indexing\n\n580\n00:53:12,100 --> 00:53:12,940\nthe tables,\n\n581\n00:53:13,840 --> 00:53:22,540\nthese queries just took way too long, especially since they're every single page load. So I stuck a cache in front of it and it's fine. Like it would just update every 60 seconds, no big deal.\n\n582\n00:53:23,680 --> 00:53:26,960\nSo yeah, what's interesting is once you helped me with\n\n583\n00:53:27,800 --> 00:53:28,580\nthe index,\n\n584\n00:53:29,240 --> 00:53:39,520\nthat went from like a couple seconds for all of those. I think it was maybe just like 2 seconds, but certainly way too long for every page load. So it went from like a couple seconds down to a couple milliseconds.\n\n585\n00:53:39,840 --> 00:53:41,760\nJust even in that setting,\n\n586\n00:53:42,080 --> 00:53:45,600\nadding indexes. I mean, it's a lot of data, so it kind of makes sense, but\n\n587\n00:53:46,120 --> 00:53:46,620\nindexes,\n\n588\n00:53:47,040 --> 00:53:51,980\nthey're real. And I still have the cache there because it takes more effort to remove it than to just leave it.\n\n589\n00:53:52,660 --> 00:53:53,160\nSo,\n\n590\n00:53:53,500 --> 00:53:54,000\nyeah.\n\n591\n00:53:54,660 --> 00:54:03,180\nYeah, indexes are huge. I think most index performance still helps SQLite. It's a lot of the other things that we were optimizing, like the network stuff that\n\n592\n00:54:03,560 --> 00:54:05,240\nmostly goes away, right?\n\n593\n00:54:06,500 --> 00:54:21,540\nLike geographic location was a big 1, right? Like how close can you put your database to your application and then how do you, like you're talking earlier about how you replicate it to be everywhere your application is. Like those are things that with SQLite, we don't really have to think about as much, if at all.\n\n594\n00:54:22,020 --> 00:54:25,380\nBut for most part, your indexes are still gonna help. The ones that are gonna be maybe,\n\n595\n00:54:25,680 --> 00:54:32,700\nif anything less beneficial, like if you have a table with very low numbers of records, scanning it with SQLite is gonna be super fast. Yeah.\n\n596\n00:54:33,280 --> 00:54:40,020\nIf it's a hundred records, you're probably not going to notice an index benefit, but at half a million, it's going to\n\n597\n00:54:40,680 --> 00:54:41,620\nbe very obvious.\n\n598\n00:54:42,800 --> 00:54:43,300\nYeah.\n\n599\n00:54:44,160 --> 00:54:49,260\nYeah. All right. Hey, thanks so much, Tyler, again. And yeah, we'll chat with you all later\n\n600\n00:54:50,220 --> 00:54:51,140\nThanks. Bye everyone",
            "text": "[00:00:00] Kent:\nHello everybody, this is a yeah a great day. I'm gonna be talking with my friend Tyler Benfield say hi Tyler \n\n[00:00:08] Tyler:\neveryone \n\n[00:00:09] Kent:\nso Yeah, Tyler and I I think I kind of feel like we've met before this last remix conf But I can't remember it was was this remix conf the first time we met? \n\n[00:00:21] Tyler:\nNo, so funny fact, this is the last ReactConf back in Hendersonville. We briefly met at the like, little like welcome party there. \n\n[00:00:33] Kent:\nOh, okay, yeah. \n\n[00:00:34] Tyler:\nThat was when like, you were super into all the testing stuff and I was very much aligned with that. We were pushing that pretty hard where I was at the time. And yeah, I got the pleasure of meeting you there. \n\n[00:00:43] Kent:\nYeah, that's awesome. Yeah, That feels like ages ago. That was, that's what we call BC before COVID. So cool. Yeah. So we go way back, but most recently you've gotten, And actually I'd love to get an intro to you, but like you seem to \n\n[00:01:03] have gotten way deep into databases and now you're at Prisma. And we had a really awesome conversation about database in full stack stuff at RemixConf this year. So yeah, I'd love to chat with you about that. But before we do, yeah, wanna get to know you a little bit. So why don't you give us an intro? \n\n[00:01:22] Tyler:\nYeah, hey everyone, I'm Tyler Binfield. I am a software engineer. I've been doing this professionally for over 10 years now. I love it. I'm really passionate about software engineering. I've worked at startups big and small. I've worked at consulting companies, brief sense of very larger companies, even a race team at 1 point doing software there. So lots \n\n[00:01:42] of variety of stuff. And I'm currently a staff software engineer at Prisma. I live in North Carolina. I love it here. I think it's the best place to live until I visit Utah, and then I'm jealous. The weather there is fantastic, and you guys get to snowboard all the time. \n\n[00:01:55] Kent:\nYeah, it's awesome. \n\n[00:01:56] Tyler:\nYeah, it's great. Yeah, and I really enjoy what I do. I enjoy environments where you have to sort of get in and learn a lot of things, and that's sort of what drove me into being really heavy on databases. I consider myself a full-stack engineer, but I kind of gravitated towards databases because I've seen sort of a lack of, maybe, knowledge and experience there and education around \n\n[00:02:16] it. So I really like gravitating towards that space. \n\n[00:02:21] Kent:\nYeah, I'll give you a little context on my background too with databases. So when I was going through school, I decided pretty early on that programming sounded like the most boring thing ever. And so I somehow ended up in information systems as a degree, and that includes all \n\n[00:02:41] sorts of things. Like you get product management and databases and statistics, just all over the place. Business, computers, wherever those 2 things meet, that's what information systems was. And I decided that I really enjoyed working \n\n[00:03:01] in Excel and I just thought it was really interesting. And so the field that sounded most interesting to me was actually business intelligence. And so my first internship was doing business intelligence for the Church of Jesus Christ of Latter-day Saints, actually, here in Utah. \n\n[00:03:22] And I actually, I really enjoyed it. It was very interesting. We learned about star schema and denormalized databases to optimize for query speed and answering the questions of the business. Very interesting, ETLs, all this stuff. But I ended up finding myself spending more time automating processes and stuff and \n\n[00:03:43] like wiring systems together. And So I just was a software engineer at the end of the day. So that's where I went from, okay, I wanna do database over to software engineering. And it's only in the last couple of years now that I've been using Remix that I started getting interested in databases again. \n\n[00:04:03] And so with all of that, you know, context behind us now, why do you think that full stack engineers should care about databases? \n\n[00:04:14] Tyler:\nYeah, I think 1 thing that I've learned in my career is that databases are 1 of the most critical parts of any application. Yet it's interesting that whether it's formal education or other means of getting into software engineering, there's like not as much attention put on how to really optimize the database. And what I've seen so many times is \n\n[00:04:34] companies or teams just start throwing money at the problem and they buy bigger databases, buy more resources, and it doesn't really fix the underlying root problem. And it's also so important because when you're building a really fast and responsive app, you wanna have a really good user experience, you'll never be faster than your slowest database query. \n\n[00:04:53] Kent:\nOh, that's such a good, yeah, quote. Snip that, yeah, you'll never be faster than your slowest database query. That is so good. \n\n[00:05:01] Tyler:\nYeah, so if you start there, you can only get better from there, right? Like it doesn't matter how many times a React app is re-rendering. It doesn't matter like network latency as much. Like what really matters is make your database fast and then look at the alternative things. And it's interesting that too, that oftentimes the database, I wouldn't say always, but oftentimes it's 1 of the easier things, in my \n\n[00:05:21] opinion, to actually save a lot of that on. Like sometimes it's just throwing the right index in place, right? So yeah, I guess long-winded answer. That's why I think it's important. It's fundamental. Maybe there's some apps out there that don't rely entirely on a database, but most everything out built does in some fashion. \n\n[00:05:38] Kent:\nAbsolutely. I think there are a lot of services that will do your database as a service stuff, and you better believe that they know about databases, that's like what they do. But at some point, I think those things work really well for like \n\n[00:05:58] speccing something out, or your hobby project or something. And there certainly are some use cases that they have for like a big project using their service. Like they definitely shout those out on the rooftops. Like we're for real stuff too. But for most stuff that you're building \n\n[00:06:18] at work at scale, you are definitely going to want to understand how to use databases and optimize those. So. \n\n[00:06:26] Tyler:\nYeah. And even most of the hosted vendors that I've looked at, it is actually, I have a lot of interesting thoughts about some of those modern databases coming out there, right? If we take a little tangent for a minute, you see a lot of modern ones coming out, a lot of them bringing a better developer experience, approaching the application developer, which I think is an overlooked, surprisingly, audience to a lot \n\n[00:06:47] of cloud vendors providing databases. But a lot of them that have been successful are fundamentally building on top of 1 of the big open source databases anyway. Like they're either Postgres compatible or MySQL compatible or modern stuff moving to SQLite, which is really interesting. Taking the \n\n[00:07:07] properties of SQLite and making them work in a distributed environment is super cool. \n\n[00:07:11] Kent:\nYeah. \n\n[00:07:11] Tyler:\nSo, but what I found interesting is a lot of the ones that I've seen that don't take 1 of those approaches that try to do something entirely unique, they don't seem to get the same traction that the others do. And I think there's maybe something to read into there. But also interesting observation that kind of stems from that is all those same things that you learn about how to do proper indexing or how to tune \n\n[00:07:32] SQL queries, that still applies to these modern database providers with the exception of some of those more fancy ones that don't gravitate towards SQL. \n\n[00:07:41] Kent:\nYeah, you know, that's 100% correct because if these hosting providers could figure out like which things to index automatically for you, then the database would do that too. And so like, so the fact that the database doesn't do it kind of gives us some \n\n[00:08:01] idea that like, yeah, maybe that's just a thing you need to be able to do yourself. \n\n[00:08:06] Tyler:\nYeah. Yeah. \n\n[00:08:08] Kent:\nWell, cool. So you were mentioning earlier that enterprises will just throw money at the problem. They'll say, okay, let's set up a caching instance so that we can cache stuff, which, like, enormous collection of problems in addition to the cost when you introduce caching, or let's just horizontally scale this out, \n\n[00:08:28] you know, outrageously or whatever, or just, like, give this a monstrous machine so that we don't have these performance problems. And you told me about a story that you had about that I'd love to hear. \n\n[00:08:41] Tyler:\nYeah, yeah, I've got a number of stories, but 1 of my favorite ones is a company I worked for at 1 point, I won't name any names because everybody learns at some point. And yeah, this company, we had, I think it was around 250,000 users in 6 to 8 months had signed up. This was like an e-commerce type of platform. And \n\n[00:09:01] this might sound kind of small in terms of data size, but again, in my experience, a lot of databases that were built for like software to service stuff or e-commerce stuff, they don't get super big. So this was about 4 gigs of data stored in that 6 to 8 months of being live. It was running on 4 vCPU instance, 15 gigs of memory with \n\n[00:09:21] a read replica. Now keep in mind too, fun fact there, if you have more memory than you have actual data in your database, your entire database and most database engines is going to be sitting in memory. You're never going to touch disk for a read operation. You will for writes, but not for reads. \n\n[00:09:37] Kent:\nThat's just like a built-in thing for the database? Like it'll check how much memory do I got? Wow. That's awesome. \n\n[00:09:43] Tyler:\nYeah, so if you can afford to just give your database enough memory to hold your actual full database, do it. And that applies to Postgres, MySQL, SQLite is a little bit special because it's file system based, but it still does some in-memory stuff too, right? Yeah, so 15 gigs to 4 gigs, That's a ratio of extreme overpaying in my opinion. Yeah. \n\n[00:10:05] So yeah, the database, like you can see it in the stats too, that it was always reading from memory. But anyway, the worst query that we had was every time a API call ran or a page loaded, it had to look up some stats about who the user was for the session. Very common thing to have in any application, right? This query ran 14 to 20,000 \n\n[00:10:26] times every hour. And 14,000 to 20,000 times. And its average was 140 to 200 milliseconds, which is quite a range for an average. That's another \n\n[00:10:38] Kent:\nsort \n\n[00:10:38] Tyler:\nof symptom we could get into. But yeah, 140 to 200 milliseconds, almost all of that was CPU because we were reading from memory. I did some analysis and I quickly saw this database had no indexes at all. Added 1 index to that table and it took it down to 0.04 milliseconds average. That reduced the \n\n[00:10:58] CPU by about 20% overall over the whole system and the active connections reduced by 30%. Wow. That's like a 5,000 times improvement on performance. \n\n[00:11:10] Kent:\nYeah, that's amazing. Yeah. And then \n\n[00:11:13] Tyler:\nafter that we scaled the database down too. Like immediately, like a week or 2 later, I was like, yeah, we're way overpaying on this database. We can half it and drop the read replica. And we did. And everything continued to operate smoothly. \n\n[00:11:24] Kent:\nThat's amazing. Like a single index, was it just like an easy primary key or unique field? Or what was the index? \n\n[00:11:33] Tyler:\nYeah, I think it was on like a session ID. So we had like a table of like some type of user session stuff. I think it was like, if I remember right, something to get probably joining from the session ID to the users table, which another principle that we've talked about before is if you don't know like any other indexes to apply, start with your foreign keys. Cause that's going to have the most bang \n\n[00:11:53] for your buck. A DBA won't tell you that. They'll probably tell you to analyze everything about your database and see what happens. I'm going to go on record saying, if you don't do anything else, start with your foreign keys. That'll take you from 0 to your first user and more on just indexing foreign keys alone. So yeah, I think that 1 was a foreign \n\n[00:12:13] key somewhere in there. And I did a little bit of analysis just to see, like, if we made 2 or 3 columns in that index, like we've seen before from analyzing, sometimes you gotta compound them a little bit. And, but overall, there was just 1 table that needed that index, and it was done. \n\n[00:12:28] Kent:\nAmazing, yeah, indexes. So, like, this is the thing where we talk a lot about like making our pending states look really good. And I think that's important to make our pending states look really good. There was this tweet or post on X the other day that somebody was sharing a cool new, \n\n[00:12:48] I don't know if it was like a new skeleton UI for GitHub or if it was just a proof of concept or something, but it looks cool, you know. And somebody else posted like, I don't know, I never really liked the way these things looked, and I replied with, better than pending UI is just a faster \n\n[00:13:08] app. GitHub should try it sometime. And honestly, I don't know GitHub's constraints. I'm sure that what they're doing is very complicated, especially on some of those large diffs and stuff. Like even just rendering the DOM for some of that stuff is gonna be expensive, even if you have no JavaScript at all. \n\n[00:13:28] But I don't understand why the profile page takes at least a second every time. And there's got to be an index hiding in there somewhere that could have just sped the whole thing up. \n\n[00:13:37] Tyler:\nYeah, absolutely. And that's something I also like tying into Remix. I feel like with Remix, I write so many fewer loading spinners. And it kind of nudges me towards this, like, just make your backend faster, like do the things to get your backend faster. And then you don't have to deal with this complexity that comes from loading spinners. And granted, like, Deferred and Remix makes that so much better \n\n[00:13:57] than it used to be, right? But even now I find myself, like, I only grabbed that as a like last resort. And it's so oftentimes I can just look at what's happening on the back end and say, well maybe I can parallelize these 2 things. Maybe I can throw an index on this query. And now the page loads fast enough that the loading spinner just flickered anyway. It wasn't \n\n[00:14:17] all that useful. \n\n[00:14:19] Kent:\nYeah, yeah. Like you've got to have those pending states because you don't control the network. So no matter how fast you make everything, network is still going to be an issue. And you can even throw it on the edge, put it on all of Fly's regions or put it on CloudFlare everywhere, even still users devices can have a \n\n[00:14:39] poor connection. So those are important, but like I see people over complicating a combo box experience where like they have like a bunch of debounce on it and it's a whole bunch of caching and the client and really complicated stuff just because their database queries are slower. \n\n[00:14:59] And so by optimizing the backend, you end up not having to complicate the front end. Okay, so 1 of the things that we're doing in the database modeling workshop is analyzing SQL statements. And this is definitely not something I'd originally \n\n[00:15:20] planned on including, but thanks to our conversations, thank you so much, Tyler, for your feedback on stuff. I realized that there was a query that I was doing in the Epic stack, which is what we're building as part of Epic Web, that was really slow once you added a bunch of data into it. So I \n\n[00:15:40] was doing some profiling and trying to figure out, okay, what is the problem here? Trying to figure out a good index. And in the process of figuring out what is a good index, Tyler taught me how to do the query explain stuff. So can you talk a little, actually, I'm gonna take another step back. \n\n[00:16:01] When you were talking about having 15 gigabytes of memory with 4, 4 gigabyte database. 1 thing that I found that's kind of interesting about that is even if your database is only 4 gigabytes, you need that 15 gigabytes for a really bad query because of all the temporary data structures that the database \n\n[00:16:21] is creating, right? So I'd like to talk, and that's why you needed 15 gigs instead of just 4. So I'd like to talk about some of the crazy things that databases have to do with suboptimal queries and how you can identify good ways to optimize. And also going beyond just indexes too. \n\n[00:16:41] So love to talk about all of that in general. \n\n[00:16:45] Tyler:\nYeah, yeah. This is something I also love analogies for, right? We talked about, I think it was a really big time, we talked about sort of my contact list analogy, which is my favorite. I think you have a variant of that too that you talk about. But I think about indexes this way. So If you're keeping a contact list on pen and paper, right? And you meet somebody, you write their name down and their phone number, you know, some \n\n[00:17:05] details about them. You're probably doing that, you know, just line by line, page by page in order. Well, then if I say, well, I want to call Kent up because I want to chat with him, what page was Kent on? I have to go back and flip through every page to see like, well, where was he? Like, where's his info? So that's what we would call a scan \n\n[00:17:25] in the database world. I'm having to scan through every record. You know, what's the optimal way to do it? You could start at the back, you could start at the front, but either way, you have no idea where this record lives. So that ends up eating a lot of CPU time, and it ends up using a lot of disk if you don't have the whole database in memory. And essentially, it's just doing a for loop over every record \n\n[00:17:45] that matches, right? Even if you filter it by a specific condition, it still has to do that because it has no idea where that record or what records might match. Yeah. So what we would do is, you know, humans, if we were to do that, databases behave a lot more like humans than you might expect. And what we're doing as humans is we might say, well, I'm gonna keep this organized by last \n\n[00:18:05] name. So maybe I've got all these like allocated tabs, you know, by last name. And I, you know, capture it that way. Maybe you organize it by like, I don't know, location where you met someone or something like that. Whatever way you want to organize it, you might change how you're recording the data to match that. That would be what an index essentially is. It's recording the data sort of \n\n[00:18:25] a second time. It might be if there's a partial recording, because you might only need to record, well, let's say that that initial contact list was numbered from, you know, for every record that you recorded. Well, you might only need to record the number where Kent was in my original contact list, or you might wanna repeat more of the information in your secondary index, right? \n\n[00:18:46] To avoid that extra like page flip. But either way, like you keep that second copy and then you can keep as many of those copies as you need that refer back to the 1 true record of origin. And that's how we could go really fast at that point because we can just flip to the specific page. Maybe we have to scan through a couple records remaining, but for the most part, everything's already narrowed down. Exactly how databases work. \n\n[00:19:06] So your question about memory consumptions and things, there's a lot of like, it depends on the situations, but when you have a query that performs really poorly, especially when it gets into lots of joins and complex conditions, it has to load all of the stuff into memory. Sometimes it can sort of stream it where it's like not all loaded at the same time. Sometimes it has to like build up a lot more to like operate \n\n[00:19:26] on at 1 time, especially if you do things like, I want to pull a bunch of stuff into memory, do like sort of an aggregation in memory that's particularly memory problematic, right? Because it can't, there's like streaming aggregates and there's memory aggregation, diving into too much details, they're like, there's all these things that can happen, right? So having optimal queries, \n\n[00:19:47] usually like with indexing and other solutions also kind of nudges the database in the right direction. So if you can get to a situation like for aggregates where it can stream the aggregate rather than have to buffer it all into memory at 1 time, All these things are ways that you can keep your memory footprint on the database, like sort of equivalent to what your database footprint \n\n[00:20:07] is, and make your CPU go so much farther, right? Like your database CPU should ideally be like almost idle. There's exceptions, right? But if you're doing CPU computation database, it means you're probably doing a lot of scans and memory operations. \n\n[00:20:23] Kent:\nYeah, yeah. And that's a good place to identify that you have some suboptimal query. Like, are you seeing CPU and memory spikes? This is something you told me. If you're seeing those spikes, then something is not optimal. \n\n[00:20:37] Tyler:\nExactly. Like memory, personally, like doesn't always concern me too much because I know the database is going to take so much anyway. Right. Like it wants to take memory. SQL Server is a really fun 1 because it'll just consume memory and not release it back. If you just look at like task managers, it was like, how much is this thing running? It'll just consume as much as it can unless you tell it \n\n[00:20:57] not to, because that's what would make it most optimal, right? \n\n[00:21:00] Kent:\nLike if \n\n[00:21:01] Tyler:\nit can pre-allocate all of this, then it doesn't have to go back to the OS to get the memory every time. So looking at memory. \n\n[00:21:08] Kent:\nNode.js and V8 do the same thing. It's just more optimal. Even though it looks like your app is using way more memory than it actually needs at the time. It'll eat what you give it. So maybe occasionally it'd be a good idea to just test it out and see if your app can run on half as much memory as you're giving \n\n[00:21:28] it. \n\n[00:21:29] Tyler:\nExactly. And that's all by design and intentional. Really cool stuff, like really cool technical solutions to those problems. But that's why usually I look at CPU as a clear symptom a lot of times on databases. Like you said, like if you got CPU, high CPU usage, you'll probably have some suboptimal queries. And also fluctuations \n\n[00:21:49] too I've found is often a symptom of something like I said, that 1 query was averaging 140 to 200. That's a big swing for an average. That usually means like there's some kind of pressure happening that it's not performing consistently. That could be like external pressure. That could be other queries running that are putting, causing this 1 to get delayed, \n\n[00:22:10] or it could be something happening within that query, causing it to run slower. You can see that a lot of times too, with like if you put a limit on something, right? If I say like, just give me the first record. Well, if the first 1 was on the first page, that's gonna be like really fast, whether it had to scan or not. But if it was on the last page, well, you just had to go through everything \n\n[00:22:30] to get there. So you'll see a lot of like fluctuation in the numbers on queries like that. \n\n[00:22:36] Kent:\nYeah, that makes a lot of sense. So with your contact list analogy, something that I think is important to, or useful to call out is that the index that you have is going to have, you mentioned that you might add more than just the number \n\n[00:22:56] of the contact, you might add like their name. And So that way you don't have to go back and do that extra page flip. So would that be like having 2 indexes or like a dual column index? \n\n[00:23:10] Tyler:\nYeah, yeah. It would be called, most databases I think would call this like a compound index or a composite index. So an index can be on 1 column or it can be on really any number of columns you want on the same table. And most database engines in most cases are only gonna use 1 index per table that they had. Say most, because there are like certain \n\n[00:23:30] types of query exceptions, right? But for the most part, if 1 index is found that matches what's needed or there's a close match what's needed for the query being run, the database isn't going to try to join 2 indexes together. \n\n[00:23:43] Kent:\nYeah. \n\n[00:23:44] Tyler:\nGoing back to our human analogy, what would you do if you had 1 like contact list by last name and another by like location? Like how efficient is it for you to like flip to like where's Dodds in my last name? Okay, now where's the like location that I met him and now I have to match these things up like that's just extra cognitive load. Yeah. Faster just to go back \n\n[00:24:04] to the origin and do the rest of the filtering sort of like from there, like in the table level. That's exactly how databases work. So you want to do like compound indexes instead where you stack those columns together. And that will make it be like a single index hit has everything it needs to get there. What you might want somebody to go back to the table for is any additional \n\n[00:24:24] data. You need to look up and this is where the like being explicit about your selection and your query to is really helpful because if your index included like first name and last name, and that was all you needed, then it doesn't have to go back to the table to get anything else. But if you just did the equivalent of like a select star, well, maybe you need a date of birth too. The \n\n[00:24:44] database doesn't know that. So now it has to do an extra lookup back to the original table to get that extra field that wasn't in the index, just for you to throw it away on the application side. \n\n[00:24:53] Kent:\nYeah, I actually hadn't thought about that. But so in lots of Epic web, we're querying the user table and all we need is the user ID. And so I always select the ID in those cases. I tell people like, always put a select. And I hadn't considered the fact that when you do that, if you're only selecting \n\n[00:25:14] indexed columns, or columns that are in the same index at least, then like it doesn't even need to touch the actual data. \n\n[00:25:22] Tyler:\nWhich is pretty cool. Yeah, there's another side effect of that, that if you happen to, what I like to talk about is like, if you happen to go back into that table and you add a very expensive column, like let's say that you add an avatar image and you're just gonna say, I'm just gonna stick the binary right on this user. How many queries in your app are now gonna start returning that big binary data \n\n[00:25:43] accidentally because it was like equivalent of a select star. And now you just see the performance suffer all the way through the app. It's so much easier, in my opinion, to sort of like, as you go, just say this is exactly what I need from this query. And now if I have to do that in the future, I don't have any worries about, well, what's this gonna do to everything else because nothing else \n\n[00:26:03] needed it. \n\n[00:26:04] Kent:\nYeah, yeah. So listen to us here, kids. You gotta put your selects, select what you want. Yeah, that's very interesting. Now, another thing that people talk about, and I'd like to get beyond indexes, but there's still so much to talk about. \n\n[00:26:22] Tyler:\nThere's so much depth. \n\n[00:26:23] Kent:\nBut another thing about indexes that people will talk about is the write speed and the space, the disk space, because these aren't free. It doesn't like come out of nowhere. Like in your contacts analogy, you've got a separate book. Then you know, you've got your main contact book over here but you've got this separate book that has a, you know, pointers over to the regular table \n\n[00:26:44] just to make it easier to find things. If I'm like a person in this context analogy, like I don't want to have 30 other books that I'm carrying around. So yeah, there is like a balance here maybe, or trade-offs. What are your thoughts around that? \n\n[00:27:00] Tyler:\nYeah, I would say for us humans, it's a lot of work to carry a lot of those gun type lists around. For databases, it's, I would say, nearly negligible. And the reason for that is if applications I've worked on, typical applications, are going to be way more read-heavy than write-heavy. I would \n\n[00:27:20] say that's pretty common to see. So, and also we've talked about this before too, that users are way more forgiving of a slow save button than they are a slow page load. It's just something inherent in our brains. We're used to like, this is an expensive thing versus I'm just trying to see some stuff. So I \n\n[00:27:40] would much rather put that load on the, I'll take the right overhead trade off and I'll take the extra disk space too, because the disk space, disk is cheap nowadays, right? Compute is expensive, time is expensive, disk is cheap. So I'll take that extra disk space and I'll take the very small write overhead in most cases, \n\n[00:28:01] with the trade off of my users get to see data really fast and that's what they're doing most of the time. There's exceptions to that, right? Like if you're building a really heavy analytics database, most of this advice probably doesn't apply the same way in general, right? But for most like software as a service apps, e-commerce apps, the things that most developers I think are probably \n\n[00:28:21] building, the most common applications that would hold true, I think. \n\n[00:28:26] Kent:\nAbsolutely, yeah. And another thing that you kind of tuned me in on was even though, like, so in the context analogy, if I add a new contact, I not only have to add it to the contacts list, but I also have to go to every index that is affected and update them in there, \n\n[00:28:46] which takes longer to write it down. But, and that's the same thing in databases. And so a lot of people are concerned, well, okay, so the writes are gonna take a long time, but as you mentioned, users are okay with that typically. And then at a certain scale, like it's not that much longer than it takes. \n\n[00:29:07] And then it also, the index could also potentially speed up the write. Can you explain why? \n\n[00:29:12] Tyler:\nYeah. Yeah. So there's a certain times where the index can help, especially if you're doing like bulk updates. So going back to that like system of record, like you have 1 table that's really the source of truth for all the data. The indexes are really kind of like a replica of that. Well, if you wanted to update like a first name in the table based on a, let's \n\n[00:29:32] say, date of birth as a thing. Well, if you want to run that update just based on date of birth, you have to scan through, just like you would on the query, all the records for the date of birth that matches that and then make the update. So that has to scan the entire table to update like a handful of records. Where if you had an index on data birth in that case, it would first \n\n[00:29:52] use the index to find these are the 5 records or so that I actually care about. And then go back to the table, perform the update and then push that out to like all the indexes, you know, whatever order the database does all those operations in, it's all like a transaction. But essentially, if your updates can do scans just like a read \n\n[00:30:12] can, and if you put the right index in place, you can make the update so much faster that it's actually faster to have the index than it costs to do the additional update. \n\n[00:30:23] Kent:\nYeah, there it is right there, folks. So add your indexes, unless you're building a time series data, crazy amount of data input sort of thing, which you are an outlier, you should know that. I would like to talk about a concern that a lot of people bring up with Prisma, and that is joins. \n\n[00:30:45] People talk about this a lot. In the workshop, we have 1 exercise where we're doing a bra SQL because we need to do a nested order by query so that we can sort users by a certain way. Yeah, there's no chance. I can't even imagine what an API for that would look like \n\n[00:31:05] with the Prisma API currently. I actually do mention in the video that like, I can't see a reason why Prisma couldn't add a drizzle like API in the future. That seems like a reasonable thing it could do in the future which would be sick. But anyway, Prisma does get a fair bit of criticism \n\n[00:31:25] for what a lot of people call suboptimal queries. So I'd love for you to talk about that. \n\n[00:31:32] Tyler:\nYeah, happy to share my opinion of it. I think, you know, you talk to others on the team, you'll probably get like different, you know, sort of take some like some of the history behind it and some of the, you know, the outcomes. And we're definitely embracing the feedback too. And we're looking for opportunities. Like there's the last release had a couple of improvements \n\n[00:31:52] already to leverage some of this better. So there's improvements coming, but we have to be really careful about them because ORMs in general, and sort of like, when you're doing like a drizzle like API or sort of like a query builder type API, you get so much control over all the specific things that you wanna do, that it almost translates \n\n[00:32:12] 1 for 1 with the SQL. Not always, but like it gets really close. For an API like Prisma, it has to run through almost like a processor to see like, okay, how do I turn this JavaScript representation into the actual like SQL queries that need to do the exchange? And databases historically, relational databases are not very good \n\n[00:32:32] at handling like nested data with complex sort of filtering nested deeply. Right. Like you can return, like do joins and stuff. But like, if you. So I come from a C-sharp background too, early in my career and I used ORMs there that would do like these complex join scenarios. And what happened \n\n[00:32:52] is every time I got a reasonably complex query, the whole thing would just fall apart. And I would end up splitting it down into multiple individual queries anyway, because it would always try to build a single table results that coming back from the query, like whatever I gave it as like an expression, like you would in Prisma, it would try to build 1 monolithic SQL query for that. \n\n[00:33:13] And what you end up having is like, if I have all these joins, I have data that's repeated, you know, multiple times across rows. Cause it's like, this thing has 10 sub records. So how do I model that in a single table? If you apply filters on those nested things, it's like, depending on how it tries to generate the SQL, like where do I put this condition? Do I put it in an optimal \n\n[00:33:33] place? And especially whenever you have a forked sort of relationship in a single query. So you've got like a parent that now needs like 2 different child entities and those might go multiple layers deep. Well now it's like the query is taking 2 different join paths. And they're like, if you were to write that by hand, it's not really clear what exactly \n\n[00:33:53] you would write, in my opinion, like, to do that, I would probably write 2 separate queries to get. So Prisma takes a pretty, like, simple stance to that. And It says, well, every layer is more or less like a SQL query. And what I've found personally in my experience is that is like super optimal for most workloads because it's very clear \n\n[00:34:13] to index. I can see like if I log my Prisma queries which I highly suggest you do, any ORM, I would suggest you log the SQL, just especially on development, just to see what it's doing. I can take that, drop it into like explain, analyze, and it says, here's where you're missing an index, more or less. And it's very easy for me to say like, okay, I put an index here, that query is now faster. \n\n[00:34:35] This overall Prisma query now that might've been multiple other queries in it is now faster. Where would you get these like really complex ones? Sometimes it's not clear which specific direction I need to take the index. And sometimes the optimizer doesn't even, like in my experience, those other C sharp engines that I've run, \n\n[00:34:55] the optimizer in SQL server would pick like, to use an index I totally didn't expect it to, but it was because the query was so complex that the optimizer just chose like what it thought was the best path, but maybe I knew wasn't the best path. So yeah, I'm not saying that it's not going to be beneficial when we get there. I think it will be tremendously beneficial, \n\n[00:35:15] but I think it's right now it's covering a breadth of workloads pretty well. And the penalty that you could pay on a really like massive, nasty query is so much worse than the penalty that's paid on like little, small queries running, in my experience. \n\n[00:35:34] Kent:\nThat is so good. That makes so much sense. And like from my perspective, because I ship SQLite to production, I don't care how many queries are going because like it's on disk. So like you send tons of queries, it doesn't matter. It's fine because \n\n[00:35:54] we're just, there's no latency. It's amazing. So the N plus 1 problem that they always talk about with ORMs, It's not really a problem with SQL either. Yeah, that is very interesting that exploding those things out into a giant query, it feels more, it feels \n\n[00:36:14] better. But I actually hadn't considered the fact that when you're building out this query, the result is flat, right? Like that's how SQL works. And so you will absolutely have repeat data in there. \n\n[00:36:28] Tyler:\nYeah. And that's why I encourage, Like if you ever get a curiosity of like, oh, wouldn't this be really like so much better with the joins, try to write it by hand 1 time. If you have like a very linear sort of relationship, it's not so bad. You do have repeat stuff sometimes, but like it's not terrible. If you get into those like branching scenarios, that's where like for me it's like, okay, I don't even know \n\n[00:36:48] which way I want to take this. Like I could go this way and then it's like a suboptimal query, but I'm probably going to lean towards multiple queries like every time anyway. There are some like newer tools in the databases and some engines to like help with some of this. That's I think where the ORM team might be exploring some of those things. I don't know exactly like which directions it's \n\n[00:37:08] going. Yeah, I just know it's like a big topic for the team. But yeah, There's ways you can sort of like do JSON, you know, sort of data to like get subgroups and stuff back in certain formats. Back when I was doing this in like .NET world, that didn't exist, right? Yeah. So we were just like exploding this single table result set. I ended up building \n\n[00:37:28] something that behaved very similar to Prisma, like, I don't know, 7, 8 years ago, because of that, I was hitting that wall of like, I'm trying to do, this was just before GraphQL came out and I was trying to build something similar to GraphQL. I wanted to have this like thing I could talk to my front, or from my front and ask for specific fields to my API \n\n[00:37:49] and it could do all the filtering and stuff for me. And I ended up landing on, well I just need to do this layer by layer because otherwise I'm hitting this wall of, this is a really suboptimal query and I can't optimize it with indexes because the optimizer just discards them. \n\n[00:38:05] Kent:\nYeah, yeah, because it can't make sense of the complexity. Yeah, yeah, that's very interesting. So I'm sold. It's not so simple as the feature exists, use it. There's a time and a place for that. And I am satisfied with knowing that \n\n[00:38:25] the team is aware, of course, of occasionally in some instances, join being more efficient than what is being done. I really appreciate tools that say, the default is great in like 90% of cases and in 10% of cases, it's not \n\n[00:38:45] great. And we can optimize those cases rather than optimizing every case. \n\n[00:38:51] Tyler:\nYeah, absolutely. And that's what I like about like the query raw example you mentioned earlier. Like I love that escape hatch because I always felt like with using Prisma prior to joining the team, I always had this option of like, if I can't model this the way that I want to at Prisma, I can get back into SQL world and I can write something that does exactly what I want it to, right? And \n\n[00:39:11] I do that so rarely that the benefit of the ORM is still very much there. And when I've looked at other options too in the past that are more like query builder type tools, I personally don't lean towards that type of API because I find that I'm just repeating what I already know in SQL. Like I'm having to go \n\n[00:39:32] reference like this API spec to see like, how do I write what columns I want to select? How do I write how I do this filter? Where like at that point, I could have just wrote the SQL by hand. I don't think that's true for everyone, right? Like, and there's like, I lose type safety, you know, when I do that. But like I do it so infrequently that I'm happy with it. \n\n[00:39:52] Yeah. And I love your option too, the type safety using Zod afterwards. Like if you don't have 10,000 records or whatever that you have to like churn through, just throw it through a Zod parser and see what it is or just do it in development mode to see like, make sure it matches up right. That's like a nice sweet spot for me. \n\n[00:40:09] Kent:\nYeah, yeah. You know, I actually hadn't thought about that. The big idea behind these query builders is that like we're totally type safe and of course they're not running a runtime type checker. So they're development type safe, which is, that's what we're looking for most of the time when we're talking type safety. You can do the same thing with Zod. But \n\n[00:40:30] like I hadn't considered the fact that it is an API, it's not exactly SQL. And so there is a little bit of difference there. And I'm not a super fan of writing SQL. In fact, in the videos where we're doing SQL, I have 1 video where \n\n[00:40:50] I have GitHub Copilot, do like, I give it the instructions for the exercise and I say, okay, do this, and it did, and it was perfect, it was awesome. And that's 100%, well, it wasn't perfect, I fixed like 1 or 2 things, but like that is how I recommend people write languages they're unfamiliar with. And you know, it's not like you just ship that and \n\n[00:41:10] pretend and not even test it. So you test it and you feel good about it and then you move on. So I like SQL and I think it's a really, really powerful language. I don't mind having to dip in and write it manually occasionally because of all the other things that you get from Prisma outside of that. \n\n[00:41:27] Tyler:\nYeah, absolutely. And I think like that goes to like sort of a fundamental principle I have to have, like just the knowledge transfer, the transferability of knowledge across things that I work on, right? That's like something I love about Remix is I feel like all the things I knew from working in the browser and like on web platforms prior to that, like just work the way I want them to in Remix. And I feel like what \n\n[00:41:47] I've learned in Remix also translates to whatever I might use in the future because it's just platform APIs. And that's sort of where SQL fits in some ways to me of like, I learned this once and it more or less translates across Postgres and MySQL and SQLite and all these like databases that use SQL as a language, all these like concepts \n\n[00:42:08] and everything like mostly work across them, where like if I learn a specific API for something, like what happens when the next thing comes out and this thing is no longer relevant. I have to relearn all this stuff again. Not to mention like reviewing the query after it's generated, like it's always review the query afterwards, regardless \n\n[00:42:28] just to see like what it did. It's good to have some knowledge of like SQL to be able to review that and see that it did more or less the optimal thing for your use case. \n\n[00:42:38] Kent:\nYeah, yeah. I think it's probably fair to mention also though, that Prisma is not exactly transferable knowledge either. It's very much \n\n[00:42:47] Tyler:\nlike, yeah. \n\n[00:42:48] Kent:\nBut when it comes down to, okay, I have to step outside of Prisma. I do prefer to step into standards, which I think is pretty cool. \n\n[00:42:58] Tyler:\nYeah, it's absolutely true. \n\n[00:43:00] Kent:\nSo, you know, we're over our time that I was anticipating already, but I really would like to touch on this because I think a lot of people are gonna be thinking about this. So if you've got the time, then I'd like to ask you about your opinion on the database that we're using in Epic Web and in the Epic Stack. So I think a lot of people, when they first \n\n[00:43:20] see that we're using SQLite, they're thinking, oh, well that's just to make the workshop easier, right? Like I can literally commit the database to the workshop so that your data looks exactly the same as my data and it's really nice that way, despite seeding and stuff. Like even the IDs are exactly the same, which is cool. So that is a side \n\n[00:43:40] effect. That's not the reason we're using SQLite. The reason I use SQLite is because I think it's a great production database and I'm using it in production for years now and it's awesome. But there are other databases I've used others myself so I'd love to hear your thoughts around using SQLite and cases where you think it might not be suited. \n\n[00:44:01] Tyler:\nYeah I think if you had asked me a few years ago, I'd have been like shocked, like SQLite in production, like what are you talking about? But that to me was not so much the actual SQLite, I guess sort of like technology of it. It was the fact that the underlying engine didn't have these tools available like replication \n\n[00:44:23] or the like distribution problem where like I'm essentially saying like this database is running on a disk somewhere on a single node and I've got a point of failure now. Yeah But that's all changed and it's actively changing right now, which I think is really fascinating. I've been following a lot of these companies that are doing this. And I'm seeing it more \n\n[00:44:43] and more as being like, I'm glad that that's where EpicSec is taking it. Cause I think that's going to be like a next wave of things. Like these other databases are really, really good. Most of my experiences with Postgres and SQL Server in my career, and I've gotten really far on them. Like that example I shared earlier, like that was with Postgres. And I still like those databases, \n\n[00:45:03] but I think that SQLite's sort of been untapped because it didn't have these things that you needed to run a really like high scale system. And now it's getting that, but it's bringing with it the benefits that it still had in that sort of like embedded systems environment, which is where it's really like cool to me. Like these different vendors are taking \n\n[00:45:23] it. Like I think flies is a virtual file system approach to the replication. Super fascinating to see like how that works. There's also I think it's torso that has done a fork of SQLite into libsql, and adding things like a write-ahead log, which is essentially how replication happens. Like it's a change \n\n[00:45:43] stream of all the events happening in the database that can then broadcast to every other node you have throughout the world. That brings like all those replication concerns forward. I think it's gonna be a really good choice. And like I said, too, if you ever think like, I wanna use Postgres or MySQL in my production environment. Well, the things that you learn \n\n[00:46:04] working on SQLite, a lot of it can transfer over. Prisma is not always transferable knowledge, but 1 nice thing is that you can mostly switch from SQLite to Postgres or MySQL, and a lot of things do work that way. Yeah. So yeah, I think it's a great choice. I think we'll still see improvements on some of the tooling, the \n\n[00:46:24] advanced tooling. Like when I do performance insights, like we've looked at the explain plan before, My complaint has always been I get so much more out of SQL Server or Postgres than I do out of SQLite. But I think that will change too. We'll continue to see, I think that's been a symptom of SQLite not being as used \n\n[00:46:44] in these types of environments. And now that it is, we're gonna see more tooling come for that too. \n\n[00:46:51] Kent:\nAnd I think that the technology speaks for itself as something that is worth investing that type of effort into. \n\n[00:47:00] Tyler:\nYeah, \n\n[00:47:00] Kent:\nI completely agree. And I migrated from Postgres to SQLite, which is kind of the backwards for a lot of people, but not for long, I don't know, we'll see. But yeah, Prisma made that like way easier than it should have been. So yeah, \n\n[00:47:20] that's, you know, a win for an ORM. And actually, so you mentioned Fly and Terso. There's also Cloudflare Durable Objects is built on top of SQLite too, which is like, I mean, that's pretty hardcore. So. \n\n[00:47:36] Tyler:\nYeah, I've been looking at D1, I think is there, I think it's in beta right now. There's a SQLite offering and it is very cool. I believe there's gonna be a lot of exciting stuff coming for that when it gets out of the beta phase. Yeah, \n\n[00:47:54] Kent:\na lot of benefits to SQLite and solving, like you said, solving the distribution and single point of failure problems. Kind of now that those are being, you know, I wouldn't say that they're solved. There's still like some challenges with those, but like there is a path forward for all of that. \n\n[00:48:13] Tyler:\nAnd it's so cool how, Like I said earlier, it brings those benefits with it too. Like when you like, is it running the queries against SQLite on fly is so fast that you don't even notice some of the penalties you get. Like index is still a help, but some of the other things that we've been concerned with in the past, I think, like latency between \n\n[00:48:33] the database and the application. Those things just disappear. Even like, you know, I was talking about the CPU and memory of that database instance I had, like that wasn't the application, that was the database provision. Like in SQLite, you don't even really have that concern. It's just part of like your application in many ways. \n\n[00:48:52] Kent:\nYes, and that can't be understated. That was 1 of the main reasons that I switched or started thinking about switching from Postgres to SQLite was to eliminate the extra service that I had running. Because I had my application, it's still distributed all over the world, but that's not very useful if your data isn't also distributed all over \n\n[00:49:12] the world. And so I had Postgres and ReadReplicas in all those places, And so I had twice the number of services. I also had Redis actually in all of those regions. So I had 3 times the number of services. And then I switched over to SQLite and used SQLite for my cache as well. And \n\n[00:49:33] I cut my services to a third. That was nice. \n\n[00:49:38] Tyler:\nIt's cheaper. Fewer things to fail. \n\n[00:49:40] Kent:\nYeah, fewer things to fail. Yeah, actually, that's funny, because SQLite was like single point of failure, and now I'm like, I don't have that problem because it's distributed, but also I have newer points of failure, which is pretty sweet. \n\n[00:49:53] Tyler:\nAnd additive points of failure too, I haven't really thought about this before, but if your application is down, how useful is your database? Yeah, yeah, sure. So, there's arguments to be made either way, I guess, that like your data, like I said earlier, database is your most critical thing, but if you move it to be part of your application, you only have 1 thing that's either up or down now. Yeah. \n\n[00:50:14] Something to think about. \n\n[00:50:16] Kent:\nYeah, it's very interesting. Yeah, SQLite is phenomenal. I feel like there was something else I wanted to mention about it. But yeah, I think that's all that I got. This conversation has just been really fun for me, Tyler. Thank you for giving us some of your time to chat about these things. Is there anything we didn't talk about that you wanted to make sure to \n\n[00:50:36] bring up? \n\n[00:50:36] Tyler:\nOh, no, I think we're good. I always appreciate talking with you, Ken. It's a pleasure to be here. \n\n[00:50:41] Kent:\nYeah, thank you, likewise. And what is the best place for people to get in contact with you or the Prisma team or if they have any follow-up questions? \n\n[00:50:51] Tyler:\nYeah, you can find me on Twitter. RTBinfield's my name on pretty much everything, Twitter X, whatever you prefer to call it. Discord as well, RTBinfield, I'm pretty responsible on there. For Prisma, we have our Prisma handle on Twitter. We're very active on there. And we also have our Discord and Slack. I actively look at the Discord quite a bit \n\n[00:51:11] and enjoy working there. So yeah, check out the Prisma Discord, hit me up, ask me any database questions. I love tuning databases. Throw me your best tuning scenarios and I'll see what I can crack. \n\n[00:51:23] Kent:\nAwesome, that sounds great. Okay, very good. Actually, you know what? There was something that I wanted to mention. Because earlier you, I remembered the thing, earlier you mentioned that in SQLite, it's some of the indexes are less important, still important, but maybe a little less so, just because of the nature. \n\n[00:51:43] And I just wanted to double click on that, which is a phrase that I don't use very often. And just say, like, in my database on my website, I have over half a million rows. I should look again, but I have, you know, it's not a small amount of data. For lots of the apps that people watching are building, unless you're working \n\n[00:52:03] at Amazon, you're probably not at a half a million rows. There are just tons of apps that aren't all that huge. So anyway, I feel like I have a pretty sizable set of data. And on every page load, I execute this query, or this set of queries, to determine the \n\n[00:52:23] team rankings. So on my site, you can log in and you choose a team, and based on which blog post you've read, you score a point for your team. So on every page load I wanna calculate those team rankings and just by nature of the way that that calculation has to work, because I do, how recently active, or how \n\n[00:52:43] many recently active members there are. Well to know how many recently active members there are, you need to know how many post reads they've had in the last 6 months. And all, like, there's a bunch of stuff. And they have to have read something in the last year to be counted as recently active. So there's, like, it's more complicated than you might think. So at the end of it all, it's 9 queries that \n\n[00:53:03] I have to execute to determine the rankings. And before I had your help on indexing the tables, these queries just took way too long, especially since they're every single page load. So I stuck a cache in front of it and it's fine. Like it would just update every 60 seconds, no big deal. So \n\n[00:53:24] yeah, what's interesting is once you helped me with the index, that went from like a couple seconds for all of those. I think it was maybe just like 2 seconds, but certainly way too long for every page load. So it went from like a couple seconds down to a couple milliseconds. Just even in that setting, adding indexes. I mean, it's a lot of data, so \n\n[00:53:44] it kind of makes sense, but indexes, they're real. And I still have the cache there because it takes more effort to remove it than to just leave it. So, yeah. \n\n[00:53:54] Tyler:\nYeah, indexes are huge. I think most index performance still helps SQLite. It's a lot of the other things that we were optimizing, like the network stuff that mostly goes away, right? Like geographic location was a big 1, right? Like how close can you put your database to your application and then how do you, like you're talking earlier about how you replicate it to \n\n[00:54:14] be everywhere your application is. Like those are things that with SQLite, we don't really have to think about as much, if at all. But for most part, your indexes are still gonna help. The ones that are gonna be maybe, if anything less beneficial, like if you have a table with very low numbers of records, scanning it with SQLite is gonna be super fast. Yeah. If it's a hundred records, \n\n[00:54:34] you're probably not going to notice an index benefit, but at half a million, it's going to be very obvious. Yeah. Yeah. All \n\n[00:54:44] Kent:\nright. Hey, thanks so much, Tyler, again. And yeah, we'll chat with you all later \n\n[00:54:50] Tyler:\nThanks. Bye everyone"
          },
          "duration": 3291.766667,
          "_rev": "WsAmd18YA1frbQaWBZpnjm",
          "_type": "videoResource",
          "_createdAt": "2023-10-18T20:33:38Z",
          "state": "ready",
          "title": "Tyler Benfield.mp4",
          "_updatedAt": "2024-03-19T20:25:20Z",
          "originalMediaUrl": "https://egghead-video-uploads.s3.amazonaws.com/epic-web/interviews/Tyler+Benfield.mp4"
        },
        "_id": "B9MrGEg0NpGWTknnF8PkYJ",
        "_updatedAt": "2023-10-18T20:47:30Z",
        "description": "Tyler Benfield, Staff Software Engineer at Prisma, dives into database efficiency, optimization, and backend-frontend synergy. ",
        "slug": "the-crucial-role-of-database-optimization-with-tyler-benfield",
        "solution": null,
        "_type": "interview",
        "title": "The Crucial Role of Database Optimization with Tyler Benfield",
        "body": "Tyler Benfield, a staff software engineer at Prisma, joins Kent to explore the world of databases.\n\nThey begin with a discussion on the effeciency of databases. It's important to make databases efficient, particularly through optimizing queries, according to Tyler.\n\nThe discussion shifts to concrete techniques for improving database performance, from self-indexing to enterprise-level strategies. Tyler shares specific examples from his work, such as how adding a single index resulted in a 20% reduction in CPU usage and a 30% decrease in active connections.\n\nBoth speakers underscore the importance of backend optimization as a means to improve frontend performance. This approach minimizes the need for elaborate frontend loading indicators, resulting in a smoother user experience.\n\nTyler elaborates on the pros and cons of using Prisma and other ORM tools. While these tools are beneficial for handling simple queries, they often fall short when tasked with more complex queries and joins.\n\nThe viability of SQLite as a production database is also discussed, especially in light of advancements in replication and distribution technologies.\n\nThe conversation wraps up with an emphasis on the importance of having skills that can be applied across different projects and platforms. Both Tyler and Kent agree that knowledge of SQL is one such skill that is universally applicable.\n\n## Resources\n\n- [Tyler Benfield on Twitter](https://twitter.com/rtbenfield)"
      },
      {
        "_type": "interview",
        "title": "Product Management with Nevi Shah",
        "body": "Nevi Shah, a product manager at Cloudflare, shares her journey from academia in computer science and business to finding her professional niche.\n\nInitially embarking on a career in consulting, Nevi found her true calling in product management where she could marry her technical and business acumen.\n\nNevi elaborates on the multi-faceted responsibilities of a product manager, emphasizing the necessity of understanding user needs and converting them into actionable development tasks. Her interaction with various types of developers is not just transactional; it involves building relationships and comprehending their unique challenges and use cases.\n\nThe conversation transitions to the subject of serverless architecture and distributed applications. Nevi introduces Cloudflare Pages as a potent tool that aligns with developer workflows by eliminating infrastructure management headaches.\n\nAs the discussion winds down, Nevi and Kent explore various hosting options. While Cloudflare is a robust platform, it's not the sole player in the field. Alternatives like Fly.io cater to specific needs with long-running servers.\n\n## Resources\n\n- [Nevi Shah on Twitter](https://twitter.com/nevikashah)\n- [Cloudflare](https://www.cloudflare.com/)\n- [Fly.io](https://fly.io/)",
        "slug": "product-management-with-nevi-shah",
        "_id": "umRzgEK3x2YA3YfFYHXgsD",
        "_updatedAt": "2023-10-19T00:29:25Z",
        "description": "Nevi Shah, Cloudflare PM, blends tech and business expertise, highlighting user-centric product management and Cloudflare Pages' developer-friendly approach.",
        "videoResource": {
          "duration": 2161.133333,
          "_id": "Davc6tzHYCp36XjM2FqwOs",
          "_createdAt": "2023-10-19T00:00:26Z",
          "_type": "videoResource",
          "_updatedAt": "2024-03-19T20:25:18Z",
          "originalMediaUrl": "https://egghead-video-uploads.s3.amazonaws.com/epic-web/interviews/Nevi+Shah.mp4",
          "_rev": "9CeTKuUcQZRsVUft8VlarO",
          "muxAsset": {
            "muxPlaybackId": "gm9D0000RDQDbmZf02kDMwtg02hlpNAMkBAcVIbm402VNtB4",
            "muxAssetId": "YE7Zd00EDmvRvE8JgR502pvWAd02tVOkFHgfdAQn005j8X00",
            "_type": "muxAsset"
          },
          "transcript": {
            "srt": "1\n00:00:01,380 --> 00:00:10,139\nHello, everybody. I'm super excited to be joined by Nevi. And actually, I didn't ask how to pronounce your last name. Is it Shaw? It's Shaw. Okay, great. Nevi Shaw.\n\n2\n00:00:10,440 --> 00:00:14,920\nNevi and I met at RemixConf this last year. She proposed to speak\n\n3\n00:00:15,600 --> 00:00:16,100\nalongside\n\n4\n00:00:16,780 --> 00:00:19,320\nIgor Minar of the AngularJS\n\n5\n00:00:19,820 --> 00:00:22,980\nteam fame. He's now over with Nevi at CloudFlare.\n\n6\n00:00:23,680 --> 00:00:24,180\nAnd\n\n7\n00:00:24,660 --> 00:00:30,119\nyeah, so they spoke together at RemixConf this year. It was awesome to have them speak.\n\n8\n00:00:30,660 --> 00:00:37,580\nCloudflare is among the companies that is pushing the edge like further than anybody else that I know. Cloudflare is just awesome. So,\n\n9\n00:00:38,140 --> 00:00:48,140\nand it was just so wonderful to get to know Nevi at that conference and I'd like you all to get to know Nevi. So could you give us a little intro to yourself? Sure. Hey everybody, I'm Nevi.\n\n10\n00:00:48,740 --> 00:00:52,160\nI am, like Ken said, a product manager at Cloudflare.\n\n11\n00:00:52,800 --> 00:00:54,739\nI joined about 2 years ago and\n\n12\n00:00:55,340 --> 00:01:01,220\ntotally fell in love with the web development space as much as I hope you are all doing as you're learning and going through this course.\n\n13\n00:01:02,080 --> 00:01:05,700\nBut yeah, super excited to talk a little bit about product management and web development.\n\n14\n00:01:06,580 --> 00:01:08,360\nSo yeah, excited to get into it.\n\n15\n00:01:08,860 --> 00:01:10,620\nAwesome, yeah, that is great.\n\n16\n00:01:11,400 --> 00:01:11,900\nSo\n\n17\n00:01:12,440 --> 00:01:12,940\nto\n\n18\n00:01:13,260 --> 00:01:14,540\nget us going,\n\n19\n00:01:15,040 --> 00:01:16,700\nI wanted to get to know\n\n20\n00:01:17,080 --> 00:01:22,780\nyour history and how you got into web development. I actually don't think that I know. So I'm very curious.\n\n21\n00:01:23,260 --> 00:01:24,740\nHow did you get into web?\n\n22\n00:01:25,120 --> 00:01:28,280\nYeah, so I had a really interesting path here.\n\n23\n00:01:28,620 --> 00:01:29,479\nI started off,\n\n24\n00:01:30,100 --> 00:01:30,840\nI studied\n\n25\n00:01:31,300 --> 00:01:34,580\ncomputer science business, had this like really integrated degree in college,\n\n26\n00:01:35,580 --> 00:01:38,040\nknew I really loved tech, but also\n\n27\n00:01:38,420 --> 00:01:42,220\nwanted the business side of it, which I feel like is a cliche. I feel like everyone says that.\n\n28\n00:01:42,700 --> 00:01:46,800\nI truly like wanted kind of this mix. Like I loved kind of getting my hands dirty. I loved\n\n29\n00:01:47,440 --> 00:01:48,619\nhands on keyboard work.\n\n30\n00:01:49,060 --> 00:01:54,440\nBut also really like people. I love speaking. I love making new friends. I love building relationships.\n\n31\n00:01:55,400 --> 00:01:58,220\nAnd so I started interning a lot in the product management space.\n\n32\n00:01:58,940 --> 00:02:01,700\nDidn't know what industry I wanted to go into. I started\n\n33\n00:02:02,220 --> 00:02:10,300\nwhen I graduated in consulting, thinking like, hey, that's going to give me a nice kind of understanding of different industries that I could go into.\n\n34\n00:02:11,420 --> 00:02:20,420\nBut then I was like, no, you know what? I really want to pick an industry. And this role at CloudFlare kind of fell in my lap. I had a friend that reached out and said, Hey, we're hiring.\n\n35\n00:02:20,940 --> 00:02:22,320\nDo you want to give it a try?\n\n36\n00:02:22,800 --> 00:02:26,620\nAnd when I've heard about CloudFlare, I think everyone kind of thinks of security and performance.\n\n37\n00:02:26,940 --> 00:02:37,620\nAnd no 1 really thinks about the developer platform. So when I saw the product, I was like, okay, this is interesting, except I've never had a product where I build for users that are developers.\n\n38\n00:02:38,440 --> 00:02:43,240\nI always work with developers like next to me. So it was a super interesting concept.\n\n39\n00:02:44,280 --> 00:02:54,020\nBut yeah, I interviewed for this job and they, I was like, Hey, I don't really have a lot of experience in web development, but I really love the company and I love the mission and I want to join.\n\n40\n00:02:54,840 --> 00:03:01,980\nSo in April, like 2 years after I did consulting for 2 years and then I joined Cloudflare and they have basically\n\n41\n00:03:02,540 --> 00:03:06,360\nbeen really growing their developer platform. So I started off\n\n42\n00:03:07,300 --> 00:03:15,280\nPMing for a product called Pages, which I'm actually still the PM for. Cloudflare Pages is our build and deployment platform for full-stack applications.\n\n43\n00:03:16,240 --> 00:03:24,180\nIt's so funny, I look back to some of the days where I was first starting off and I had no idea what I was doing, like seriously had no idea what I was doing.\n\n44\n00:03:24,840 --> 00:03:40,160\nI would get like feature requests and customer escalations and things that would just come across my plate. And I would be like, I don't even know what this means. Luckily, I had really great friends on my team. I had a lot of really great work resources. I had a really great mentor, a really great boss,\n\n45\n00:03:40,460 --> 00:03:42,040\nRita Krasov, and she\n\n46\n00:03:42,340 --> 00:03:45,560\nheld my hand through it all and was basically like, this is the world of web development.\n\n47\n00:03:47,220 --> 00:03:51,360\nAnd that's kind of how I got here. And now I feel like I can hold really great conversations.\n\n48\n00:03:51,680 --> 00:03:55,400\nSpeaking at RemixConf was like a super huge career milestone for me.\n\n49\n00:03:55,840 --> 00:03:56,660\nAnd I remember\n\n50\n00:03:57,040 --> 00:03:59,700\nsitting in the conference and I was like, wow, like\n\n51\n00:04:00,480 --> 00:04:05,240\n2 years ago, I would have no idea what everyone was saying. And it was like such a\n\n52\n00:04:05,860 --> 00:04:10,580\npoint of pride for me to be able to sit there and listen to these conversations happening.\n\n53\n00:04:12,040 --> 00:04:14,280\nBut yeah, I totally fell in love,\n\n54\n00:04:14,640 --> 00:04:18,899\nso much so that I love to listen to what they've podcast. I love to\n\n55\n00:04:19,399 --> 00:04:22,180\nhack on my own. I love to go to meetups.\n\n56\n00:04:22,960 --> 00:04:26,600\nI just feel like it is such a community full of character.\n\n57\n00:04:27,180 --> 00:04:30,580\nYou can meet so many different types of people. They're building so many cool things.\n\n58\n00:04:30,900 --> 00:04:32,940\nAnd it's a space I'm just super excited about.\n\n59\n00:04:34,060 --> 00:04:43,580\nVery cool. So you graduated with a CS degree. So obviously you're coding before you got into product management. And now you're still coding as a product manager.\n\n60\n00:04:44,440 --> 00:04:46,280\nThat actually seems pretty unique\n\n61\n00:04:47,880 --> 00:04:54,520\nfrom my perspective for product managers. Like in the product manager circle, are you pretty unique that you're actually still coding?\n\n62\n00:04:55,080 --> 00:05:07,860\nNo. In fact, like I would not even call myself that great of a like developer. I think there are definitely PMs on my team that are phenomenal. And I'm always in awe of them. When I\n\n63\n00:05:08,680 --> 00:05:11,820\nstudied in school, I was more on the data science route.\n\n64\n00:05:12,240 --> 00:05:12,940\nSo like\n\n65\n00:05:13,260 --> 00:05:18,400\nI had classes in JavaScript and Java and like did a couple of web development courses, but\n\n66\n00:05:19,860 --> 00:05:21,360\nit was not my bread and butter.\n\n67\n00:05:22,280 --> 00:05:27,760\nYou can give me a Python assignment, you can have me do a bunch of data querying, that's all my stuff.\n\n68\n00:05:28,260 --> 00:05:30,460\nI actually also got a master's in data science.\n\n69\n00:05:31,380 --> 00:05:37,360\nBut web development is totally new for me. So it's actually, I feel like I'm like learning it all over again.\n\n70\n00:05:38,540 --> 00:05:42,740\nSo I definitely feel like it helps me understand things a little bit better, but\n\n71\n00:05:43,040 --> 00:05:44,120\nI think it's actually\n\n72\n00:05:44,540 --> 00:05:45,220\nan advantage\n\n73\n00:05:46,060 --> 00:05:46,780\nto not\n\n74\n00:05:47,300 --> 00:05:52,160\nbe who I'm building for. I think that is actually unique for me\n\n75\n00:05:53,000 --> 00:05:55,220\nto come into a project and say,\n\n76\n00:05:55,580 --> 00:06:00,520\nokay, I know nothing about the user. And that actually forces me to do my job better and to actually\n\n77\n00:06:00,920 --> 00:06:10,420\nlike go to users and not have a bias or not have an opinion on what this feature should be or what the product should be. In fact, my user doesn't inform me.\n\n78\n00:06:10,760 --> 00:06:16,620\nSo it definitely helps me to process information, but it's good that I'm not immediately jumping to solutioning and instead\n\n79\n00:06:18,280 --> 00:06:21,720\nforcing myself to go to customers and go to the user so I build the right thing.\n\n80\n00:06:22,540 --> 00:06:24,560\nYeah, that is probably\n\n81\n00:06:24,960 --> 00:06:26,260\n1 of the most important\n\n82\n00:06:26,640 --> 00:06:34,240\naspects of the PM, right, is being able to translate the user's needs into what the developers are building, I guess. Yeah, exactly.\n\n83\n00:06:36,060 --> 00:06:38,680\nSo in the workshops, we have this,\n\n84\n00:06:39,140 --> 00:06:42,260\nwe have these little emojis that signify what\n\n85\n00:06:43,580 --> 00:06:50,580\nthe user or the developer who's going through the exercises supposed to do. 1 of them is Cody the koala that's I've got here.\n\n86\n00:06:52,040 --> 00:06:57,540\nKoala is all over my stuff. Cody is the primary 1 telling people what to do in the exercises.\n\n87\n00:06:58,140 --> 00:07:13,580\nAnd then we have Kelly the coworker, that's the elf emoji. And we've got, and she does like a ton of work for them as they're going through the workshops. And we've got Hannah the hundred and Chuck the muscle. I can't remember, like there are a bunch of others, but 1 of them is,\n\n88\n00:07:14,720 --> 00:07:16,340\nis Peter, the product manager.\n\n89\n00:07:16,800 --> 00:07:17,300\nAnd\n\n90\n00:07:17,640 --> 00:07:18,420\nyeah, so\n\n91\n00:07:19,020 --> 00:07:22,560\nyou are represented as a product manager in the workshops.\n\n92\n00:07:23,360 --> 00:07:25,020\nAnd Peter's job is to\n\n93\n00:07:25,340 --> 00:07:29,940\nlet people know the use cases that they're trying to solve as they're going through\n\n94\n00:07:30,420 --> 00:07:35,740\nthe exercises. So it's like use case driven rather than just like write this code for who knows why.\n\n95\n00:07:36,720 --> 00:07:39,120\nSo what are the types of things in,\n\n96\n00:07:39,800 --> 00:07:50,260\nI guess I tried to do my best to represent a product manager as I was, you know, cause I am the 1 who's writing what the PM is saying, but what would you say are the types of conversations\n\n97\n00:07:50,660 --> 00:07:52,500\nthat you typically have with developers\n\n98\n00:07:53,920 --> 00:07:55,940\nas part of your job as a PM?\n\n99\n00:07:56,260 --> 00:07:58,820\nYeah, I mean, I think it really depends, right?\n\n100\n00:08:00,240 --> 00:08:13,220\nAs a PM of a product that is used by so many different types of developers, I think my conversation is definitely different based on whom I'm speaking to. I'll give you an example. I think like our users are kind of segmented in different\n\n101\n00:08:14,180 --> 00:08:26,100\nclassifications. So you have kind of like independent developers who are sort of dipping their toes into development or are working on personal projects. We also have framework authors, which we work a lot with. We also have,\n\n102\n00:08:27,380 --> 00:08:37,960\nEnterprise developers who are working for like large scale companies. And so every time I talk to a user, my first question will always be like, tell me a little bit about yourself. I like to understand their experience level.\n\n103\n00:08:38,460 --> 00:08:39,500\nI like to understand\n\n104\n00:08:39,860 --> 00:08:42,419\ntheir familiarity with products or their familiarity\n\n105\n00:08:42,980 --> 00:08:45,420\nwith, yeah, different features on the product.\n\n106\n00:08:46,060 --> 00:08:48,740\nAnd then my next question is always, what are you trying to build?\n\n107\n00:08:49,180 --> 00:08:52,080\nI think the most important thing to understand is\n\n108\n00:08:52,480 --> 00:09:03,900\nwhere does this developer want to go? And sometimes they don't even know where they want to go, or they tell you a very like short-sighted vision. And I already can think like, they're going to need this later. And this is where the application is going to go.\n\n109\n00:09:04,620 --> 00:09:06,000\nSo a lot of my conversations,\n\n110\n00:09:06,760 --> 00:09:21,840\nI like to have like very personal relationships with my users. I do like to kind of get to know them and characterize them. I write a lot of personas in the product requirements documents that I write. So I do like to get to know them. And then it's really kind of like, yeah, use case driven. So like, what are you building? How big is your team?\n\n111\n00:09:22,420 --> 00:09:25,380\nHow many hours are you developing in a day? Or\n\n112\n00:09:25,920 --> 00:09:36,140\nwhat does your stack look like? What does your setup look like? What does communication and collaboration look like on your team? So I guess those are really specific to the product that I'm building right now.\n\n113\n00:09:36,500 --> 00:09:37,000\nBut\n\n114\n00:09:37,380 --> 00:09:52,480\nit almost feels like an interview, kind of like what you're asking me. Every time I talk to you about a news case, it's almost like I want to get inside your head. I want to know exactly what you're thinking so I can think 10 steps ahead of you. So it almost feels like, yeah, it feels like an interview almost, but almost like you're\n\n115\n00:09:53,000 --> 00:09:58,880\nat a coffee shop and you're just trying to like chat with a friend and figure out and like help them achieve their goals.\n\n116\n00:09:59,540 --> 00:10:01,220\nIt sounds like you have to be very,\n\n117\n00:10:02,220 --> 00:10:04,260\nwhat's the opposite of self-centered, other-centered,\n\n118\n00:10:04,600 --> 00:10:11,540\nI guess? Like you just, when you have these conversations, you're just very interested in them and their goals and their desires\n\n119\n00:10:11,920 --> 00:10:18,840\nand getting to know them. Exactly. It's also almost like a therapy session sometimes because you actually can't impart any,\n\n120\n00:10:19,400 --> 00:10:23,900\nlike especially if I'm doing user research or if I'm just having an intro call.\n\n121\n00:10:24,600 --> 00:10:26,500\nI never want to impart my own opinions\n\n122\n00:10:26,840 --> 00:10:27,340\nyet.\n\n123\n00:10:28,140 --> 00:10:35,580\nI'm always trying to, especially if I'm putting designs in front of them, or if I want to get feedback on a certain feature, I'm trying to get the requirements.\n\n124\n00:10:36,140 --> 00:10:43,280\nI can't egg them in a certain way. I just want to understand in the state that this user is in right now, how can I help them or how can I build this feature\n\n125\n00:10:44,380 --> 00:10:47,820\nto get them to where they want to go? So yeah, it kind of feels like therapy sometimes.\n\n126\n00:10:48,580 --> 00:10:52,900\nYeah, yeah. I guess you have to be very careful to not poison the conversation,\n\n127\n00:10:53,480 --> 00:10:54,740\nright? So that\n\n128\n00:10:55,160 --> 00:10:59,400\nthey really think about all the things and problems that they're having and everything.\n\n129\n00:11:00,040 --> 00:11:08,860\nThat's interesting. If anybody watching this conversation was previously a therapist, you might consider going into product management. It's honestly the same. You think about,\n\n130\n00:11:09,520 --> 00:11:18,980\nit's funny also working in different areas of product. Like when I was in consulting and I worked in product, when I was an intern, I was working in product. The backgrounds that come into this role\n\n131\n00:11:19,280 --> 00:11:20,100\nare so\n\n132\n00:11:20,580 --> 00:11:26,820\nvastly unique. Like you do see people, you see a lot of folks now actually coming from computer science and going into product,\n\n133\n00:11:27,520 --> 00:11:34,940\nbut you also see people who are psychology majors and you see people who are graphic design majors because product wears so many different hats\n\n134\n00:11:36,100 --> 00:11:37,100\nfrom like, yeah,\n\n135\n00:11:37,660 --> 00:11:38,980\nthe mock-ups and the designs,\n\n136\n00:11:39,380 --> 00:11:48,220\nbut also it is very psychological. Like you really have to kind of interpret and understand your user. So you do see a lot of psychology majors, you see a lot of fine arts,\n\n137\n00:11:48,740 --> 00:11:50,100\nyou see a lot of math,\n\n138\n00:11:50,660 --> 00:12:00,980\nlike anything I feel like can go into product management. You just have to have kind of that empathy for your user. So if you're an empathetic person, even if you're not a therapist, but you're an empathetic person, product might be for you.\n\n139\n00:12:01,320 --> 00:12:02,260\nYeah, very cool.\n\n140\n00:12:03,180 --> 00:12:04,820\nSo that's how you gather requirements,\n\n141\n00:12:05,280 --> 00:12:11,140\ntalking to your users, getting very empathetic with them. And then you got to translate that into\n\n142\n00:12:11,600 --> 00:12:30,700\nsome requirements for developers. And I think some of the people who are going through the workshop may work at like a large enterprise, they have a product manager that does this for them, or they work at a really small company, and maybe they're a startup, and so they don't have a product manager, they are the product manager. And so I think that this could be really helpful for both of these people to\n\n143\n00:12:31,500 --> 00:12:35,400\nthink about, okay, so how should I be talking with my product manager as I'm\n\n144\n00:12:35,940 --> 00:12:36,440\nhearing\n\n145\n00:12:37,460 --> 00:12:46,140\ntheir conversion process from requirements to like actual, like what am I supposed to do? And then also for the solo developer who's trying to convert\n\n146\n00:12:46,560 --> 00:12:56,540\nuser requirements into like actual code. So what are the conversations like, or what is your process for turning user feedback into actionable\n\n147\n00:12:57,020 --> 00:12:57,880\ncode changes?\n\n148\n00:12:58,620 --> 00:12:59,120\nTotally.\n\n149\n00:12:59,640 --> 00:13:18,840\nI think I'm gonna take, so I think there's 2 kinds of conversations I would have with the user to then turn into a code change. So 1 is more like vision. So like if I don't know what my roadmap is going to be, or if I don't know what I'm developing next, I might have a more like broad conversation with the user, but I'm going to focus on, I know what I'm trying to build. I just need to figure out requirements around it.\n\n150\n00:13:19,600 --> 00:13:20,100\nSo\n\n151\n00:13:20,500 --> 00:13:22,860\nessentially what I do is I have all these,\n\n152\n00:13:23,200 --> 00:13:29,940\nthis massive list of interviews. So let's say, and actually I like to do this thing where I like post my calendar, kind of like what you did and\n\n153\n00:13:30,480 --> 00:13:39,440\nkind of see who bites. Like I'll post it on Twitter, I'll post it on Discord and kind of say like, hey, I'm looking for user feedback, like come sign up with me. I'll gather all of them. So just wherever you're,\n\n154\n00:13:39,800 --> 00:13:48,200\nfor you, you post it to Discord and Twitter cause that's where your users are. Sorry, yeah, that's where my users are. But yeah, just go find your users and- Go find your users. So you can see- Open your calendar.\n\n155\n00:13:48,580 --> 00:13:50,780\nExactly, and if you work at\n\n156\n00:13:51,460 --> 00:13:55,340\nlike an enterprise company, you might have a sales team or an account team\n\n157\n00:13:56,320 --> 00:14:04,580\nor customer-facing teams that might be able to give you feedback as well. But I got this whole laundry list of feedback, and I kind of pick out themes. And I'm like, I think\n\n158\n00:14:04,940 --> 00:14:06,240\nthis seems like a requirement.\n\n159\n00:14:06,660 --> 00:14:13,880\nIt feels like role-based access control is a really big requirement. I really need to consider this. And I kind of start, it's almost like,\n\n160\n00:14:15,060 --> 00:14:19,400\nYeah, you're kind of like pinning together a story. So I kind of do a little bit of like\n\n161\n00:14:20,320 --> 00:14:21,980\npost-it noting a little bit.\n\n162\n00:14:22,380 --> 00:14:25,780\nI'll pick up high-level themes. And then I kind of start writing.\n\n163\n00:14:26,140 --> 00:14:32,820\nThere's kind of like a common format for writing a product requirement document, which is You have to talk about an overview, an introduction,\n\n164\n00:14:33,260 --> 00:14:34,340\ntalk about the problem,\n\n165\n00:14:35,140 --> 00:14:38,740\ntalk about the goals, the non-goals, what's in scope, what's out of scope.\n\n166\n00:14:39,860 --> 00:14:40,880\nYou have to\n\n167\n00:14:41,360 --> 00:14:45,460\ndescribe the solution a little bit or describe some of the solutions that you thought about.\n\n168\n00:14:45,860 --> 00:14:58,160\nThen you have to break it down into requirements that engineering can then take from your document. So I like to put this in like a table form of like, this is a high level requirement and these are like the interactions that the user could have with this feature.\n\n169\n00:14:58,940 --> 00:15:00,660\nSo after I do this, I\n\n170\n00:15:01,120 --> 00:15:01,620\nthen\n\n171\n00:15:02,220 --> 00:15:12,460\nshare it with my engineering team. I like to actually get preliminary feedback from engineers. My engineering team is so near and dear to my heart. I trust their opinions\n\n172\n00:15:13,680 --> 00:15:14,480\nso much\n\n173\n00:15:15,060 --> 00:15:17,140\nBecause a lot of the people on my team actually\n\n174\n00:15:17,960 --> 00:15:22,400\nwere previous users of the product. And that's how I found them. They were like Cloudflare\n\n175\n00:15:23,140 --> 00:15:23,640\ngeniuses\n\n176\n00:15:24,000 --> 00:15:40,220\nand suddenly decided they really want to work at Cloudflare. And so I think I hold a lot of their opinions really, really dear to me. But I like to circulate my PRDs ahead of time to say like, hey, if you had to write a spec about this, what am I missing here? Or like, what else could I add to kind of make the story more clear?\n\n177\n00:15:41,520 --> 00:15:47,520\nAnd so I always make sure I have that kind of like technical requirement section. But I also think as a PM,\n\n178\n00:15:48,580 --> 00:15:56,340\nbuilding a requirements document for developers, it's so important for you to tell the story. Everything I just told you about how I like to interview\n\n179\n00:15:56,980 --> 00:16:15,320\nusers and really understand the user, I want my developers and my engineers to feel the same way. I want them to totally understand the use cases. I want them to feel what I feel when I talk to developers. I want them to feel the pain points. I think once engineers that are building the feature have that understanding of the pain points,\n\n180\n00:16:15,660 --> 00:16:19,780\nThey can think even better as an engineer, as they're building out the feature.\n\n181\n00:16:21,420 --> 00:16:26,660\nSo then we have kind of like this review process where we kind of go through the requirements document together\n\n182\n00:16:27,180 --> 00:16:37,060\nand we'll have the whole team kind of ask questions of, well, how come you can do it like this? And that might cause some reliability issues and that might be hard from a performance standpoint. And they kind of start picking at,\n\n183\n00:16:37,740 --> 00:16:47,340\nlike all of the requirements that I put together. I think it's funny as a PM, you kind of can dream up any sort of world that you want and then you kind of like face reality when the engine,\n\n184\n00:16:48,120 --> 00:16:49,780\nyeah, that's not going to be possible.\n\n185\n00:16:50,660 --> 00:16:54,580\nAnd then of course, like as a PM, you're also kind of facing time constraints too, right?\n\n186\n00:16:55,080 --> 00:17:02,340\nAt CloudFlare, we have a really big ship culture. We're very adamant about getting things out into the world, testing them,\n\n187\n00:17:02,780 --> 00:17:04,500\niterating on it, getting feedback.\n\n188\n00:17:04,900 --> 00:17:05,579\nAnd so\n\n189\n00:17:05,980 --> 00:17:20,040\nsometimes we have to think about, okay, this is like the grand world that I'm thinking about, but what's my first milestone? What's my MVP? What's like the least amount of work, not least amount of work. What's the smallest deliverable that I can get out the door so that I can start getting a little bit of feedback.\n\n190\n00:17:20,660 --> 00:17:22,240\nAnd so I think it's important\n\n191\n00:17:23,140 --> 00:17:27,079\nas a PM also to understand if engineers are telling you there are all these complications,\n\n192\n00:17:27,920 --> 00:17:37,320\nit's important for me to understand, OK, Let me cut scope here and let's kind of like shave this down a little bit into like a really nice MVP, which is a minimum viable product.\n\n193\n00:17:38,600 --> 00:17:41,500\nSo yeah, and then from there we kind of kick off like a spec process.\n\n194\n00:17:42,600 --> 00:17:44,080\nAnd I am a very\n\n195\n00:17:44,600 --> 00:17:48,280\nengineering involved PM. I think, I think I really like to\n\n196\n00:17:49,060 --> 00:17:50,240\nshepherd this\n\n197\n00:17:50,600 --> 00:17:51,100\nproduct\n\n198\n00:17:51,580 --> 00:17:56,820\nor feature through its cycle. You will find that a lot of PMs kind of just like write the requirements,\n\n199\n00:17:57,500 --> 00:17:59,080\npass them off and move on.\n\n200\n00:18:00,780 --> 00:18:04,420\nI think it's because I like working with my engineering team and I like to learn\n\n201\n00:18:04,820 --> 00:18:05,320\nmore,\n\n202\n00:18:05,740 --> 00:18:07,180\nthat I like to be really involved.\n\n203\n00:18:07,640 --> 00:18:09,880\nBut every PM has a different style. And like,\n\n204\n00:18:10,240 --> 00:18:17,060\nI guess depending on who you work with, they might say something different, but I definitely like to see and I like to test as often as I can.\n\n205\n00:18:17,560 --> 00:18:19,900\nSo I involve myself a lot in\n\n206\n00:18:20,320 --> 00:18:20,820\nlike,\n\n207\n00:18:21,420 --> 00:18:25,620\nokay, we have this like prototype working, like let me test it, let me try it again.\n\n208\n00:18:26,540 --> 00:18:31,900\nSo I do definitely like have a lot of these conversations with my team as the future is being developed.\n\n209\n00:18:32,540 --> 00:18:40,120\nDid that answer your question? Yeah, no, that was awesome. There's so much in there that I just think is really helpful\n\n210\n00:18:40,680 --> 00:18:44,440\nfor engineers to understand what their PM is trying to do and maybe\n\n211\n00:18:45,180 --> 00:18:50,520\nwhat hopefully their PM, maybe they can encourage their PM to be a little more proactive after the requirements.\n\n212\n00:18:50,980 --> 00:18:51,880\nThat's a good\n\n213\n00:18:52,360 --> 00:18:54,500\ncall out. I think product changes\n\n214\n00:18:54,860 --> 00:18:58,060\nso much and product means so many things to so many different people.\n\n215\n00:18:59,320 --> 00:19:07,240\nBut I think if you're an engineer that's struggling to understand the why of what you're building, that's feedback you should definitely give to your PM.\n\n216\n00:19:08,560 --> 00:19:11,400\nI love to bring customer use cases to\n\n217\n00:19:11,740 --> 00:19:28,600\nmy team, and I even love to bring my team on to customer calls sometimes if they want, if I know that they're developing a feature, we just launched like a build caching feature and I had a customer who was so excited about it and I was like, Hey, you have to join this call. Like, let me, let me, let me bring you on. And I think that kind of just, yeah, it kind of like\n\n218\n00:19:30,060 --> 00:19:38,500\ngives engineers like a purpose to build to, and not just build for the sake of building. But I think the why is really important. So I would really encourage engineers that feel\n\n219\n00:19:38,860 --> 00:19:45,080\nlike they're not getting that, give your PM feedback because that's something they can totally improve on. No, yeah, that's awesome.\n\n220\n00:19:45,720 --> 00:19:49,260\nI think even just the idea that like you can give your PM feedback\n\n221\n00:19:49,900 --> 00:19:50,400\nis\n\n222\n00:19:51,560 --> 00:19:52,480\na good thing.\n\n223\n00:19:53,140 --> 00:19:59,440\n1 other thing that, yeah, go ahead. No, I just think that the product engineering relationship is so, so important\n\n224\n00:20:00,480 --> 00:20:05,880\nAnd I would, I think in any place, anywhere that I would work, I think that would always just be the,\n\n225\n00:20:06,300 --> 00:20:14,560\nthe health of that relationship is always just really important to me. So I think if you don't feel like you have that, it's definitely something that makes a product better in general.\n\n226\n00:20:15,180 --> 00:20:17,880\nYeah, yeah. So another thing that you mentioned\n\n227\n00:20:18,740 --> 00:20:29,980\nwas how you would like seek early feedback from your engineers and like, how can I improve this before you just drop the requirements in their lab? And that reminded me of\n\n228\n00:20:30,720 --> 00:20:32,060\nthe way that I\n\n229\n00:20:32,380 --> 00:20:32,880\ntypically\n\n230\n00:20:33,580 --> 00:20:39,300\nconvince my team of something that I want to do, or at least like get a discussion going.\n\n231\n00:20:40,080 --> 00:20:40,580\nSo\n\n232\n00:20:41,040 --> 00:20:43,940\nI actually wrote a blog post about this titled,\n\n233\n00:20:44,800 --> 00:20:46,300\nHow to get whatever you want,\n\n234\n00:20:47,080 --> 00:20:49,500\nwhich is basically the\n\n235\n00:20:50,320 --> 00:20:54,020\ntrick is you have to make sure that what you want is what you can get.\n\n236\n00:20:55,320 --> 00:20:55,820\nBut\n\n237\n00:20:56,260 --> 00:20:58,760\n1 of the things that I talk about in there is\n\n238\n00:20:59,760 --> 00:21:05,720\nwhen you have decided, okay, I want to convince my team that we need to adopt TypeScript or something,\n\n239\n00:21:06,020 --> 00:21:06,720\nfor example.\n\n240\n00:21:08,860 --> 00:21:29,780\n1 of the best things you can do is put together the, like, first convince yourself that it's a good idea. So that means you gotta like, look at all the pros and cons. And then you go to all the stakeholders individually and you say, hey, here are like, you plan the meeting, they all know it's gonna happen. And you say, we're gonna have this meeting, I just wanna make sure we make the most of the time. So\n\n241\n00:21:30,140 --> 00:21:33,060\nlike, what concerns do you have about this?\n\n242\n00:21:33,480 --> 00:21:45,260\nAnd you just listen and like let them say all their concerns and in the back of your mind you're like yep, I've addressed that. Oh no, that's a new 1, like let me think about that. And then you can like kind of talk with them a little bit about it\n\n243\n00:21:45,560 --> 00:21:54,400\nas well just to see kind of where they're at. So that way, when you go into the meeting, you know all of the concerns of everybody and you address them all up front.\n\n244\n00:21:54,720 --> 00:22:04,780\nAnd then when you're all done, they can't even say that their concerns anymore cause you already talked about it. And then Vee is just like, well, I already answered that question. So, It's such a good idea to like pre-float\n\n245\n00:22:05,580 --> 00:22:11,400\nthings before you have this like massive meeting and I also think, I like to look at, I have certain people\n\n246\n00:22:11,960 --> 00:22:20,140\nat work that, give me different opinions, right? Like I know that this person is going to be very focused on the customer and this person is going to be really focused on\n\n247\n00:22:20,800 --> 00:22:24,860\nlike end user experience or like performance or something,\n\n248\n00:22:25,380 --> 00:22:40,280\neveryone's like in charge of something else. And they're kind of like my board. Like I think of them as my board of directors who is going to give me like insight in many different ways. So I think pre-floating the idea, kind of like you said, just kind of makes that final review a lot\n\n249\n00:22:40,760 --> 00:22:41,260\nsmoother.\n\n250\n00:22:41,820 --> 00:22:47,960\nAnd then the issues that are brought up in that meeting would just be a little bit more like minor or like nitpicks.\n\n251\n00:22:49,200 --> 00:22:49,900\nYeah, yeah.\n\n252\n00:22:50,320 --> 00:22:53,380\nWell, that's very helpful, I think, for folks.\n\n253\n00:22:54,020 --> 00:22:59,720\nIf you don't mind, I'd like to transition the conversation a little bit over to more specifically what you work on,\n\n254\n00:23:00,300 --> 00:23:01,660\nthe product that you offer.\n\n255\n00:23:02,180 --> 00:23:03,940\nBut speaking more generally\n\n256\n00:23:05,740 --> 00:23:07,280\naround edge computing\n\n257\n00:23:07,660 --> 00:23:08,160\nand\n\n258\n00:23:08,620 --> 00:23:09,120\nwhy\n\n259\n00:23:09,520 --> 00:23:12,220\nI'd like to get your take on why\n\n260\n00:23:12,800 --> 00:23:17,240\nso much of the web is pushing us toward the edge multi-instance\n\n261\n00:23:18,420 --> 00:23:22,860\nor being able to have distributed applications and data and all of that stuff, so\n\n262\n00:23:23,480 --> 00:23:28,300\nNavi why are you excited about that? And why does it matter to you and your users?\n\n263\n00:23:29,060 --> 00:23:29,560\nSure\n\n264\n00:23:30,940 --> 00:23:31,440\nso\n\n265\n00:23:32,020 --> 00:23:46,520\nThis idea of serverless I think is a little bit misleading sometimes because it doesn't mean that there's no server, but for the user, it just means that you are not managing the server. You are paying someone else to manage the server for you. And in fact, it's not just 1 server. It could be many servers.\n\n266\n00:23:47,020 --> 00:23:49,820\nI think there's a lot of providers out there at CloudFlare\n\n267\n00:23:50,500 --> 00:23:51,000\nthat\n\n268\n00:23:51,980 --> 00:23:54,360\ngive you maybe just a few servers, but CloudFlare\n\n269\n00:23:55,080 --> 00:23:58,680\nis 1 of the providers that's like, we want you to be able to run your application\n\n270\n00:23:59,540 --> 00:24:00,720\nanywhere and everywhere,\n\n271\n00:24:01,160 --> 00:24:09,880\nwhich I think is super cool. The part that I really like about serverless is the, like, you don't have to manage it part. I think again, being not a web developer,\n\n272\n00:24:10,600 --> 00:24:17,940\nbut being able to get my personal site up, up and running super easily and not have to worry about like the heavy lifting of managing infrastructure or paying\n\n273\n00:24:18,820 --> 00:24:19,780\negregious prices\n\n274\n00:24:20,900 --> 00:24:23,220\nis super cool to me. And I feel like it actually\n\n275\n00:24:24,080 --> 00:24:24,580\nunlocks\n\n276\n00:24:25,240 --> 00:24:28,220\nand enables web development to anyone.\n\n277\n00:24:29,540 --> 00:24:34,940\nThe best part about my job. So I can talk a little bit about what my product is. I feel like maybe I didn't explain that properly. Sure.\n\n278\n00:24:36,360 --> 00:24:41,700\nSo Cloudflare Pages is, like I said, a build and deployment platform. So when you're building your application,\n\n279\n00:24:42,340 --> 00:24:46,820\nyou would basically use Pages to deploy that to the CloudFlare network.\n\n280\n00:24:47,540 --> 00:24:50,780\nPages is super unique and is really cool because\n\n281\n00:24:51,660 --> 00:24:59,940\nwe like to integrate with the developer experience that you already have, or your developer workflow that you already have. A lot of users we noticed are using GitHub or GitLab\n\n282\n00:25:00,360 --> 00:25:02,620\nor other source control management tools.\n\n283\n00:25:03,060 --> 00:25:05,660\nWe thought, what if we integrated with 1 of those platforms?\n\n284\n00:25:06,940 --> 00:25:13,760\nThat all you have to do is just commit to your repo and we can build and deploy and handle all the CI and CD stuff on our end.\n\n285\n00:25:15,720 --> 00:25:25,880\nLike I said, I think the super cool thing about Pages is that you don't have to worry about setting up all of the infrastructure to get to a successfully deployed application.\n\n286\n00:25:26,600 --> 00:25:31,740\nLike I said, 1 of the really cool things about my job is, I'm not just interacting with\n\n287\n00:25:32,480 --> 00:25:38,980\nenterprise customers. It's not just like a B2B situation. It's actually a very B2C situation because there's\n\n288\n00:25:39,320 --> 00:25:41,260\ndevelopers who I've spoken to in\n\n289\n00:25:41,760 --> 00:25:42,260\nEgypt,\n\n290\n00:25:42,600 --> 00:25:43,100\nin\n\n291\n00:25:43,660 --> 00:25:44,880\nGuatemala, like\n\n292\n00:25:45,240 --> 00:25:45,740\nreally\n\n293\n00:25:46,820 --> 00:25:50,780\nfar places in the world that are all trying to achieve the same thing.\n\n294\n00:25:51,220 --> 00:25:53,040\nAnd also in different\n\n295\n00:25:54,520 --> 00:25:55,620\nsocioeconomic statuses,\n\n296\n00:25:56,660 --> 00:26:01,220\nlike I feel like products like this are making web development actually super accessible\n\n297\n00:26:01,820 --> 00:26:06,860\nto all different types of populations of people, which I think is really cool because that wasn't always the case before.\n\n298\n00:26:07,720 --> 00:26:08,340\nYou needed\n\n299\n00:26:09,000 --> 00:26:19,300\nto have the computer, you needed to have the financial situation to be able to get a website up and running. So I feel like serverless is actually making it also pretty accessible for folks\n\n300\n00:26:19,640 --> 00:26:22,120\nto have a website and even to start a business, right?\n\n301\n00:26:23,000 --> 00:26:26,560\nSo I really love that about the serverless space in general.\n\n302\n00:26:28,080 --> 00:26:30,980\nBut I think from a business standpoint,\n\n303\n00:26:31,540 --> 00:26:33,300\nServerless also serves\n\n304\n00:26:33,620 --> 00:26:36,000\nas a way for you to kind of\n\n305\n00:26:36,840 --> 00:26:39,820\nrelinquish yourself from having to stress about\n\n306\n00:26:40,520 --> 00:26:44,400\nyour site going down or reaching customers all over the globe,\n\n307\n00:26:44,760 --> 00:26:45,740\nright? So\n\n308\n00:26:46,780 --> 00:26:47,920\nwith Fodler specifically,\n\n309\n00:26:48,280 --> 00:26:50,680\nif you have users that are all the way\n\n310\n00:26:51,220 --> 00:26:51,720\nin\n\n311\n00:26:52,080 --> 00:26:54,640\nAustralia, but you're located in the US,\n\n312\n00:26:55,900 --> 00:26:57,200\nwe will scale your application.\n\n313\n00:26:57,540 --> 00:26:58,780\nYou can reach users\n\n314\n00:26:59,100 --> 00:27:03,020\nwithin a certain millisecond of time no matter where they are.\n\n315\n00:27:03,560 --> 00:27:10,940\nI guess accessibility is my biggest takeaway from serverless. Like it really makes it accessible from a user standpoint, but also from a builder standpoint.\n\n316\n00:27:12,040 --> 00:27:12,760\nI think that's,\n\n317\n00:27:14,280 --> 00:27:16,260\nit's for me, That's like the biggest advantage\n\n318\n00:27:17,840 --> 00:27:19,100\nto using going serverless.\n\n319\n00:27:19,940 --> 00:27:21,980\nYeah, yeah, absolutely. And the\n\n320\n00:27:22,380 --> 00:27:26,420\nunique aspect of Cloudflare, I think, is just the number of\n\n321\n00:27:26,740 --> 00:27:36,520\nregions that are available. Like, I think last I checked it was, oh, I'm not, I can't say the number because I'll probably be wrong. What is it? 200. So I think\n\n322\n00:27:36,960 --> 00:27:40,300\nby using Cloudflares, I'm going to use the approved statistics.\n\n323\n00:27:40,760 --> 00:27:42,600\nOh, okay. Using Cloudflares\n\n324\n00:27:43,420 --> 00:27:45,120\nnetwork, you are\n\n325\n00:27:45,540 --> 00:27:46,040\nwithin\n\n326\n00:27:46,720 --> 00:27:47,680\n50 milliseconds\n\n327\n00:27:48,340 --> 00:27:49,800\nof the world's\n\n328\n00:27:50,240 --> 00:27:51,220\ninternet connected,\n\n329\n00:27:51,900 --> 00:27:53,900\nlike 95% of the world's internet\n\n330\n00:27:54,520 --> 00:27:55,020\nconnected\n\n331\n00:27:56,540 --> 00:27:57,040\npopulation.\n\n332\n00:27:58,840 --> 00:28:00,980\nAnd then I think it's in around 270\n\n333\n00:28:01,560 --> 00:28:03,060\nplus cities is the metric,\n\n334\n00:28:04,060 --> 00:28:05,240\nwhich is really crazy.\n\n335\n00:28:06,000 --> 00:28:11,900\nYeah, when you think about that, there's always like a little map with all of the dots all over the world. And when you look at that, you're like, wow,\n\n336\n00:28:12,260 --> 00:28:19,040\nlike, yeah, anyone can start a business. Anyone can deploy an application, but then also scale that application, right? Like,\n\n337\n00:28:20,280 --> 00:28:22,580\nI also gave a talk the other day about,\n\n338\n00:28:23,080 --> 00:28:27,320\nI was like telling the story of a user who was building a game app,\n\n339\n00:28:27,740 --> 00:28:30,680\nlike a chess app. And you're a user, you\n\n340\n00:28:31,160 --> 00:28:43,400\nstart with your, start playing this game with your friends that you've built. But then suddenly your game goes viral and it starts reaching like the UK and Australia and suddenly the costs are like way more than what you thought it was.\n\n341\n00:28:44,160 --> 00:29:07,540\nAnd like performance is all whack because you have a lot of latency from like the connection between like Australia and the US. And I think that what we're trying to solve at Cloudflare is, hey, you actually don't have to worry about that. You can be a developer that has 10 users. You can be a developer that has 100,000 users. You can be a developer with all your users in 1 area, or you can be a developer with all your users in 1 area, or you can be a developer with users in every single region of the world.\n\n342\n00:29:08,200 --> 00:29:15,700\nAnd I think that taking away that stress of, oh my God, what happens if my site goes viral on Hacker News 1 day and I'm not ready,\n\n343\n00:29:16,200 --> 00:29:17,060\nI think is\n\n344\n00:29:17,560 --> 00:29:18,660\njust like super cool.\n\n345\n00:29:19,400 --> 00:29:20,400\nYeah, yeah.\n\n346\n00:29:21,100 --> 00:29:24,560\nSo I think it'd probably be a good idea for me to\n\n347\n00:29:25,040 --> 00:29:25,540\nmention\n\n348\n00:29:25,940 --> 00:29:26,980\nthat in\n\n349\n00:29:27,340 --> 00:29:28,540\nfor Epic web,\n\n350\n00:29:29,100 --> 00:29:31,260\nI actually, I don't use Cloudflare.\n\n351\n00:29:31,980 --> 00:29:33,740\nI think Cloudflare is very cool.\n\n352\n00:29:34,700 --> 00:29:36,760\nAnd for all of the reasons that you said,\n\n353\n00:29:37,060 --> 00:29:39,260\nwe are using fly.io,\n\n354\n00:29:40,320 --> 00:29:41,080\nwhich is\n\n355\n00:29:41,500 --> 00:29:43,980\na different take on serverless where\n\n356\n00:29:45,060 --> 00:29:53,940\nit's like serverless with long running servers. So you still don't have to worry about setting or managing the servers and all of that stuff. But your server is long running, so more traditional.\n\n357\n00:29:54,960 --> 00:29:56,140\nAnd the reason,\n\n358\n00:29:56,520 --> 00:29:59,680\nso here we can talk a little bit about trade-offs and stuff.\n\n359\n00:30:00,720 --> 00:30:02,540\nThe trade-off that you make going\n\n360\n00:30:03,420 --> 00:30:06,420\nwith a traditional serverless architecture is that\n\n361\n00:30:06,960 --> 00:30:08,800\nit's not long running. And so\n\n362\n00:30:10,240 --> 00:30:15,540\nyou spin up and then spin down and you don't really control that. And so doing things like\n\n363\n00:30:16,220 --> 00:30:20,640\nbackground jobs or long connections to databases and stuff like that\n\n364\n00:30:21,260 --> 00:30:21,760\nis,\n\n365\n00:30:22,200 --> 00:30:23,380\nor like even\n\n366\n00:30:24,960 --> 00:30:27,440\nwith Cloudflare it's running in V8 isolates.\n\n367\n00:30:27,800 --> 00:30:32,000\nAnd so you don't have all of the power of node although Cloudflare is\n\n368\n00:30:32,520 --> 00:30:36,960\nthat those V8 isolates are pretty capable. It's pretty cool what you can do. But\n\n369\n00:30:37,360 --> 00:30:40,380\nI was, for my personal website, I use FFmpeg\n\n370\n00:30:40,680 --> 00:30:45,600\nto generate podcast episodes and stuff. Like there are just some things that\n\n371\n00:30:46,580 --> 00:30:51,300\nyou, it's really nice to have a long running server to be able to do. So that's\n\n372\n00:30:52,540 --> 00:30:53,900\nwhy I recommend Fly,\n\n373\n00:30:54,340 --> 00:30:54,840\nbut\n\n374\n00:30:55,760 --> 00:30:56,260\nthat's\n\n375\n00:30:56,820 --> 00:30:59,600\nalso why I wanted to talk about this because there are\n\n376\n00:30:59,900 --> 00:31:03,500\nuse cases that fit within, really nicely within Cloudflare.\n\n377\n00:31:04,280 --> 00:31:06,780\nAnd I just think that it's super cool\n\n378\n00:31:07,280 --> 00:31:09,020\nwhat we can do with our,\n\n379\n00:31:10,360 --> 00:31:12,900\nthe hosting options that we have available to us.\n\n380\n00:31:13,520 --> 00:31:15,220\nI think so too. I think also\n\n381\n00:31:16,260 --> 00:31:29,520\nCloudflare will never be, or our developer platform at least, will never be the platform that says, like, this is the only way to do something. And I think we are very willing and very happy for developers to choose what's right for them.\n\n382\n00:31:30,520 --> 00:31:34,020\nIt's also part of the reason why we have not made\n\n383\n00:31:34,600 --> 00:31:45,320\nsuper bold claims on like, this is the only framework, but we have really great relationships with a lot of different frameworks. Remix is definitely 1 of our very coveted favorite frameworks that we like to deploy\n\n384\n00:31:46,160 --> 00:31:54,660\non the platform, but we really like to meet developers where they are. So I think that the point I'm trying to make is that your use case and what you're building is\n\n385\n00:31:55,440 --> 00:31:57,380\nreally contingent on what your stack is.\n\n386\n00:31:58,060 --> 00:31:59,840\nAnd I think that's okay.\n\n387\n00:32:00,800 --> 00:32:01,600\nYeah, absolutely.\n\n388\n00:32:03,380 --> 00:32:12,100\nSo I have the Epic stack that is actually, basically Epic web is like, let's build the Epic stack together. That's sort of what the workshops are. And\n\n389\n00:32:13,520 --> 00:32:22,580\nthe big premise of the Epic stack is the fact that there are so many different options that we can choose from for how we build and deploy our applications.\n\n390\n00:32:23,040 --> 00:32:35,700\nAnd the fact is that most of those options will work just fine. It doesn't really matter too much which 1 you choose. There are some things that some options can do better than others, but at the end of the day, you'll probably be fine with any of them.\n\n391\n00:32:36,020 --> 00:32:36,760\nAnd so\n\n392\n00:32:37,500 --> 00:32:38,240\neven though\n\n393\n00:32:38,600 --> 00:32:47,140\nI say EpicStack deploys to fly and you can deploy to multiple regions, maybe not 250 or whatever, but like still many regions throughout the world and\n\n394\n00:32:47,540 --> 00:32:50,420\neverything, that will probably suit the majority,\n\n395\n00:32:51,060 --> 00:32:53,340\nthe vast majority of people building apps.\n\n396\n00:32:53,800 --> 00:32:56,880\nBut same thing can be said for the Cloudflare side,\n\n397\n00:32:57,340 --> 00:32:59,440\nthat you can be satisfied\n\n398\n00:33:00,060 --> 00:33:02,620\nfor most use cases on top of Cloudflare\n\n399\n00:33:03,080 --> 00:33:05,420\nas well, which I think is pretty cool.\n\n400\n00:33:05,800 --> 00:33:24,440\nExactly, and every day we learn like certain use cases that maybe Cloudflare is not good for, and then we optimize and we're like, hey, this is important, like, let's go figure this out. So that's why the user conversations are so important. And that's why being a PM is a super golden job because you kind of figure out what the holes are in your offering.\n\n401\n00:33:24,900 --> 00:33:27,840\nWow, way to bring that back full circle. I know, full circle, right?\n\n402\n00:33:28,500 --> 00:33:29,160\nWell done.\n\n403\n00:33:29,480 --> 00:33:36,880\nThat's awesome. Well, it's been such a lovely conversation with you. Do you have anything else that you wanted to talk about? We didn't get a chance to chat about.\n\n404\n00:33:37,580 --> 00:33:46,060\nNo, I think I just want to say that if you are taking this course and you feel like it's challenging, I feel like that's a good thing.\n\n405\n00:33:46,640 --> 00:33:55,580\nI remember starting off, which I feel like you probably have done a really great job to make it not feel like it's super, super challenging and that people can't get to the core of it.\n\n406\n00:33:56,040 --> 00:33:57,180\nBut I just remember,\n\n407\n00:33:57,560 --> 00:34:12,260\nyeah, going through my computer science courses for the first time, or even like starting this job and being like, oh my gosh, there's so much to learn. And there is so much to learn, but I feel like it's so exciting to be in a space. It's so exciting to learn the different trends that happen,\n\n408\n00:34:12,980 --> 00:34:14,179\nthe way that\n\n409\n00:34:14,540 --> 00:34:16,659\nlike opinions fluctuate over time.\n\n410\n00:34:17,159 --> 00:34:21,400\nI think it's a really exciting space to be in. I would just want to say, keep at it.\n\n411\n00:34:21,820 --> 00:34:23,040\nAnd I'm also like,\n\n412\n00:34:23,420 --> 00:34:32,860\nif you become a developer and you want to start using CloudFlare products, I love to have developer chats. I love to listen to you. I like to talk to novice developers. I like to talk to experienced developers.\n\n413\n00:34:33,400 --> 00:34:35,360\nSo definitely get in touch with me\n\n414\n00:34:35,800 --> 00:34:36,580\nif you can.\n\n415\n00:34:37,120 --> 00:34:43,780\nThat's awesome. What is the best place for people to get in touch with you then? Twitter, my handle is at N-E-V-I-K-A-S-H-A-H.\n\n416\n00:34:46,679 --> 00:34:48,500\nDefinitely feel free to reach out.\n\n417\n00:34:49,179 --> 00:34:52,260\nAwesome, do you mind me asking what the K stands for?\n\n418\n00:34:52,840 --> 00:34:54,659\nNevica is actually my real name.\n\n419\n00:34:55,080 --> 00:34:57,260\nAh, okay. Yeah, Nevi's like my nickname.\n\n420\n00:34:57,940 --> 00:34:59,620\nI don't, I think my dad,\n\n421\n00:35:00,100 --> 00:35:02,720\nDo you know who Nev Campbell is, by any chance?\n\n422\n00:35:03,080 --> 00:35:09,660\nMaybe. I'm not sure. She's an actress. She just was in a show called Lincoln Lawyer. And she was also in Party of 5,\n\n423\n00:35:10,080 --> 00:35:37,620\nwhich is an older show. But my dad had a huge crush on her. And he was like, we have to name my daughter Nev. And then my mom said, doesn't sound Indian enough, because my family's Indian. So she kind of made up this name, Nevica, and that's what my name is. I love it. That's great. So there's probably nobody else named Nevica, but that's pretty cool. You know what? Apparently there is, because I've been trying to get that Instagram handle and I like messaged this person a bunch of times and I was like, hey, do you mind if I pay you for the Instagram handle?\n\n424\n00:35:38,940 --> 00:35:40,360\nHaven't heard back. But\n\n425\n00:35:40,760 --> 00:35:41,820\nI wish them well.\n\n426\n00:35:43,440 --> 00:35:57,040\nThank you so much for having me on this. I'm such a big fan of Remix and I'm such a huge fan of Remix and I'm such a huge fan of you. So it's been honestly an honor to be here. Oh, well, you're so nice, Nevi. It's been an honor to have you. And thanks everybody for tuning in.\n\n427\n00:35:57,400 --> 00:35:59,280\nAnd yeah, we'll chat with you all later.\n\n428\n00:35:59,760 --> 00:36:00,820\nCool, See you later!",
            "text": "[00:00:01] Speaker 0:\nHello, everybody. I'm super excited to be joined by Nevi. And actually, I didn't ask how to pronounce your last name. Is it Shaw? \n\n[00:00:07] Speaker 1:\nIt's Shaw. \n\n[00:00:08] Speaker 0:\nOkay, great. Nevi Shaw. Nevi and I met at RemixConf this last year. She proposed to speak alongside Igor Minar of the AngularJS team fame. He's now over with Nevi at CloudFlare. And yeah, so they spoke together at RemixConf this year. It was awesome \n\n[00:00:28] to have them speak. Cloudflare is among the companies that is pushing the edge like further than anybody else that I know. Cloudflare is just awesome. So, and it was just so wonderful to get to know Nevi at that conference and I'd like you all to get to know Nevi. So could you give us a little intro to yourself? \n\n[00:00:46] Speaker 1:\nSure. Hey everybody, I'm Nevi. I am, like Ken said, a product manager at Cloudflare. I joined about 2 years ago and totally fell in love with the web development space as much as I hope you are all doing as you're learning and going through this course. But yeah, super excited to talk a little bit about product management and web development. \n\n[00:01:06] So yeah, excited to get into \n\n[00:01:07] Speaker 0:\nit. Awesome, yeah, that is great. So to get us going, I wanted to get to know your history and how you got into web development. I actually don't think that I know. So I'm very curious. How did you get into web? \n\n[00:01:25] Speaker 1:\nYeah, so I had a really interesting path here. I started off, I studied computer science business, had this like really integrated degree in college, knew I really loved tech, but also wanted the business side of it, which I feel like is a cliche. I feel like everyone says that. I truly like wanted kind of this mix. Like I loved \n\n[00:01:45] kind of getting my hands dirty. I loved hands on keyboard work. But also really like people. I love speaking. I love making new friends. I love building relationships. And so I started interning a lot in the product management space. Didn't know what industry I wanted to go into. I started when I graduated in consulting, thinking like, hey, that's going to give \n\n[00:02:05] me a nice kind of understanding of different industries that I could go into. But then I was like, no, you know what? I really want to pick an industry. And this role at CloudFlare kind of fell in my lap. I had a friend that reached out and said, Hey, we're hiring. Do you want to give it a try? And when I've heard about CloudFlare, I think everyone kind of thinks \n\n[00:02:25] of security and performance. And no 1 really thinks about the developer platform. So when I saw the product, I was like, okay, this is interesting, except I've never had a product where I build for users that are developers. I always work with developers like next to me. So it was a super interesting concept. But yeah, I interviewed \n\n[00:02:45] for this job and they, I was like, Hey, I don't really have a lot of experience in web development, but I really love the company and I love the mission and I want to join. So in April, like 2 years after I did consulting for 2 years and then I joined Cloudflare and they have basically been really growing their developer platform. So \n\n[00:03:05] I started off PMing for a product called Pages, which I'm actually still the PM for. Cloudflare Pages is our build and deployment platform for full-stack applications. It's so funny, I look back to some of the days where I was first starting off and I had no idea what I was doing, like seriously had no idea what I was doing. I would get \n\n[00:03:25] like feature requests and customer escalations and things that would just come across my plate. And I would be like, I don't even know what this means. Luckily, I had really great friends on my team. I had a lot of really great work resources. I had a really great mentor, a really great boss, Rita Krasov, and she held my hand through it all and was basically like, this is the world of web development. \n\n[00:03:47] And that's kind of how I got here. And now I feel like I can hold really great conversations. Speaking at RemixConf was like a super huge career milestone for me. And I remember sitting in the conference and I was like, wow, like 2 years ago, I would have no idea what everyone was saying. And it was like such a point of pride for me \n\n[00:04:07] to be able to sit there and listen to these conversations happening. But yeah, I totally fell in love, so much so that I love to listen to what they've podcast. I love to hack on my own. I love to go to meetups. I just feel like it is such a community full of character. You can \n\n[00:04:27] meet so many different types of people. They're building so many cool things. And it's a space I'm just super excited about. \n\n[00:04:34] Speaker 0:\nVery cool. So you graduated with a CS degree. So obviously you're coding before you got into product management. And now you're still coding as a product manager. That actually seems pretty unique from my perspective for product managers. Like in the product manager circle, are you pretty unique that you're actually still coding? \n\n[00:04:55] Speaker 1:\nNo. In fact, like I would not even call myself that great of a like developer. I think there are definitely PMs on my team that are phenomenal. And I'm always in awe of them. When I studied in school, I was more on the data science route. So like I had classes in JavaScript and \n\n[00:05:15] Java and like did a couple of web development courses, but it was not my bread and butter. You can give me a Python assignment, you can have me do a bunch of data querying, that's all my stuff. I actually also got a master's in data science. But web development is totally new for me. So it's actually, I feel like I'm \n\n[00:05:35] like learning it all over again. So I definitely feel like it helps me understand things a little bit better, but I think it's actually an advantage to not be who I'm building for. I think that is actually unique for me to come into a project and say, \n\n[00:05:55] okay, I know nothing about the user. And that actually forces me to do my job better and to actually like go to users and not have a bias or not have an opinion on what this feature should be or what the product should be. In fact, my user doesn't inform me. So it definitely helps me to process information, but it's good that I'm not immediately jumping to solutioning \n\n[00:06:15] and instead forcing myself to go to customers and go to the user so I build the right thing. \n\n[00:06:22] Speaker 0:\nYeah, that is probably 1 of the most important aspects of the PM, right, is being able to translate the user's needs into what the developers are building, I guess. \n\n[00:06:33] Speaker 1:\nYeah, exactly. \n\n[00:06:36] Speaker 0:\nSo in the workshops, we have this, we have these little emojis that signify what the user or the developer who's going through the exercises supposed to do. 1 of them is Cody the koala that's I've got here. Koala is all over my stuff. Cody is the primary 1 telling people \n\n[00:06:56] what to do in the exercises. And then we have Kelly the coworker, that's the elf emoji. And we've got, and she does like a ton of work for them as they're going through the workshops. And we've got Hannah the hundred and Chuck the muscle. I can't remember, like there are a bunch of others, but 1 of them is, is Peter, the product manager. \n\n[00:07:16] And yeah, so you are represented as a product manager in the workshops. And Peter's job is to let people know the use cases that they're trying to solve as they're going through the exercises. So it's like use case driven rather than just like write this code for who knows why. So \n\n[00:07:36] what are the types of things in, I guess I tried to do my best to represent a product manager as I was, you know, cause I am the 1 who's writing what the PM is saying, but what would you say are the types of conversations that you typically have with developers as part of your job as a PM? \n\n[00:07:56] Speaker 1:\nYeah, I mean, I think it really depends, right? As a PM of a product that is used by so many different types of developers, I think my conversation is definitely different based on whom I'm speaking to. I'll give you an example. I think like our users are kind of segmented in different classifications. So you have kind of like independent \n\n[00:08:16] developers who are sort of dipping their toes into development or are working on personal projects. We also have framework authors, which we work a lot with. We also have, Enterprise developers who are working for like large scale companies. And so every time I talk to a user, my first question will always be like, tell me a little bit about yourself. I like to understand \n\n[00:08:36] their experience level. I like to understand their familiarity with products or their familiarity with, yeah, different features on the product. And then my next question is always, what are you trying to build? I think the most important thing to understand is where does this developer want to go? And sometimes they don't even know where they want to \n\n[00:08:56] go, or they tell you a very like short-sighted vision. And I already can think like, they're going to need this later. And this is where the application is going to go. So a lot of my conversations, I like to have like very personal relationships with my users. I do like to kind of get to know them and characterize them. I write a lot of personas in the product requirements documents that I write. So I do like to get to know \n\n[00:09:16] them. And then it's really kind of like, yeah, use case driven. So like, what are you building? How big is your team? How many hours are you developing in a day? Or what does your stack look like? What does your setup look like? What does communication and collaboration look like on your team? So I guess those are really specific to the product that I'm building right now. But \n\n[00:09:37] it almost feels like an interview, kind of like what you're asking me. Every time I talk to you about a news case, it's almost like I want to get inside your head. I want to know exactly what you're thinking so I can think 10 steps ahead of you. So it almost feels like, yeah, it feels like an interview almost, but almost like you're at a coffee shop and you're just trying to like chat with a friend and figure out and \n\n[00:09:57] like help them achieve their goals. \n\n[00:09:59] Speaker 0:\nIt sounds like you have to be very, what's the opposite of self-centered, other-centered, I guess? \n\n[00:10:05] Speaker 1:\nLike you \n\n[00:10:05] Speaker 0:\njust, when you have these conversations, you're just very interested in them and their goals and their desires and getting to know them. \n\n[00:10:13] Speaker 1:\nExactly. It's also almost like a therapy session sometimes because you actually can't impart any, like especially if I'm doing user research or if I'm just having an intro call. I never want to impart my own opinions yet. I'm always trying to, especially if I'm putting designs in front of them, or if I want to get feedback \n\n[00:10:33] on a certain feature, I'm trying to get the requirements. I can't egg them in a certain way. I just want to understand in the state that this user is in right now, how can I help them or how can I build this feature to get them to where they want to go? So yeah, it kind of feels like therapy sometimes. \n\n[00:10:48] Speaker 0:\nYeah, yeah. I guess you have to be very careful to not poison the conversation, right? So that they really think about all the things and problems that they're having and everything. That's interesting. If anybody watching this conversation was previously a therapist, you might consider going into product management. \n\n[00:11:06] Speaker 1:\nIt's honestly the same. You think about, it's funny also working in different areas of product. Like when I was in consulting and I worked in product, when I was an intern, I was working in product. The backgrounds that come into this role are so vastly unique. Like you do see people, you see a lot of folks now actually coming from computer science and going into product, \n\n[00:11:27] but you also see people who are psychology majors and you see people who are graphic design majors because product wears so many different hats from like, yeah, the mock-ups and the designs, but also it is very psychological. Like you really have to kind of interpret and understand your user. So you do see a lot of psychology majors, you see a lot of fine \n\n[00:11:47] arts, you see a lot of math, like anything I feel like can go into product management. You just have to have kind of that empathy for your user. So if you're an empathetic person, even if you're not a therapist, but you're an empathetic person, product might be for you. \n\n[00:12:01] Speaker 0:\nYeah, very cool. So that's how you gather requirements, talking to your users, getting very empathetic with them. And then you got to translate that into some requirements for developers. And I think some of the people who are going through the workshop may work at like a large enterprise, they have a product manager that does this for them, or they work at \n\n[00:12:21] a really small company, and maybe they're a startup, and so they don't have a product manager, they are the product manager. And so I think that this could be really helpful for both of these people to think about, okay, so how should I be talking with my product manager as I'm hearing their conversion process from requirements to like actual, like what am I supposed \n\n[00:12:42] to do? And then also for the solo developer who's trying to convert user requirements into like actual code. So what are the conversations like, or what is your process for turning user feedback into actionable code changes? \n\n[00:12:58] Speaker 1:\nTotally. I think I'm gonna take, so I think there's 2 kinds of conversations I would have with the user to then turn into a code change. So 1 is more like vision. So like if I don't know what my roadmap is going to be, or if I don't know what I'm developing next, I might have a more like broad conversation with the user, but I'm going to focus on, I know what I'm trying to build. I just need to figure out requirements around it. \n\n[00:13:19] So essentially what I do is I have all these, this massive list of interviews. So let's say, and actually I like to do this thing where I like post my calendar, kind of like what you did and kind of see who bites. Like I'll post it on Twitter, I'll post it on Discord and kind of say like, hey, I'm looking for user feedback, like come sign up with me. I'll gather all of them. \n\n[00:13:38] Speaker 0:\nSo just wherever you're, for you, you post it to Discord and Twitter cause that's where your users are. \n\n[00:13:43] Speaker 1:\nSorry, yeah, that's where my users are. \n\n[00:13:44] Speaker 0:\nBut yeah, just go find your users and- \n\n[00:13:46] Speaker 1:\nGo find your users. So you can \n\n[00:13:47] Speaker 0:\nsee- Open your calendar. \n\n[00:13:48] Speaker 1:\nExactly, and if you work at like an enterprise company, you might have a sales team or an account team or customer-facing teams that might be able to give you feedback as well. But I got this whole laundry list of feedback, and I kind of pick out themes. And I'm like, I think this seems like a requirement. It feels like role-based access \n\n[00:14:08] control is a really big requirement. I really need to consider this. And I kind of start, it's almost like, Yeah, you're kind of like pinning together a story. So I kind of do a little bit of like post-it noting a little bit. I'll pick up high-level themes. And then I kind of start writing. There's kind of like a common format for writing a product requirement \n\n[00:14:29] document, which is You have to talk about an overview, an introduction, talk about the problem, talk about the goals, the non-goals, what's in scope, what's out of scope. You have to describe the solution a little bit or describe some of the solutions that you thought about. Then you have to break it down into requirements that engineering \n\n[00:14:49] can then take from your document. So I like to put this in like a table form of like, this is a high level requirement and these are like the interactions that the user could have with this feature. So after I do this, I then share it with my engineering team. I like to actually get preliminary feedback from engineers. My engineering team is so near \n\n[00:15:09] and dear to my heart. I trust their opinions so much Because a lot of the people on my team actually were previous users of the product. And that's how I found them. They were like Cloudflare geniuses and suddenly decided they really want to work at Cloudflare. And so I think I hold a lot of their opinions really, really \n\n[00:15:29] dear to me. But I like to circulate my PRDs ahead of time to say like, hey, if you had to write a spec about this, what am I missing here? Or like, what else could I add to kind of make the story more clear? And so I always make sure I have that kind of like technical requirement section. But I also think as a PM, building a requirements \n\n[00:15:49] document for developers, it's so important for you to tell the story. Everything I just told you about how I like to interview users and really understand the user, I want my developers and my engineers to feel the same way. I want them to totally understand the use cases. I want them to feel what I feel when I talk to developers. I want them to feel the pain points. I think \n\n[00:16:10] once engineers that are building the feature have that understanding of the pain points, They can think even better as an engineer, as they're building out the feature. So then we have kind of like this review process where we kind of go through the requirements document together and we'll have the whole team kind of ask questions of, well, \n\n[00:16:30] how come you can do it like this? And that might cause some reliability issues and that might be hard from a performance standpoint. And they kind of start picking at, like all of the requirements that I put together. I think it's funny as a PM, you kind of can dream up any sort of world that you want and then you kind of like face reality when the engine, yeah, that's not going to be possible. \n\n[00:16:50] And then of course, like as a PM, you're also kind of facing time constraints too, right? At CloudFlare, we have a really big ship culture. We're very adamant about getting things out into the world, testing them, iterating on it, getting feedback. And so sometimes we have to think about, okay, this is like the grand world that I'm thinking about, but what's my first \n\n[00:17:10] milestone? What's my MVP? What's like the least amount of work, not least amount of work. What's the smallest deliverable that I can get out the door so that I can start getting a little bit of feedback. And so I think it's important as a PM also to understand if engineers are telling you there are all these complications, it's important for me to understand, OK, Let me cut scope \n\n[00:17:30] here and let's kind of like shave this down a little bit into like a really nice MVP, which is a minimum viable product. So yeah, and then from there we kind of kick off like a spec process. And I am a very engineering involved PM. I think, I think I really like to shepherd this product \n\n[00:17:51] or feature through its cycle. You will find that a lot of PMs kind of just like write the requirements, pass them off and move on. I think it's because I like working with my engineering team and I like to learn more, that I like to be really involved. But every PM has a different style. And like, I guess depending on who you work \n\n[00:18:11] with, they might say something different, but I definitely like to see and I like to test as often as I can. So I involve myself a lot in like, okay, we have this like prototype working, like let me test it, let me try it again. So I do definitely like have a lot of these conversations with my team as the future is being developed. \n\n[00:18:32] Did that answer your question? \n\n[00:18:33] Speaker 0:\nYeah, no, that was awesome. There's so much in there that I just think is really helpful for engineers to understand what their PM is trying to do and maybe what hopefully their PM, maybe they can encourage their PM to be a little more proactive after the requirements. \n\n[00:18:50] Speaker 1:\nThat's a good call out. I think product changes so much and product means so many things to so many different people. But I think if you're an engineer that's struggling to understand the why of what you're building, that's feedback you should definitely give to your PM. I love to bring customer use cases to \n\n[00:19:11] my team, and I even love to bring my team on to customer calls sometimes if they want, if I know that they're developing a feature, we just launched like a build caching feature and I had a customer who was so excited about it and I was like, Hey, you have to join this call. Like, let me, let me, let me bring you on. And I think that kind of just, yeah, it kind of like gives engineers like a purpose to build \n\n[00:19:31] to, and not just build for the sake of building. But I think the why is really important. So I would really encourage engineers that feel like they're not getting that, give your PM feedback because that's something they can totally improve on. \n\n[00:19:43] Speaker 0:\nNo, yeah, that's awesome. I think even just the idea that like you can give your PM feedback is a good thing. 1 other thing that, yeah, go ahead. \n\n[00:19:55] Speaker 1:\nNo, I just think that the product engineering relationship is so, so important And I would, I think in any place, anywhere that I would work, I think that would always just be the, the health of that relationship is always just really important to me. So I think if you don't feel like you have that, it's definitely something that makes a product better in general. \n\n[00:20:15] Speaker 0:\nYeah, yeah. So another thing that you mentioned was how you would like seek early feedback from your engineers and like, how can I improve this before you just drop the requirements in their lab? And that reminded me of the way that I typically convince my team of \n\n[00:20:35] something that I want to do, or at least like get a discussion going. So I actually wrote a blog post about this titled, How to get whatever you want, which is basically the trick is you have to make sure that what you want is what you can get. \n\n[00:20:55] But 1 of the things that I talk about in there is when you have decided, okay, I want to convince my team that we need to adopt TypeScript or something, for example. 1 of the best things you can do is put together the, like, first convince yourself that it's a good idea. So that means you gotta \n\n[00:21:15] like, look at all the pros and cons. And then you go to all the stakeholders individually and you say, hey, here are like, you plan the meeting, they all know it's gonna happen. And you say, we're gonna have this meeting, I just wanna make sure we make the most of the time. So like, what concerns do you have about this? And you just listen and like \n\n[00:21:35] let them say all their concerns and in the back of your mind you're like yep, I've addressed that. Oh no, that's a new 1, like let me think about that. And then you can like kind of talk with them a little bit about it as well just to see kind of where they're at. So that way, when you go into the meeting, you know all of the concerns of everybody and you address them all up front. And then \n\n[00:21:55] when you're all done, they can't even say that their concerns anymore cause you already talked about it. And then Vee is just like, well, I already answered that question. So, \n\n[00:22:02] Speaker 1:\nIt's such a good idea to like pre-float things before you have this like massive meeting and I also think, I like to look at, I have certain people at work that, give me different opinions, right? Like I know that this person is going to be very focused on the customer and this person is going to be really focused on like end user experience or like \n\n[00:22:23] performance or something, everyone's like in charge of something else. And they're kind of like my board. Like I think of them as my board of directors who is going to give me like insight in many different ways. So I think pre-floating the idea, kind of like you said, just kind of makes that final review a lot smoother. And then the issues that are \n\n[00:22:43] brought up in that meeting would just be a little bit more like minor or like nitpicks. \n\n[00:22:49] Speaker 0:\nYeah, yeah. Well, that's very helpful, I think, for folks. If you don't mind, I'd like to transition the conversation a little bit over to more specifically what you work on, the product that you offer. But speaking more generally around edge computing and why \n\n[00:23:09] I'd like to get your take on why so much of the web is pushing us toward the edge multi-instance or being able to have distributed applications and data and all of that stuff, so Navi why are you excited about that? And why does it matter to you and your users? \n\n[00:23:29] Speaker 1:\nSure so This idea of serverless I think is a little bit misleading sometimes because it doesn't mean that there's no server, but for the user, it just means that you are not managing the server. You are paying someone else to manage the server for you. And in fact, it's not just 1 server. It could be many servers. I think there's a lot of providers out there \n\n[00:23:49] at CloudFlare that give you maybe just a few servers, but CloudFlare is 1 of the providers that's like, we want you to be able to run your application anywhere and everywhere, which I think is super cool. The part that I really like about serverless is the, like, you don't have to manage it part. I think again, being not a \n\n[00:24:09] web developer, but being able to get my personal site up, up and running super easily and not have to worry about like the heavy lifting of managing infrastructure or paying egregious prices is super cool to me. And I feel like it actually unlocks and enables web development to anyone. \n\n[00:24:29] The best part about my job. So I can talk a little bit about what my product is. I feel like maybe I didn't explain that properly. Sure. So Cloudflare Pages is, like I said, a build and deployment platform. So when you're building your application, you would basically use Pages to deploy that to the CloudFlare network. Pages is super unique and is \n\n[00:24:49] really cool because we like to integrate with the developer experience that you already have, or your developer workflow that you already have. A lot of users we noticed are using GitHub or GitLab or other source control management tools. We thought, what if we integrated with 1 of those platforms? That all you have to do is just commit to your repo and we can \n\n[00:25:09] build and deploy and handle all the CI and CD stuff on our end. Like I said, I think the super cool thing about Pages is that you don't have to worry about setting up all of the infrastructure to get to a successfully deployed application. Like I said, 1 of the really cool things about my job is, \n\n[00:25:30] I'm not just interacting with enterprise customers. It's not just like a B2B situation. It's actually a very B2C situation because there's developers who I've spoken to in Egypt, in Guatemala, like really far places in the world that are all trying to achieve the \n\n[00:25:50] same thing. And also in different socioeconomic statuses, like I feel like products like this are making web development actually super accessible to all different types of populations of people, which I think is really cool because that wasn't always the case before. You needed to have the computer, you \n\n[00:26:10] needed to have the financial situation to be able to get a website up and running. So I feel like serverless is actually making it also pretty accessible for folks to have a website and even to start a business, right? So I really love that about the serverless space in general. But I think from a business \n\n[00:26:30] standpoint, Serverless also serves as a way for you to kind of relinquish yourself from having to stress about your site going down or reaching customers all over the globe, right? So with Fodler specifically, if you have users that are all the way \n\n[00:26:51] in Australia, but you're located in the US, we will scale your application. You can reach users within a certain millisecond of time no matter where they are. I guess accessibility is my biggest takeaway from serverless. Like it really makes it accessible from a user standpoint, but also from a builder standpoint. \n\n[00:27:12] I think that's, it's for me, That's like the biggest advantage to using going serverless. \n\n[00:27:19] Speaker 0:\nYeah, yeah, absolutely. And the unique aspect of Cloudflare, I think, is just the number of regions that are available. Like, I think last I checked it was, oh, I'm not, I can't say the number because I'll probably be wrong. What is it? \n\n[00:27:35] Speaker 1:\n200. So I think by using Cloudflares, I'm going to use the approved statistics. \n\n[00:27:40] Speaker 0:\nOh, okay. \n\n[00:27:41] Speaker 1:\nUsing Cloudflares network, you are within 50 milliseconds of the world's internet connected, like 95% of the world's internet connected \n\n[00:27:56] Speaker 0:\npopulation. \n\n[00:27:58] Speaker 1:\nAnd then I think it's in around 270 plus cities is the metric, which is really crazy. Yeah, when you think about that, there's always like a little map with all of the dots all over the world. And when you look at that, you're like, wow, like, yeah, anyone can start a business. Anyone can deploy an application, but then also scale that application, right? Like, \n\n[00:28:20] I also gave a talk the other day about, I was like telling the story of a user who was building a game app, like a chess app. And you're a user, you start with your, start playing this game with your friends that you've built. But then suddenly your game goes viral and it starts reaching like the UK and Australia and suddenly \n\n[00:28:40] the costs are like way more than what you thought it was. And like performance is all whack because you have a lot of latency from like the connection between like Australia and the US. And I think that what we're trying to solve at Cloudflare is, hey, you actually don't have to worry about that. You can be a developer that has 10 users. You can be a developer that has 100,000 \n\n[00:29:01] users. You can be a developer with all your users in 1 area, or you can be a developer with all your users in 1 area, or you can be a developer with users in every single region of the world. And I think that taking away that stress of, oh my God, what happens if my site goes viral on Hacker News 1 day and I'm not ready, I think is just like super cool. \n\n[00:29:19] Speaker 0:\nYeah, yeah. So I think it'd probably be a good idea for me to mention that in for Epic web, I actually, I don't use Cloudflare. I think Cloudflare is very cool. And for all of the reasons that you said, we are using fly.io, \n\n[00:29:40] which is a different take on serverless where it's like serverless with long running servers. So you still don't have to worry about setting or managing the servers and all of that stuff. But your server is long running, so more traditional. And the reason, so here we can talk a little bit about trade-offs and stuff. \n\n[00:30:00] The trade-off that you make going with a traditional serverless architecture is that it's not long running. And so you spin up and then spin down and you don't really control that. And so doing things like background jobs or long connections to databases and stuff like that \n\n[00:30:21] is, or like even with Cloudflare it's running in V8 isolates. And so you don't have all of the power of node although Cloudflare is that those V8 isolates are pretty capable. It's pretty cool what you can do. But I was, for my personal website, I use FFmpeg to generate \n\n[00:30:41] podcast episodes and stuff. Like there are just some things that you, it's really nice to have a long running server to be able to do. So that's why I recommend Fly, but that's also why I wanted to talk about this because there are use cases that fit within, \n\n[00:31:01] really nicely within Cloudflare. And I just think that it's super cool what we can do with our, the hosting options that we have available to us. \n\n[00:31:13] Speaker 1:\nI think so too. I think also Cloudflare will never be, or our developer platform at least, will never be the platform that says, like, this is the only way to do something. And I think we are very willing and very happy for developers to choose what's right for them. It's also part of the reason why we have not \n\n[00:31:33] made super bold claims on like, this is the only framework, but we have really great relationships with a lot of different frameworks. Remix is definitely 1 of our very coveted favorite frameworks that we like to deploy on the platform, but we really like to meet developers where they are. So I think that the point I'm trying to make is that your use case and what you're building \n\n[00:31:54] is really contingent on what your stack is. And I think that's okay. \n\n[00:32:00] Speaker 0:\nYeah, absolutely. So I have the Epic stack that is actually, basically Epic web is like, let's build the Epic stack together. That's sort of what the workshops are. And the big premise of the Epic stack is the fact that there are so many different options that we can choose from for how \n\n[00:32:20] we build and deploy our applications. And the fact is that most of those options will work just fine. It doesn't really matter too much which 1 you choose. There are some things that some options can do better than others, but at the end of the day, you'll probably be fine with any of them. And so even though I say EpicStack deploys to fly and you can \n\n[00:32:41] deploy to multiple regions, maybe not 250 or whatever, but like still many regions throughout the world and everything, that will probably suit the majority, the vast majority of people building apps. But same thing can be said for the Cloudflare side, that you can be satisfied for most use cases \n\n[00:33:01] on top of Cloudflare as well, which I think is pretty cool. \n\n[00:33:05] Speaker 1:\nExactly, and every day we learn like certain use cases that maybe Cloudflare is not good for, and then we optimize and we're like, hey, this is important, like, let's go figure this out. So that's why the user conversations are so important. And that's why being a PM is a super golden job because you kind of figure out what the holes are in your offering. \n\n[00:33:24] Speaker 0:\nWow, way to bring that back full circle. \n\n[00:33:26] Speaker 1:\nI know, full circle, right? \n\n[00:33:28] Speaker 0:\nWell done. That's awesome. Well, it's been such a lovely conversation with you. Do you have anything else that you wanted to talk about? We didn't get a chance to chat about. \n\n[00:33:37] Speaker 1:\nNo, I think I just want to say that if you are taking this course and you feel like it's challenging, I feel like that's a good thing. I remember starting off, which I feel like you probably have done a really great job to make it not feel like it's super, super challenging and that \n\n[00:33:53] Speaker 0:\npeople can't get to the core of it. \n\n[00:33:56] Speaker 1:\nBut I just remember, yeah, going through my computer science courses for the first time, or even like starting this job and being like, oh my gosh, there's so much to learn. And there is so much to learn, but I feel like it's so exciting to be in a space. It's so exciting to learn the different trends that happen, the way that like opinions fluctuate over \n\n[00:34:16] time. I think it's a really exciting space to be in. I would just want to say, keep at it. And I'm also like, if you become a developer and you want to start using CloudFlare products, I love to have developer chats. I love to listen to you. I like to talk to novice developers. I like to talk to experienced developers. So definitely get in touch with me if you can. \n\n[00:34:37] Speaker 0:\nThat's awesome. What is the best place for people to get in touch with you then? \n\n[00:34:41] Speaker 1:\nTwitter, my handle is at N-E-V-I-K-A-S-H-A-H. Definitely feel free to reach out. \n\n[00:34:49] Speaker 0:\nAwesome, do you mind me asking what the K stands for? \n\n[00:34:52] Speaker 1:\nNevica is actually my real name. \n\n[00:34:55] Speaker 0:\nAh, okay. \n\n[00:34:55] Speaker 1:\nYeah, Nevi's like my nickname. I don't, I think my dad, Do you know who Nev Campbell is, by any chance? \n\n[00:35:03] Speaker 0:\nMaybe. I'm not sure. \n\n[00:35:04] Speaker 1:\nShe's an actress. She just was in a show called Lincoln Lawyer. And she was also in Party of 5, which is an older show. But my dad had a huge crush on her. And he was like, we have to name my daughter Nev. And then my mom said, doesn't sound Indian enough, because my family's Indian. So she kind of made up this name, Nevica, and that's what my name is. \n\n[00:35:23] Speaker 0:\nI love it. That's great. So there's probably nobody else named Nevica, but that's pretty cool. \n\n[00:35:27] Speaker 1:\nYou know what? Apparently there is, because I've been trying to get that Instagram handle and I like messaged this person a bunch of times and I was like, hey, do you mind if I pay you for the Instagram handle? Haven't heard back. But I wish them well. Thank you so much for having me on this. \n\n[00:35:45] Speaker 0:\nI'm such a big \n\n[00:35:46] Speaker 1:\nfan of Remix and I'm such a huge fan of Remix and I'm such a huge fan of you. So it's been honestly an honor to be here. \n\n[00:35:51] Speaker 0:\nOh, well, you're so nice, Nevi. It's been an honor to have you. And thanks everybody for tuning in. And yeah, we'll chat with you all later. \n\n[00:35:59] Speaker 1:\nCool, See you later!"
          },
          "state": "ready",
          "title": "Nevi Shah.mp4"
        },
        "solution": null
      },
      {
        "_id": "Davc6tzHYCp36XjM2Ft8OK",
        "_type": "interview",
        "title": "From Tech Sales to Engineering with Shaundai Person",
        "solution": null,
        "_updatedAt": "2023-10-19T00:29:28Z",
        "description": "Shaundai, senior software engineer at Netflix, shares insights on transitioning from tech sales, highlighting the value of individual strengths and Netflix's collaborative culture",
        "body": "Shaundai, a senior software engineer at Netflix, sits down to discuss their career transition from tech sales to software engineering.\n\nBoth Kent and Shaundai emphasize the role of individual strengths, such as communication skills, in career advancement. This is accentuated in an expansive corporate environment like Netflix, where interaction and collaboration with various departments become inevitable.\n\nNetflix's culture is likened to a village that fosters autonomy and emphasizes individual skill sets. The company has recently diversified its senior engineering roles into various levels, offering more avenues for growth.\n\nAs the episodes comes to a close, Shaundai and Kent explore the concept of the \"T-shaped\" engineer, who possesses both depth and breadth in technical skills.\n\n## Resources\n\n- [Shaundai Person's Twitter](https://twitter.com/shaundai)",
        "slug": "from-tech-sales-to-engineering-with-shaundai-person",
        "videoResource": {
          "originalMediaUrl": "https://egghead-video-uploads.s3.amazonaws.com/epic-web/interviews/Shaundai+Person.mp4",
          "duration": 2159.133333,
          "transcript": {
            "srt": "1\n00:00:00,140 --> 00:00:11,540\nWhat is up everybody? I am joined by 1 of my very dear friends Shonda. Oh my goodness I almost said you're wrong and like I was getting partway through it and like I'm gonna say this wrong and I feel so bad\n\n2\n00:00:11,880 --> 00:00:13,340\nIt's a shonda person.\n\n3\n00:00:13,660 --> 00:00:14,519\nSay hi Shonda\n\n4\n00:00:15,719 --> 00:00:16,219\nHi\n\n5\n00:00:17,460 --> 00:00:18,240\nHow embarrassing\n\n6\n00:00:19,080 --> 00:00:19,580\nSo\n\n7\n00:00:19,920 --> 00:00:26,260\ncuz like the thing is that you get, like people say your name wrong all the time and I am not 1 of those people. I say your name wrong.\n\n8\n00:00:26,660 --> 00:00:29,020\nI know. I know. We've known each other for a while.\n\n9\n00:00:29,439 --> 00:00:34,780\nYeah, yeah. I actually, I always like to start these conversations by telling people how we met. And so I\n\n10\n00:00:35,160 --> 00:00:35,660\nremember,\n\n11\n00:00:36,300 --> 00:00:40,360\nlet's see. Well, we definitely met online first, like the standard\n\n12\n00:00:40,760 --> 00:00:42,380\nmet you on Twitter and met you\n\n13\n00:00:43,380 --> 00:00:46,940\nin real life at a conference. I'm trying to remember which conference it was though.\n\n14\n00:00:48,240 --> 00:00:49,260\nSo I don't remember.\n\n15\n00:00:49,640 --> 00:00:52,940\nThe first conference that I ever did in person was RemixConf.\n\n16\n00:00:53,640 --> 00:00:54,140\nSo,\n\n17\n00:00:54,480 --> 00:00:54,980\nyeah.\n\n18\n00:00:55,840 --> 00:00:57,660\nDid we not meet before RemixConf?\n\n19\n00:00:58,260 --> 00:01:03,980\nNo, no. Okay, my goodness. Isn't that crazy though? Like when you think about it. I feel like I knew you way better.\n\n20\n00:01:05,080 --> 00:01:10,360\nYeah, we did. So, okay. I do remember the first time that we talked, which was,\n\n21\n00:01:10,920 --> 00:01:15,560\nwe did a space when Twitter spaces was a big thing. Oh, right. Yeah. Yeah.\n\n22\n00:01:15,860 --> 00:01:18,740\nYeah. And so that was the, I think the first time that\n\n23\n00:01:19,120 --> 00:01:21,680\nwe spoke together, we were just on a panel together.\n\n24\n00:01:22,060 --> 00:01:23,080\nIt was me, you,\n\n25\n00:01:24,080 --> 00:01:24,979\nMichael Chan\n\n26\n00:01:25,440 --> 00:01:27,420\nand Ben, I think\n\n27\n00:01:27,740 --> 00:01:28,240\nfrom,\n\n28\n00:01:28,620 --> 00:01:33,540\nhe was at Stitch Fix at the time. Oh yeah. Like Badoo. Yeah. Yeah.\n\n29\n00:01:34,340 --> 00:01:37,400\nAnd then I forget who was hosting it. I think it was Will Johnson,\n\n30\n00:01:37,720 --> 00:01:39,020\nbut definitely.\n\n31\n00:01:39,400 --> 00:01:41,640\nI'm actually talking to Will this afternoon. Oh,\n\n32\n00:01:42,040 --> 00:01:46,760\nawesome. Yeah, tell him I said, what's up? Like, yeah, that's my, that's my,\n\n33\n00:01:47,380 --> 00:01:47,880\nanother\n\n34\n00:01:48,240 --> 00:01:51,400\nlong term, long time dear friend of mine. Awesome.\n\n35\n00:01:51,820 --> 00:01:55,340\nYeah. Yeah, well, it's been great knowing you for all this time.\n\n36\n00:01:55,840 --> 00:01:56,340\nAnd\n\n37\n00:01:56,820 --> 00:02:11,020\nI think, like, I have some history with you and I know you pretty well. I think it'd be good for people to get to know you a little bit. So could you intro yourself? And actually, I'll also, before you do that, I'll mention that Shondae was on a episode of the Chats with Kent podcast\n\n38\n00:02:11,400 --> 00:02:16,600\nthat you can find on my website too. And we talked about a lot of great stuff there as well. But\n\n39\n00:02:17,200 --> 00:02:19,160\nyeah, Shondae, who are you?\n\n40\n00:02:20,020 --> 00:02:24,680\nAwesome, yeah, I am Shondae person. I am a senior software engineer at Netflix.\n\n41\n00:02:25,380 --> 00:02:26,940\nJust hit my two-year mark\n\n42\n00:02:27,540 --> 00:02:28,400\nlast month\n\n43\n00:02:29,060 --> 00:02:36,140\nSo about a month ago rats. That's awesome. It's it only been 2 years. I feel like it's been longer. I know. I know. I've just been\n\n44\n00:02:36,580 --> 00:02:39,060\nlike, I've gone through, it feels\n\n45\n00:02:39,480 --> 00:02:55,240\nfast and short at the same time or fast. Yeah. Long and short at the same time. It's like the days are long, but the years are short. And I just look up and I'm like, wow, I can't believe it's been that long, but I still feel in a lot of ways like a newbie at the same time.\n\n46\n00:02:55,680 --> 00:02:59,560\nBut yeah, a newbie who works as a senior engineer at Netflix. Yeah. Okay.\n\n47\n00:03:00,720 --> 00:03:01,220\nExactly.\n\n48\n00:03:01,640 --> 00:03:02,140\nExactly.\n\n49\n00:03:03,820 --> 00:03:05,320\nYeah. So my team\n\n50\n00:03:05,740 --> 00:03:09,160\nis the productivity engineering team. So we're\n\n51\n00:03:09,720 --> 00:03:10,220\nconcentrated\n\n52\n00:03:10,680 --> 00:03:13,040\non providing a great experience\n\n53\n00:03:13,580 --> 00:03:17,940\nfor other Netflix developers. So other Netflix developers are our customers\n\n54\n00:03:18,680 --> 00:03:24,740\nand doing things that are in the interest of making them more productive, whatever that means.\n\n55\n00:03:25,580 --> 00:03:31,480\nAnd I'll talk more about that, but yeah, so my day to day job is I'm in a UI engineer.\n\n56\n00:03:32,060 --> 00:03:35,600\nI, my tech stack is React, TypeScript\n\n57\n00:03:36,360 --> 00:03:37,460\nand GraphQL.\n\n58\n00:03:38,200 --> 00:03:42,220\nAnd I'm looking to learn more about the backend as well. Like I caught myself\n\n59\n00:03:42,520 --> 00:03:50,880\nthe other day, it was on a Saturday at night, looking up database architecture and like finding that I was fascinated like I was a really...\n\n60\n00:03:52,360 --> 00:03:58,640\nWell, who of us hasn't gotten sucked into database architecture on a Saturday night? Oh it's true, it's true.\n\n61\n00:03:59,440 --> 00:04:02,760\nNo, just like 1 of the regular nerds. Yeah.\n\n62\n00:04:05,380 --> 00:04:08,980\nVery cool. Yeah. So, that's me. Outside of work,\n\n63\n00:04:09,340 --> 00:04:10,580\nI also,\n\n64\n00:04:10,940 --> 00:04:12,180\nI'm a conference speaker.\n\n65\n00:04:16,880 --> 00:04:18,980\nI love being in front of people and I love teaching. I am working on a course as well\n\n66\n00:04:19,540 --> 00:04:23,800\non TypeScript, TypeScript for JavaScript developers, so you can find that at ts4js.com,\n\n67\n00:04:25,440 --> 00:04:25,940\nt-s-f-o-r-j-s.com.\n\n68\n00:04:27,640 --> 00:04:28,680\nAnd I'm a mom\n\n69\n00:04:29,060 --> 00:04:29,740\nof 1\n\n70\n00:04:30,280 --> 00:04:32,100\nfive-year-old, soon-to-be six-year-old,\n\n71\n00:04:33,140 --> 00:04:33,920\nvery fun\n\n72\n00:04:34,460 --> 00:04:34,960\nson.\n\n73\n00:04:35,420 --> 00:04:36,800\nYeah, he's adorable.\n\n74\n00:04:38,580 --> 00:04:39,080\nWell,\n\n75\n00:04:39,420 --> 00:04:43,220\nthat is, yeah, thank you for sharing all that I I would like to\n\n76\n00:04:43,940 --> 00:04:44,940\nstart with\n\n77\n00:04:46,860 --> 00:04:49,660\nMaybe with the fact that you are a senior\n\n78\n00:04:50,140 --> 00:04:52,160\nengineer at Netflix, which is,\n\n79\n00:04:53,140 --> 00:05:04,440\nlike, my understanding of Netflix is they have a very high bar for the engineers that they hire, and the fact that you've been there for 2 years, yeah, yeah. The fact you've been there for 2 years like says that\n\n80\n00:05:05,740 --> 00:05:09,660\neither they haven't found out in all that time, or you like legit,\n\n81\n00:05:10,080 --> 00:05:12,420\na legit senior engineer at Netflix,\n\n82\n00:05:12,840 --> 00:05:16,900\nwhich I think is more likely based on what I know of you.\n\n83\n00:05:18,000 --> 00:05:19,040\nAnd this is\n\n84\n00:05:19,400 --> 00:05:26,300\nnot your first job. And we kind of talked about this more in depth in our other chat, but I'd like to\n\n85\n00:05:27,660 --> 00:05:30,400\nget a little sense of like, how does 1\n\n86\n00:05:31,180 --> 00:05:31,960\nget into\n\n87\n00:05:32,840 --> 00:05:35,580\nthe place where you're at as quickly as you did?\n\n88\n00:05:35,980 --> 00:05:36,480\nYeah,\n\n89\n00:05:37,300 --> 00:05:37,800\nso\n\n90\n00:05:38,360 --> 00:05:42,180\nI'm happy to go through a little bit of the background\n\n91\n00:05:44,180 --> 00:05:45,840\nbehind where I am.\n\n92\n00:05:46,500 --> 00:05:51,000\nAnd then I can talk about kind of how, how to get there. So I'm a career switcher.\n\n93\n00:05:51,820 --> 00:05:57,080\nI spent the majority of my career in sales as tech sales.\n\n94\n00:05:57,720 --> 00:06:03,480\nMost of it was tech sales, but I also I've sold everything from nail polish to bed sheets, to\n\n95\n00:06:04,200 --> 00:06:05,380\nknives, to,\n\n96\n00:06:06,620 --> 00:06:07,700\nconsulting services,\n\n97\n00:06:08,140 --> 00:06:08,640\nto,\n\n98\n00:06:10,240 --> 00:06:11,820\nto CSOs and to CMOs.\n\n99\n00:06:12,380 --> 00:06:16,560\nAnd then, tech was my favorite. And what III\n\n100\n00:06:16,560 --> 00:06:17,720\nstayed away from\n\n101\n00:06:18,260 --> 00:06:21,060\nthings tech because I thought it was too\n\n102\n00:06:22,540 --> 00:06:29,140\nnerdy. Now, let me caveat that because I love, I've always embraced being a nerd.\n\n103\n00:06:29,820 --> 00:06:31,580\nAnd I've always embraced being smart,\n\n104\n00:06:32,320 --> 00:06:34,780\nbut I've always been a social person.\n\n105\n00:06:35,740 --> 00:06:36,240\nAnd\n\n106\n00:06:36,760 --> 00:06:40,880\nthe amount of social depends, depends on what I'm going through in life right now. But like,\n\n107\n00:06:41,640 --> 00:06:49,440\nI've always been a social person and so I've looked for positions where I can interact with people. I love psychology. I love\n\n108\n00:06:50,380 --> 00:06:51,520\nsoft skills. I love\n\n109\n00:06:51,900 --> 00:06:55,020\njust connecting with other folks, human to human.\n\n110\n00:06:55,520 --> 00:06:56,900\nAnd I felt like\n\n111\n00:06:57,280 --> 00:06:57,780\nengineering\n\n112\n00:06:58,320 --> 00:06:59,180\nand careers\n\n113\n00:06:59,820 --> 00:07:03,060\nwhere you're just looking at a screen or looking at a sheet of paper,\n\n114\n00:07:03,520 --> 00:07:10,760\nlike accounting and things like that. I was like, those are too antisocial. Like I wouldn't be happy just being in a silo. So I stayed away from it.\n\n115\n00:07:12,440 --> 00:07:15,540\nI kind of fell into my first job\n\n116\n00:07:16,380 --> 00:07:19,420\nin tech, my sales job at tech and in tech.\n\n117\n00:07:19,740 --> 00:07:21,480\nAnd I was selling to engineers\n\n118\n00:07:21,820 --> 00:07:22,320\nand.\n\n119\n00:07:23,300 --> 00:07:25,820\nIt was just like 1 of those things where\n\n120\n00:07:26,400 --> 00:07:28,020\nyou just find yourself,\n\n121\n00:07:28,900 --> 00:07:31,620\ngetting really caught up and passionate about\n\n122\n00:07:32,120 --> 00:07:32,940\ndifferent things.\n\n123\n00:07:33,400 --> 00:07:37,580\nLike I had fun selling, but I found that the thing that I found most interesting\n\n124\n00:07:37,900 --> 00:07:41,080\nwas the things that the engineers were doing with our software.\n\n125\n00:07:41,760 --> 00:07:44,620\nLike the software that I was selling is called MATLAB\n\n126\n00:07:44,960 --> 00:07:50,640\nand Simulink. So a lot of people who went for computer science degrees probably use that in school, but it's\n\n127\n00:07:51,420 --> 00:07:57,580\nmathematical computation software and software for simulating dynamic systems, like all the nerdiest stuff.\n\n128\n00:07:58,140 --> 00:08:01,420\nSo NASA was 1 of my customers, Like NASA was,\n\n129\n00:08:01,860 --> 00:08:03,840\nso I'm selling to literal rocket scientists.\n\n130\n00:08:04,220 --> 00:08:04,720\nAnd\n\n131\n00:08:05,140 --> 00:08:08,280\nlike, so some of my customers are building rovers\n\n132\n00:08:08,800 --> 00:08:23,180\nto bring us to the moon. Other customers are farmers who are trying to calculate the amount of chemicals and combination of chemicals that are gonna grow the biggest oranges in the soil. And I'm like, wow, this is cool stuff. Like you can do so much with technology.\n\n133\n00:08:23,860 --> 00:08:34,299\nWe have robotics competitions and things like that. And I'm like, just tech is, it's such a cool place. But I didn't know if I had a place because I like to speak to people.\n\n134\n00:08:35,419 --> 00:08:37,580\nSo that's why I got into sales\n\n135\n00:08:38,039 --> 00:08:38,539\nand,\n\n136\n00:08:38,960 --> 00:08:44,440\nthere were different highlights in my life where I'm like, you know, tech is something that I should figure out,\n\n137\n00:08:45,060 --> 00:08:45,720\nor like\n\n138\n00:08:46,020 --> 00:08:46,960\nlearn more about.\n\n139\n00:08:47,440 --> 00:08:50,040\nAnd the big trigger for me was when\n\n140\n00:08:51,500 --> 00:08:55,900\nI left my sales job to start a business and I went to build my website\n\n141\n00:08:56,680 --> 00:09:00,580\nand I wanted to customize the site. And so I had to learn\n\n142\n00:09:01,080 --> 00:09:04,420\nLiquid, which is Shopify's Ruby-based language. It was a Shopify site.\n\n143\n00:09:04,940 --> 00:09:11,540\nAnd I found that I was having so much more fun customizing the site than I was actually like\n\n144\n00:09:11,920 --> 00:09:12,940\ngetting these deals.\n\n145\n00:09:13,260 --> 00:09:13,620\nSo,\n\n146\n00:09:15,060 --> 00:09:17,220\nSo yeah, it was like a natural transition, but\n\n147\n00:09:17,560 --> 00:09:19,140\nall that to say, I\n\n148\n00:09:20,080 --> 00:09:21,300\nstarted in engineering\n\n149\n00:09:22,540 --> 00:09:25,020\nthrough, I'm about, it's about to hit 3 years.\n\n150\n00:09:25,840 --> 00:09:33,760\nIs that right? Yeah, it's, this is 2013. Yeah. So I'm almost at my 3 year anniversary in, it'll be next month, 3 year anniversary in\n\n151\n00:09:34,200 --> 00:09:35,140\nengineering itself.\n\n152\n00:09:35,460 --> 00:09:36,560\nMy first job\n\n153\n00:09:37,420 --> 00:09:37,920\nwas\n\n154\n00:09:38,440 --> 00:09:43,680\nat a company. My first engineering job was at a company that built software for salespeople.\n\n155\n00:09:44,240 --> 00:09:46,300\nSo it was perfect for me because\n\n156\n00:09:46,760 --> 00:09:48,420\nI knew the customer\n\n157\n00:09:48,760 --> 00:09:49,260\nand\n\n158\n00:09:49,940 --> 00:09:52,320\nI was previously the customer. So,\n\n159\n00:09:53,640 --> 00:09:54,400\nI could\n\n160\n00:09:54,800 --> 00:10:00,600\nnot only flex my UI skills and all the things that I learned from courses like Epic web,\n\n161\n00:10:02,360 --> 00:10:02,860\nbut\n\n162\n00:10:03,480 --> 00:10:09,020\nalso I was able to leverage skills that I had learned in sales, like my UX skills,\n\n163\n00:10:10,640 --> 00:10:13,940\nmy passion for people and understanding what makes them tick\n\n164\n00:10:14,340 --> 00:10:14,840\nand\n\n165\n00:10:15,300 --> 00:10:17,060\nbringing the conversation\n\n166\n00:10:17,540 --> 00:10:20,340\nnot about just like tech and which buttons\n\n167\n00:10:21,100 --> 00:10:28,760\nshould like be here or what they should look like, but more of like, how are we going to best serve the customer? And so,\n\n168\n00:10:30,300 --> 00:10:31,780\nI'm having conversations with customers still.\n\n169\n00:10:32,460 --> 00:10:33,840\nI am having conversations\n\n170\n00:10:34,220 --> 00:10:34,720\nwith\n\n171\n00:10:35,020 --> 00:10:37,120\nother teams like design. I'm\n\n172\n00:10:37,840 --> 00:10:39,640\nhaving conversations with the backend team.\n\n173\n00:10:39,960 --> 00:10:40,460\nAnd\n\n174\n00:10:41,400 --> 00:10:43,940\nI'm like 1, I'm able to flex those,\n\n175\n00:10:44,280 --> 00:10:45,980\nthat muscle of like communication\n\n176\n00:10:46,560 --> 00:10:48,060\nand my passions for\n\n177\n00:10:48,400 --> 00:10:56,420\nhaving that human to human connection. But I'm also bringing that human, that level of humanity into the tools that I'm building because\n\n178\n00:10:56,820 --> 00:10:59,040\nI care about the user's experience.\n\n179\n00:10:59,380 --> 00:11:04,980\nI also care about the developer experience too, which makes productivity engineering such a perfect\n\n180\n00:11:05,860 --> 00:11:07,560\ncareer for me. So,\n\n181\n00:11:08,640 --> 00:11:09,620\nso yeah, I,\n\n182\n00:11:10,080 --> 00:11:13,440\nto answer, to circle back about your question about how do you get\n\n183\n00:11:13,840 --> 00:11:16,140\nto where I'm at so, so,\n\n184\n00:11:16,540 --> 00:11:17,300\nso fast,\n\n185\n00:11:20,140 --> 00:11:28,120\nI, If I had to put it down on 1 thing, cause there's a combination of a ton of things that had to fall into place, but I would say\n\n186\n00:11:28,620 --> 00:11:29,660\nplay to your strengths.\n\n187\n00:11:30,880 --> 00:11:33,620\nAnd 1 of my strengths I would say is\n\n188\n00:11:33,960 --> 00:11:34,460\nthis\n\n189\n00:11:35,380 --> 00:11:39,880\nability to connect with other people. And so I've used that as,\n\n190\n00:11:41,400 --> 00:11:45,980\na way to network and to find jobs. I've used that as a way to,\n\n191\n00:11:46,680 --> 00:11:48,100\ncommunicate and also\n\n192\n00:11:48,780 --> 00:12:04,460\ncontinue to grow in the way that I communicate. Like, I don't feel like anybody is a master communicator that never, like, you know, you, you get to a stopping point and you don't have anything else to learn about how to communicate with people. I'm always looking to grow and like be a better communicator, be more empathetic,\n\n193\n00:12:04,840 --> 00:12:05,640\nbe more understanding,\n\n194\n00:12:06,900 --> 00:12:07,800\nbe more articulate\n\n195\n00:12:08,480 --> 00:12:08,980\nand\n\n196\n00:12:10,160 --> 00:12:11,260\nprovide people\n\n197\n00:12:11,640 --> 00:12:12,140\nvalue\n\n198\n00:12:12,540 --> 00:12:15,560\nin the ways that they want to be provided value. So,\n\n199\n00:12:16,640 --> 00:12:19,100\nand what I mean by that is there's a lot of,\n\n200\n00:12:19,940 --> 00:12:24,820\nthere's a way that you can provide value that's like, okay, I'm doing something that I think is important,\n\n201\n00:12:25,920 --> 00:12:26,420\nbut\n\n202\n00:12:27,380 --> 00:12:32,660\nhave you proved that value with your customers? Like, is that something that your customer thinks is important too. So\n\n203\n00:12:33,180 --> 00:12:41,180\nthat's something that I care about is just making sure that the people around me, the stakeholders are happy and I'm providing the type of value that\n\n204\n00:12:41,500 --> 00:12:43,480\nthey're looking for from me. So\n\n205\n00:12:44,200 --> 00:12:48,120\nvery broad answer, But yes, I would say that like platypus strengths\n\n206\n00:12:49,020 --> 00:12:52,880\nand human to human connection is my 1 of my strengths. So that's\n\n207\n00:12:53,420 --> 00:12:58,680\nThat's what I attribute to why I am where I am. Yeah. Yeah, I think\n\n208\n00:12:59,340 --> 00:12:59,840\nyour\n\n209\n00:13:00,360 --> 00:13:01,420\ncare for communication\n\n210\n00:13:02,060 --> 00:13:04,800\nalso probably helps you be a little more assertive\n\n211\n00:13:05,200 --> 00:13:06,500\nin like a good way.\n\n212\n00:13:07,360 --> 00:13:14,280\nNot overbearing, but like, you know, like, hey, no, I was a part of this or, hey, I wanna be a part of this or whatever.\n\n213\n00:13:15,240 --> 00:13:22,040\nSo yeah, I think that's a lot of really good pieces of advice, also like caring about the customer or even in the context of\n\n214\n00:13:22,760 --> 00:13:24,100\nwork at a big organization,\n\n215\n00:13:24,800 --> 00:13:29,700\nyou can almost consider your boss to be the customer of you, you know, like you are\n\n216\n00:13:30,060 --> 00:13:31,660\nproviding services for your boss.\n\n217\n00:13:33,320 --> 00:13:35,400\nAnd yeah, so I think that\n\n218\n00:13:35,800 --> 00:13:38,500\nmakes a lot of sense and hopefully folks listening\n\n219\n00:13:39,280 --> 00:13:42,840\nhave get some good takeaways from that. Thanks, yeah, yeah.\n\n220\n00:13:43,200 --> 00:13:44,240\nYes, and to\n\n221\n00:13:45,180 --> 00:13:47,460\nExpound on your point about being assertive.\n\n222\n00:13:47,780 --> 00:13:49,180\nYes. It's also\n\n223\n00:13:49,860 --> 00:13:52,320\na work in progress as well. So\n\n224\n00:13:53,200 --> 00:13:54,160\nI found that\n\n225\n00:13:55,120 --> 00:13:55,900\nso in\n\n226\n00:13:56,260 --> 00:14:04,120\nmy nature is to be a people pleaser and it's like I care about human human to human connection, but sometimes to a fault. And\n\n227\n00:14:04,600 --> 00:14:05,240\nit's like,\n\n228\n00:14:05,900 --> 00:14:12,020\nI care so much about you liking me that I'm willing to sacrifice things that make me happy so that you can be happy.\n\n229\n00:14:12,500 --> 00:14:16,860\nSo that is something that I'm continuously working on is just like setting boundaries.\n\n230\n00:14:18,120 --> 00:14:26,960\nI'm always like, oh yes, I wanna be in the room, but it's like, when do you say no? When do you stop? What are the limits and things? And\n\n231\n00:14:27,840 --> 00:14:29,540\nhow much are you willing to bend\n\n232\n00:14:30,140 --> 00:14:44,080\nin order to like, you know, keep yourself happy and keep your sanity at the same time. Yeah, I think that is, that could be a whole other podcast to talk about, like, how do you manage that without burning out and all that stuff too? Yes, absolutely.\n\n233\n00:14:44,660 --> 00:14:45,160\nSo,\n\n234\n00:14:47,020 --> 00:14:49,800\ntransitioning a little bit more into the next,\n\n235\n00:14:50,660 --> 00:14:53,800\nso you got your job at Netflix and things have been going super well.\n\n236\n00:14:54,440 --> 00:14:56,140\nAnd you mentioned to me that\n\n237\n00:14:56,580 --> 00:15:01,820\nthere's a little bit of a reorg and you're looking toward the future of what your\n\n238\n00:15:02,620 --> 00:15:04,620\nopportunities are within Netflix,\n\n239\n00:15:05,500 --> 00:15:13,060\nbut like what's the next level after a senior engineer? So what's the situation you're finding yourself in right now? Yeah,\n\n240\n00:15:13,440 --> 00:15:17,280\nright now I am a senior and at Netflix\n\n241\n00:15:19,300 --> 00:15:22,800\nwe have just introduced this concept of levels. So,\n\n242\n00:15:24,520 --> 00:15:26,700\npreviously, this is maybe\n\n243\n00:15:27,040 --> 00:15:29,880\na year and a half ago or almost,\n\n244\n00:15:30,220 --> 00:15:32,520\nYeah, a year and a half ago, I would say.\n\n245\n00:15:33,260 --> 00:15:46,040\nYou get hired into Netflix and everybody's a senior engineer, whether you came in as, you know, you were a principal at your last company or whether you were a junior at your last company, you're called senior software engineer. And there's no other leveling than that. It's just like unspoken.\n\n246\n00:15:46,380 --> 00:15:50,740\nThis person's been here for a while, so this person probably knows what they're doing. And,\n\n247\n00:15:52,040 --> 00:15:52,540\nso\n\n248\n00:15:52,860 --> 00:15:58,080\nthey introduced this concept of levels. There aren't many levels. I think there's like 5 total levels, but,\n\n249\n00:15:58,940 --> 00:16:02,220\nwithin the level that I am, There's a huge area\n\n250\n00:16:02,580 --> 00:16:03,080\nwhere\n\n251\n00:16:03,420 --> 00:16:04,800\nyou can grow\n\n252\n00:16:05,160 --> 00:16:09,440\nand I would say Realistically, I'm probably like closer to\n\n253\n00:16:09,920 --> 00:16:14,040\nthe the lower level of it lower level senior\n\n254\n00:16:14,540 --> 00:16:15,040\nbecause\n\n255\n00:16:16,060 --> 00:16:17,820\nI'm still early career\n\n256\n00:16:18,160 --> 00:16:18,660\nand\n\n257\n00:16:21,040 --> 00:16:27,840\nI'm starting to learn these skills that it takes to kind of get to the next level. So without a title change,\n\n258\n00:16:28,340 --> 00:16:29,040\nthere are,\n\n259\n00:16:29,680 --> 00:16:33,040\nthere's plenty of learnings to do and,\n\n260\n00:16:33,840 --> 00:16:35,820\nthink like mentorship that,\n\n261\n00:16:36,300 --> 00:16:39,160\nI'm looking for so that I can get to the\n\n262\n00:16:39,520 --> 00:16:40,880\nnext mental level. So\n\n263\n00:16:41,320 --> 00:16:42,540\ncertain things that I'm,\n\n264\n00:16:44,220 --> 00:16:44,980\nkind of,\n\n265\n00:16:46,980 --> 00:16:47,460\nin,\n\n266\n00:16:47,780 --> 00:16:53,540\nwhat's the word? Certain things that are like on my radar right now in terms of growth\n\n267\n00:16:54,340 --> 00:16:54,840\nare\n\n268\n00:16:55,240 --> 00:16:55,740\narchitecture.\n\n269\n00:16:56,120 --> 00:16:58,160\nLike how are we architecting\n\n270\n00:16:59,220 --> 00:17:00,420\ngood software,\n\n271\n00:17:00,800 --> 00:17:01,300\nstrong,\n\n272\n00:17:01,620 --> 00:17:02,640\nhard software,\n\n273\n00:17:03,240 --> 00:17:03,740\nand\n\n274\n00:17:04,660 --> 00:17:13,560\nsoftware that's sustainable for the long term. So like what type of patterns are we adopting? What type of patterns are we building so that\n\n275\n00:17:14,060 --> 00:17:22,119\nwe can consider the needs of not just what we need right now, but like the future needs. Or as we're onboarding more people, like you mentioned,\n\n276\n00:17:22,540 --> 00:17:24,900\nwe have gone through kind of a reorg\n\n277\n00:17:25,240 --> 00:17:28,020\nand Netflix is good for a reorg. Like we'll have a reorg\n\n278\n00:17:28,680 --> 00:17:30,220\nonce a month, pretty much.\n\n279\n00:17:31,340 --> 00:17:34,540\nBut right now we've switched, we split our\n\n280\n00:17:34,860 --> 00:17:39,660\nUI team and our backend team and our design team into different\n\n281\n00:17:40,960 --> 00:17:41,460\nmanagers.\n\n282\n00:17:41,880 --> 00:17:43,060\nAnd we all kind of,\n\n283\n00:17:43,620 --> 00:17:48,340\nwe'll work together on a project basis, but our reporting structure is like,\n\n284\n00:17:48,640 --> 00:17:51,240\nyou know, UI goes to my manager.\n\n285\n00:17:51,640 --> 00:17:52,360\nAnd so,\n\n286\n00:17:53,180 --> 00:17:55,340\nnow we're trying to figure out how to\n\n287\n00:17:56,040 --> 00:17:57,280\ncommunicate effectively,\n\n288\n00:17:58,940 --> 00:17:59,440\nbetween\n\n289\n00:18:00,040 --> 00:18:02,060\ndifferent groups so that we're not operating in silos.\n\n290\n00:18:02,520 --> 00:18:09,100\nYeah. And then also as we're onboarding new people, because we've done a good bit of hiring over the past couple\n\n291\n00:18:09,580 --> 00:18:10,080\nmonths,\n\n292\n00:18:10,760 --> 00:18:12,180\nhow are we building software\n\n293\n00:18:12,600 --> 00:18:13,100\nthat\n\n294\n00:18:13,520 --> 00:18:19,140\nis easy to onboard into? And how are we providing the best onboarding experience for\n\n295\n00:18:19,540 --> 00:18:22,460\nnew folks? And so we're constantly asking for feedback,\n\n296\n00:18:23,760 --> 00:18:26,820\nlike asking for contributions to the docs and things so that\n\n297\n00:18:29,240 --> 00:18:39,020\nwe're learning more, we're challenging our own like processes in the way that we've always done things. And we're also like setting things up so that in the future things just get\n\n298\n00:18:39,440 --> 00:18:42,100\nmore and more scalable and stay maintainable\n\n299\n00:18:42,440 --> 00:18:44,340\nin the long term. So\n\n300\n00:18:44,960 --> 00:18:45,460\nthere's,\n\n301\n00:18:45,900 --> 00:18:47,100\nit's a lot. It's,\n\n302\n00:18:48,060 --> 00:18:49,240\nthere's been, There's been\n\n303\n00:18:50,140 --> 00:18:52,400\na lot of challenges and things that\n\n304\n00:18:53,480 --> 00:18:55,580\nI'm learning from. Some things learning\n\n305\n00:18:56,740 --> 00:18:57,240\nbefore\n\n306\n00:18:58,660 --> 00:19:03,340\nI do it and some things I'm learning the hard way after like, the things I've been paid.\n\n307\n00:19:05,280 --> 00:19:10,820\nThere's only so much that the book smarts can get you as well. Sometimes you just have to go through it.\n\n308\n00:19:11,520 --> 00:19:13,820\nFor some reason I'm thinking of Hermione Granger\n\n309\n00:19:14,140 --> 00:19:21,260\nwhen she was learning how to fly in on broom. She like read all the books, but she couldn't do it. Yeah, that's a good, that's a really good analogy.\n\n310\n00:19:23,680 --> 00:19:25,320\nActually, you said something that,\n\n311\n00:19:26,260 --> 00:19:29,760\nsurprised me a little bit and also like, and made me feel,\n\n312\n00:19:30,300 --> 00:19:36,220\nmore encouraged about the state of things, and that is that Netflix has been hiring quite a bit in the last couple of months.\n\n313\n00:19:36,660 --> 00:19:38,160\nWhich is encouraging because,\n\n314\n00:19:38,680 --> 00:19:55,680\nyou know, about a year ago is when lots of the layoffs in tech started, and so I guess maybe at least at Netflix, things are kind of balancing out again and we can start growing in different areas and stuff, which is nice. Yeah. Yeah. I hope that's the way that, the, the trend stays.\n\n315\n00:19:57,260 --> 00:19:58,160\nAnd we,\n\n316\n00:19:58,820 --> 00:20:00,960\nlike, I, I feel like we have really good leadership.\n\n317\n00:20:01,520 --> 00:20:01,840\nThat,\n\n318\n00:20:03,060 --> 00:20:04,580\nI, I trust,\n\n319\n00:20:05,220 --> 00:20:07,440\nI trust. I, yeah, I,\n\n320\n00:20:08,180 --> 00:20:12,600\nI trust my leaders. Sorry to sound so hesitant, but I'm like, yeah, I feel like I trust them.\n\n321\n00:20:13,840 --> 00:20:16,420\nBut yeah, I feel like we have really good leadership and\n\n322\n00:20:19,060 --> 00:20:21,860\nI feel like just overall the company is going in a good direction\n\n323\n00:20:22,200 --> 00:20:25,460\nand I hope that this is a signal that the market\n\n324\n00:20:25,900 --> 00:20:28,060\nin general, like the job market is\n\n325\n00:20:28,660 --> 00:20:29,160\ngoing\n\n326\n00:20:29,600 --> 00:20:31,460\nto be in a good place because\n\n327\n00:20:32,360 --> 00:20:33,300\nthe last thing,\n\n328\n00:20:34,020 --> 00:20:36,900\nit has been a stressful time since the pandemic,\n\n329\n00:20:37,740 --> 00:20:39,060\nyou know, with all of the\n\n330\n00:20:39,860 --> 00:20:43,220\nups and downs and more downs and things like that.\n\n331\n00:20:44,540 --> 00:20:48,100\nYeah, It's been a wild ride. Hopefully it's over soon.\n\n332\n00:20:48,440 --> 00:20:48,940\nRight.\n\n333\n00:20:50,900 --> 00:20:57,180\nWell, okay, so you've got a lot of opportunity that you're looking for. You've just like split up into these\n\n334\n00:20:57,720 --> 00:20:58,820\nteams that are\n\n335\n00:21:00,160 --> 00:21:08,000\norganizationally, it sounds like they're siloed, but like we, anybody with experience in this industry knows that those silos can cause a lot of problems\n\n336\n00:21:08,480 --> 00:21:09,640\nfrom a code perspective.\n\n337\n00:21:10,580 --> 00:21:12,480\nAnd so my guess is that\n\n338\n00:21:13,260 --> 00:21:15,520\nas you get higher in levels\n\n339\n00:21:16,020 --> 00:21:17,540\nat Netflix, you'll be,\n\n340\n00:21:18,460 --> 00:21:28,480\nlike, you'd probably still be on that same team, but you'll be expected to collaborate more with the other teams around you. Is that the case? Is that what like you're working on yourself?\n\n341\n00:21:28,780 --> 00:21:33,140\nYeah, yeah. So yes, This is actually a conversation that I had with my manager.\n\n342\n00:21:33,740 --> 00:21:36,360\nSo there, yesterday actually. So\n\n343\n00:21:36,900 --> 00:21:37,700\nthere are,\n\n344\n00:21:38,000 --> 00:21:38,500\ncommunication\n\n345\n00:21:38,860 --> 00:21:40,860\nis 1 thing that,\n\n346\n00:21:41,320 --> 00:21:43,020\nagain, I continue to\n\n347\n00:21:43,520 --> 00:21:45,200\nlean on. And I feel like,\n\n348\n00:21:45,940 --> 00:21:47,680\nThis is my opinion, communication\n\n349\n00:21:48,280 --> 00:21:54,440\nand like having a good, the ability to communicate well, if I can communicate that way.\n\n350\n00:21:55,380 --> 00:22:00,980\nHaving the ability to communicate well can really make or break your ability to\n\n351\n00:22:01,400 --> 00:22:04,580\nsucceed at any company, you know, nevermind a big company,\n\n352\n00:22:05,020 --> 00:22:07,320\nbut you can get so lost\n\n353\n00:22:07,960 --> 00:22:08,440\nin,\n\n354\n00:22:08,860 --> 00:22:09,880\na big company\n\n355\n00:22:10,320 --> 00:22:12,760\nwhen you're not able to\n\n356\n00:22:13,160 --> 00:22:17,720\nlisten and when you're not able to communicate out your point and what your role is\n\n357\n00:22:19,020 --> 00:22:19,860\nin a project.\n\n358\n00:22:20,440 --> 00:22:25,100\nAnd to give you an idea of the overall culture of Netflix, I feel like it's,\n\n359\n00:22:25,760 --> 00:22:30,080\nI use this analogy all the time. I feel like it's like a village, right? So when I first came in,\n\n360\n00:22:31,340 --> 00:22:34,500\nsorry, that was a weird thing to say, but I'll explain. So\n\n361\n00:22:35,400 --> 00:22:36,580\nwhen I first came in,\n\n362\n00:22:37,540 --> 00:22:38,320\nI expected\n\n363\n00:22:39,780 --> 00:22:44,360\nNetflix to kind of be just like a bigger version of any other company that I've been at. And so,\n\n364\n00:22:45,180 --> 00:22:47,280\nI'm expecting like rules and processes\n\n365\n00:22:47,980 --> 00:22:53,940\nand like my role is gonna be very well defined and I have my\n\n366\n00:22:54,320 --> 00:23:02,720\nbox that I'm supposed to stay in and just you know this is just the way that it is it's like you know you stick with what you you know you have like\n\n367\n00:23:03,080 --> 00:23:09,180\nthis list of criteria that gets you promoted to the next level, and then you play by the rules, and then you get moved to the next level.\n\n368\n00:23:09,520 --> 00:23:10,620\nNo, and Netflix,\n\n369\n00:23:12,040 --> 00:23:31,920\nlike I said, it's like a village. So you just come in and you're like, hey, I know how to grow vegetables. Like I'm going to be a farmer and I'm going to barter like my vegetables for whatever thing you have. And then you meet a cobbler and they're like, well, I got shoes. So I'll trade you. I need vegetables. I'll trade you for this and that. So it's like, when you come into Netflix, everybody.\n\n370\n00:23:32,800 --> 00:23:33,300\nAssumes\n\n371\n00:23:33,640 --> 00:23:44,080\nthat you're smart. And that was different for me. It's like, nobody's challenging me. Nobody's like, you know, where did you come from? Or like looking me up on LinkedIn, like how, well, how, what are your accolades?\n\n372\n00:23:44,380 --> 00:24:04,700\nEverybody's just like, hey, you're smart. Here's the stuff that we have to get done. What can you do? Like, what part of this are you gonna own, really? And you gather the resources, we have whatever you need. Like, you gather the resources and you figure out how to make it successful and just do it in the best interest of Netflix. And then so they treat you like an adult. That's amazing.\n\n373\n00:24:05,740 --> 00:24:12,840\nMind blowing stuff. I'm like, are we for real? Right. Like, no one's going to tell me no, you know? So I'm like, yeah.\n\n374\n00:24:13,780 --> 00:24:23,760\nAnd what I love about it is like, So there are personalities that don't thrive under that environment. And it's like, if you need clear boundaries, if you need somebody to tell you,\n\n375\n00:24:25,080 --> 00:24:28,340\nlike this is where your work starts and stops,\n\n376\n00:24:29,100 --> 00:24:32,420\nit's hard for you to be successful at a company like Netflix,\n\n377\n00:24:32,960 --> 00:24:34,460\nI found that I learned\n\n378\n00:24:34,840 --> 00:24:38,140\nso much. I've learned so much in the past 2 years because\n\n379\n00:24:38,480 --> 00:25:06,480\nnobody's putting limits on me. So all I have to do is like grow and grow and grow, and I can grow at the pace that I want to, which is typically fast. Like I, like, I want to absorb as much of this stuff. Like, I love it. So I want to absorb as much of this stuff. Like I love it. So I want to absorb as much of this. I'm like taking courses. I'm learning about database architecture on a Saturday night. Like, you know, I want to, I care about this stuff. So I want to grow And nobody's putting any limitations on how much I can grow and how fast I can grow. So absolutely great environment.\n\n380\n00:25:07,040 --> 00:25:08,300\nSo that said,\n\n381\n00:25:09,060 --> 00:25:11,820\nwithout communication, like without being able to communicate,\n\n382\n00:25:13,440 --> 00:25:19,540\nyou can get lost in this village. Like if, especially working remote and I work remote. So\n\n383\n00:25:19,860 --> 00:25:20,640\nit's like,\n\n384\n00:25:21,280 --> 00:25:25,620\npeople are trusting you to do stuff, but you have to be able to\n\n385\n00:25:26,000 --> 00:25:30,120\nrally a team behind your idea. You have to be able to tell everybody that\n\n386\n00:25:30,440 --> 00:25:42,080\nI'm doing this and this is the reason why I'm doing this. It's because it's in the best interest of Netflix. This is because it's a priority, not a priority for me. This is a priority for our customers as evident by the things that I've done.\n\n387\n00:25:43,260 --> 00:25:50,940\nAnd so, and also like, as we talked about with the division of the teams from UI and backend and design,\n\n388\n00:25:51,960 --> 00:25:59,080\nI might have an idea of like, okay, Hey, I'm a cobbler. I'm going to put together this whole shoe business and we're going to start making like these,\n\n389\n00:25:59,440 --> 00:26:04,400\nthese Jordans. And, you know, we're going to put it in this gray color that we've never done before.\n\n390\n00:26:04,740 --> 00:26:11,180\nBut like design, has design been bought into that? Has design already done that? Or like\n\n391\n00:26:11,540 --> 00:26:14,940\nwhen it comes time for me to develop the UI for this\n\n392\n00:26:15,460 --> 00:26:19,240\nshoe, whatever it is. It's going to be a metaphor. So let me stop with the analogy.\n\n393\n00:26:20,660 --> 00:26:24,120\nWhen it comes time for me to develop the UI for this,\n\n394\n00:26:24,640 --> 00:26:30,640\nit has the backend been set up with all of the data, like have they built the data in the way\n\n395\n00:26:31,100 --> 00:26:35,840\nthat, or have they structured the data in a way that is going to,\n\n396\n00:26:36,260 --> 00:26:40,640\nmake it easy for me to just go ahead and build this UI. So,\n\n397\n00:26:41,120 --> 00:26:45,080\nand it's, it's especially important at a large company where people can,\n\n398\n00:26:45,580 --> 00:27:00,780\nand like that, where, you know, people can just get absorbed into a whole other project and not know that you need something or you haven't communicated that you're going to need this by this date in order to not be blocked by the, for the thing that you have to get done.\n\n399\n00:27:01,240 --> 00:27:01,740\nSo\n\n400\n00:27:02,280 --> 00:27:04,540\ncommunication is super important.\n\n401\n00:27:05,380 --> 00:27:08,300\nThen to add to that, when we're onboarding new people,\n\n402\n00:27:08,660 --> 00:27:09,160\nwe\n\n403\n00:27:09,720 --> 00:27:10,660\nhave to\n\n404\n00:27:11,080 --> 00:27:12,020\nhave documented,\n\n405\n00:27:12,980 --> 00:27:16,100\nthese are the decisions that we made. This is\n\n406\n00:27:16,500 --> 00:27:21,420\nwhat's here. Like this is the code structure. This is why we structured it in the way that we did.\n\n407\n00:27:22,500 --> 00:27:23,160\nSo that\n\n408\n00:27:23,600 --> 00:27:30,980\nwhen people come on board and they're like, hey, you know, I'm new to the village, what can I do? They don't have to go through all of the decision-making\n\n409\n00:27:31,360 --> 00:27:33,840\nthings that we went through. They don't have to like\n\n410\n00:27:34,200 --> 00:27:46,080\nfigure out who to ask about why we're doing the things that we do or like ask people where to find the things that they need. They can just get up and running and go really quickly, which saves us a lot of time, a lot of money, human resources,\n\n411\n00:27:46,720 --> 00:27:50,200\nthe most important and the most expensive resources,\n\n412\n00:27:50,940 --> 00:27:52,320\nsaving them time. So\n\n413\n00:27:52,940 --> 00:27:55,740\nyes, all of that communication is super important.\n\n414\n00:27:56,400 --> 00:27:57,080\nYeah, yeah.\n\n415\n00:27:58,060 --> 00:27:59,840\nThat is so, so key\n\n416\n00:28:00,600 --> 00:28:02,120\nto being successful\n\n417\n00:28:02,700 --> 00:28:03,200\nlike\n\n418\n00:28:03,900 --> 00:28:09,300\nespecially at a big organization, but even at smaller companies too. It's really important.\n\n419\n00:28:09,920 --> 00:28:14,700\nI often say you can be the best engineer in the world, but if nobody knows, then it's not gonna help you much.\n\n420\n00:28:15,260 --> 00:28:19,180\nYou won't get the work you want to do. You won't get the promotions that you want, all of that.\n\n421\n00:28:19,920 --> 00:28:20,420\nAbsolutely,\n\n422\n00:28:20,740 --> 00:28:21,240\nabsolutely.\n\n423\n00:28:21,680 --> 00:28:23,800\nI want you to confirm for me\n\n424\n00:28:25,160 --> 00:28:33,660\na thesis or idea that I have, or like honestly, it's the entire thing I'm basing Epic Web on, and that is this.\n\n425\n00:28:34,640 --> 00:28:36,400\nAt a big company at\n\n426\n00:28:36,720 --> 00:28:37,220\nNetflix,\n\n427\n00:28:38,440 --> 00:28:40,000\nor companies like Netflix,\n\n428\n00:28:42,260 --> 00:28:43,800\nyou typically end up specializing.\n\n429\n00:28:44,680 --> 00:28:50,940\nRather than like building, you know, taking the whole thing front to back, you're gonna specialize in 1 piece of this and then collaborate.\n\n430\n00:28:52,540 --> 00:28:56,080\nIn Epic Web Dev, I'm teaching everybody how to be full stack engineers.\n\n431\n00:28:56,680 --> 00:28:58,040\nAnd I think\n\n432\n00:28:58,480 --> 00:29:00,560\nteaching them the entire stack\n\n433\n00:29:01,320 --> 00:29:03,540\nwill be helpful to them,\n\n434\n00:29:04,300 --> 00:29:07,080\neven if they end up specializing in a big company.\n\n435\n00:29:07,480 --> 00:29:07,980\nBecause\n\n436\n00:29:08,340 --> 00:29:09,060\nI believe\n\n437\n00:29:10,080 --> 00:29:10,580\nthat\n\n438\n00:29:10,920 --> 00:29:11,420\nunderstanding\n\n439\n00:29:11,760 --> 00:29:12,880\nthe entire stack,\n\n440\n00:29:13,780 --> 00:29:31,340\nyou should be at a level where you're like, I have a pretty good understanding of how to accomplish all tasks at any level of this deck. And if you're at that level, then you will be able to collaborate much more effectively with people regardless of their level. Is that like been your experience at Netflix? 100%.\n\n441\n00:29:32,600 --> 00:29:36,980\nSo, and it's funny timing because I just got back last week from,\n\n442\n00:29:37,760 --> 00:29:42,880\nour offsite and it was like a bunch of meetings, our entire org,\n\n443\n00:29:43,620 --> 00:29:48,020\nour platform org, which is where product productivity engineering falls under.\n\n444\n00:29:48,420 --> 00:29:48,920\nHad,\n\n445\n00:29:49,360 --> 00:29:56,260\nan offsite and 1 day was just full of meetings. And so we're hiring new grads now, which is new to Netflix.\n\n446\n00:29:56,860 --> 00:29:58,700\nAnd 1 of the new grads\n\n447\n00:29:59,180 --> 00:30:01,360\ngot up and asked our directors a question,\n\n448\n00:30:01,720 --> 00:30:02,540\nwhich was,\n\n449\n00:30:02,900 --> 00:30:03,980\nhow do I,\n\n450\n00:30:04,640 --> 00:30:21,540\nlike, how do I figure out whether or not to lean toward being a generalist or a specialist? And she was like, as a grad, a new grad in school, she was taught the full stack, you know, everything. And she, you know, she was taught all of that and she's like how much of that is actually relevant when I get into this role and\n\n451\n00:30:22,120 --> 00:30:22,860\nthe response\n\n452\n00:30:23,160 --> 00:30:23,980\nwas that\n\n453\n00:30:24,860 --> 00:30:29,240\nThis it's something that kind of evolves in your career is like you'll naturally\n\n454\n00:30:29,600 --> 00:30:30,840\nfall into this\n\n455\n00:30:31,180 --> 00:30:31,680\nspecialist\n\n456\n00:30:32,500 --> 00:30:33,000\nrole\n\n457\n00:30:33,560 --> 00:30:34,060\nbut\n\n458\n00:30:34,840 --> 00:30:41,140\nthat said is it's it's not something that you have to kind of decide on. It is\n\n459\n00:30:41,640 --> 00:30:46,740\nessential to be able to have breadth as well as depth. And\n\n460\n00:30:47,320 --> 00:30:50,740\nwhen I first started at Netflix, and I think in our book,\n\n461\n00:30:51,300 --> 00:30:57,100\nit's called no rules rules. It's a book that, our founders wrote about the Netflix culture.\n\n462\n00:30:58,100 --> 00:31:03,260\nThey talk about this concept of the T-shaped engineer and Netflix isn't the only company that talks about this, but\n\n463\n00:31:03,580 --> 00:31:07,400\nthe concept is that you want to structure your,\n\n464\n00:31:08,200 --> 00:31:08,600\nyour,\n\n465\n00:31:09,060 --> 00:31:13,880\nskills and experience in a T shape as you go to an engineer. So the, the, the.\n\n466\n00:31:14,680 --> 00:31:21,300\nVertical part of, yeah, the vertical part of the T is your depth. And this is where your specialty is.\n\n467\n00:31:21,820 --> 00:31:25,140\nAnd so that could be whatever your interest is in or\n\n468\n00:31:25,640 --> 00:31:26,780\nwhatever you\n\n469\n00:31:27,340 --> 00:31:37,120\nfeel like you're the best at and will make you the most money, Like whatever is important to you, that's what you decide to specialize in. But like you said, in order to effectively communicate,\n\n470\n00:31:38,100 --> 00:31:41,680\nit's best to have, and not just to communicate, also\n\n471\n00:31:42,120 --> 00:31:50,480\nto be able to, if you're encountering a problem, let's say I'm, I'm specializing in UI, which, which I am in order to diagnose\n\n472\n00:31:51,540 --> 00:32:00,460\na problem. It's, it's never just a UI problem. There's always some component that has to do with like back end or the middle part, which GraphQL to me is the middle part,\n\n473\n00:32:00,900 --> 00:32:01,400\nor\n\n474\n00:32:02,220 --> 00:32:18,260\nsomething else. And so in order to diagnose those problems, to debug, to figure out how to resolve it, you need that breadth, which is the horizontal part of the T. So you need to have like at least a baseline understanding of a number of other domains\n\n475\n00:32:18,680 --> 00:32:21,240\nso that you can be an effective\n\n476\n00:32:22,120 --> 00:32:27,420\nteam player, you know, unless you're working for your own company by yourself. And even then,\n\n477\n00:32:27,980 --> 00:32:32,140\nI would say it's, it's essential to be able to have all of these,\n\n478\n00:32:32,680 --> 00:32:35,700\nlike a little bit of skills from other areas.\n\n479\n00:32:36,300 --> 00:32:50,580\nThe fun part of that too, not that that part isn't fun, but another fun part of that is like, you get to discover other things that you may not have been interested in, Like for me with engineering in general, like I would have never\n\n480\n00:32:50,980 --> 00:32:52,060\nknown that\n\n481\n00:32:52,540 --> 00:32:53,900\nthis would be such\n\n482\n00:32:54,480 --> 00:33:02,060\na perfect career for me if I hadn't expanded my sales, like the things that I was selling beyond nail polish\n\n483\n00:33:02,960 --> 00:33:04,400\nand stuff like that. So\n\n484\n00:33:04,920 --> 00:33:07,260\nyeah, I say like the more experience,\n\n485\n00:33:07,960 --> 00:33:11,180\nthe breadth of experience with different technologies, the better.\n\n486\n00:33:11,720 --> 00:33:15,940\nYeah, yeah, I think that is awesome. We can say that's a T for team.\n\n487\n00:33:16,260 --> 00:33:17,140\nSo you can\n\n488\n00:33:17,580 --> 00:33:19,900\nwork better with the team. That's awesome.\n\n489\n00:33:20,660 --> 00:33:34,100\nSo, and the side benefit of that too, is that you feel so much more empowered to do stuff. So, if the backend team is like, you know, I know this would make your life easier, but we've got all these other priorities. And you say, well, could I make a pull request?\n\n490\n00:33:35,280 --> 00:33:38,040\nAnd if you aren't a T-shaped engineer, then\n\n491\n00:33:38,520 --> 00:33:47,940\nlike the idea of making a pull request on, you know, an area that you're not comfortable with is very foreign. But if you're T-shaped, then like, yeah, I could probably figure it out.\n\n492\n00:33:48,840 --> 00:33:50,340\nAnd on top of that too,\n\n493\n00:33:50,660 --> 00:34:01,180\nlet's say 1 day you decide, you know what, I want to do like the startup thing. I want to, I got to throw my own thing together. You'll be way more capable of doing that if you have more breadth of experience.\n\n494\n00:34:02,220 --> 00:34:02,940\nAnd so,\n\n495\n00:34:03,440 --> 00:34:03,940\nyeah.\n\n496\n00:34:04,240 --> 00:34:06,360\nGood, I'm glad that my\n\n497\n00:34:06,680 --> 00:34:12,540\nwhole premise around Epic Web is even works for enterprise level engineers.\n\n498\n00:34:12,900 --> 00:34:16,440\nOh yeah, absolutely, absolutely. Yeah, I can't wait to\n\n499\n00:34:17,020 --> 00:34:22,940\ntake this course, by the way. I feel like... Oh, I hope you love it. Yeah, it's going to be good. It's going to be so good. Sweet.\n\n500\n00:34:23,719 --> 00:34:31,580\nWell, Shonda, this has been an awesome chat. I always love chatting with you. Is there anything that you wanted to talk about that we didn't get into in our conversation so far?\n\n501\n00:34:32,360 --> 00:34:34,260\nNo, no. Like if you're\n\n502\n00:34:34,860 --> 00:34:35,820\nwanting to\n\n503\n00:34:36,340 --> 00:34:40,219\nconnect with me, hang out, like the place you can always find me on is Twitter.\n\n504\n00:34:40,520 --> 00:34:45,040\nAnd my Twitter handle, my everything handle is just my first name. So\n\n505\n00:34:45,480 --> 00:34:47,179\nI'll spell it if you\n\n506\n00:34:47,739 --> 00:34:49,520\nare just listening, but S-H-A-U-N-D-A-I.\n\n507\n00:34:50,980 --> 00:34:52,659\nYou can find me anywhere.\n\n508\n00:34:53,420 --> 00:34:56,080\nThe beauty of having a unique name is that\n\n509\n00:34:56,679 --> 00:34:57,780\nI'm easily Googleable.\n\n510\n00:34:58,520 --> 00:35:01,820\nYeah, and actually you can find Shandé in the instructions\n\n511\n00:35:02,360 --> 00:35:05,420\nof the exercises as well. Right.\n\n512\n00:35:06,020 --> 00:35:07,640\nYeah, there's the\n\n513\n00:35:07,940 --> 00:35:09,200\nexercise about\n\n514\n00:35:09,960 --> 00:35:11,180\nmanaging sessions\n\n515\n00:35:11,740 --> 00:35:12,660\nin the\n\n516\n00:35:12,980 --> 00:35:14,180\nauthentication workshop\n\n517\n00:35:14,600 --> 00:35:15,100\nwhere\n\n518\n00:35:15,520 --> 00:35:23,800\nI give an example of like somebody logs into a computer in a library and then leaves and forgets to log off What do they do?\n\n519\n00:35:24,400 --> 00:35:27,600\nAnd Shonda is our example person. So thank you\n\n520\n00:35:31,560 --> 00:35:42,340\nI thought it was perfect. And actually, I think I should look it up and not say it wrong, but I think what I say in there is like Shondae is a great person or something like that. Oh, that's right, yeah.\n\n521\n00:35:43,480 --> 00:35:46,400\nI think it's great. Shondae, it's just a pleasure.\n\n522\n00:35:46,860 --> 00:35:51,860\nAnd thank you so much for giving us some of your time today to chat about your experience at Netflix.\n\n523\n00:35:52,280 --> 00:35:54,580\nI hope folks get a lot out of this.\n\n524\n00:35:54,960 --> 00:35:58,800\nAnd yeah, we'll see you all on the internet. Bye. Thanks for having me. Bye everybody.",
            "text": "[00:00:00] Speaker 0:\nWhat is up everybody? I am joined by 1 of my very dear friends Shonda. Oh my goodness I almost said you're wrong and like I was getting partway through it and like I'm gonna say this wrong and I feel so bad It's a shonda person. Say hi Shonda Hi How embarrassing So cuz \n\n[00:00:20] like the thing is that you get, like people say your name wrong all the time and I am not 1 of those people. I say your name wrong. \n\n[00:00:26] Speaker 1:\nI know. I know. We've known each other for a while. \n\n[00:00:29] Speaker 0:\nYeah, yeah. I actually, I always like to start these conversations by telling people how we met. And so I remember, let's see. Well, we definitely met online first, like the standard met you on Twitter and met you in real life at a conference. I'm trying to remember which conference it was though. So I don't remember. \n\n[00:00:49] Speaker 1:\nThe first conference that I ever did in person was RemixConf. So, \n\n[00:00:54] Speaker 0:\nyeah. Did we not meet before RemixConf? \n\n[00:00:58] Speaker 1:\nNo, no. Okay, my goodness. Isn't that crazy though? Like when you think about it. \n\n[00:01:02] Speaker 0:\nI feel like I knew you way better. \n\n[00:01:05] Speaker 1:\nYeah, we did. So, okay. I do remember the first time that we talked, which was, we did a space when Twitter spaces was a big thing. \n\n[00:01:14] Speaker 0:\nOh, right. Yeah. Yeah. \n\n[00:01:15] Speaker 1:\nYeah. And so that was the, I think the first time that we spoke together, we were just on a panel together. It was me, you, Michael Chan and Ben, I think from, he was at Stitch Fix at the time. \n\n[00:01:30] Speaker 0:\nOh yeah. Like Badoo. \n\n[00:01:32] Speaker 1:\nYeah. Yeah. And then I forget who was hosting it. I think it was Will Johnson, but definitely. \n\n[00:01:39] Speaker 0:\nI'm actually talking to Will this afternoon. Oh, \n\n[00:01:42] Speaker 1:\nawesome. Yeah, tell him I said, what's up? Like, yeah, that's my, that's my, another long term, long time dear friend of mine. \n\n[00:01:50] Speaker 0:\nAwesome. Yeah. Yeah, well, it's been great knowing you for all this time. And I think, like, I have some history with you and I know you pretty well. I think it'd be good for people to get to know you a little bit. So could you intro yourself? And actually, I'll also, before you do that, I'll mention that Shondae was on a episode of the Chats with Kent podcast \n\n[00:02:11] that you can find on my website too. And we talked about a lot of great stuff there as well. But yeah, Shondae, who are you? \n\n[00:02:20] Speaker 1:\nAwesome, yeah, I am Shondae person. I am a senior software engineer at Netflix. Just hit my two-year mark last month So about a month ago rats. \n\n[00:02:30] Speaker 0:\nThat's awesome. It's it only been 2 years. I feel like it's been longer. \n\n[00:02:34] Speaker 1:\nI know. I know. I've just been like, I've gone through, it feels fast and short at the same time or fast. Yeah. Long and short at the same time. It's like the days are long, but the years are short. And I just look up and I'm like, wow, I can't believe it's been that long, but I still feel in a lot of ways like a newbie at \n\n[00:02:54] the same time. But yeah, \n\n[00:02:56] Speaker 0:\na newbie who works as a senior engineer at Netflix. Yeah. Okay. \n\n[00:03:00] Speaker 1:\nExactly. Exactly. Yeah. So my team is the productivity engineering team. So we're concentrated on providing a great experience for other Netflix developers. So other Netflix developers are our customers and doing things that are \n\n[00:03:20] in the interest of making them more productive, whatever that means. And I'll talk more about that, but yeah, so my day to day job is I'm in a UI engineer. I, my tech stack is React, TypeScript and GraphQL. And I'm looking to learn more about the backend as \n\n[00:03:40] well. Like I caught myself the other day, it was on a Saturday at night, looking up database architecture and like finding that I was fascinated like I was a really... \n\n[00:03:52] Speaker 0:\nWell, who of us hasn't gotten sucked into database architecture on a Saturday night? \n\n[00:03:57] Speaker 1:\nOh it's true, it's true. No, just like 1 of the regular nerds. Yeah. \n\n[00:04:05] Speaker 0:\nVery cool. \n\n[00:04:06] Speaker 1:\nYeah. So, that's me. Outside of work, I also, I'm a conference speaker. I love being in front of people and I love teaching. I am working on a course as well on TypeScript, TypeScript for JavaScript developers, so you can find that at ts4js.com, t-s-f-o-r-j-s.com. \n\n[00:04:27] And I'm a mom of 1 five-year-old, soon-to-be six-year-old, very fun son. \n\n[00:04:35] Speaker 0:\nYeah, he's adorable. Well, that is, yeah, thank you for sharing all that I I would like to start with Maybe with the fact that you are a senior engineer at Netflix, which is, like, my understanding of Netflix is they have a very \n\n[00:04:55] high bar for the engineers that they hire, and the fact that you've been there for 2 years, yeah, yeah. The fact you've been there for 2 years like says that either they haven't found out in all that time, or you like legit, a legit senior engineer at Netflix, which I think is more likely based on \n\n[00:05:15] what I know of you. And this is not your first job. And we kind of talked about this more in depth in our other chat, but I'd like to get a little sense of like, how does 1 get into the place where you're at as quickly as you did? \n\n[00:05:35] Speaker 1:\nYeah, so I'm happy to go through a little bit of the background behind where I am. And then I can talk about kind of how, how to get there. So I'm a career switcher. I spent the majority of my career in sales as \n\n[00:05:56] tech sales. Most of it was tech sales, but I also I've sold everything from nail polish to bed sheets, to knives, to, consulting services, to, to CSOs and to CMOs. And then, tech was my favorite. And what III \n\n[00:06:16] stayed away from things tech because I thought it was too nerdy. Now, let me caveat that because I love, I've always embraced being a nerd. And I've always embraced being smart, but I've always been a social person. And \n\n[00:06:36] the amount of social depends, depends on what I'm going through in life right now. But like, I've always been a social person and so I've looked for positions where I can interact with people. I love psychology. I love soft skills. I love just connecting with other folks, human to human. And I felt like \n\n[00:06:57] engineering and careers where you're just looking at a screen or looking at a sheet of paper, like accounting and things like that. I was like, those are too antisocial. Like I wouldn't be happy just being in a silo. So I stayed away from it. I kind of fell into my first job in tech, my sales \n\n[00:07:17] job at tech and in tech. And I was selling to engineers and. It was just like 1 of those things where you just find yourself, getting really caught up and passionate about different things. Like I had fun selling, but I found that the thing that I found most interesting \n\n[00:07:37] was the things that the engineers were doing with our software. Like the software that I was selling is called MATLAB and Simulink. So a lot of people who went for computer science degrees probably use that in school, but it's mathematical computation software and software for simulating dynamic systems, like all the nerdiest stuff. \n\n[00:07:58] So NASA was 1 of my customers, Like NASA was, so I'm selling to literal rocket scientists. And like, so some of my customers are building rovers to bring us to the moon. Other customers are farmers who are trying to calculate the amount of chemicals and combination of chemicals that are gonna grow the biggest oranges \n\n[00:08:18] in the soil. And I'm like, wow, this is cool stuff. Like you can do so much with technology. We have robotics competitions and things like that. And I'm like, just tech is, it's such a cool place. But I didn't know if I had a place because I like to speak to people. So that's why I got into sales and, \n\n[00:08:38] there were different highlights in my life where I'm like, you know, tech is something that I should figure out, or like learn more about. And the big trigger for me was when I left my sales job to start a business and I went to build my website and I wanted to customize the site. \n\n[00:08:59] And so I had to learn Liquid, which is Shopify's Ruby-based language. It was a Shopify site. And I found that I was having so much more fun customizing the site than I was actually like getting these deals. So, So yeah, it was like a natural transition, but all that to say, I \n\n[00:09:20] started in engineering through, I'm about, it's about to hit 3 years. Is that right? Yeah, it's, this is 2013. Yeah. So I'm almost at my 3 year anniversary in, it'll be next month, 3 year anniversary in engineering itself. My first job was at a company. My first engineering \n\n[00:09:40] job was at a company that built software for salespeople. So it was perfect for me because I knew the customer and I was previously the customer. So, I could not only flex my UI skills and all the things that I learned from courses like Epic web, \n\n[00:10:02] but also I was able to leverage skills that I had learned in sales, like my UX skills, my passion for people and understanding what makes them tick and bringing the conversation not about just like tech and which buttons should like be \n\n[00:10:22] here or what they should look like, but more of like, how are we going to best serve the customer? And so, I'm having conversations with customers still. I am having conversations with other teams like design. I'm having conversations with the backend team. And I'm like 1, I'm able \n\n[00:10:42] to flex those, that muscle of like communication and my passions for having that human to human connection. But I'm also bringing that human, that level of humanity into the tools that I'm building because I care about the user's experience. I also care about the developer experience too, which makes productivity \n\n[00:11:03] engineering such a perfect career for me. So, so yeah, I, to answer, to circle back about your question about how do you get to where I'm at so, so, so fast, I, If I had to put it down on 1 thing, cause there's \n\n[00:11:23] a combination of a \n\n[00:11:24] Speaker 0:\nton of \n\n[00:11:24] Speaker 1:\nthings that had to fall into place, but I would say play to your strengths. And 1 of my strengths I would say is this ability to connect with other people. And so I've used that as, a way to network and to find jobs. I've used that \n\n[00:11:44] as a way to, communicate and also continue to grow in the way that I communicate. Like, I don't feel like anybody is a master communicator that never, like, you know, you, you get to a stopping point and you don't have anything else to learn about how to communicate with people. I'm always looking to grow and like be a better communicator, be more empathetic, \n\n[00:12:04] be more understanding, be more articulate and provide people value in the ways that they want to be provided value. So, and what I mean by that is there's a lot of, there's a way that you can provide value that's like, okay, I'm doing something that I think is important, \n\n[00:12:25] but have you proved that value with your customers? Like, is that something that your customer thinks is important too. So that's something that I care about is just making sure that the people around me, the stakeholders are happy and I'm providing the type of value that they're looking for from me. So very broad answer, But yes, I \n\n[00:12:45] would say that like platypus strengths and human to human connection is my 1 of my strengths. So that's That's what I attribute to why I am where I am. \n\n[00:12:56] Speaker 0:\nYeah. Yeah, I think your care for communication also probably helps you be a little more assertive in like a good way. Not overbearing, but like, you know, like, hey, no, I was a part of this or, hey, I wanna be a part of this or whatever. So yeah, I think that's a lot of really \n\n[00:13:17] good pieces of advice, also like caring about the customer or even in the context of work at a big organization, you can almost consider your boss to be the customer of you, you know, like you are providing services for your boss. And yeah, so I think that makes a lot of sense and hopefully \n\n[00:13:37] folks listening have get some good takeaways from that. \n\n[00:13:41] Speaker 1:\nThanks, yeah, yeah. Yes, and to Expound on your point about being assertive. Yes. It's also a work in progress as well. So I found that so in my nature is to be a people pleaser and it's like I care about human human to human connection, \n\n[00:14:01] but sometimes to a fault. And it's like, I care so much about you liking me that I'm willing to sacrifice things that make me happy so that you can be happy. So that is something that I'm continuously working on is just like setting boundaries. I'm always like, oh yes, I wanna be in the room, but it's like, \n\n[00:14:21] when do you say no? When do you stop? What are the limits and things? And how much are you willing to bend in order to like, you know, keep yourself happy and keep your sanity at the same time. \n\n[00:14:35] Speaker 0:\nYeah, I think that is, that could be a whole other podcast to talk about, like, how do you manage that without burning out and all that stuff too? Yes, absolutely. So, transitioning a little bit more into the next, so you got your job at Netflix and things have been going super well. And you mentioned \n\n[00:14:55] to me that there's a little bit of a reorg and you're looking toward the future of what your opportunities are within Netflix, but like what's the next level after a senior engineer? So what's the situation you're finding yourself in right now? \n\n[00:15:12] Speaker 1:\nYeah, right now I am a senior and at Netflix we have just introduced this concept of levels. So, previously, this is maybe a year and a half ago or almost, Yeah, a year and a half ago, I would say. \n\n[00:15:33] You get hired into Netflix and everybody's a senior engineer, whether you came in as, you know, you were a principal at your last company or whether you were a junior at your last company, you're called senior software engineer. And there's no other leveling than that. It's just like unspoken. This person's been here for a while, so this person probably knows what they're doing. And, so they introduced \n\n[00:15:53] this concept of levels. There aren't many levels. I think there's like 5 total levels, but, within the level that I am, There's a huge area where you can grow and I would say Realistically, I'm probably like closer to the the lower level of it lower level \n\n[00:16:13] senior because I'm still early career and I'm starting to learn these skills that it takes to kind of get to the next level. So without a title change, there are, there's plenty of learnings to do and, \n\n[00:16:33] think like mentorship that, I'm looking for so that I can get to the next mental level. So certain things that I'm, kind of, in, what's the word? Certain things that are like on my radar right now in terms of growth \n\n[00:16:54] are architecture. Like how are we architecting good software, strong, hard software, and software that's sustainable for the long term. So like what type of patterns are we adopting? What type of patterns are we building so that we \n\n[00:17:14] can consider the needs of not just what we need right now, but like the future needs. Or as we're onboarding more people, like you mentioned, we have gone through kind of a reorg and Netflix is good for a reorg. Like we'll have a reorg once a month, pretty much. But right now we've switched, we split our \n\n[00:17:34] UI team and our backend team and our design team into different managers. And we all kind of, we'll work together on a project basis, but our reporting structure is like, you know, UI goes to my manager. And so, now we're trying to figure out how to \n\n[00:17:56] communicate effectively, between different groups so that we're not operating in silos. \n\n[00:18:02] Speaker 0:\nYeah. \n\n[00:18:02] Speaker 1:\nAnd then also as we're onboarding new people, because we've done a good bit of hiring over the past couple months, how are we building software that is easy to onboard into? And how are we providing the best onboarding experience for new folks? And so we're constantly asking for feedback, \n\n[00:18:23] like asking for contributions to the docs and things so that we're learning more, we're challenging our own like processes in the way that we've always done things. And we're also like setting things up so that in the future things just get more and more scalable and stay maintainable in the long term. \n\n[00:18:43] So there's, it's a lot. It's, there's been, There's been a lot of challenges and things that I'm learning from. Some things learning before I do it and some things I'm learning the hard way after like, the things I've been paid. \n\n[00:19:05] Speaker 0:\nThere's only so much that the book smarts can get you as well. Sometimes you just have to go through it. For some reason I'm thinking of Hermione Granger when she was learning how to fly in on broom. She like read all the books, but she couldn't do it. \n\n[00:19:18] Speaker 1:\nYeah, that's a good, that's a really good analogy. \n\n[00:19:23] Speaker 0:\nActually, you said something that, surprised me a little bit and also like, and made me feel, more encouraged about the state of things, and that is that Netflix has been hiring quite a bit in the last couple of months. Which is encouraging because, you know, about a year ago is when lots of the layoffs in tech started, and \n\n[00:19:43] so I guess maybe at least at Netflix, things are kind of balancing out again and we can start growing in different areas and stuff, which is nice. \n\n[00:19:51] Speaker 1:\nYeah. Yeah. I hope that's the way that, the, the trend stays. And we, like, I, I feel like we have really good leadership. That, I, I trust, I trust. I, yeah, I, I trust my leaders. Sorry to sound so hesitant, but I'm like, yeah, I feel like I \n\n[00:20:11] trust them. But yeah, I feel like we have really good leadership and I feel like just overall the company is going in a good direction and I hope that this is a signal that the market in general, like the job market is going to be in a good place because \n\n[00:20:32] the last thing, it has been a stressful time since the pandemic, you know, with all of the ups and downs and more downs and things like that. \n\n[00:20:44] Speaker 0:\nYeah, It's been a wild ride. Hopefully it's over soon. Right. Well, okay, so you've got a lot of opportunity that you're looking for. You've just like split up into these teams that are organizationally, it sounds like they're siloed, but like we, anybody with experience in \n\n[00:21:04] this industry knows that those silos can cause a lot of problems from a code perspective. And so my guess is that as you get higher in levels at Netflix, you'll be, like, you'd probably still be on that same team, but you'll be expected to collaborate more with the other \n\n[00:21:24] teams around you. Is that the case? Is that what like you're working on yourself? \n\n[00:21:28] Speaker 1:\nYeah, yeah. So yes, This is actually a conversation that I had with my manager. So there, yesterday actually. So there are, communication is 1 thing that, again, I continue to lean on. And I feel like, This is my opinion, communication and like \n\n[00:21:49] having a good, the ability to communicate well, if I can communicate that way. Having the ability to communicate well can really make or break your ability to succeed at any company, you know, nevermind a big company, but you can get so lost in, a big \n\n[00:22:09] company when you're not able to listen and when you're not able to communicate out your point and what your role is in a project. And to give you an idea of the overall culture of Netflix, I feel like it's, I use this analogy all the time. I feel like it's like a village, right? So when I first came \n\n[00:22:29] in, sorry, that was a weird thing to say, but I'll explain. So when I first came in, I expected Netflix to kind of be just like a bigger version of any other company that I've been at. And so, I'm expecting like rules and processes and like my role \n\n[00:22:50] is gonna be very well defined and I have my box that I'm supposed to stay in and just you know this is just the way that it is it's like you know you stick with what you you know you have like this list of criteria that gets you promoted to the next level, and then you play by the rules, and then you get moved to the next level. No, and Netflix, \n\n[00:23:12] like I said, it's like a village. So you just come in and you're like, hey, I know how to grow vegetables. Like I'm going to be a farmer and I'm going to barter like my vegetables for whatever thing you have. And then you meet a cobbler and they're like, well, I got shoes. So I'll trade you. I need vegetables. I'll trade you for this and that. So it's like, when you come into Netflix, everybody. \n\n[00:23:32] Assumes that you're smart. And that was different for me. It's like, nobody's challenging me. Nobody's like, you know, where did you come from? Or like looking me up on LinkedIn, like how, well, how, what are your accolades? Everybody's just like, hey, you're smart. Here's the stuff that we have to get done. What can you do? Like, what part of this are you gonna own, really? \n\n[00:23:52] And you gather the resources, we have whatever you need. Like, you gather the resources and you figure out how to make it successful and just do it in the best interest of Netflix. And then \n\n[00:24:02] Speaker 0:\nso they treat you like an adult. That's amazing. \n\n[00:24:05] Speaker 1:\nMind blowing stuff. I'm like, are we for real? Right. Like, no one's going to tell me no, you know? So I'm \n\n[00:24:11] Speaker 0:\nlike, yeah. \n\n[00:24:13] Speaker 1:\nAnd what I love about it is like, So there are personalities that don't thrive under that environment. And it's like, if you need clear boundaries, if you need somebody to tell you, like this is where your work starts and stops, it's hard for you to be successful at a company like Netflix, I found that \n\n[00:24:33] I learned so much. I've learned so much in the past 2 years because nobody's putting limits on me. So all I have to do is like grow and grow and grow, and I can grow at the pace that I want to, which is typically fast. Like I, like, I want to absorb as much of this stuff. Like, I love it. So I want to absorb as much of this stuff. Like I love it. So I want to absorb as much of this. I'm like taking courses. I'm learning about database \n\n[00:24:54] architecture on a Saturday night. Like, you know, I want to, I care about this stuff. So I want to grow And nobody's putting any limitations on how much I can grow and how fast I can grow. So absolutely great environment. So that said, without communication, like without being able to communicate, you can get \n\n[00:25:14] lost in this village. Like if, especially working remote and I work remote. So it's like, people are trusting you to do stuff, but you have to be able to rally a team behind your idea. You have to be able to tell everybody that I'm doing this and this is the reason why I'm doing this. It's because it's in the best interest \n\n[00:25:34] of Netflix. This is because it's a priority, not a priority for me. This is a priority for our customers as evident by the things that I've done. And so, and also like, as we talked about with the division of the teams from UI and backend and design, I might have an idea of like, okay, Hey, I'm \n\n[00:25:54] a cobbler. I'm going to put together this whole shoe business and we're going to start making like these, these Jordans. And, you know, we're going to put it in this gray color that we've never done before. But like design, has design been bought into that? Has design already done that? Or like when it comes time for me to develop the UI for this \n\n[00:26:15] shoe, whatever it is. It's going to be \n\n[00:26:17] Speaker 0:\na metaphor. So let \n\n[00:26:18] Speaker 1:\nme stop with the analogy. When it comes time for me to develop the UI for this, it has the backend been set up with all of the data, like have they built the data in the way that, or have they structured the data in a way that is going to, make it easy for me to just go ahead \n\n[00:26:38] and build this UI. So, and it's, it's especially important at a large company where people can, and like that, where, you know, people can just get absorbed into a whole other project and not know that you need something or you haven't communicated that you're going to need this by this date in order to not be blocked by the, \n\n[00:26:58] for the thing that you have to get done. So communication is super important. Then to add to that, when we're onboarding new people, we have to have documented, these are the decisions that we made. This is what's here. Like this is the code structure. \n\n[00:27:18] This is why we structured it in the way that we did. So that when people come on board and they're like, hey, you know, I'm new to the village, what can I do? They don't have to go through all of the decision-making things that we went through. They don't have to like figure out who to ask about why we're doing the things that we do or like ask people \n\n[00:27:39] where to find the things that they need. They can just get up and running and go really quickly, which saves us a lot of time, a lot of money, human resources, the most important and the most expensive resources, saving them time. So yes, all of that communication is super important. \n\n[00:27:56] Speaker 0:\nYeah, yeah. That is so, so key to being successful like especially at a big organization, but even at smaller companies too. It's really important. I often say you can be the best engineer in the world, but if nobody knows, then it's not gonna help you much. You won't get the work you want to \n\n[00:28:16] do. You won't get the promotions that you want, all of that. \n\n[00:28:19] Speaker 1:\nAbsolutely, absolutely. \n\n[00:28:21] Speaker 0:\nI want you to confirm for me a thesis or idea that I have, or like honestly, it's the entire thing I'm basing Epic Web on, and that is this. At a big company at Netflix, or companies like Netflix, \n\n[00:28:42] you typically end up specializing. Rather than like building, you know, taking the whole thing front to back, you're gonna specialize in 1 piece of this and then collaborate. In Epic Web Dev, I'm teaching everybody how to be full stack engineers. And I think teaching them the entire stack will be \n\n[00:29:02] helpful to them, even if they end up specializing in a big company. Because I believe that understanding the entire stack, you should be at a level where you're like, I have a pretty good understanding of how to accomplish all tasks at any level of this deck. And if you're \n\n[00:29:22] at that level, then you will be able to collaborate much more effectively with people regardless of their level. Is that like been your experience at Netflix? \n\n[00:29:30] Speaker 1:\n100%. So, and it's funny timing because I just got back last week from, our offsite and it was like a bunch of meetings, our entire org, our platform org, which is where product productivity engineering falls under. Had, an offsite and 1 day \n\n[00:29:51] was just full of meetings. And so we're hiring new grads now, which is new to Netflix. And 1 of the new grads got up and asked our directors a question, which was, how do I, like, how do I figure out whether or not to lean toward being a generalist or a specialist? And she was like, as a grad, \n\n[00:30:11] a new grad in school, she was taught the full stack, you know, everything. And she, you know, she was taught all of that and she's like how much of that is actually relevant when I get into this role and the response was that This it's something that kind of evolves in your career is like you'll naturally fall into this specialist \n\n[00:30:32] role but that said is it's it's not something that you have to kind of decide on. It is essential to be able to have breadth as well as depth. And when I first started at Netflix, and I think in our book, it's called no rules rules. \n\n[00:30:52] It's a book that, our founders wrote about the Netflix culture. They talk about this concept of the T-shaped engineer and Netflix isn't the only company that talks about this, but the concept is that you want to structure your, your, skills and experience in a T shape as you go to an engineer. So the, the, \n\n[00:31:13] the. Vertical part of, yeah, the vertical part of the T is your depth. And this is where your specialty is. And so that could be whatever your interest is in or whatever you feel like you're the best at and will make you the most money, Like whatever is important to you, that's what you decide \n\n[00:31:33] to specialize in. But like you said, in order to effectively communicate, it's best to have, and not just to communicate, also to be able to, if you're encountering a problem, let's say I'm, I'm specializing in UI, which, which I am in order to diagnose a problem. It's, it's never just \n\n[00:31:53] a UI problem. There's always some component that has to do with like back end or the middle part, which GraphQL to me is the middle part, or something else. And so in order to diagnose those problems, to debug, to figure out how to resolve it, you need that breadth, which is the horizontal part of the T. So you need to have like \n\n[00:32:13] at least a baseline understanding of a number of other domains so that you can be an effective team player, you know, unless you're working for your own company by yourself. And even then, I would say it's, it's essential to be able to have all of these, like a little bit of \n\n[00:32:34] skills from other areas. The fun part of that too, not that that part isn't fun, but another fun part of that is like, you get to discover other things that you may not have been interested in, Like for me with engineering in general, like I would have never known that this would be such \n\n[00:32:54] a perfect career for me if I hadn't expanded my sales, like the things that I was selling beyond nail polish and stuff like that. So yeah, I say like the more experience, the breadth of experience with different technologies, the better. \n\n[00:33:11] Speaker 0:\nYeah, yeah, I think that is awesome. We can say that's a T for team. So you can work better with the team. That's awesome. So, and the side benefit of that too, is that you feel so much more empowered to do stuff. So, if the backend team is like, you know, I know this would make your life easier, but we've got all these other priorities. \n\n[00:33:32] And you say, well, could I make a pull request? And if you aren't a T-shaped engineer, then like the idea of making a pull request on, you know, an area that you're not comfortable with is very foreign. But if you're T-shaped, then like, yeah, I could probably figure it out. And on top of that too, let's say 1 day you decide, you \n\n[00:33:52] know what, I want to do like the startup thing. I want to, I got to throw my own thing together. You'll be way more capable of doing that if you have more breadth of experience. And so, yeah. Good, I'm glad that my whole premise around Epic Web is even works for enterprise level engineers. \n\n[00:34:12] Speaker 1:\nOh yeah, absolutely, absolutely. Yeah, I can't wait to take this course, by the way. I feel like... \n\n[00:34:18] Speaker 0:\nOh, I hope you love it. \n\n[00:34:20] Speaker 1:\nYeah, it's going to be good. It's going to be so good. \n\n[00:34:22] Speaker 0:\nSweet. Well, Shonda, this has been an awesome chat. I always love chatting with you. Is there anything that you wanted to talk about that we didn't get into in our conversation so far? \n\n[00:34:32] Speaker 1:\nNo, no. Like if you're wanting to connect with me, hang out, like the place you can always find me on is Twitter. And my Twitter handle, my everything handle is just my first name. So I'll spell it if you are just listening, but S-H-A-U-N-D-A-I. You can find me anywhere. \n\n[00:34:53] The beauty of having a unique name is that I'm easily Googleable. \n\n[00:34:58] Speaker 0:\nYeah, and actually you can find Shandé in the instructions of the exercises as well. Right. Yeah, there's the exercise about managing sessions in the authentication workshop where I give an example of like somebody logs into a computer \n\n[00:35:19] in a library and then leaves and forgets to log off What do they do? And Shonda is our example person. So thank you I thought it was perfect. And actually, I think I should look it up and not say it wrong, but I think what I say in there is like Shondae is a \n\n[00:35:39] great person or something \n\n[00:35:40] Speaker 1:\nlike that. Oh, that's right, yeah. \n\n[00:35:43] Speaker 0:\nI think it's great. Shondae, it's just a pleasure. And thank you so much for giving us some of your time today to chat about your experience at Netflix. I hope folks get a lot out of this. And yeah, we'll see you all on the internet. \n\n[00:35:57] Speaker 1:\nBye. Thanks for having me. \n\n[00:35:58] Speaker 0:\nBye everybody."
          },
          "_createdAt": "2023-10-19T00:10:57Z",
          "state": "ready",
          "title": "Shaundai Person.mp4",
          "_rev": "6LaeqP6n94P8FD3sVhYIiC",
          "_updatedAt": "2024-03-19T20:25:14Z",
          "_type": "videoResource",
          "muxAsset": {
            "muxAssetId": "iOtC39qXVKdQLAySp49IJS9W6lcTX6MApCsxXFQfn1A",
            "_type": "muxAsset",
            "muxPlaybackId": "ibxr9rd5OWrHdW8eH4UoMDB4RrpHzuBAULRA2aj3Rfc"
          },
          "_id": "1WsDj4v3O4C48HJG2vyZPU"
        }
      },
      {
        "_type": "interview",
        "description": "Ryan Florence, Co-founder of Remix and React Training, discusses Remix's innovations, server components, and the framework's evolution post-acquisition by Shopify.",
        "slug": "remix-behind-the-scenes-with-ryan-florence",
        "videoResource": {
          "_createdAt": "2023-10-19T00:06:12Z",
          "_rev": "6LaeqP6n94P8FD3sVhYIni",
          "muxAsset": {
            "_type": "muxAsset",
            "muxPlaybackId": "hkTef1T00015hT02dmJNrw7z3rI1OzSvp00L01llpNznNZRY",
            "muxAssetId": "cQBXfcogQL7V02USeFsXDDlFNlu4uDYxmEE02foAXAUx8"
          },
          "state": "ready",
          "title": "Ryan Florence.mp4",
          "duration": 2766.266667,
          "_id": "1WsDj4v3O4C48HJG2vyUQF",
          "_updatedAt": "2024-03-19T20:25:16Z",
          "originalMediaUrl": "https://egghead-video-uploads.s3.amazonaws.com/epic-web/interviews/Ryan+Florence.mp4",
          "transcript": {
            "srt": "1\n00:00:00,299 --> 00:00:06,100\nWhat is up everybody I'm super excited to be joined by my friend Ryan Florence say hi Ryan\n\n2\n00:00:08,519 --> 00:00:20,420\nEvery time you say that to me I almost say hi Ryan like it's some funny joke I mean like it kind of is you can I know but I've done it every single time we've done 1 of these things? Yeah. Like, wait, I'm having deja vu. So anyway,\n\n3\n00:00:20,840 --> 00:00:22,240\nhello, I'm Ryan.\n\n4\n00:00:23,300 --> 00:00:24,060\nYeah, actually,\n\n5\n00:00:24,520 --> 00:00:29,840\nI had Ryan on the Chats with Kent podcast, I think season 4, and that season\n\n6\n00:00:30,220 --> 00:00:35,400\nI had that as a running joke where like I'd say say hi so-and-so and if they\n\n7\n00:00:36,060 --> 00:00:39,660\nMost of them would just say hi and I said no I asked you to say hi\n\n8\n00:00:44,420 --> 00:00:44,920\nActually\n\n9\n00:00:45,600 --> 00:00:50,180\non that season, I think you did say, hi, Ryan, I'm like, you're the only 1 who did it right.\n\n10\n00:00:52,040 --> 00:00:52,860\nOh, man.\n\n11\n00:00:53,420 --> 00:01:00,560\nYeah, so actually in that episode, we talked about Remix as well. We're gonna talk about Remix in this episode too, and it's gonna be awesome.\n\n12\n00:01:01,220 --> 00:01:04,180\nBut Ryan and I, we met, let's see,\n\n13\n00:01:04,540 --> 00:01:05,200\nI remember,\n\n14\n00:01:05,540 --> 00:01:08,420\nI think my earliest memory of us was at a meetup\n\n15\n00:01:09,320 --> 00:01:11,740\nat AtTask, which is now Workfront here in Utah.\n\n16\n00:01:12,160 --> 00:01:16,860\nIt was an, I think it was an Angular meetup. Were you, No, no, no, this must have been\n\n17\n00:01:17,640 --> 00:01:21,900\na Utah JS thing. It might have been my lunch JS things that I started.\n\n18\n00:01:23,260 --> 00:01:30,180\nYou know, I never went to those. I did hear about those, but it was in a meetup. We were in a parking lot afterward just chatting\n\n19\n00:01:31,500 --> 00:01:34,060\nas 1 does after you're kicked out of the meetup.\n\n20\n00:01:35,280 --> 00:01:37,780\nAnd yeah, and then eventually I took your\n\n21\n00:01:38,140 --> 00:01:41,680\nweek-long React training. Yeah, with Tyler McGinnis,\n\n22\n00:01:42,040 --> 00:01:46,220\nhe organized that. And then I taught it. Yeah, That was good.\n\n23\n00:01:46,720 --> 00:01:48,720\nI didn't really pay too much attention.\n\n24\n00:01:49,600 --> 00:01:50,320\nI'm sorry.\n\n25\n00:01:51,100 --> 00:01:54,940\nBut yeah, and then we've just been friends ever since.\n\n26\n00:01:55,380 --> 00:01:59,120\nYou moved away from Utah and then you came back and then we hang out sometimes.\n\n27\n00:02:00,060 --> 00:02:04,460\nAnd looking forward to all the snow that's hitting the mountains, because we're gonna be up there a lot.\n\n28\n00:02:04,760 --> 00:02:09,560\nI know, I've got a, I actually have a view of the mountains from right here in my office. Oh yeah.\n\n29\n00:02:10,080 --> 00:02:10,580\nAnd\n\n30\n00:02:12,520 --> 00:02:15,460\nit's snow capped, and I'm super excited.\n\n31\n00:02:15,940 --> 00:02:18,620\nYeah, yeah, I'm liking that, Awesome.\n\n32\n00:02:19,120 --> 00:02:23,640\nOkay, anyway, so that is a little bit of our history. We go back, I think,\n\n33\n00:02:24,020 --> 00:02:24,980\nthat's like 2014,\n\n34\n00:02:25,680 --> 00:02:30,100\nmaybe, is as far back as we go. So it's been almost a decade. It's been years.\n\n35\n00:02:30,420 --> 00:02:34,860\nYeah, it's wild. So Ryan, Why don't you tell us a little bit about yourself like your own?\n\n36\n00:02:35,680 --> 00:02:37,180\nPlace in the\n\n37\n00:02:37,500 --> 00:02:39,180\nCommunity and and whatever\n\n38\n00:02:39,720 --> 00:02:42,860\noh geez I don't know where my place in the community is but\n\n39\n00:02:43,780 --> 00:02:46,760\nI love the web I think JavaScript super fun\n\n40\n00:02:49,660 --> 00:02:52,400\nAnd yeah, I guess I have some opinions about\n\n41\n00:02:53,720 --> 00:02:55,360\nhow to build things on the web.\n\n42\n00:02:55,680 --> 00:03:00,660\nAnd when your opinions are too strong, sometimes you just have to stop talking and start building. And\n\n43\n00:03:01,260 --> 00:03:01,760\nmaybe\n\n44\n00:03:02,320 --> 00:03:03,880\nthat's where Remix came from.\n\n45\n00:03:04,340 --> 00:03:12,440\nYeah, I actually can relate to that a little bit. Although, I don't think either 1 of us stopped talking, even though we built some stuff.\n\n46\n00:03:13,820 --> 00:03:14,760\nYeah, that's true.\n\n47\n00:03:15,480 --> 00:03:16,300\nYeah, so\n\n48\n00:03:17,380 --> 00:03:20,620\nmost recently, I helped build Remix with Michael Jackson\n\n49\n00:03:21,020 --> 00:03:21,860\nand you.\n\n50\n00:03:22,440 --> 00:03:24,120\nYou joined us there in the beginning.\n\n51\n00:03:25,680 --> 00:03:31,160\nBefore that, did React Router with Michael and before that did stuff in MooTools and Ember\n\n52\n00:03:31,560 --> 00:03:35,580\nand a lot of Rails development, a lot of jQuery, lots of Backbone,\n\n53\n00:03:36,420 --> 00:03:38,580\nstint with CoffeeScript, that was fun.\n\n54\n00:03:40,680 --> 00:03:41,340\nBut yeah,\n\n55\n00:03:43,520 --> 00:03:45,040\nthat's where I'm at, web developer.\n\n56\n00:03:45,440 --> 00:03:45,940\nIt's\n\n57\n00:03:46,720 --> 00:03:49,540\npeople mostly associate me with React, but\n\n58\n00:03:50,140 --> 00:03:51,520\nI've never really felt,\n\n59\n00:03:51,820 --> 00:03:57,260\nlike I love React, but I've always felt funny when people are like, oh, Ryan Florence, the React developer.\n\n60\n00:03:58,500 --> 00:04:01,780\nI'm like, well, I've written a lot of other code that's not React.\n\n61\n00:04:03,340 --> 00:04:04,340\nYeah, for real.\n\n62\n00:04:05,340 --> 00:04:08,900\nYeah, actually speaking of code you've written that wasn't React,\n\n63\n00:04:09,480 --> 00:04:14,780\nI always like it when you say that you've been doing web development since before CSS was invented.\n\n64\n00:04:15,820 --> 00:04:20,660\nYeah, exactly. So for a long time, how did you get into web development at the very start like that?\n\n65\n00:04:21,279 --> 00:04:24,900\nSo I was 15 or 16 years old and\n\n66\n00:04:25,400 --> 00:04:28,220\nthe internet was just kind of showing up. This was like,\n\n67\n00:04:28,740 --> 00:04:33,640\nI don't know, I was in like 8th grade or 9th grade. Yeah, late 90s sort of. 94,\n\n68\n00:04:34,200 --> 00:04:35,720\n95-ish, early 90s,\n\n69\n00:04:36,220 --> 00:04:36,960\nmid 90s.\n\n70\n00:04:37,800 --> 00:04:40,580\nAnd just me and 1 other friend had email addresses,\n\n71\n00:04:41,280 --> 00:04:52,460\nand all the rest of our friends made fun of us for having an email address, like we were super computer nerds or something. And I was just like, you're all like your whole world is gonna be on the internet. Like don't make fun of me.\n\n72\n00:04:53,240 --> 00:04:55,780\nHere we are. Now they're the ones on Facebook all day.\n\n73\n00:04:58,980 --> 00:05:03,500\nBut no, my dad invested in an ISP, an internet service provider.\n\n74\n00:05:05,280 --> 00:05:10,120\nAnd so we had our little username. My dad's name is Casey, so it was Casey F. That was our username.\n\n75\n00:05:10,600 --> 00:05:13,520\nAnd back then, when you signed up for an internet\n\n76\n00:05:14,060 --> 00:05:14,560\nprovider,\n\n77\n00:05:15,280 --> 00:05:26,780\nyou'd dial in with a modem and you hear all the crackling noises and stuff. And then your older sister would pick up the phone to call her boyfriend. And then your picture of Kurt Cobain that you were downloading would get\n\n78\n00:05:27,180 --> 00:05:28,820\nruined. And then you're like, no!\n\n79\n00:05:29,440 --> 00:05:32,520\nSo then your parents buy 2 phone lines, 1 for the internet.\n\n80\n00:05:33,340 --> 00:05:35,260\nAnyway, my dad invested in this ISP\n\n81\n00:05:36,140 --> 00:05:42,220\nand with the username KCF. Back then they would give you like, you'd get an email address and then you'd have like an FTP,\n\n82\n00:05:42,560 --> 00:05:45,600\nfile transfer protocol, like HTTP, but FTP.\n\n83\n00:05:47,460 --> 00:05:48,540\nThat's funny, nobody...\n\n84\n00:05:49,400 --> 00:05:49,900\nYeah.\n\n85\n00:05:52,060 --> 00:05:54,340\nBut you could just FTP a bunch of files\n\n86\n00:05:54,860 --> 00:05:59,340\nand up to the internet. Like everyone just kind of had their own little homepage if they wanted.\n\n87\n00:06:00,060 --> 00:06:03,740\nAnd you just throw some HTML up there. And so yeah, this was\n\n88\n00:06:04,540 --> 00:06:12,880\nback when HTML was really rudimentary. It was like to change the, all style was inline, which is funny, because we're back to that. Styles were inline.\n\n89\n00:06:14,540 --> 00:06:18,500\nThere was no such thing as CSS. So it was like body, BG, color equals.\n\n90\n00:06:19,540 --> 00:06:23,900\nOr to change the font, you had to put a font tag in. I think it was font family\n\n91\n00:06:24,380 --> 00:06:24,880\nas\n\n92\n00:06:25,240 --> 00:06:25,940\nan attribute.\n\n93\n00:06:26,380 --> 00:06:33,740\nAnd then everything below that would be that font. So if you had to put it inside of a paragraph, So every paragraph tag pretty much\n\n94\n00:06:34,860 --> 00:06:37,620\nhad, like you repeated font tags everywhere because\n\n95\n00:06:37,960 --> 00:06:41,180\nas soon as you change it to another 1, then you want to like change it back.\n\n96\n00:06:42,260 --> 00:06:43,300\nIt was pretty funny.\n\n97\n00:06:44,440 --> 00:06:46,500\nSo yeah, before CSS, before JavaScript.\n\n98\n00:06:46,960 --> 00:06:47,460\nAnd\n\n99\n00:06:47,900 --> 00:06:49,180\nso I kind of grew up\n\n100\n00:06:49,500 --> 00:06:50,420\nwith the web,\n\n101\n00:06:50,940 --> 00:06:52,440\nwhich I think is pretty cool.\n\n102\n00:06:53,600 --> 00:06:57,040\nAnd then I built websites for my punk rock band and\n\n103\n00:06:57,880 --> 00:07:10,060\nI'd bribe other bands to let us play shows with them. Like I'd go online, find their websites, or I don't even know how, that's how I found out about shows. Go to skate shops? Yeah, it was skate shops, and you had like little flyers.\n\n104\n00:07:11,720 --> 00:07:14,020\nAnd I'd find those bands, and I'd say, hey,\n\n105\n00:07:14,380 --> 00:07:21,640\nyou need a website, I can build it for you. Let me take some pictures at your show and yada, yada, yada, and then let my band play with you.\n\n106\n00:07:22,240 --> 00:07:25,580\nAnd then I'll build you a website. And so that's how we got our first shows.\n\n107\n00:07:27,260 --> 00:07:28,080\nThat's actually\n\n108\n00:07:28,780 --> 00:07:29,280\nvery\n\n109\n00:07:29,960 --> 00:07:31,400\nindustrious of you.\n\n110\n00:07:31,740 --> 00:07:35,700\nYeah. Cool. So That's how I got into it.\n\n111\n00:07:36,820 --> 00:07:37,400\nThat is\n\n112\n00:07:37,700 --> 00:07:41,620\nawesome. But you did not graduate with a CS degree though, right?\n\n113\n00:07:42,040 --> 00:07:42,540\nRight.\n\n114\n00:07:42,980 --> 00:07:46,900\nSo I did all that stuff and then After I graduated high school, I\n\n115\n00:07:47,880 --> 00:07:48,840\nwent on a\n\n116\n00:07:49,940 --> 00:07:56,780\nmission for my church, the Church of Jesus Christ of Latter-day Saints. And that's like a two-year thing where you kind of unplug from the whole world.\n\n117\n00:07:59,760 --> 00:08:00,740\nAnd got back.\n\n118\n00:08:01,400 --> 00:08:03,480\nAnd when I got back is when DHTML,\n\n119\n00:08:04,740 --> 00:08:07,760\ndynamic HTML had kind of like taken over, like pre-AJAX,\n\n120\n00:08:08,200 --> 00:08:14,640\nit was like HTML, and then CSS and JavaScript showed up, and then there was DHTML, and then if that was AJAX. So I got back\n\n121\n00:08:15,020 --> 00:08:17,060\nfrom that missionary service,\n\n122\n00:08:18,260 --> 00:08:21,840\nAnd the whole web had changed. Before I could like view source\n\n123\n00:08:22,660 --> 00:08:24,820\nand it all made perfect sense to me.\n\n124\n00:08:26,280 --> 00:08:28,700\nAnd now I would view source and there was like,\n\n125\n00:08:29,540 --> 00:08:32,140\nI don't know, It was so different. There was just so\n\n126\n00:08:32,500 --> 00:08:33,220\nmuch scripting.\n\n127\n00:08:36,039 --> 00:08:38,360\nAnd I think some tools were even introduced.\n\n128\n00:08:38,740 --> 00:08:39,360\nI think\n\n129\n00:08:40,240 --> 00:08:41,080\nVisual Basic\n\n130\n00:08:41,460 --> 00:08:42,940\nwould actually kick out Jscript.\n\n131\n00:08:43,700 --> 00:08:45,140\nAnd then that would go into,\n\n132\n00:08:45,660 --> 00:08:56,680\nso they'd like author it. And I don't know, I never did it that way, but I just remember looking at the code and it was just a mess and I was like, ah, forget this. And so I went to, when I went to college, I studied economics\n\n133\n00:08:57,540 --> 00:08:59,780\nand didn't really touch web dev for\n\n134\n00:09:00,240 --> 00:09:03,740\n4 years or so after that. So I kind of had a 6 year break\n\n135\n00:09:05,500 --> 00:09:08,140\njust right after CSS was created\n\n136\n00:09:08,680 --> 00:09:10,080\nand then right before,\n\n137\n00:09:10,460 --> 00:09:18,300\nand then I got back into it right when like jQuery and MooTools and everything else started blowing up, like the Ajax phase of web development.\n\n138\n00:09:19,220 --> 00:09:21,000\nYeah, around like 2006\n\n139\n00:09:21,500 --> 00:09:22,240\nand 7.\n\n140\n00:09:23,740 --> 00:09:24,880\nYeah, 2005,\n\n141\n00:09:25,320 --> 00:09:28,940\nyeah. My wife needed, she was graduating with a photography degree.\n\n142\n00:09:30,040 --> 00:09:32,340\nAnd back then we were super poor and\n\n143\n00:09:33,400 --> 00:09:34,500\nshe needed a\n\n144\n00:09:34,840 --> 00:09:35,340\nportfolio.\n\n145\n00:09:37,540 --> 00:09:40,140\nRight. 200 bucks to get a portfolio printed\n\n146\n00:09:40,860 --> 00:09:44,020\nand like a nice like bound in the book and everything like that.\n\n147\n00:09:44,340 --> 00:09:51,300\nBut her teacher, her professor is also like, or if you know how you can build a website for your portfolio, cause that's probably the direction we're all going.\n\n148\n00:09:51,820 --> 00:09:56,980\nAnd so she's like, you used to know how to build websites, right? And I was like, oh crap. You can save some money here.\n\n149\n00:09:57,380 --> 00:10:02,260\nYeah, it's like, well for 200 bucks, yeah, I'll try to remember how to do this and\n\n150\n00:10:03,920 --> 00:10:05,140\nyeah, grab MooTools\n\n151\n00:10:05,940 --> 00:10:06,600\nand jQuery,\n\n152\n00:10:07,660 --> 00:10:12,740\nput them both on the same page and everything broke. And then I learned that they were both messing with globals.\n\n153\n00:10:13,480 --> 00:10:14,160\nAnd anyway,\n\n154\n00:10:15,260 --> 00:10:21,540\nYeah, I just got hooked after that. I started really digging into JavaScript because she kept giving me these requirements. Like,\n\n155\n00:10:21,900 --> 00:10:28,040\nwhen they click on this picture, I want the background image, the background color to change. I'm like, I don't know how to do that crap.\n\n156\n00:10:29,060 --> 00:10:30,180\nAnd then the next morning,\n\n157\n00:10:30,780 --> 00:10:36,680\nI was a typical software engineer. Product team says, hey, make the app do this. And engineering says, no.\n\n158\n00:10:38,880 --> 00:10:39,380\nYeah.\n\n159\n00:10:39,960 --> 00:10:50,140\nYeah. Then the next morning I'd have it working and I was all proud, impressing my new wife. And then, yeah. Yeah. And then it was just history. I got involved with open source with MooTools from there.\n\n160\n00:10:50,660 --> 00:10:53,040\nGot some contract gigs from\n\n161\n00:10:53,840 --> 00:10:54,340\ndevelopers\n\n162\n00:10:56,140 --> 00:10:57,080\nin that circle.\n\n163\n00:10:58,700 --> 00:11:04,780\nWho we still interact with today. Mootools, lots of people came from Mootools on the React, in the React world.\n\n164\n00:11:05,980 --> 00:11:06,920\nYeah, yeah.\n\n165\n00:11:07,660 --> 00:11:08,580\nThere's my whole,\n\n166\n00:11:09,140 --> 00:11:11,620\nthere's my whole, how I got into the profession.\n\n167\n00:11:12,720 --> 00:11:13,400\nVery cool.\n\n168\n00:11:13,940 --> 00:11:14,440\nSo\n\n169\n00:11:15,060 --> 00:11:16,340\nYou were 1 of the,\n\n170\n00:11:18,940 --> 00:11:24,440\nholdouts isn't the right word, but everybody was moving over to AngularJS, but you had latched onto Ember,\n\n171\n00:11:27,040 --> 00:11:30,300\nand that was working out pretty well for you over at Instructure, but then\n\n172\n00:11:30,780 --> 00:11:39,980\nyou discovered React. It didn't work. It never worked out very well. It didn't work, but we can keep going. I learned a ton there. I love that community. I love Tom and Yehuda,\n\n173\n00:11:40,760 --> 00:11:41,820\namazing engineers.\n\n174\n00:11:43,300 --> 00:11:44,020\nAnd yeah,\n\n175\n00:11:45,040 --> 00:11:47,580\nAll the work in my career ever since meeting them has been\n\n176\n00:11:48,520 --> 00:11:56,300\nimmensely influenced by the way that they think of my writing software. So I mean, no disrespect to them, but yeah, Ember didn't quite work out on our team.\n\n177\n00:11:57,440 --> 00:12:06,900\nYeah, yeah, I think any, so I was never really into Ember. I played around with it a little bit and I learned a little bit about it, but never shipped anything with Ember. But from what I understand,\n\n178\n00:12:07,500 --> 00:12:08,540\na lot of\n\n179\n00:12:08,860 --> 00:12:12,280\nwhat React Router is, and even Remix in some ways,\n\n180\n00:12:12,600 --> 00:12:15,740\nwas pretty directly inspired by Ember, right?\n\n181\n00:12:16,300 --> 00:12:17,340\nTotally, yeah.\n\n182\n00:12:18,100 --> 00:12:31,820\nIn fact, after we launched remix, Tom reached out and he was like, I think remix is, I can't remember the exact phrase. Someone's going to send this back to him and be like, that's not what I said, but Twitter deleted my account. So I can't go find exactly what he said, but\n\n183\n00:12:33,240 --> 00:12:38,940\nit was basically something like, he basically kind of created what we were after with Ember,\n\n184\n00:12:39,280 --> 00:12:46,060\nwith all the full stack stuff and the data coming through the loaders and they had Ember data, they had these idea of models and\n\n185\n00:12:46,600 --> 00:12:50,300\nit's all very similar Like loader is, loader in action are your controllers.\n\n186\n00:12:51,580 --> 00:12:58,080\nYour model, you get to bring your own Prisma or whatever you want to use, a drizzle or just talk to database yourself.\n\n187\n00:12:59,080 --> 00:13:01,520\nAnd then the components of the view, like it's still MVC.\n\n188\n00:13:04,020 --> 00:13:09,640\nWe just put different pieces of code together in a file instead of like, here's where you should make the boundaries,\n\n189\n00:13:09,960 --> 00:13:18,740\nreact and then remix. And now server components are kind of saying, actually, I think we like these boundaries better between things. Let's compose this way instead of some other way, right?\n\n190\n00:13:19,960 --> 00:13:26,100\nYeah, like those constraints and those boundaries do exist. 1 way or another, it's just how you piece\n\n191\n00:13:26,500 --> 00:13:30,040\nthose things together, like where the boundary. How are you gerrymandering\n\n192\n00:13:30,840 --> 00:13:36,420\nthose requirements? How am I gerrymandering? Oh, man, we don't want to trigger people. Let's move on.\n\n193\n00:13:37,060 --> 00:13:37,560\nYeah.\n\n194\n00:13:38,220 --> 00:13:39,400\nSo, yeah, we got\n\n195\n00:13:40,160 --> 00:13:44,660\nlots of inspiration, not just from the code, but also their approach to things as well.\n\n196\n00:13:45,280 --> 00:13:52,260\nAnd you did a lot of stuff with MIRB too, which is a project in the Ruby community that both Michael and I have huge respect for.\n\n197\n00:13:52,840 --> 00:13:54,220\nIt merged with Rails,\n\n198\n00:13:56,040 --> 00:14:00,160\nwhich was huge for Rails. Rails got a whole lot better. Some people would say\n\n199\n00:14:00,520 --> 00:14:06,680\nthat MIRB was better than the Rails plus Merb merge. This is hard to say out loud, Merb merge.\n\n200\n00:14:08,400 --> 00:14:14,120\nBut yeah, so respect for him all over the place, but we got the nested routing ideas from them,\n\n201\n00:14:15,260 --> 00:14:21,980\nyou know, that you couple segments of the URL to pieces of the UI and also data. Like that's an idea from Ember as well. Yeah.\n\n202\n00:14:22,660 --> 00:14:29,120\nBut obviously we got a ton of stuff from, I mean, we use React, but we got a ton of stuff from React too, where it's like, here's a good boundary.\n\n203\n00:14:30,060 --> 00:14:31,780\nYou know, a route is kind of like\n\n204\n00:14:33,480 --> 00:14:35,700\na encapsulated piece of the page.\n\n205\n00:14:36,160 --> 00:14:43,220\nLet's put everything that's relevant. It's a data, how you mutate that data and how you display that data. Let's put all of that together.\n\n206\n00:14:44,760 --> 00:14:47,200\nYeah. So it's a remix is very much like a\n\n207\n00:14:47,780 --> 00:14:50,460\neverything we like from Rails, Merb, Ember,\n\n208\n00:14:51,020 --> 00:14:53,800\nReact, and the history of our careers.\n\n209\n00:14:55,040 --> 00:14:59,780\nWe tried to wrap up in this idea we call Remix. We tried to remix all of these ideas.\n\n210\n00:15:02,120 --> 00:15:02,720\nYeah, so\n\n211\n00:15:03,220 --> 00:15:04,900\nwhat's interesting about that is\n\n212\n00:15:05,280 --> 00:15:06,720\nyou tie to all of\n\n213\n00:15:08,260 --> 00:15:11,700\nthe UI and the data fetching and data mutating\n\n214\n00:15:12,800 --> 00:15:18,740\nin 1 place and that's all attached to the URL, to the nested routing is what makes all that work.\n\n215\n00:15:19,460 --> 00:15:21,520\nAnd now with the Remix v3,\n\n216\n00:15:22,200 --> 00:15:31,780\nyou're going like a level deeper into the component with server components. Can you talk a little bit about like, what's the motivation behind that and How does that end up working?\n\n217\n00:15:32,320 --> 00:15:32,820\nYeah,\n\n218\n00:15:33,240 --> 00:15:39,820\nI don't know if it'll be v3. There's a bunch of stuff we're going to ship that'll probably be v3, and then maybe the RSA stuff will come in v4.\n\n219\n00:15:40,900 --> 00:15:41,760\nOkay, yeah.\n\n220\n00:15:42,180 --> 00:15:43,560\nBut yeah, so just,\n\n221\n00:15:44,180 --> 00:15:45,900\nI'm being pedantic, but whatever.\n\n222\n00:15:46,880 --> 00:15:48,760\nNext version, or future version.\n\n223\n00:15:49,200 --> 00:15:49,700\nYeah,\n\n224\n00:15:50,660 --> 00:15:54,620\nI mean, it's pretty cool with nested routes how you can put all that stuff together, but\n\n225\n00:15:55,470 --> 00:15:55,970\nyou\n\n226\n00:15:56,820 --> 00:15:57,320\nstill,\n\n227\n00:16:00,660 --> 00:16:08,460\nYou know that graphic that people do all the time, and maybe you could post this in the course or something, but that graphic where people have the separation of concerns thing,\n\n228\n00:16:08,800 --> 00:16:14,620\nand it shows like HTML and it's green, and CSS and it's blue, and JavaScript and it's red, or something like that.\n\n229\n00:16:15,060 --> 00:16:17,540\nAnd it's like these 3 bars that go this way.\n\n230\n00:16:18,140 --> 00:16:19,700\nAnd then the next side\n\n231\n00:16:20,080 --> 00:16:21,900\nsays separation of concerns.\n\n232\n00:16:22,540 --> 00:16:24,180\nBut then you see these like gradients\n\n233\n00:16:24,800 --> 00:16:26,680\nof HTML, CSS and JavaScript.\n\n234\n00:16:27,040 --> 00:16:29,740\nAnd underneath those bars is like date picker\n\n235\n00:16:30,060 --> 00:16:32,380\nor tabs or user profile.\n\n236\n00:16:34,660 --> 00:16:39,420\nThat's what React really brought to the table was a way to separate the concerns, not by technology,\n\n237\n00:16:39,960 --> 00:16:41,620\nHTML, CSS and JavaScript,\n\n238\n00:16:42,180 --> 00:16:43,280\nor not by\n\n239\n00:16:44,760 --> 00:16:46,520\nrole, like in\n\n240\n00:16:47,200 --> 00:17:02,380\nRails, where it's like model, view, controller. You got a controllers folder and that's where all the controllers live. And then you got a models folder and you got a view folder. And those views and the controllers are coupled and they would just couple them by name, but sometimes you configure them too. But there's this like, there's a separation\n\n241\n00:17:02,740 --> 00:17:03,240\nand\n\n242\n00:17:04,380 --> 00:17:14,099\nyou can't compose a controller into another controller or a model into another model or have a view that then renders another view that is talking to a different controller and then renders another 1, right?\n\n243\n00:17:14,440 --> 00:17:14,940\nYeah.\n\n244\n00:17:15,359 --> 00:17:16,060\nAnd so\n\n245\n00:17:16,460 --> 00:17:23,180\nReact brought to the front end this idea of, all right, let's quit separating by tech and let's kind of\n\n246\n00:17:24,160 --> 00:17:26,980\nseparate it by a different kind of concern, a more product-oriented\n\n247\n00:17:27,359 --> 00:17:28,060\nor user-oriented\n\n248\n00:17:28,380 --> 00:17:29,980\nconcern, which is like a date picker.\n\n249\n00:17:30,860 --> 00:17:31,360\nYeah.\n\n250\n00:17:32,120 --> 00:17:32,880\nAnd then\n\n251\n00:17:34,020 --> 00:17:36,100\nRemix brings in Loader in action,\n\n252\n00:17:37,480 --> 00:17:37,980\nbut\n\n253\n00:17:38,760 --> 00:17:39,820\nit doesn't compose\n\n254\n00:17:40,240 --> 00:17:42,540\nright now in Remix V2. Yeah.\n\n255\n00:17:44,440 --> 00:17:44,940\nLike\n\n256\n00:17:45,520 --> 00:17:48,460\nfor the add to cart button that Hydrogen has.\n\n257\n00:17:48,820 --> 00:17:50,260\nSo Hydrogen is a framework\n\n258\n00:17:51,040 --> 00:17:53,820\nor a library. I don't know. It's framework.\n\n259\n00:17:54,520 --> 00:17:58,440\nSo who knows the difference? Hydrogen is a framework for building headless\n\n260\n00:17:58,780 --> 00:17:59,940\ne-commerce apps\n\n261\n00:18:02,060 --> 00:18:02,800\nwith Remix.\n\n262\n00:18:03,340 --> 00:18:07,000\nAnd they have this Add to Cart button, and you can't just put it anywhere.\n\n263\n00:18:08,140 --> 00:18:20,420\nYou've got to wire up, like if you have a route or a component that renders an Add to Cart button, it's got to know, like it's action at that route needs to know how to add something to the cart. So you got to bring in the button, then you got to bring in the action.\n\n264\n00:18:20,740 --> 00:18:28,760\nAnd maybe like if you want to know if this product is already in the cart, you got to bring in a function to your loader too and like drill that down to the button to say, hey,\n\n265\n00:18:29,440 --> 00:18:30,740\nyou're already in the cart.\n\n266\n00:18:31,320 --> 00:18:31,820\nSo\n\n267\n00:18:34,080 --> 00:18:39,020\nthe remix abstractions on top of the data abstractions don't really compose together with components.\n\n268\n00:18:39,760 --> 00:18:40,260\nGreat.\n\n269\n00:18:41,120 --> 00:18:41,920\nThat's fine.\n\n270\n00:18:42,440 --> 00:18:46,920\nYou can, you bring in the component and the 2 functions and like, it works.\n\n271\n00:18:47,300 --> 00:18:49,080\nAnd it still is a really good experience\n\n272\n00:18:49,400 --> 00:18:50,180\nfor the developer.\n\n273\n00:18:51,960 --> 00:18:53,040\nBut server components\n\n274\n00:18:53,800 --> 00:18:57,740\nbring that extra layer of composition to this full stack\n\n275\n00:18:58,580 --> 00:18:59,080\napproach\n\n276\n00:19:00,040 --> 00:19:02,300\nthat Next has been doing, that Remix has been doing,\n\n277\n00:19:04,240 --> 00:19:05,140\nto where now,\n\n278\n00:19:05,660 --> 00:19:11,620\ninstead of needing a route that you configure and then bring in some functions to add something to a cart,\n\n279\n00:19:12,180 --> 00:19:13,280\nthe button itself\n\n280\n00:19:13,940 --> 00:19:21,760\ncan just say, hey, my form action is this function over here. And then the framework can say, oh, okay, I'll make a route for that\n\n281\n00:19:22,080 --> 00:19:26,260\naction. But you don't have to bring in a function and plug it into your routes.\n\n282\n00:19:27,160 --> 00:19:34,460\nThere's no configuration. Like you just get to skip that step. And you just got to say this button mutates this data on the server. And then the framework\n\n283\n00:19:34,940 --> 00:19:40,880\nconnects that network gap. We say that all the time in Remix, right? Like it closes the network gap.\n\n284\n00:19:41,580 --> 00:19:52,260\nRSC gives us a way to do it in a very composable way where the components get to know about data, get to know about how to change data, and they get to know how to render data. And now mix in the front end JavaScript,\n\n285\n00:19:52,580 --> 00:19:55,380\nHTML, and CSS. And so we kind of have like a 5\n\n286\n00:19:56,120 --> 00:19:58,480\npart component now. It's not just\n\n287\n00:19:58,820 --> 00:20:00,560\nHTML, CSS, and JavaScript,\n\n288\n00:20:01,680 --> 00:20:04,300\nbut now we get data actions and data loaders\n\n289\n00:20:04,780 --> 00:20:06,000\nall mixed in together.\n\n290\n00:20:07,120 --> 00:20:07,620\nYeah,\n\n291\n00:20:08,000 --> 00:20:09,180\nthat level of composition\n\n292\n00:20:09,520 --> 00:20:11,100\nis like, cannot be underestimated,\n\n293\n00:20:11,800 --> 00:20:17,420\nhow powerful that is. But you can just ingest these things inside of each other as like props.children,\n\n294\n00:20:17,840 --> 00:20:25,460\nright? And 1 of them is going to be sent to the browser, another 1 is only going to run on the server, 3 of them might talk to totally different action endpoints,\n\n295\n00:20:26,060 --> 00:20:27,320\nand you just get\n\n296\n00:20:28,260 --> 00:20:31,160\nto describe your UI with components. It's going to be\n\n297\n00:20:31,960 --> 00:20:32,460\nrad.\n\n298\n00:20:33,480 --> 00:20:35,140\nYeah, I'm pretty excited about it.\n\n299\n00:20:36,040 --> 00:20:39,640\nYeah, yeah, we're definitely looking forward to that for sure. And\n\n300\n00:20:40,080 --> 00:20:43,400\nhonestly, I've been pretty skeptical of server components\n\n301\n00:20:44,060 --> 00:20:46,320\nfor various things and over time,\n\n302\n00:20:46,780 --> 00:20:50,040\ncertain concerns that I've had have mostly been addressed.\n\n303\n00:20:50,460 --> 00:20:50,960\nBut\n\n304\n00:20:51,440 --> 00:20:53,540\nyeah, I still have a number of concerns\n\n305\n00:20:54,760 --> 00:20:57,100\nthat from what you have told me,\n\n306\n00:20:57,440 --> 00:20:58,520\nthey will not be\n\n307\n00:20:58,860 --> 00:20:59,360\nconcerns.\n\n308\n00:20:59,840 --> 00:21:02,020\nAnd So I'm really looking forward to seeing\n\n309\n00:21:02,640 --> 00:21:03,340\nthe early\n\n310\n00:21:04,280 --> 00:21:05,940\ndemos and stuff like that\n\n311\n00:21:06,680 --> 00:21:13,680\nonce there's some work published there. Yeah, they've made a lot of things better. I mean, props to them for\n\n312\n00:21:14,480 --> 00:21:16,740\nshowing their work so dang early.\n\n313\n00:21:17,360 --> 00:21:21,400\nYeah, yeah. It's kind of disingenuous of me to be too critical of it when they're like,\n\n314\n00:21:21,820 --> 00:21:23,860\nyou know, showing it so soon.\n\n315\n00:21:24,720 --> 00:21:25,400\nBut yeah,\n\n316\n00:21:26,320 --> 00:21:27,460\nI think it'll be good.\n\n317\n00:21:28,200 --> 00:21:29,160\nYeah, yeah, it's exciting.\n\n318\n00:21:29,680 --> 00:21:33,960\nBut so let's talk about V3 then, because I just saw this morning\n\n319\n00:21:34,860 --> 00:21:35,940\nsome pretty\n\n320\n00:21:36,280 --> 00:21:37,040\nsomething that\n\n321\n00:21:38,000 --> 00:21:39,240\nHonestly is a little\n\n322\n00:21:39,600 --> 00:21:46,060\nit's not embarrassing, but it's like how did this take so long talking about middleware and and\n\n323\n00:21:47,860 --> 00:21:48,740\nthen like\n\n324\n00:21:49,380 --> 00:21:50,240\nserver context\n\n325\n00:21:50,740 --> 00:21:51,900\nand stuff like that.\n\n326\n00:21:52,740 --> 00:21:53,240\nSo\n\n327\n00:21:54,100 --> 00:21:57,380\nthe people who are watching this have probably gone through a couple of exercises\n\n328\n00:21:57,800 --> 00:21:59,320\nthat maybe some of them already\n\n329\n00:21:59,760 --> 00:22:03,980\nhad experience with Remix. I think they'd be kind of interested to hear about\n\n330\n00:22:04,280 --> 00:22:04,960\nthe solution.\n\n331\n00:22:05,380 --> 00:22:18,940\nBecause we have an exercise where we say, okay, we're going to protect routes. And so now let's go into all these different routes and say this 1 requires anonymous users, and this 1 requires authenticated users. And they're like this whole section of routes that all need require authenticated\n\n332\n00:22:19,440 --> 00:22:21,180\nor require user on it.\n\n333\n00:22:21,600 --> 00:22:28,360\nAnd yeah, they're probably hoping for some sort of middleware. So can you describe that a little bit, maybe explain why it took so long?\n\n334\n00:22:31,640 --> 00:22:33,700\nSo we first expected people,\n\n335\n00:22:34,700 --> 00:22:37,080\nwell, we expected to be more convenient\n\n336\n00:22:38,000 --> 00:22:39,220\nto lean on\n\n337\n00:22:39,580 --> 00:22:41,260\nthe server that Remix's\n\n338\n00:22:42,100 --> 00:22:44,560\nrequest handler is actually running on,\n\n339\n00:22:45,060 --> 00:22:46,020\nwhether that's Express\n\n340\n00:22:46,560 --> 00:22:47,700\nor Fastify\n\n341\n00:22:48,740 --> 00:22:53,400\nor Fastly or CloudFlare Edge or Vercells Edge or AWS directly.\n\n342\n00:22:55,520 --> 00:23:01,960\nWe're kind of thinking like, oh, okay, that kind of middleware stuff maybe doesn't have a whole lot to do with the UI and we can lean on that.\n\n343\n00:23:03,620 --> 00:23:09,520\nCause you can do that. You can put a path like in Express. You can like put a path in there for just middleware.\n\n344\n00:23:10,160 --> 00:23:14,940\nDon't render any UI. So that middleware will run before it then gets to Remix.\n\n345\n00:23:15,560 --> 00:23:19,220\nAnd you remember when we first shipped Remix, we actually had a separate data folder\n\n346\n00:23:19,900 --> 00:23:20,700\nthat like,\n\n347\n00:23:21,140 --> 00:23:32,220\nyou just made endpoints in whatever server world you were in and we would call them and expect that a JSON request, like there was no Remix over there. We were simply just saying, hey, set up some endpoints and we'll call them for data.\n\n348\n00:23:34,240 --> 00:23:35,040\nBut it\n\n349\n00:23:35,380 --> 00:23:36,840\ndidn't pan out in practice\n\n350\n00:23:38,200 --> 00:23:39,880\nfor a lot of reasons, but,\n\n351\n00:23:41,000 --> 00:23:44,100\ncause you want the remix abstractions, right? You want request response.\n\n352\n00:23:45,280 --> 00:23:56,740\nYeah. Yeah. Whatever else there you've got going on the way our cookies and all that kind of stuff work And so you've got the adapter for your normal request handler and so to actually make that work\n\n353\n00:23:57,600 --> 00:24:06,040\nYou'd need a adapter for all those middleware handlers to to like do it the remix II way or whatever or the webby way Really? Yeah the web API so\n\n354\n00:24:07,540 --> 00:24:13,640\nand it's not that we ever didn't want middleware. It just felt like something that like, when you're building something new,\n\n355\n00:24:14,160 --> 00:24:15,080\nespecially when\n\n356\n00:24:15,860 --> 00:24:19,940\nyou're in the middle of a global pandemic and you're trying to figure out a new income source.\n\n357\n00:24:23,220 --> 00:24:24,840\nYou're always looking for,\n\n358\n00:24:26,480 --> 00:24:30,040\nwhat are you trying to innovate on and what are you not trying to innovate on?\n\n359\n00:24:30,480 --> 00:24:30,980\nYes,\n\n360\n00:24:31,900 --> 00:24:34,620\nthis is an important lesson, kids. Listen to this.\n\n361\n00:24:35,460 --> 00:24:44,240\nAnd so you come across a thing and it's like, oh, people are probably gonna want middleware. And you see, well, they're probably shipping on Express or some other server that has middleware.\n\n362\n00:24:46,160 --> 00:24:46,960\nLet's just,\n\n363\n00:24:47,580 --> 00:24:56,820\nlet's not tackle that. Let's keep going. Let's innovate on the things that we wanna, that we don't see yet, right? I had never seen anyone do\n\n364\n00:24:57,240 --> 00:24:59,180\nwhat we did with forms and actions.\n\n365\n00:25:00,420 --> 00:25:07,320\nI mean, you can look at it naively and say, well, HTML and servers already always worked that way. And it's like, yes, exactly.\n\n366\n00:25:07,900 --> 00:25:17,900\nBut the implementation with the client-side routing and the revalidation, all that kind of stuff is wildly different and something I've never seen before. So that like, you know, you got to spend these innovation tokens,\n\n367\n00:25:19,300 --> 00:25:23,260\nwhat makes you unique. And so, yeah, we just saw middleware and it was like,\n\n368\n00:25:23,760 --> 00:25:36,000\nwe know we need it, we'll get back to it. We would like to have middleware in Remix, but we're just not going to work on that right now. So yeah, we always intended to do it. It's not that we thought that you didn't need it.\n\n369\n00:25:36,460 --> 00:25:38,300\nYeah, you know, I just wanna\n\n370\n00:25:39,780 --> 00:25:47,460\npoint out another important point here, and that is sometimes if you solve a problem before you feel the pain as much.\n\n371\n00:25:47,900 --> 00:25:53,340\nLike, you know about middleware, we all know about, like, we know the pains that middleware solves, all that. But\n\n372\n00:25:54,240 --> 00:25:55,880\nwithin the context of Remix,\n\n373\n00:25:56,320 --> 00:26:14,560\nif you try to solve that pain point within this new context, you'll come up with the wrong solution most of the time. And so having experienced the pain and going through that and having all the context we have now, it's so much easier to solve this in a way that is gonna work longer term.\n\n374\n00:26:15,040 --> 00:26:18,860\nYeah, we created a bunch of new abstractions that we hadn't used before.\n\n375\n00:26:19,540 --> 00:26:21,940\nAnd the more things you put on the table,\n\n376\n00:26:22,540 --> 00:26:24,220\nthe worse they're probably going to fit.\n\n377\n00:26:24,640 --> 00:26:38,140\nWhere if you just say, let's only do these 3 or 4 things. Let's work with that a bit. OK, now we know where another piece is going to fit in better. That's totally 1 of the areas. It was really easy to keep punting on it, too, because it's like, when you say require user,\n\n378\n00:26:38,940 --> 00:26:41,660\nyou usually still need that user object.\n\n379\n00:26:42,400 --> 00:26:42,900\nYeah.\n\n380\n00:26:43,440 --> 00:26:47,540\nAnd so the function that asks for the user also acts as the middleware.\n\n381\n00:26:48,920 --> 00:26:52,100\nSo when you can throw a response in Loaders and Actions, it's like\n\n382\n00:26:52,780 --> 00:27:01,100\nyou have a call site. There is 1 line of code always to say, give me the user. It can either throw if they're not there, or redirect, or just give you the user. So even after middleware,\n\n383\n00:27:01,800 --> 00:27:03,740\nthat line of code isn't going to go away.\n\n384\n00:27:04,640 --> 00:27:08,220\nYeah. And that's actually the justification that I use\n\n385\n00:27:08,800 --> 00:27:11,860\nin the instructions of this exercise where we do this.\n\n386\n00:27:12,340 --> 00:27:26,440\nI'm like, middleware would be cool, but look, we're still going to need these lines of code. And even if you use server context or something, you're still gonna be pulling that from context anyway. So it's not reducing the number of lines. There's always at least 1 line of code accessing that thing.\n\n387\n00:27:27,180 --> 00:27:28,820\nIt's just a matter of can that function\n\n388\n00:27:29,220 --> 00:27:32,300\nact as a middleware too. But no, there are huge...\n\n389\n00:27:33,740 --> 00:27:38,460\nI would just point out the big benefit to adding middleware is,\n\n390\n00:27:38,860 --> 00:27:40,740\nat least in this context, is\n\n391\n00:27:41,980 --> 00:28:01,280\nyou won't forget. So, like, let's say you've got an admin page that doesn't actually need the user's data, but you display stuff that's only for admins, right? So that is 1 area where I think having middleware is a great idea. 1 thing that we think a lot about, and we don't mean this to put some developers on a pedestal and other ones not,\n\n392\n00:28:01,720 --> 00:28:02,220\nBut\n\n393\n00:28:02,540 --> 00:28:04,700\nthere's usually people on the team who understand\n\n394\n00:28:05,580 --> 00:28:08,180\nthe app or the abstractions or just the web\n\n395\n00:28:08,860 --> 00:28:16,740\nbetter than other people on the team, right? Those people usually get put in positions of leadership. And so we often think about, well, what's an API that\n\n396\n00:28:17,460 --> 00:28:21,720\nthe team lead can use that's going to protect the app from\n\n397\n00:28:22,660 --> 00:28:33,300\nthe people that don't have as much experience yet, but are still proficient in building the app. But they might forget, oh, this is on the admin page. If I don't protect it, then this endpoint is exposed.\n\n398\n00:28:35,240 --> 00:28:40,940\nAnd so the team lead or whoever, senior dev, they can go in and put in that middleware that's like, okay,\n\n399\n00:28:41,260 --> 00:28:49,260\nI wrote this code and it protected all of this stuff and nobody else on the team even has to know that I did this and it's still protected. Yeah, even if they add new\n\n400\n00:28:49,600 --> 00:29:03,900\nroutes to it in the future and all that. Yeah. Yeah. And I mean, so yeah, other reasons we added middleware are just that middleware is good. It's the same reason all frameworks eventually have some kind of middleware. It's just we put it on a lower priority\n\n401\n00:29:05,220 --> 00:29:11,300\nbecause you already had a server that had middleware. But yeah, I'm really excited about it. You're going to be able to do really good stuff there.\n\n402\n00:29:11,760 --> 00:29:14,180\nSome of the main things is like error reporting\n\n403\n00:29:14,540 --> 00:29:15,040\nand\n\n404\n00:29:15,660 --> 00:29:16,920\nlogging requests.\n\n405\n00:29:18,580 --> 00:29:22,860\nJust lots of things. 1 of my favorites is checking a CMS for redirects.\n\n406\n00:29:23,560 --> 00:29:24,740\nBecause a lot of websites,\n\n407\n00:29:25,600 --> 00:29:27,000\nyou log into your CMS,\n\n408\n00:29:27,660 --> 00:29:29,000\nand that's where you configure\n\n409\n00:29:29,440 --> 00:29:29,940\nredirects,\n\n410\n00:29:30,260 --> 00:29:32,600\nRight? It's not a file in the source. It's\n\n411\n00:29:33,280 --> 00:29:34,940\non some other server somewhere.\n\n412\n00:29:35,920 --> 00:29:37,700\nAnd so you don't want to check that\n\n413\n00:29:38,480 --> 00:29:40,360\nin front of every single request.\n\n414\n00:29:41,540 --> 00:29:44,940\nBecause now you're going off and checking redirects before you even check\n\n415\n00:29:45,240 --> 00:29:47,940\nif your real app can respond to this.\n\n416\n00:29:48,480 --> 00:29:53,540\nAnd so, Mailware allows you to let the request go through, come back, inspect it, if it's a 404,\n\n417\n00:29:54,640 --> 00:30:02,780\nnow you can go up and go to the CMS and be like, hey, do you have a different page for this? No? Okay, here's the 404, otherwise here's a redirect.\n\n418\n00:30:04,200 --> 00:30:07,060\nAnd there's really just no way in Remix to do that right now,\n\n419\n00:30:07,960 --> 00:30:08,460\nbecause\n\n420\n00:30:09,720 --> 00:30:10,420\nthere's no\n\n421\n00:30:11,200 --> 00:30:15,300\npoint where you like, I guess you could do it in the server entry.\n\n422\n00:30:16,020 --> 00:30:16,800\nBut yeah,\n\n423\n00:30:17,520 --> 00:30:20,780\nthere are ways, but yeah, they're not. It's just weird. They don't feel blessed.\n\n424\n00:30:21,900 --> 00:30:22,400\nYeah.\n\n425\n00:30:22,860 --> 00:30:27,100\nYeah. And then you mix it up with a couple other things that we're bringing in like server context.\n\n426\n00:30:28,500 --> 00:30:29,000\nAnd\n\n427\n00:30:29,540 --> 00:30:32,900\nI haven't made the proposal for this yet, but a default session.\n\n428\n00:30:35,140 --> 00:30:39,140\nSo a default session will come into loaders, actions, middleware and context.\n\n429\n00:30:40,240 --> 00:30:48,220\nAnd so now like on the backend of a request, you can just always set your own cookies. If you want to, you could replay a header like you need to do on fly with the Postgres\n\n430\n00:30:49,300 --> 00:30:49,800\nreplicas.\n\n431\n00:30:53,100 --> 00:31:05,140\nYeah, just you'll have that session come through and you can, flash messages will be a lot easier. They'll automatically get committed in 1 spot instead of every single loader that reads it having to then recommit the cookie, depending on your session's story.\n\n432\n00:31:06,000 --> 00:31:10,460\nYeah, that'll be really nice too, for sure. Yeah, yeah, so lots of good stuff.\n\n433\n00:31:10,760 --> 00:31:15,420\nSo Remix, we mostly focused on innovation on the front end with V1 and V2.\n\n434\n00:31:16,640 --> 00:31:18,300\nAnd this, we're now like backfilling\n\n435\n00:31:18,640 --> 00:31:21,800\nall of the big pain points on the back end.\n\n436\n00:31:23,420 --> 00:31:24,840\nYeah, yeah. And\n\n437\n00:31:25,460 --> 00:31:32,720\nI think there are probably lots of other things that like the team has grown a little bit. You've got lots of people working on\n\n438\n00:31:33,340 --> 00:31:35,820\nvarious aspects of the framework and some,\n\n439\n00:31:36,140 --> 00:31:38,760\nI suppose, working on some of those future\n\n440\n00:31:39,140 --> 00:31:43,600\nthings like RSC, React server components, and then others working on more\n\n441\n00:31:45,860 --> 00:31:47,740\nthings that will happen sooner.\n\n442\n00:31:48,820 --> 00:32:01,720\nThere's also like exploration in changing the build tooling to Vite, which would be pretty interesting. I know people are really excited about that. Personally, I think that'll be cool, but I'm not like as excited as it seems like everybody else is.\n\n443\n00:32:03,080 --> 00:32:03,980\nThey're migrating\n\n444\n00:32:04,540 --> 00:32:07,860\nexisting React Router apps, right? Or trying to.\n\n445\n00:32:09,000 --> 00:32:10,740\nAnd us not having an open compiler\n\n446\n00:32:11,580 --> 00:32:13,000\nreally just like...\n\n447\n00:32:14,120 --> 00:32:15,820\nYou're stopped dead in your tracks.\n\n448\n00:32:17,040 --> 00:32:25,940\nYeah, that's true. And then the second thing is the SPA mode for Remix. That also stops you dead in your tracks. It's like, okay, maybe I'm on React router, maybe I even started using loaders and actions,\n\n449\n00:32:26,720 --> 00:32:28,780\nbut they don't work on the server yet.\n\n450\n00:32:29,100 --> 00:32:31,700\nAnd so how do you like make that jump from\n\n451\n00:32:32,640 --> 00:32:40,680\nall this code is expected to run in a browser. And now to migrate to Remix, I need to somehow figure out how to make every single 1 of these things work on the server.\n\n452\n00:32:42,240 --> 00:32:48,980\nAnd so now you can bring your own bundler stuff with Vite. You can just bring over a bunch of client loaders and client actions\n\n453\n00:32:49,640 --> 00:32:50,140\nand\n\n454\n00:32:50,660 --> 00:32:53,660\nRemix will actually just probably render a mostly empty document\n\n455\n00:32:54,000 --> 00:32:58,880\nand then do everything else on the client side and now you can just move like 1 loader over.\n\n456\n00:33:00,860 --> 00:33:02,780\nYeah, it's going to be huge.\n\n457\n00:33:03,480 --> 00:33:06,260\nBut yeah, that work should be done really soon. VEET is,\n\n458\n00:33:06,760 --> 00:33:20,240\nwe've got an experimental release, I think, this week that we're recording. Oh, really? Yeah. OK. Hey, that's good. I'm glad we have it now. We already have an experimental release. We're putting it as, we're actually putting it in the dev branch with an unstable flag. So yeah, it should be there. Oh, okay.\n\n459\n00:33:21,460 --> 00:33:28,480\nHey, that's sick. So people watching this now, it's probably already out. Yeah, it's probably already out. Unstable, so yeah, that's very cool.\n\n460\n00:33:29,440 --> 00:33:29,940\nSo\n\n461\n00:33:30,480 --> 00:33:33,260\n1 thing I wanna talk about as we wrap up is\n\n462\n00:33:33,840 --> 00:33:34,340\nwhy\n\n463\n00:33:34,820 --> 00:33:35,940\nRemix decided,\n\n464\n00:33:36,900 --> 00:33:41,180\nlike back it up, most frameworks who are doing server side stuff, they have you do,\n\n465\n00:33:41,540 --> 00:33:44,800\nlike they kind of build an API around\n\n466\n00:33:45,140 --> 00:33:49,700\nwhatever server request there is and they'll have their own special API. So\n\n467\n00:33:50,260 --> 00:33:51,680\nif you'd have a loader\n\n468\n00:33:52,120 --> 00:33:53,620\nequivalent in whatever framework,\n\n469\n00:33:53,940 --> 00:33:56,400\nwhat you return is like an object\n\n470\n00:33:57,040 --> 00:34:00,980\nthat maybe has a status and it maybe has like a body or something.\n\n471\n00:34:01,640 --> 00:34:05,460\nAnd then like on the front end, there would be some sort of,\n\n472\n00:34:06,400 --> 00:34:15,199\nI don't know, some mechanism for accessing that. What I'm driving at is Remix decided to go the route of, let's just look at the WebFetch API\n\n473\n00:34:15,659 --> 00:34:16,739\nand use that.\n\n474\n00:34:17,360 --> 00:34:23,540\nAnd it turns out that that worked out really well because all other frameworks are starting to do that too. And run times.\n\n475\n00:34:24,520 --> 00:34:25,300\nYeah, yeah.\n\n476\n00:34:25,980 --> 00:34:26,820\nAnd what\n\n477\n00:34:27,179 --> 00:34:34,620\nthat opened up for Remix was just like being able to be used pretty much everywhere that WebFetch is available, which is increasingly everywhere.\n\n478\n00:34:35,060 --> 00:34:41,880\nSo what was it that motivated that change or that focus and what impact did that have?\n\n479\n00:34:44,380 --> 00:34:46,820\nSo Michael and I, I think make a great team\n\n480\n00:34:47,980 --> 00:34:50,679\nbecause I daydream on the front end\n\n481\n00:34:51,040 --> 00:34:51,800\nof like,\n\n482\n00:34:53,300 --> 00:34:55,659\nwhere are your best practices, accessibility,\n\n483\n00:34:56,580 --> 00:34:59,540\nweb performance, what does the network graph look like,\n\n484\n00:35:00,600 --> 00:35:02,000\nare you managing focus,\n\n485\n00:35:03,420 --> 00:35:04,660\nAll that kind of stuff.\n\n486\n00:35:06,740 --> 00:35:12,840\nAnd then, but I go pretty far into the back end too. I am interested in back end code.\n\n487\n00:35:13,420 --> 00:35:17,460\nAnd maybe I should let Michael speak for himself, but in my experience with him,\n\n488\n00:35:18,080 --> 00:35:21,240\nhe thinks mostly about servers and back end stuff.\n\n489\n00:35:24,760 --> 00:35:31,460\nLike, I wouldn't be surprised if 1 day he was like, oh yeah, my home page is served from a computer in my kitchen. Like,\n\n490\n00:35:32,360 --> 00:35:34,100\nI wouldn't be surprised by that.\n\n491\n00:35:34,820 --> 00:35:36,700\nSo he thinks in those abstractions\n\n492\n00:35:37,640 --> 00:35:39,780\na lot, and he's good at it.\n\n493\n00:35:40,440 --> 00:35:42,140\nHe has built lots of servers\n\n494\n00:35:42,440 --> 00:35:43,220\nand clients,\n\n495\n00:35:43,660 --> 00:35:45,080\nHTTP servers and clients.\n\n496\n00:35:46,660 --> 00:35:48,400\nAnd so when we were building Remix,\n\n497\n00:35:49,240 --> 00:35:51,140\nwe knew that we wanted to deploy\n\n498\n00:35:52,960 --> 00:35:57,000\nanywhere because I was using Firebase a lot back then for our websites.\n\n499\n00:35:58,940 --> 00:35:59,440\nUnpackage,\n\n500\n00:36:00,320 --> 00:36:01,420\na project of Michael's,\n\n501\n00:36:01,860 --> 00:36:03,500\nis hosted on Cloudflare Workers.\n\n502\n00:36:05,740 --> 00:36:06,780\nAnd of course, Serverless\n\n503\n00:36:07,960 --> 00:36:08,460\nwas,\n\n504\n00:36:09,160 --> 00:36:09,820\nI guess,\n\n505\n00:36:10,380 --> 00:36:14,540\nI don't know if Serverless is having its heyday now or if it was back then,\n\n506\n00:36:14,920 --> 00:36:18,360\nbut Serverless was kind of like showing up when,\n\n507\n00:36:19,140 --> 00:36:24,180\nI guess it was kind of maturing a bit when we started on Remix. It's hard to say where we are on the hype cycle.\n\n508\n00:36:24,520 --> 00:36:27,240\nYeah, I mean, it's awesome. Serverless is awesome.\n\n509\n00:36:28,780 --> 00:36:33,060\nPeople are no longer saying serverless still has servers. So I think we're past like the initial.\n\n510\n00:36:33,820 --> 00:36:34,320\nRight?\n\n511\n00:36:36,820 --> 00:36:43,860\nAnd we're looking at all their APIs, like how are we going to run remix in all of these places? They all have these like, like you were just saying.\n\n512\n00:36:44,380 --> 00:36:51,520\nSome of them like Azure, you would return this object with like a context and that I can't remember it in the status and whatever else.\n\n513\n00:36:51,820 --> 00:36:54,120\nAnd everyone had their own kind of different thing.\n\n514\n00:36:54,840 --> 00:36:55,340\nAnd\n\n515\n00:36:55,680 --> 00:37:06,300\nI was like, well, let's just do a little like inversion of control thing. Let's have like a, let's make a thing called an adapter and we'll do like a 2 JSON and they implement that and 2 HTML and they implement that\n\n516\n00:37:07,360 --> 00:37:10,680\nand just whatever Remix needs we'll just give them a method to like\n\n517\n00:37:11,400 --> 00:37:12,340\npop in there\n\n518\n00:37:12,800 --> 00:37:21,720\nand I remember Michael and I were pairing on it and I was like to me I was like this is just a quick thing Let's just like get this done and move on to the front end stuff that I'm thinking about.\n\n519\n00:37:25,160 --> 00:37:28,840\nAnd then he was like, no, I've been thinking about this. It's like\n\n520\n00:37:29,240 --> 00:37:29,740\nCloudFlare\n\n521\n00:37:30,060 --> 00:37:31,420\nhas done something interesting\n\n522\n00:37:32,220 --> 00:37:37,280\nwhere they didn't copy the Connect API or the Node stuff or Express\n\n523\n00:37:38,800 --> 00:37:41,460\nor come up with their own thing. They actually\n\n524\n00:37:42,840 --> 00:37:46,100\nare basing theirs off of the Web Fetch API, the thing that's in browsers.\n\n525\n00:37:46,800 --> 00:37:51,420\nAnd I was just like scratching my head like, fetch, what does fetch have to do with any of this?\n\n526\n00:37:52,540 --> 00:37:59,440\nAt that time, my only interaction with the fetch API was like, I'd make a fetch and then I'd await to JSON on or I'd await.json\n\n527\n00:38:00,080 --> 00:38:02,180\non this req thing.\n\n528\n00:38:02,600 --> 00:38:03,980\nAnd then I had my data.\n\n529\n00:38:04,540 --> 00:38:08,000\nAnd I remember thinking like, why do I have to do this stupid await part? This is so dumb.\n\n530\n00:38:10,300 --> 00:38:14,760\nAnd he's like, no, no, no, no, check it out. And he pulls up the MDN docs and shows me there's request\n\n531\n00:38:15,060 --> 00:38:19,620\nAnd then there's response too. And I was like, response? Why do you need a response in the browser?\n\n532\n00:38:21,260 --> 00:38:22,940\nAnd then I realized, oh,\n\n533\n00:38:24,020 --> 00:38:28,100\nwhen you make a fetch, that thing you got back is a response instance.\n\n534\n00:38:29,200 --> 00:38:36,140\nI was good enough at JavaScript at this point to have like figured that out on my own, but I have never even considered\n\n535\n00:38:37,160 --> 00:38:38,900\nthat this was a response,\n\n536\n00:38:39,280 --> 00:38:45,200\nright? Like, and everything that that means with HTTP, it's going to have headers, it's going to have a body, it could be stream,\n\n537\n00:38:46,020 --> 00:38:46,720\nit's going\n\n538\n00:38:47,200 --> 00:38:50,120\nto have a status on it, it's like it's going to have all this stuff.\n\n539\n00:38:50,500 --> 00:39:01,860\nAnd, And he was like, I think with these 2, he's a CloudFlare already did it. So I think if we just base everything that we do on this API, we can build clients, We can build servers, we can build adapters,\n\n540\n00:39:03,600 --> 00:39:04,900\nand we can actually expose\n\n541\n00:39:05,320 --> 00:39:08,440\njust requests and responses to Remix users\n\n542\n00:39:09,640 --> 00:39:11,340\nso that we're all just using\n\n543\n00:39:13,500 --> 00:39:14,700\na spec'd out\n\n544\n00:39:15,060 --> 00:39:19,460\nlike community API here and not making up our own thing.\n\n545\n00:39:21,740 --> 00:39:27,940\nAnd then, and the idea was it'll just work on CloudFlare cause we use the same API as them. And that turned out pretty much true.\n\n546\n00:39:28,940 --> 00:39:31,300\nYeah, so that was, that was some awesome foresight\n\n547\n00:39:31,960 --> 00:39:33,060\nfor Michael to\n\n548\n00:39:33,400 --> 00:39:34,220\nkind of realize\n\n549\n00:39:36,140 --> 00:39:39,120\neverything that's happening between the front end and the backend in Remix\n\n550\n00:39:39,640 --> 00:39:42,000\nis an HTTP server and client.\n\n551\n00:39:42,740 --> 00:39:43,400\nAnd so\n\n552\n00:39:44,380 --> 00:39:48,060\nlet's pick the WebFetch API for the abstraction to use there.\n\n553\n00:39:49,400 --> 00:39:50,520\nYeah, good call.\n\n554\n00:39:50,900 --> 00:39:52,700\nWhat I love about Remix is,\n\n555\n00:39:53,680 --> 00:39:54,360\nit actually\n\n556\n00:39:54,960 --> 00:40:10,280\nis a little reminiscent of my work with Testing Library, where like Enzyme was the big thing at the time. And what Enzyme would do is it would kind of wrap the component, in fact, that's what they called it, it was a wrapper. And then you're using all these bespoke APIs.\n\n557\n00:40:11,380 --> 00:40:19,140\nWith Testing Library, I was just like, I just want the DOM node, please just give me the DOM node. And then I can do whatever I want to with that thing because I know DOM.\n\n558\n00:40:19,900 --> 00:40:23,600\nAnd so then I built testing library and instead of wrapping it,\n\n559\n00:40:24,060 --> 00:40:28,080\nthere are APIs you're calling into, you know, render and all that. But then\n\n560\n00:40:28,780 --> 00:40:45,300\nI kind of expose the API, the platform API to you. And that ended up working out really well. And I feel like Remix does the exact same thing. You know, it's gonna normalize all those APIs cause you do have Express and you have Fastify and all these other\n\n561\n00:40:45,920 --> 00:40:47,740\nserver architectures and things.\n\n562\n00:40:48,100 --> 00:40:53,760\nThey all have different APIs, and the Remix Adapters normalizes that to the web API\n\n563\n00:40:54,240 --> 00:40:58,340\nso that we can just transfer that knowledge wherever we go.\n\n564\n00:41:00,420 --> 00:41:05,420\nWhen I went into React, I realized the better I get at React, the better I get at JavaScript.\n\n565\n00:41:06,340 --> 00:41:08,500\nAnd that's what I loved about moving from AngularJS,\n\n566\n00:41:09,400 --> 00:41:14,360\nwhich was great and everything, but I dropped a ton of knowledge when I did that. And then\n\n567\n00:41:15,860 --> 00:41:17,540\ncoming into React, I was like, oh, okay, I'm just getting better at JavaScript now.\n\n568\n00:41:17,840 --> 00:41:22,540\nRemix makes me better at the web. So it doesn't matter what tools I end up using,\n\n569\n00:41:23,040 --> 00:41:29,800\nbecause I used Remix, I'm a better web developer and I can use those tools more effectively. And that's what I love about Remix.\n\n570\n00:41:30,100 --> 00:41:33,220\nYeah, man, it's always good to hear that from people.\n\n571\n00:41:35,140 --> 00:41:41,540\nYeah, like lots of people don't really know how cookies work or headers or any of that stuff. And then they start doing Remix and they're like, oh,\n\n572\n00:41:42,180 --> 00:41:45,980\nmaybe I can do backend code and I can go get a $50,000 raise.\n\n573\n00:41:47,080 --> 00:41:48,060\nYeah, yeah.\n\n574\n00:41:49,080 --> 00:41:49,580\nYeah,\n\n575\n00:41:49,940 --> 00:41:57,840\nI often say Remix tricked me into being a full stack developer. Oh yeah, I remember our early conversations where I was like, why don't, like, just\n\n576\n00:41:58,440 --> 00:42:01,040\nmake a password table and Hash it,\n\n577\n00:42:01,560 --> 00:42:02,580\nput it in there.\n\n578\n00:42:03,420 --> 00:42:09,980\nYeah, yeah. So like, I actually, I found the live stream recently and I was watching it where I initially implemented\n\n579\n00:42:10,360 --> 00:42:22,060\nmy own auth, I hand rolled auth. And I had these notes that you gave me that were like, step 1, step 2, step 3. And I just went through them in like an hour and I implemented Auth like by hand\n\n580\n00:42:22,940 --> 00:42:35,460\nfor, I'd done a little bit of Auth stuff with Passport.js and Express for like years ago, but never like, never quite like that. And it was just, it was so cool. I felt so empowered to be able\n\n581\n00:42:35,920 --> 00:42:37,060\nto do that stuff.\n\n582\n00:42:37,800 --> 00:42:41,500\nSo yeah, Remix empowers me. I really appreciate that.\n\n583\n00:42:42,980 --> 00:42:46,660\nYeah, I think I tricked myself into being a backend developer with Remix too.\n\n584\n00:42:48,300 --> 00:42:53,800\nWell, cool, Ryan, we're down to the end of our time. Was there anything you wanted to talk about that we didn't get to?\n\n585\n00:42:58,500 --> 00:42:59,000\nNo,\n\n586\n00:42:59,440 --> 00:43:04,060\nI didn't have an agenda. I'm just happy you're here and everybody else is here watching us.\n\n587\n00:43:04,740 --> 00:43:09,240\nWhat's the best way for people to contribute or like keep up with what's going on\n\n588\n00:43:09,720 --> 00:43:10,220\nand\n\n589\n00:43:10,900 --> 00:43:12,160\nstay current with Remix?\n\n590\n00:43:12,880 --> 00:43:14,540\nI mean, probably just follow our\n\n591\n00:43:15,060 --> 00:43:16,260\nX account\n\n592\n00:43:18,700 --> 00:43:28,020\nand star the repo on GitHub or I mean, who cares about stars, subscribe to it. So you get notified when we push releases and stuff like that. All of our releases\n\n593\n00:43:28,520 --> 00:43:32,460\nhave release notes on them. So you can just go to GitHub, click on tags, click on releases.\n\n594\n00:43:33,040 --> 00:43:33,540\nAnd\n\n595\n00:43:33,840 --> 00:43:35,720\nwe take those release notes pretty seriously.\n\n596\n00:43:37,300 --> 00:43:44,000\nAnd that's how you can know the latest stuff. We also post RFCs and proposals in our discussions tab on GitHub.\n\n597\n00:43:45,520 --> 00:43:51,400\nAnd so that's a great way to kind of see where our minds are at on what we're going to be doing. Our roadmap is public. If you go to\n\n598\n00:43:51,900 --> 00:43:56,680\nour org on GitHub and click on projects, you'll see the roadmap project.\n\n599\n00:43:57,660 --> 00:44:02,300\nSo that's what we're working on. And that's what we use internally at Shopify too. Like that's what\n\n600\n00:44:02,640 --> 00:44:10,420\nthe Shopify teams look at too to see what's the Remix team working on. It's all the stuff on GitHub, it's all the open stuff. So everything we do\n\n601\n00:44:10,840 --> 00:44:12,140\nis open like that.\n\n602\n00:44:12,800 --> 00:44:22,460\nYeah, that's super cool that even after the Shopify acquisition, I feel like the Remix team just got even more resources to be able to continue doing exactly what it was doing.\n\n603\n00:44:23,160 --> 00:44:32,300\nSo super- Yeah, there's a lot of adoption internally at Shopify and a lot of autonomy too, where they're just like, we love the work you're doing, keep doing it.\n\n604\n00:44:32,960 --> 00:44:38,240\nAnd so I know a lot of people are like, oh, it's just gonna become an e-commerce thing. And it's like, that's hydrogen. Like,\n\n605\n00:44:39,000 --> 00:44:43,840\nand Shopify wants Remix to be successful for a lot of reasons, not just stores, but\n\n606\n00:44:45,040 --> 00:44:46,860\ninternal apps, embedded apps,\n\n607\n00:44:47,860 --> 00:44:48,360\nShopify.com\n\n608\n00:44:48,920 --> 00:44:49,420\nitself.\n\n609\n00:44:50,320 --> 00:44:51,000\nAnd we've,\n\n610\n00:44:51,580 --> 00:44:58,420\nit's kind of, it's a little stressful. Normally when you're a new framework, like you get adoption of like smaller scale stuff.\n\n611\n00:44:58,900 --> 00:44:59,840\nAnd then like\n\n612\n00:45:00,300 --> 00:45:01,580\nthe scale of your\n\n613\n00:45:01,960 --> 00:45:02,460\ncustomers\n\n614\n00:45:03,300 --> 00:45:07,560\ngoes up with the scale of the code and the lifespan of the code.\n\n615\n00:45:08,680 --> 00:45:15,740\nBut at Shopify, it kind of got just like thrown at like some really big use cases immediately and it's like, oh crap there's a memory leak\n\n616\n00:45:16,900 --> 00:45:22,380\nand everyone thinks it's remixed and you dig in deeper and it turns out, nope, it's not remixed, it's a\n\n617\n00:45:22,680 --> 00:45:25,020\nnotes, new request response polyfill,\n\n618\n00:45:25,640 --> 00:45:28,500\nnot us, but. Oh dear. But yeah, you find,\n\n619\n00:45:29,440 --> 00:45:34,400\nwe find our own bugs too, I just don't want to admit them permanently on the video. Yeah,\n\n620\n00:45:35,320 --> 00:45:38,760\nsure. But yeah, it's been huge for the project to just like\n\n621\n00:45:39,560 --> 00:45:41,420\nthrow us in the battlefield early\n\n622\n00:45:42,740 --> 00:45:44,840\nand we're getting a lot better because of it.\n\n623\n00:45:45,600 --> 00:45:46,100\nYeah,\n\n624\n00:45:46,500 --> 00:45:49,780\nI think it's just been awesome seeing that over the last year.\n\n625\n00:45:51,100 --> 00:45:53,180\nWell, cool, thank you so much for giving us\n\n626\n00:45:54,720 --> 00:45:55,660\nthis time\n\n627\n00:45:55,960 --> 00:45:56,460\ntoday.\n\n628\n00:45:57,560 --> 00:46:03,660\nAnd yeah, I'm looking forward to seeing all the other cool stuff that y'all are working on. Thanks everybody.\n\n629\n00:46:05,280 --> 00:46:06,000\nSee ya.",
            "text": "[00:00:00] Speaker 0:\nWhat is up everybody I'm super excited to be joined by my friend Ryan Florence say hi Ryan \n\n[00:00:08] Speaker 1:\nEvery time you say that to me I almost say hi Ryan like it's some funny joke \n\n[00:00:12] Speaker 0:\nI mean like it kind of is you can \n\n[00:00:14] Speaker 1:\nI know but I've done it every single time we've done 1 of these things? Yeah. Like, wait, I'm having deja vu. So anyway, hello, I'm Ryan. \n\n[00:00:23] Speaker 0:\nYeah, actually, I had Ryan on the Chats with Kent podcast, I think season 4, and that season I had that as a running joke where like I'd say say hi so-and-so and if they Most of them would just say hi and I said no I asked you to say hi \n\n[00:00:44] Actually on that season, I think you did say, hi, Ryan, I'm like, you're the only 1 who did it right. \n\n[00:00:52] Speaker 1:\nOh, man. \n\n[00:00:53] Speaker 0:\nYeah, so actually in that episode, we talked about Remix as well. We're gonna talk about Remix in this episode too, and it's gonna be awesome. But Ryan and I, we met, let's see, I remember, I think my earliest memory of us was at a meetup at AtTask, which is now Workfront here in Utah. It was an, I think it was an \n\n[00:01:13] Angular meetup. Were you, No, no, no, this must have been a Utah JS thing. \n\n[00:01:19] Speaker 1:\nIt might have been my lunch JS things that I started. \n\n[00:01:23] Speaker 0:\nYou know, I never went to those. I did hear about those, but it was in a meetup. We were in a parking lot afterward just chatting as 1 does after you're kicked out of the meetup. And yeah, and then eventually I took your week-long React training. \n\n[00:01:39] Speaker 1:\nYeah, with Tyler McGinnis, he organized that. And then I taught it. \n\n[00:01:44] Speaker 0:\nYeah, That was good. I didn't really pay too much attention. I'm sorry. But yeah, and then we've just been friends ever since. You moved away from Utah and then you came back and then we hang out sometimes. And looking forward to all the snow that's hitting the mountains, because we're gonna be up there a lot. \n\n[00:02:04] Speaker 1:\nI know, I've got a, I actually have a view of the mountains from right here in my office. \n\n[00:02:08] Speaker 0:\nOh yeah. \n\n[00:02:10] Speaker 1:\nAnd it's snow capped, and I'm super excited. \n\n[00:02:15] Speaker 0:\nYeah, yeah, I'm liking that, Awesome. Okay, anyway, so that is a little bit of our history. We go back, I think, that's like 2014, maybe, is as far back as we go. So it's been almost a decade. \n\n[00:02:29] Speaker 1:\nIt's been years. \n\n[00:02:30] Speaker 0:\nYeah, it's wild. So Ryan, Why don't you tell us a little bit about yourself like your own? Place in the Community and and whatever \n\n[00:02:39] Speaker 1:\noh geez I don't know where my place in the community is but I love the web I think JavaScript super fun And yeah, I guess I have some opinions about how to build things on the web. And when your opinions are too strong, sometimes you just have to stop talking and start building. \n\n[00:03:00] And maybe that's where Remix came from. \n\n[00:03:04] Speaker 0:\nYeah, I actually can relate to that a little bit. Although, I don't think either 1 of us stopped talking, even though we built some stuff. \n\n[00:03:13] Speaker 1:\nYeah, that's true. Yeah, so most recently, I helped build Remix with Michael Jackson and you. You joined us there in the beginning. Before that, did React Router with Michael and before that did stuff in MooTools and Ember and a lot of Rails development, a lot \n\n[00:03:33] of jQuery, lots of Backbone, stint with CoffeeScript, that was fun. But yeah, that's where I'm at, web developer. It's people mostly associate me with React, but I've never really felt, like I love React, but I've always felt \n\n[00:03:54] funny when people are like, oh, Ryan Florence, the React developer. I'm like, well, I've written a lot of other code that's not React. \n\n[00:04:03] Speaker 0:\nYeah, for real. Yeah, actually speaking of code you've written that wasn't React, I always like it when you say that you've been doing web development since before CSS was invented. \n\n[00:04:15] Speaker 1:\nYeah, exactly. \n\n[00:04:16] Speaker 0:\nSo for a long time, how did you get into web development at the very start like that? \n\n[00:04:21] Speaker 1:\nSo I was 15 or 16 years old and the internet was just kind of showing up. This was like, I don't know, I was in like 8th grade or 9th grade. \n\n[00:04:31] Speaker 0:\nYeah, late 90s sort of. \n\n[00:04:33] Speaker 1:\n94, 95-ish, early 90s, mid 90s. And just me and 1 other friend had email addresses, and all the rest of our friends made fun of us for having an email address, like we were super computer nerds or something. And I was just like, you're all like your whole world is gonna be on the internet. Like don't make fun of me. \n\n[00:04:53] Here we are. Now they're the ones on Facebook all day. But no, my dad invested in an ISP, an internet service provider. And so we had our little username. My dad's name is Casey, so it was Casey F. That was our username. And back then, when you signed up for an internet \n\n[00:05:14] provider, you'd dial in with a modem and you hear all the crackling noises and stuff. And then your older sister would pick up the phone to call her boyfriend. And then your picture of Kurt Cobain that you were downloading would get ruined. And then you're like, no! So then your parents buy 2 phone lines, 1 for the internet. Anyway, my dad invested \n\n[00:05:34] in this ISP and with the username KCF. Back then they would give you like, you'd get an email address and then you'd have like an FTP, file transfer protocol, like HTTP, but FTP. That's funny, nobody... \n\n[00:05:49] Speaker 0:\nYeah. \n\n[00:05:52] Speaker 1:\nBut you could just FTP a bunch of files and up to the internet. Like everyone just kind of had their own little homepage if they wanted. And you just throw some HTML up there. And so yeah, this was back when HTML was really rudimentary. It was like to change the, all style was inline, which is funny, because we're back to that. Styles \n\n[00:06:12] were inline. There was no such thing as CSS. So it was like body, BG, color equals. Or to change the font, you had to put a font tag in. I think it was font family as an attribute. And then everything below that would be that font. So if you had to put it inside of a paragraph, So every paragraph \n\n[00:06:32] tag pretty much had, like you repeated font tags everywhere because as soon as you change it to another 1, then you want to like change it back. It was pretty funny. So yeah, before CSS, before JavaScript. And so I kind of grew up with the web, which I think is pretty cool. \n\n[00:06:53] And then I built websites for my punk rock band and I'd bribe other bands to let us play shows with them. Like I'd go online, find their websites, or I don't even know how, that's how I found out about shows. Go to skate shops? Yeah, it was skate shops, and you had like little flyers. And I'd find those bands, and I'd say, hey, \n\n[00:07:14] you need a website, I can build it for you. Let me take some pictures at your show and yada, yada, yada, and then let my band play with you. And then I'll build you a website. And so that's how we got our first shows. \n\n[00:07:27] Speaker 0:\nThat's actually very industrious of you. \n\n[00:07:31] Speaker 1:\nYeah. Cool. So That's how I got into it. \n\n[00:07:36] Speaker 0:\nThat is awesome. But you did not graduate with a CS degree though, right? \n\n[00:07:42] Speaker 1:\nRight. So I did all that stuff and then After I graduated high school, I went on a mission for my church, the Church of Jesus Christ of Latter-day Saints. And that's like a two-year thing where you kind of unplug from the whole world. And got back. And when I got \n\n[00:08:02] back is when DHTML, dynamic HTML had kind of like taken over, like pre-AJAX, it was like HTML, and then CSS and JavaScript showed up, and then there was DHTML, and then if that was AJAX. So I got back from that missionary service, And the whole web had changed. Before I could like view source \n\n[00:08:22] and it all made perfect sense to me. And now I would view source and there was like, I don't know, It was so different. There was just so much scripting. And I think some tools were even introduced. I think Visual Basic would actually kick out Jscript. \n\n[00:08:43] And then that would go into, so they'd like author it. And I don't know, I never did it that way, but I just remember looking at the code and it was just a mess and I was like, ah, forget this. And so I went to, when I went to college, I studied economics and didn't really touch web dev for 4 years or so after that. So I kind of had a 6 year break \n\n[00:09:05] just right after CSS was created and then right before, and then I got back into it right when like jQuery and MooTools and everything else started blowing up, like the Ajax phase of web development. \n\n[00:09:19] Speaker 0:\nYeah, around like 2006 and 7. \n\n[00:09:23] Speaker 1:\nYeah, 2005, yeah. My wife needed, she was graduating with a photography degree. And back then we were super poor and she needed a portfolio. \n\n[00:09:37] Speaker 0:\nRight. \n\n[00:09:37] Speaker 1:\n200 bucks to get a portfolio printed and like a nice like bound in the book and everything like that. But her teacher, her professor is also like, or if you know how you can build a website for your portfolio, cause that's probably the direction we're all going. And so she's like, you used to know how to build websites, right? And I was like, oh crap. \n\n[00:09:55] Speaker 0:\nYou can save some money here. \n\n[00:09:57] Speaker 1:\nYeah, it's like, well for 200 bucks, yeah, I'll try to remember how to do this and yeah, grab MooTools and jQuery, put them both on the same page and everything broke. And then I learned that they were both messing with globals. And anyway, Yeah, I just got hooked after that. I started \n\n[00:10:17] really digging into JavaScript because she kept giving me these requirements. Like, when they click on this picture, I want the background image, the background color to change. I'm like, I don't know how to do that crap. And then the next morning, I was a typical software engineer. Product team says, hey, make the app do this. And engineering says, no. \n\n[00:10:38] Yeah. Yeah. Then the next morning I'd have it working and I was all proud, impressing my new wife. And then, yeah. Yeah. \n\n[00:10:46] Speaker 0:\nAnd then \n\n[00:10:46] Speaker 1:\nit was just history. I got involved with open source with MooTools from there. Got some contract gigs from developers in that circle. Who we still interact with today. Mootools, lots of people came from Mootools on the React, in the React world. Yeah, yeah. \n\n[00:11:07] There's my whole, there's my whole, how I got into the profession. \n\n[00:11:12] Speaker 0:\nVery cool. So You were 1 of the, holdouts isn't the right word, but everybody was moving over to AngularJS, but you had latched onto Ember, and that was working out pretty well for you over at Instructure, but then you discovered React. \n\n[00:11:32] Speaker 1:\nIt didn't work. \n\n[00:11:32] Speaker 0:\nIt never worked out very well. \n\n[00:11:34] Speaker 1:\nIt didn't work, but we can keep going. I learned a ton there. I love that community. I love Tom and Yehuda, amazing engineers. And yeah, All the work in my career ever since meeting them has been immensely influenced by the way that they think of my writing software. So I mean, no disrespect to them, but yeah, \n\n[00:11:54] Ember didn't quite work out on our team. \n\n[00:11:57] Speaker 0:\nYeah, yeah, I think any, so I was never really into Ember. I played around with it a little bit and I learned a little bit about it, but never shipped anything with Ember. But from what I understand, a lot of what React Router is, and even Remix in some ways, was pretty directly inspired by Ember, right? \n\n[00:12:16] Speaker 1:\nTotally, yeah. In fact, after we launched remix, Tom reached out and he was like, I think remix is, I can't remember the exact phrase. Someone's going to send this back to him and be like, that's not what I said, but Twitter deleted my account. So I can't go find exactly what he said, but it was basically something like, he basically kind of \n\n[00:12:36] created what we were after with Ember, with all the full stack stuff and the data coming through the loaders and they had Ember data, they had these idea of models and it's all very similar Like loader is, loader in action are your controllers. Your model, you get to bring your own Prisma or whatever you want to use, a drizzle or just talk \n\n[00:12:56] to database yourself. And then the components of the view, like it's still MVC. We just put different pieces of code together in a file instead of like, here's where you should make the boundaries, react and then remix. And now server components are kind of saying, actually, I think we like these boundaries better between things. Let's compose this \n\n[00:13:16] way instead of some other way, right? \n\n[00:13:19] Speaker 0:\nYeah, like those constraints and those boundaries do exist. 1 way or another, it's just how you piece those things together, like where the boundary. How are you gerrymandering those requirements? \n\n[00:13:31] Speaker 1:\nHow am I gerrymandering? Oh, man, we don't want to trigger people. Let's move on. Yeah. So, yeah, we got lots of inspiration, not just from the code, but also their approach to things as well. And you did a lot of stuff with MIRB too, which is a project in the Ruby community that both Michael and I have huge respect for. \n\n[00:13:52] It merged with Rails, which was huge for Rails. Rails got a whole lot better. Some people would say that MIRB was better than the Rails plus Merb merge. This is hard to say out loud, Merb merge. But yeah, so respect for him all over the place, but we got the nested routing \n\n[00:14:12] ideas from them, you know, that you couple segments of the URL to pieces of the UI and also data. Like that's an idea from Ember as well. Yeah. But obviously we got a ton of stuff from, I mean, we use React, but we got a ton of stuff from React too, where it's like, here's a good boundary. You know, a route is kind of like \n\n[00:14:33] a encapsulated piece of the page. Let's put everything that's relevant. It's a data, how you mutate that data and how you display that data. Let's put all of that together. Yeah. So it's a remix is very much like a everything we like from Rails, Merb, Ember, React, and the history of our careers. \n\n[00:14:55] We tried to wrap up in this idea we call Remix. We tried to remix all of these ideas. \n\n[00:15:02] Speaker 0:\nYeah, so what's interesting about that is you tie to all of the UI and the data fetching and data mutating in 1 place and that's all attached to the URL, to the nested routing is what makes all that work. And now with the Remix v3, \n\n[00:15:22] you're going like a level deeper into the component with server components. Can you talk a little bit about like, what's the motivation behind that and How does that end up working? \n\n[00:15:32] Speaker 1:\nYeah, I don't know if it'll be v3. There's a bunch of stuff we're going to ship that'll probably be v3, and then maybe the RSA stuff will come in v4. \n\n[00:15:40] Speaker 0:\nOkay, yeah. \n\n[00:15:42] Speaker 1:\nBut yeah, so just, I'm being pedantic, but whatever. \n\n[00:15:46] Speaker 0:\nNext version, or future version. \n\n[00:15:49] Speaker 1:\nYeah, I mean, it's pretty cool with nested routes how you can put all that stuff together, but you still, You know that graphic that people do all the time, and maybe you could post this in the course or something, but that graphic where people have the separation of concerns thing, and it shows \n\n[00:16:09] like HTML and it's green, and CSS and it's blue, and JavaScript and it's red, or something like that. And it's like these 3 bars that go this way. And then the next side says separation of concerns. But then you see these like gradients of HTML, CSS and JavaScript. And underneath those bars is like date picker \n\n[00:16:30] or tabs or user profile. That's what React really brought to the table was a way to separate the concerns, not by technology, HTML, CSS and JavaScript, or not by role, like in Rails, where it's like model, view, controller. You got \n\n[00:16:50] a controllers folder and that's where all the controllers live. And then you got a models folder and you got a view folder. And those views and the controllers are coupled and they would just couple them by name, but sometimes you configure them too. But there's this like, there's a separation and you can't compose a controller into another controller or a model into another model or have a view that then \n\n[00:17:10] renders another view that is talking to a different controller and then renders another 1, right? Yeah. And so React brought to the front end this idea of, all right, let's quit separating by tech and let's kind of separate it by a different kind of concern, a more product-oriented or user-oriented concern, which is like a date picker. \n\n[00:17:30] Yeah. And then Remix brings in Loader in action, but it doesn't compose right now in Remix V2. Yeah. Like for the add to cart button that Hydrogen has. So Hydrogen is a framework \n\n[00:17:51] or a library. I don't know. It's framework. So who knows the difference? Hydrogen is a framework for building headless e-commerce apps with Remix. And they have this Add to Cart button, and you can't just put it anywhere. You've got to wire up, like if you have a route \n\n[00:18:11] or a component that renders an Add to Cart button, it's got to know, like it's action at that route needs to know how to add something to the cart. So you got to bring in the button, then you got to bring in the action. And maybe like if you want to know if this product is already in the cart, you got to bring in a function to your loader too and like drill that down to the button to say, hey, you're already in the cart. \n\n[00:18:31] So the remix abstractions on top of the data abstractions don't really compose together with components. Great. That's fine. You can, you bring in the component and the 2 functions and like, it works. And it still is a really good experience for the developer. \n\n[00:18:51] But server components bring that extra layer of composition to this full stack approach that Next has been doing, that Remix has been doing, to where now, instead of needing a route that you configure and then bring in some functions to add something to a cart, \n\n[00:19:12] the button itself can just say, hey, my form action is this function over here. And then the framework can say, oh, okay, I'll make a route for that action. But you don't have to bring in a function and plug it into your routes. There's no configuration. Like you just get to skip that step. And you just got to say this button mutates this \n\n[00:19:32] data on the server. And then the framework connects that network gap. We say that all the time in Remix, right? Like it closes the network gap. RSC gives us a way to do it in a very composable way where the components get to know about data, get to know about how to change data, and they get to know how to render data. And now mix in the front end JavaScript, \n\n[00:19:52] HTML, and CSS. And so we kind of have like a 5 part component now. It's not just HTML, CSS, and JavaScript, but now we get data actions and data loaders all mixed in together. \n\n[00:20:07] Speaker 0:\nYeah, that level of composition is like, cannot be underestimated, how powerful that is. But you can just ingest \n\n[00:20:15] Speaker 1:\nthese things inside of each other as like props.children, right? And 1 of them is going to be sent to the browser, another 1 is only going to run on the server, 3 of them might talk to totally different action endpoints, and you just get to describe your UI with components. It's going to be rad. Yeah, I'm pretty excited \n\n[00:20:34] Speaker 0:\nabout it. Yeah, yeah, we're definitely looking forward to that for sure. And honestly, I've been pretty skeptical of server components for various things and over time, certain concerns that I've had have mostly been addressed. But yeah, I still have a number of concerns \n\n[00:20:54] that from what you have told me, they will not be concerns. And So I'm really looking forward to seeing the early demos and stuff like that once there's some work published there. \n\n[00:21:09] Speaker 1:\nYeah, they've made a lot of things better. I mean, props to them for showing their work so dang early. \n\n[00:21:17] Speaker 0:\nYeah, yeah. \n\n[00:21:17] Speaker 1:\nIt's kind of disingenuous of me to be too critical of it when they're like, you know, showing it so soon. But yeah, I think it'll be good. \n\n[00:21:28] Speaker 0:\nYeah, yeah, it's exciting. But so let's talk about V3 then, because I just saw this morning some pretty something that Honestly is a little it's not embarrassing, but it's like how did this take so long talking about middleware and and then \n\n[00:21:48] like server context and stuff like that. So the people who are watching this have probably gone through a couple of exercises that maybe some of them already had experience with Remix. I think they'd be kind of interested to hear about the solution. Because we have an exercise where we say, okay, we're going to protect \n\n[00:22:08] routes. And so now let's go into all these different routes and say this 1 requires anonymous users, and this 1 requires authenticated users. And they're like this whole section of routes that all need require authenticated or require user on it. And yeah, they're probably hoping for some sort of middleware. So can you describe that a little bit, maybe explain why it took so long? \n\n[00:22:31] Speaker 1:\nSo we first expected people, well, we expected to be more convenient to lean on the server that Remix's request handler is actually running on, whether that's Express or Fastify or Fastly or CloudFlare Edge or Vercells \n\n[00:22:51] Edge or AWS directly. We're kind of thinking like, oh, okay, that kind of middleware stuff maybe doesn't have a whole lot to do with the UI and we can lean on that. \n\n[00:23:03] Speaker 0:\nCause you \n\n[00:23:03] Speaker 1:\ncan do that. You can put a path like in Express. You can like put a path in there for just middleware. Don't render any UI. So that middleware will run before it then gets to Remix. And you remember when we first shipped Remix, we actually had a separate data folder that like, you just made endpoints in whatever server world you \n\n[00:23:24] were in and we would call them and expect that a JSON request, like there was no Remix over there. We were simply just saying, hey, set up some endpoints and we'll call them for data. But it didn't pan out in practice for a lot of reasons, but, cause you want the remix abstractions, right? You want request response. \n\n[00:23:45] Speaker 0:\nYeah. \n\n[00:23:46] Speaker 1:\nYeah. Whatever else there you've got going on the way our cookies and all that kind of stuff work And so you've got the adapter for your normal request handler and so to actually make that work You'd need a adapter for all those middleware handlers to to like do it the remix II way or whatever or the webby way Really? Yeah the web API so \n\n[00:24:07] and it's not that we ever didn't want middleware. It just felt like something that like, when you're building something new, especially when you're in the middle of a global pandemic and you're trying to figure out a new income source. You're always looking for, what are you trying to innovate \n\n[00:24:27] on and what are you not trying to innovate on? \n\n[00:24:30] Speaker 0:\nYes, this is an important lesson, kids. Listen to this. \n\n[00:24:35] Speaker 1:\nAnd so you come across a thing and it's like, oh, people are probably gonna want middleware. And you see, well, they're probably shipping on Express or some other server that has middleware. Let's just, let's not tackle that. Let's keep going. Let's innovate on the things that we wanna, that we don't see yet, right? I had never seen \n\n[00:24:55] anyone do what we did with forms and actions. I mean, you can look at it naively and say, well, HTML and servers already always worked that way. And it's like, yes, exactly. But the implementation with the client-side routing and the revalidation, all that kind of stuff is wildly different and something I've never seen before. So that like, you know, you \n\n[00:25:15] got to spend these innovation tokens, what makes you unique. And so, yeah, we just saw middleware and it was like, we know we need it, we'll get back to it. We would like to have middleware in Remix, but we're just not going to work on that right now. So yeah, we always intended to do it. It's not that we thought that you didn't need it. \n\n[00:25:36] Speaker 0:\nYeah, you know, I just wanna point out another important point here, and that is sometimes if you solve a problem before you feel the pain as much. Like, you know about middleware, we all know about, like, we know the pains that middleware solves, all that. But within the context of Remix, if \n\n[00:25:56] you try to solve that pain point within this new context, you'll come up with the wrong solution most of the time. And so having experienced the pain and going through that and having all the context we have now, it's so much easier to solve this in a way that is gonna work longer term. \n\n[00:26:15] Speaker 1:\nYeah, we created a bunch of new abstractions that we hadn't used before. And the more things you put on the table, the worse they're probably going to fit. Where if \n\n[00:26:25] Speaker 0:\nyou \n\n[00:26:25] Speaker 1:\njust say, let's only do these 3 or 4 things. Let's work with that a bit. OK, now we know where another piece is going to fit in better. That's totally 1 \n\n[00:26:33] Speaker 0:\nof the areas. \n\n[00:26:33] Speaker 1:\nIt was really easy to keep punting on it, too, because it's like, when you say require user, you usually still need that user object. \n\n[00:26:42] Speaker 0:\nYeah. \n\n[00:26:43] Speaker 1:\nAnd so the function that asks for the user also acts as the middleware. So when you can throw a response in Loaders and Actions, it's like you have a call site. There is 1 line of code always to say, give me the user. It can either throw if they're not there, or redirect, or just give you the user. So even after middleware, that line of code isn't going to go away. \n\n[00:27:04] Speaker 0:\nYeah. And that's actually the justification that I use in the instructions of this exercise where we do this. I'm like, middleware would be cool, but look, we're still going to need these lines of code. And even if you use server context or something, you're still gonna be pulling that from context anyway. So it's not reducing the number \n\n[00:27:23] Speaker 1:\nof lines. There's always at least 1 line of code accessing that thing. It's just a matter of can that function act as a middleware too. But no, there are huge... \n\n[00:27:33] Speaker 0:\nI would just point out the big benefit to adding middleware is, at least in this context, is you won't forget. So, like, let's say you've got an admin page that doesn't actually need the user's data, but you display stuff that's only for admins, right? So that is 1 area where I think having \n\n[00:27:53] middleware is a great idea. \n\n[00:27:54] Speaker 1:\n1 thing that we think a lot about, and we don't mean this to put some developers on a pedestal and other ones not, But there's usually people on the team who understand the app or the abstractions or just the web better than other people on the team, right? Those people usually get put in positions of leadership. And so we often think about, \n\n[00:28:15] well, what's an API that the team lead can use that's going to protect the app from the people that don't have as much experience yet, but are still proficient in building the app. But they might forget, oh, this is on the admin page. If I don't protect it, then this endpoint is exposed. \n\n[00:28:35] And so the team lead or whoever, senior dev, they can go in and put in that middleware that's like, okay, I wrote this code and it protected all of this stuff and nobody else on the team even has to know that I did this and it's still protected. \n\n[00:28:47] Speaker 0:\nYeah, even if they add new routes to it in the future and all that. \n\n[00:28:51] Speaker 1:\nYeah. Yeah. And I mean, so yeah, other reasons we added middleware are just that middleware is good. It's the same reason all frameworks eventually have some kind of middleware. It's just we put it on a lower priority because you already had a server that had middleware. But yeah, I'm really excited about it. You're going to be able to do really good stuff there. \n\n[00:29:11] Some of the main things is like error reporting and logging requests. Just lots of things. 1 of my favorites is checking a CMS for redirects. Because a lot of websites, you log into your CMS, and that's where you configure redirects, Right? It's not a file in the source. \n\n[00:29:32] It's on some other server somewhere. And so you don't want to check that in front of every single request. Because now you're going off and checking redirects before you even check if your real app can respond to this. And so, Mailware allows you to let the request go through, come back, inspect \n\n[00:29:52] it, if it's a 404, now you can go up and go to the CMS and be like, hey, do you have a different page for this? No? Okay, here's the 404, otherwise here's a redirect. And there's really just no way in Remix to do that right now, because there's no point where you like, \n\n[00:30:12] I guess you could do it in the server entry. But \n\n[00:30:16] Speaker 0:\nyeah, there are ways, but yeah, they're not. \n\n[00:30:18] Speaker 1:\nIt's just weird. \n\n[00:30:19] Speaker 0:\nThey don't feel blessed. \n\n[00:30:21] Speaker 1:\nYeah. Yeah. And then you mix it up with a couple other things that we're bringing in like server context. And I haven't made the proposal for this yet, but a default session. So a default session will come into loaders, actions, middleware and context. And so now like on the backend \n\n[00:30:41] of a request, you can just always set your own cookies. If you want to, you could replay a header like you need to do on fly with the Postgres replicas. Yeah, just you'll have that session come through and you can, flash messages will be a lot easier. They'll automatically get committed in 1 spot instead of every single loader that reads it having to then \n\n[00:31:02] recommit the cookie, depending on your session's story. \n\n[00:31:06] Speaker 0:\nYeah, that'll be really nice too, for sure. \n\n[00:31:08] Speaker 1:\nYeah, yeah, so lots of good stuff. So Remix, we mostly focused on innovation on the front end with V1 and V2. And this, we're now like backfilling all of the big pain points on the back end. \n\n[00:31:23] Speaker 0:\nYeah, yeah. And I think there are probably lots of other things that like the team has grown a little bit. You've got lots of people working on various aspects of the framework and some, I suppose, working on some of those future things like RSC, React server components, and then others working on more \n\n[00:31:45] things that will happen sooner. There's also like exploration in changing the build tooling to Vite, which would be pretty interesting. I know people are really excited about that. Personally, I think that'll be cool, but I'm not like as excited as it seems like everybody else is. \n\n[00:32:03] Speaker 1:\nThey're migrating existing React Router apps, right? Or trying to. And us not having an open compiler really just like... You're stopped dead in your tracks. \n\n[00:32:17] Speaker 0:\nYeah, that's true. \n\n[00:32:18] Speaker 1:\nAnd then the second thing is the SPA mode for Remix. That also stops you dead in your tracks. It's like, okay, maybe I'm on React router, maybe I even started using loaders and actions, but they don't work on the server yet. And so how do you like make that jump from all this code is expected to run in a browser. And now to migrate to Remix, I need to somehow figure out \n\n[00:32:38] how to make every single 1 of these things work on the server. And so now you can bring your own bundler stuff with Vite. You can just bring over a bunch of client loaders and client actions and Remix will actually just probably render a mostly empty document and then do everything else on the client side and now you can just move like 1 loader \n\n[00:32:58] over. Yeah, it's going to be huge. But yeah, that work should be done really soon. VEET is, we've got an experimental release, I think, this week that we're recording. \n\n[00:33:09] Speaker 0:\nOh, really? Yeah. OK. Hey, that's good. \n\n[00:33:12] Speaker 1:\nI'm glad we have it now. We already have an experimental release. We're putting it as, we're actually putting it in the dev branch with an unstable flag. So yeah, it should be there. Oh, okay. \n\n[00:33:21] Speaker 0:\nHey, that's sick. So people watching this now, it's probably already out. \n\n[00:33:24] Speaker 1:\nYeah, it's probably already out. \n\n[00:33:25] Speaker 0:\nUnstable, so yeah, that's very cool. So 1 thing I wanna talk about as we wrap up is why Remix decided, like back it up, most frameworks who are doing server side stuff, they have you do, like they kind of build an API around whatever server \n\n[00:33:45] request there is and they'll have their own special API. So if you'd have a loader equivalent in whatever framework, what you return is like an object that maybe has a status and it maybe has like a body or something. And then like on the front end, there would be some sort of, \n\n[00:34:06] I don't know, some mechanism for accessing that. What I'm driving at is Remix decided to go the route of, let's just look at the WebFetch API and use that. And it turns out that that worked out really well because all other frameworks are starting to do that too. \n\n[00:34:22] Speaker 1:\nAnd run times. \n\n[00:34:24] Speaker 0:\nYeah, yeah. And what that opened up for Remix was just like being able to be used pretty much everywhere that WebFetch is available, which is increasingly everywhere. So what was it that motivated that change or that focus and what impact did that have? \n\n[00:34:44] Speaker 1:\nSo Michael and I, I think make a great team because I daydream on the front end of like, where are your best practices, accessibility, web performance, what does the network graph look like, are you managing focus, All that kind of stuff. \n\n[00:35:06] And then, but I go pretty far into the back end too. I am interested in back end code. And maybe I should let Michael speak for himself, but in my experience with him, he thinks mostly about servers and back end stuff. Like, I wouldn't be surprised if 1 day he was like, \n\n[00:35:26] oh yeah, my home page is served from a computer in my kitchen. Like, I wouldn't be surprised by that. So he thinks in those abstractions a lot, and he's good at it. He has built lots of servers and clients, HTTP servers and clients. And \n\n[00:35:46] so when we were building Remix, we knew that we wanted to deploy anywhere because I was using Firebase a lot back then for our websites. Unpackage, a project of Michael's, is hosted on Cloudflare Workers. And of course, Serverless \n\n[00:36:07] was, I guess, I don't know if Serverless is having its heyday now or if it was back then, but Serverless was kind of like showing up when, I guess it was kind of maturing a bit when we started on Remix. \n\n[00:36:21] Speaker 0:\nIt's hard to say where we are on the hype cycle. \n\n[00:36:24] Speaker 1:\nYeah, I mean, it's awesome. Serverless is awesome. People are no longer saying serverless still has servers. So I think we're past like the initial. Right? And we're looking at all their APIs, like how are we going to run remix in all of these places? They all have these like, like you were just saying. Some \n\n[00:36:44] of them like Azure, you would return this object with like a context and that I can't remember it in the status and whatever else. And everyone had their own kind of different thing. And I was like, well, let's just do a little like inversion of control thing. Let's have like a, let's make a thing called an adapter and we'll do like a 2 JSON and they implement that and 2 HTML \n\n[00:37:05] and they implement that and just whatever Remix needs we'll just give them a method to like pop in there and I remember Michael and I were pairing on it and I was like to me I was like this is just a quick thing Let's just like get this done and move on to the front end stuff that I'm thinking about. \n\n[00:37:25] And then he was like, no, I've been thinking about this. It's like CloudFlare has done something interesting where they didn't copy the Connect API or the Node stuff or Express or come up with their own thing. They actually are basing theirs off of the Web Fetch API, the thing \n\n[00:37:45] that's in browsers. And I was just like scratching my head like, fetch, what does fetch have to do with any of this? At that time, my only interaction with the fetch API was like, I'd make a fetch and then I'd await to JSON on or I'd await.json on this req thing. And then I had my data. And I remember thinking like, \n\n[00:38:05] why do I have to do this stupid await part? This is so dumb. And he's like, no, no, no, no, check it out. And he pulls up the MDN docs and shows me there's request And then there's response too. And I was like, response? Why do you need a response in the browser? And then I realized, oh, when you make a fetch, that \n\n[00:38:25] thing you got back is a response instance. I was good enough at JavaScript at this point to have like figured that out on my own, but I have never even considered that this was a response, right? Like, and everything that that means with HTTP, it's going to have headers, it's going to have a body, it could be stream, \n\n[00:38:46] it's going to have a status on it, it's like it's going to have all this stuff. And, And he was like, I think with these 2, he's a CloudFlare already did it. So I think if we just base everything that we do on this API, we can build clients, We can build servers, we can build adapters, and we can actually expose just requests and \n\n[00:39:06] responses to Remix users so that we're all just using a spec'd out like community API here and not making up our own thing. And then, and the idea was it'll just work on CloudFlare cause we use the same API as them. \n\n[00:39:26] And that turned out pretty much true. Yeah, so that was, that was some awesome foresight for Michael to kind of realize everything that's happening between the front end and the backend in Remix is an HTTP server and client. And so let's pick the WebFetch API \n\n[00:39:46] for the abstraction to use there. \n\n[00:39:49] Speaker 0:\nYeah, good call. What I love about Remix is, it actually is a little reminiscent of my work with Testing Library, where like Enzyme was the big thing at the time. And what Enzyme would do is it would kind of wrap the component, in fact, that's what they called it, it was a wrapper. And then you're using all these bespoke \n\n[00:40:09] APIs. With Testing Library, I was just like, I just want the DOM node, please just give me the DOM node. And then I can do whatever I want to with that thing because I know DOM. And so then I built testing library and instead of wrapping it, there are APIs you're calling into, you know, render and all that. But then I kind of expose \n\n[00:40:30] the API, the platform API to you. And that ended up working out really well. And I feel like Remix does the exact same thing. You know, it's gonna normalize all those APIs cause you do have Express and you have Fastify and all these other server architectures and things. They all have different APIs, and the Remix \n\n[00:40:50] Adapters normalizes that to the web API so that we can just transfer that knowledge wherever we go. When I went into React, I realized the better I get at React, the better I get at JavaScript. \n\n[00:41:06] Speaker 1:\nAnd \n\n[00:41:06] Speaker 0:\nthat's what I loved about moving from AngularJS, which was great and everything, but I dropped a ton of knowledge when I did that. And then coming into React, I was like, oh, okay, I'm just getting better at JavaScript now. Remix makes me better at the web. So it doesn't matter what tools I end up using, because I used Remix, I'm a better web developer and I can \n\n[00:41:26] use those tools more effectively. And that's what I love about Remix. \n\n[00:41:30] Speaker 1:\nYeah, man, it's always good to hear that from people. Yeah, like lots of people don't really know how cookies work or headers or any of that stuff. And then they start doing Remix and they're like, oh, maybe I can do backend code and I can go get a $50,000 raise. \n\n[00:41:47] Speaker 0:\nYeah, yeah. Yeah, I often say Remix tricked me into being a full stack developer. \n\n[00:41:53] Speaker 1:\nOh yeah, I remember our early conversations where I was like, why don't, like, just make a password table and Hash it, put it in there. \n\n[00:42:03] Speaker 0:\nYeah, yeah. So like, I actually, I found the live stream recently and I was watching it where I initially implemented my own auth, I hand rolled auth. And I had these notes that you gave me that were like, step 1, step 2, step 3. And I just went through them in like an hour and I implemented Auth like by hand for, \n\n[00:42:23] I'd done a little bit of Auth stuff with Passport.js and Express for like years ago, but never like, never quite like that. And it was just, it was so cool. I felt so empowered to be able to do that stuff. So yeah, Remix empowers me. I really appreciate that. \n\n[00:42:42] Speaker 1:\nYeah, I think I tricked myself into being a backend developer with Remix too. \n\n[00:42:48] Speaker 0:\nWell, cool, Ryan, we're down to the end of our time. Was there anything you wanted to talk about that we didn't get to? \n\n[00:42:58] Speaker 1:\nNo, I didn't have an agenda. I'm just happy you're here and everybody else is here watching us. \n\n[00:43:04] Speaker 0:\nWhat's the best way for people to contribute or like keep up with what's going on and stay current with Remix? \n\n[00:43:12] Speaker 1:\nI mean, probably just follow our X account and star the repo on GitHub or I mean, who cares about stars, subscribe to it. So you get notified when we push releases and stuff like that. All of our releases have release notes on them. So you can just go to GitHub, click on tags, click on releases. \n\n[00:43:33] And we take those release notes pretty seriously. And that's how you can know the latest stuff. We also post RFCs and proposals in our discussions tab on GitHub. And so that's a great way to kind of see where our minds are at on what we're going to be doing. Our roadmap is public. If you go to our org on \n\n[00:43:53] GitHub and click on projects, you'll see the roadmap project. So that's what we're working on. And that's what we use internally at Shopify too. Like that's what the Shopify teams look at too to see what's the Remix team working on. It's all the stuff on GitHub, it's all the open stuff. So everything we do is open like that. \n\n[00:44:12] Speaker 0:\nYeah, that's super cool that even after the Shopify acquisition, I feel like the Remix team just got even more resources to be able to continue doing exactly what it was doing. \n\n[00:44:23] Speaker 1:\nSo super- Yeah, there's a lot of adoption internally at Shopify and a lot of autonomy too, where they're just like, we love the work you're doing, keep doing it. And so I know a lot of people are like, oh, it's just gonna become an e-commerce thing. And it's like, that's hydrogen. Like, and Shopify wants Remix to be successful for a lot of reasons, not just stores, \n\n[00:44:43] but internal apps, embedded apps, Shopify.com itself. And we've, it's kind of, it's a little stressful. Normally when you're a new framework, like you get adoption of like smaller scale stuff. And then like the scale of your customers goes \n\n[00:45:03] up with the scale of the code and the lifespan of the code. But at Shopify, it kind of got just like thrown at like some really big use cases immediately and it's like, oh crap there's a memory leak and everyone thinks it's remixed and you dig in deeper and it turns out, nope, it's not remixed, it's a notes, new request \n\n[00:45:23] response polyfill, not us, but. \n\n[00:45:26] Speaker 0:\nOh dear. \n\n[00:45:27] Speaker 1:\nBut yeah, you find, we find our own bugs too, I just don't want to admit them permanently \n\n[00:45:32] Speaker 0:\non the video. Yeah, \n\n[00:45:35] Speaker 1:\nsure. But yeah, it's been huge for the project to just like throw us in the battlefield early and we're getting a lot better because of it. \n\n[00:45:45] Speaker 0:\nYeah, I think it's just been awesome seeing that over the last year. Well, cool, thank you so much for giving us this time today. And yeah, I'm looking forward to seeing all the other cool stuff that y'all are working on. Thanks everybody. See ya."
          },
          "_type": "videoResource"
        },
        "solution": null,
        "_id": "Davc6tzHYCp36XjM2Ft8Bz",
        "_updatedAt": "2023-10-19T00:29:27Z",
        "title": "Remix Behind the Scenes with Ryan Florence",
        "body": "Co-founder of Remix and React Training, Ryan Florence, delves into the details and innovations behind Remix.\n\nRyan explains the core concept of server components in Remix. These components are designed to improve composition and co-location, making web apps more efficient and easier to manage.\n\nThe transition from React Router to Remix posed challenges but also opened doors for innovations. Ryan elaborates on the positive influence of the web fetch API on the framework. This API compatibility has expanded Remix's reach across different server architectures.\n\nAs the conversation concludes, the focus shifts to the future of Remix, especially after its acquisition by Shopify. This partnership has bestowed the team with greater resources and autonomy.\n\nBoth Ryan and Kent eagerly anticipate the continued evolution of Remix and appreciate the myriad learning experiences it has provided!\n\n## Resources\n\n- [Ryan Florence on Twitter](https://twitter.com/ryanflorence)\n- [Remix](https://remix.run/)"
      },
      {
        "_type": "interview",
        "description": "Shirley Wu, From business to data-driven art. Balancing creativity and stability. Embracing ethical considerations in tech's fast pace.",
        "slug": "art-code-and-data-visualization-with-shirley-wu",
        "_id": "Davc6tzHYCp36XjM2Ft8n0",
        "_updatedAt": "2023-10-19T00:29:29Z",
        "title": "Art, Code, and Data Visualization with Shirley Wu",
        "body": "Shirley Wu, award-winning creative focused on data-driven art and visualizations, shares her journey and insights in a conversation that spans career transformation, the creative process, ethical considerations, and industry trends.\n\nAfter beginning her career in the business sector, Shirley transitioned into web development after discovering her passion for computer science. She has carved out a unique space for herself at the intersection of art, coding, and data visualization.\n\nShirley finds that her work in data visualization allows her to come closest to realizing her artistic aspirations while maintaining financial stability.\n\nThe dialogue then finally briefly covers the challenges and opportunities of staying relevant in a fast-paced industry. A note of caution emerges about the potential for technology to widen societal gaps, underscoring the need for ethical considerations around wealth distribution.\n\n## Resources\n\n- [Shirley Wu's Website](https://shirleywood.studio)\n- [Shirley Wu's Twitter](https://twitter.com/sxywu)",
        "videoResource": {
          "_type": "videoResource",
          "duration": 2588.233333,
          "transcript": {
            "srt": "1\n00:00:00,240 --> 00:00:05,040\nHey, everybody. I am so excited to be joined by my friend Shirley Wu. Say hi, Shirley.\n\n2\n00:00:05,640 --> 00:00:07,839\nHi. Hi, everyone. Hi, Kent.\n\n3\n00:00:08,800 --> 00:00:14,679\nHi. All right. So Shirley and I go back pretty far, actually. I think we first met on Twitter,\n\n4\n00:00:15,600 --> 00:00:18,880\nas where I meet most of my friends these days,\n\n5\n00:00:19,300 --> 00:00:22,320\nor X as it is now called, but it was Twitter back then.\n\n6\n00:00:23,160 --> 00:00:28,380\nAnd then we met in person. I wanna say, I'm pretty sure I've got a picture of us\n\n7\n00:00:29,480 --> 00:00:32,299\nat Fluent Conf, like 2017 or something.\n\n8\n00:00:32,860 --> 00:00:36,700\nI think React Rally 2017. I've never been to Fluent Conf.\n\n9\n00:00:37,120 --> 00:00:39,020\nOh, okay, so it wasn't that 1.\n\n10\n00:00:40,080 --> 00:00:42,540\nYeah, so, but it was around that time.\n\n11\n00:00:43,580 --> 00:00:52,120\nAnd actually, I'm finding with lots of these conversations I'm having with people that I met them first on Twitter and then met them first in person at a conference.\n\n12\n00:00:52,720 --> 00:00:54,520\nAnd so there's something there, I guess.\n\n13\n00:00:55,080 --> 00:01:04,700\nYeah, well, I actually don't remember the Twitter part, but I remember very well the React Rally part and you being 1 of the nicest people I've ever met. So thank you so much for having me here.\n\n14\n00:01:05,200 --> 00:01:12,620\nOh, well, thank you. Yeah, you know, I was probably 1 of your adoring fans on Twitter that you didn't know anything about. And,\n\n15\n00:01:14,060 --> 00:01:17,540\nbut I'm so glad that we've developed this friendship now. And\n\n16\n00:01:17,920 --> 00:01:27,340\nit's just been a total pleasure to know you and get to know you. I'd like the audience to get to know you a little bit as well. Could you introduce yourself to us? Yeah,\n\n17\n00:01:28,200 --> 00:01:29,660\nso hello again,\n\n18\n00:01:30,040 --> 00:01:31,580\nMy name is Shirley Wu.\n\n19\n00:01:31,880 --> 00:01:33,360\nI am a,\n\n20\n00:01:34,540 --> 00:01:38,540\nI've come up with a new intro for myself. I am a Chinese American\n\n21\n00:01:39,300 --> 00:01:42,780\nartist, software engineer, data visualization designer.\n\n22\n00:01:44,440 --> 00:01:49,020\nAnd then I think the rest is like, I'm trying to remember this bio I made for myself.\n\n23\n00:01:50,500 --> 00:01:51,480\nKeynote speaker\n\n24\n00:01:52,540 --> 00:01:55,860\nand published author. I think we're the last 2. Yeah.\n\n25\n00:01:56,760 --> 00:01:57,680\nAwesome. That's great.\n\n26\n00:01:58,280 --> 00:02:02,180\nYeah. List all of those accolades. That's super cool. Yeah. You have accomplished\n\n27\n00:02:02,560 --> 00:02:06,580\na lot of really cool things and I want to dive into some of those things.\n\n28\n00:02:09,960 --> 00:02:16,400\nSo, let's start a little bit further back from where you're at now. So, how did you get into web dev?\n\n29\n00:02:17,140 --> 00:02:17,640\nYeah,\n\n30\n00:02:18,340 --> 00:02:19,840\nSo I actually,\n\n31\n00:02:20,540 --> 00:02:23,660\nI feel like maybe I've told you this before, Ket, but\n\n32\n00:02:24,300 --> 00:02:24,800\nI\n\n33\n00:02:25,200 --> 00:02:27,040\nactually studied business\n\n34\n00:02:27,560 --> 00:02:28,060\nin\n\n35\n00:02:28,840 --> 00:02:29,340\ncollege.\n\n36\n00:02:30,720 --> 00:02:35,280\nAnd about my junior year, I was starting to realize that my personality\n\n37\n00:02:35,640 --> 00:02:37,580\nis not built for finance\n\n38\n00:02:38,260 --> 00:02:43,820\nand investment banking. And so I started taking computer science classes on the side for fun.\n\n39\n00:02:45,460 --> 00:02:47,140\nAnd I really clicked\n\n40\n00:02:47,780 --> 00:02:48,880\nwith CS.\n\n41\n00:02:49,860 --> 00:03:01,360\nAnd by the end of my junior year, I was like, by the summer, actually, I was like, I think I want to try and get a software job. And so I dedicated all my senior year\n\n42\n00:03:02,420 --> 00:03:04,320\nto CS classes and\n\n43\n00:03:05,160 --> 00:03:06,980\nI just so happened to\n\n44\n00:03:10,680 --> 00:03:15,260\nget a, I mean, I'm making it sound easy, but it was a lot of work.\n\n45\n00:03:16,360 --> 00:03:22,620\nBut by the end of my senior year, I was really fortunate and I was able to get 2 offers for front-end engineering jobs.\n\n46\n00:03:23,040 --> 00:03:25,140\nAnd at the time that was because\n\n47\n00:03:25,640 --> 00:03:26,820\nI had\n\n48\n00:03:27,380 --> 00:03:29,720\nbeen doing art since my childhood.\n\n49\n00:03:30,240 --> 00:03:32,980\nI have been part of a graphic design club\n\n50\n00:03:33,420 --> 00:03:33,920\nin\n\n51\n00:03:34,440 --> 00:03:34,940\ncollege,\n\n52\n00:03:35,440 --> 00:03:39,640\nand I definitely did not have the experience for a back-end\n\n53\n00:03:40,240 --> 00:03:40,740\nengineer.\n\n54\n00:03:41,480 --> 00:03:48,740\nAnd so the 2 companies that took an interest in me was like, you're going to be a front-end engineer. And I was like, cool, I'm just desperate for a job.\n\n55\n00:03:50,600 --> 00:03:51,440\nI'm 22,\n\n56\n00:03:52,660 --> 00:03:54,440\nand I'm about to graduate.\n\n57\n00:03:54,960 --> 00:04:01,220\nBut that actually turned out to be an amazing coincidence, like when universes just kind of align correctly.\n\n58\n00:04:03,320 --> 00:04:07,500\nAnd I ended up at a big data company as a front-end engineer\n\n59\n00:04:08,160 --> 00:04:13,060\nat a time when D3, the JavaScript library, was just in its infancy.\n\n60\n00:04:15,060 --> 00:04:16,440\nAnd my manager\n\n61\n00:04:16,820 --> 00:04:21,240\nasked me if I would be interested in exploring that.\n\n62\n00:04:21,779 --> 00:04:26,740\nAnd it just so happened to be like this perfect combination of everything I love, which is\n\n63\n00:04:28,260 --> 00:04:30,040\nmath and especially geometry,\n\n64\n00:04:31,420 --> 00:04:31,920\ncode\n\n65\n00:04:32,360 --> 00:04:33,580\nand art and design.\n\n66\n00:04:34,280 --> 00:04:37,800\nAnd so that's how I got into WebDem.\n\n67\n00:04:38,940 --> 00:04:43,680\nWell, that is such a fun story. I love the really unique stories,\n\n68\n00:04:44,340 --> 00:04:53,960\nnot to like diminish people's stories that are very typical. Like I went to college, I got a CS degree, you know. But like, I really find it inspiring when people\n\n69\n00:04:55,080 --> 00:05:06,560\ndecide, you know what, what I'm doing is not working and I'm gonna make this leap over here. And I'm so glad that it worked out. Thank you. Because you have made a really positive impact on\n\n70\n00:05:06,880 --> 00:05:07,380\nthe\n\n71\n00:05:07,740 --> 00:05:08,240\necosystem,\n\n72\n00:05:09,340 --> 00:05:09,840\nespecially\n\n73\n00:05:10,240 --> 00:05:13,220\nwith regard to data visualization. So\n\n74\n00:05:14,380 --> 00:05:15,540\nyou gave a talk recently\n\n75\n00:05:15,940 --> 00:05:18,380\nat the most recent React Rally that\n\n76\n00:05:18,900 --> 00:05:20,100\nI will never forget.\n\n77\n00:05:20,540 --> 00:05:26,620\nIt was really, I wonder, I don't know if the recordings are up yet. I'm gonna go find that later, but\n\n78\n00:05:26,920 --> 00:05:38,800\nsuper, super good talk. So if you're watching this now, like pause it and go look up Shirley's talk at React Rally 2023. It was very good. But in that talk, you talk about how you are,\n\n79\n00:05:39,120 --> 00:05:42,160\nyou have always really been interested in art.\n\n80\n00:05:42,940 --> 00:05:45,700\nAnd when was it that you really discovered that you could combine\n\n81\n00:05:46,080 --> 00:05:47,940\nart with computer science?\n\n82\n00:05:48,400 --> 00:05:54,220\nYeah, that's such a great question. And thank you so much for being in the audience for that and being so supportive of that.\n\n83\n00:05:54,660 --> 00:05:56,740\nI'm a huge fan of yours, Kent.\n\n84\n00:05:57,180 --> 00:06:00,260\nAnd so the feeling is mutual about how amazing you are.\n\n85\n00:06:02,980 --> 00:06:09,820\nAnd also just all of the positive vibes you gave me afterwards, because that was a hard talk to give.\n\n86\n00:06:10,600 --> 00:06:14,280\nOh, yeah. And I'm so happy it was received the way it was. But\n\n87\n00:06:15,160 --> 00:06:15,660\nI\n\n88\n00:06:16,160 --> 00:06:19,240\nhave been wanting to be an artist since I was 4 years old.\n\n89\n00:06:20,020 --> 00:06:21,600\nAnd I gave up on that dream\n\n90\n00:06:22,480 --> 00:06:24,200\nsometime in my teenage years,\n\n91\n00:06:25,160 --> 00:06:26,980\nprobably my most cynical years.\n\n92\n00:06:30,600 --> 00:06:33,760\nAnd then I think that the way I fell into data visualization\n\n93\n00:06:34,080 --> 00:06:35,580\nwas almost very natural.\n\n94\n00:06:36,340 --> 00:06:42,480\nI think maybe my manager at this time saw something in me that was like I was bursting and itching to do something creative.\n\n95\n00:06:43,320 --> 00:06:45,300\nHe knew about my design background,\n\n96\n00:06:45,780 --> 00:06:49,260\nnot a formal design background, but like the informal club things.\n\n97\n00:06:49,640 --> 00:06:56,340\nAnd so he kind of just like handed me the opportunity and I didn't even recognize it at the time about how perfect of a fit it was.\n\n98\n00:06:56,760 --> 00:06:59,660\nAnd then as the years went on, where\n\n99\n00:07:00,040 --> 00:07:02,140\nI eventually quit my full-time job\n\n100\n00:07:02,480 --> 00:07:11,980\nand then I went off to work on my own. And as I was working on my own, the reason why I was interested in that was because I wanted to see all the different kinds of projects that were out there.\n\n101\n00:07:13,280 --> 00:07:16,460\nAnd as I got to go more and more into data visualization,\n\n102\n00:07:16,800 --> 00:07:18,740\nthe first thing I realized is that\n\n103\n00:07:21,820 --> 00:07:22,520\ndata visualization\n\n104\n00:07:23,300 --> 00:07:30,040\nis the closest thing. I like to say this is the closest thing to art that I can still get tech companies to pay me for.\n\n105\n00:07:31,980 --> 00:07:33,580\nAnd then once I realized that,\n\n106\n00:07:33,940 --> 00:07:44,420\nI also, I think as part of realizing that I got the opportunity to work with an art museum on their data. And it was the first time that I had been given like completely\n\n107\n00:07:44,760 --> 00:07:52,380\ncreative free reign of their like, do whatever visual form you want to so I got the opportunity to do data art\n\n108\n00:07:53,940 --> 00:07:59,180\nand that that was the moment in which I was like I think this was 2018 and that was a moment in\n\n109\n00:08:02,110 --> 00:08:02,610\nwhich\n\n110\n00:08:05,540 --> 00:08:09,900\nI was like I just re-remembered my four-year-old self's dream, and I want to make this a reality now.\n\n111\n00:08:10,600 --> 00:08:12,680\nAnd so I think it was a very slow\n\n112\n00:08:13,020 --> 00:08:15,300\nyears and years, years of denying\n\n113\n00:08:15,660 --> 00:08:16,600\nthat also,\n\n114\n00:08:17,580 --> 00:08:18,840\nYears of being like,\n\n115\n00:08:20,140 --> 00:08:22,460\nthere's no financial stability in art.\n\n116\n00:08:24,860 --> 00:08:26,500\nAnd that's not a smart decision.\n\n117\n00:08:27,180 --> 00:08:28,540\nAnd years of denying\n\n118\n00:08:29,280 --> 00:08:35,039\nand then eventually like slowly coming back around. And then in 2021, I\n\n119\n00:08:35,940 --> 00:08:37,320\nwent and did a grad program\n\n120\n00:08:37,780 --> 00:08:38,820\nfor art and technology.\n\n121\n00:08:40,080 --> 00:08:43,299\nAnd I just graduated. Here I am. Yeah. Congratulations\n\n122\n00:08:44,240 --> 00:08:45,220\nor congratulations.\n\n123\n00:08:47,980 --> 00:08:49,120\nI appreciate that.\n\n124\n00:08:50,500 --> 00:08:51,740\nI'm definitely that.\n\n125\n00:08:53,040 --> 00:08:54,800\nBut that's awesome.\n\n126\n00:08:55,380 --> 00:09:06,760\nI love hearing that story. Now there very well could be people who are listening who are like, oh my gosh, I used to want to be an artist, and then I found out that you can't make any money doing that, so I had to pivot.\n\n127\n00:09:07,120 --> 00:09:07,620\nSo\n\n128\n00:09:08,420 --> 00:09:10,460\nwhat advice would you give this person,\n\n129\n00:09:11,060 --> 00:09:15,040\nor even maybe the person who thought they might be into art and never really,\n\n130\n00:09:15,480 --> 00:09:16,160\nyou know,\n\n131\n00:09:16,640 --> 00:09:17,140\ntried,\n\n132\n00:09:17,700 --> 00:09:24,500\nwhat advice would you give them on like skills they can develop or things that they can try to kind of explore that area of themselves?\n\n133\n00:09:25,320 --> 00:09:29,880\nWell, first, I want to say that I don't feel qualified at all to give this advice.\n\n134\n00:09:32,860 --> 00:09:40,860\nThe proportion of which I'm getting paid for art is like near 0. And my living is still based off of my software engineering\n\n135\n00:09:43,700 --> 00:09:44,200\nbackground.\n\n136\n00:09:45,400 --> 00:09:50,940\nSo having said that, I think everybody should take whatever I say with huge grains of salt\n\n137\n00:09:53,360 --> 00:10:03,340\nBut I do think well actually flip this around Kent which is like have you Because you're you're you're a very creative person You have to be very creative\n\n138\n00:10:03,900 --> 00:10:06,240\nto make all of these different courses,\n\n139\n00:10:06,580 --> 00:10:07,080\nto\n\n140\n00:10:07,460 --> 00:10:09,620\nput together the talks that you do.\n\n141\n00:10:11,000 --> 00:10:16,980\nHave you ever wanted to do more artistic things? I don't think we've ever talked about this.\n\n142\n00:10:17,320 --> 00:10:18,580\nNo, no. So,\n\n143\n00:10:20,860 --> 00:10:24,640\nwhen I was a kid, I would draw pictures for my mom and all of that stuff, like everybody.\n\n144\n00:10:25,440 --> 00:10:25,940\nAnd\n\n145\n00:10:27,720 --> 00:10:28,220\nI\n\n146\n00:10:28,540 --> 00:10:31,500\nfound out pretty quickly that I'm not a very good artist,\n\n147\n00:10:33,180 --> 00:10:40,440\nAt least in drawing and stuff. Like I just can't get my hands to do what I want them to in that context.\n\n148\n00:10:41,380 --> 00:10:42,160\nAnd so,\n\n149\n00:10:43,040 --> 00:10:44,620\nthere was a short time\n\n150\n00:10:45,060 --> 00:10:52,280\nwhen I was actually into anime. I say, everybody calls it anime. That is not how it's said, it's anime. But anyway,\n\n151\n00:10:54,340 --> 00:11:02,060\nso I was into Naruto was actually my anime of choice for a little while. And so I would draw characters from Naruto.\n\n152\n00:11:02,900 --> 00:11:09,300\nAnd I really enjoyed that, and I actually feel like my art wasn't terribly bad, but eventually I just kind of,\n\n153\n00:11:09,640 --> 00:11:15,560\nI got into video editing, and then I started doing, you know, computer art sort of in a video medium.\n\n154\n00:11:17,020 --> 00:11:19,540\nAnd so yeah, as far as like my modern\n\n155\n00:11:20,640 --> 00:11:21,140\ncreativity,\n\n156\n00:11:22,020 --> 00:11:25,680\nI would say that I shy away from anything that resembles\n\n157\n00:11:26,240 --> 00:11:30,120\nmaking things look good, like from a design perspective and stuff, just because\n\n158\n00:11:32,140 --> 00:11:34,040\nit requires a lot of time\n\n159\n00:11:34,540 --> 00:11:43,380\nfor me to figure out how to make something look good. Like I can look at something and I know that doesn't look good, but I don't know how to fix it.\n\n160\n00:11:44,340 --> 00:11:49,640\nSo yeah, that's been a struggle for me. So I actually really, really relate to that.\n\n161\n00:11:50,020 --> 00:11:55,420\nAnd it's, it's really interesting to hear people that are clearly very creative\n\n162\n00:11:55,760 --> 00:12:02,860\ntell themselves that they're not creative just because we're not doing illustrations. Like I feel like when we think of art,\n\n163\n00:12:03,740 --> 00:12:05,280\nI have this kind of,\n\n164\n00:12:06,200 --> 00:12:08,000\nI'm hard on myself because\n\n165\n00:12:09,720 --> 00:12:20,260\nin high school, and I also really appreciate how you brought up your childhood because I feel like We very rarely talk about all the things that we've done as children that really kind of,\n\n166\n00:12:21,340 --> 00:12:21,920\nyou know,\n\n167\n00:12:22,360 --> 00:12:30,940\ncontribute to who we are today. And I have a very similar story to you in that, like, I loved drawing as a kid. Then I found Photoshop.\n\n168\n00:12:31,460 --> 00:12:33,620\nThen I found, then I was taught Dreamweaver,\n\n169\n00:12:34,020 --> 00:12:44,860\nand then that's actually how I got to designing websites in my high school years, and that was the creative, my creative outlet. And I think that I took art all through my high school years,\n\n170\n00:12:45,380 --> 00:12:48,980\nI got pretty decent at still life, but I feel like I have\n\n171\n00:12:50,380 --> 00:12:56,600\na Lot of what you described which is that I would imagine something in my head and that's not what comes out through\n\n172\n00:12:57,480 --> 00:12:57,980\nmy\n\n173\n00:12:58,820 --> 00:12:59,320\nhand\n\n174\n00:13:00,560 --> 00:13:01,060\nYeah,\n\n175\n00:13:01,500 --> 00:13:02,280\nand then\n\n176\n00:13:02,620 --> 00:13:03,120\nand\n\n177\n00:13:03,580 --> 00:13:05,580\nthen somehow I spent like\n\n178\n00:13:06,360 --> 00:13:11,440\nMore than a decade beating myself up for the fact that I don't think I draw well And\n\n179\n00:13:11,760 --> 00:13:16,220\nand I do really think that it's because when a lot of things us think about art\n\n180\n00:13:17,140 --> 00:13:18,340\nwe think about\n\n181\n00:13:18,740 --> 00:13:21,100\nfine art and we think about paintings\n\n182\n00:13:21,680 --> 00:13:26,180\nand we think about like Renaissance masters and being able to like, you know, render\n\n183\n00:13:26,840 --> 00:13:27,340\neverything\n\n184\n00:13:28,520 --> 00:13:29,020\nphotorealistically\n\n185\n00:13:29,660 --> 00:13:34,100\nor Like even just being able to have your own illustration style.\n\n186\n00:13:35,320 --> 00:13:36,980\nOr even like you said about\n\n187\n00:13:37,480 --> 00:13:38,860\nall the things about design.\n\n188\n00:13:39,620 --> 00:13:41,620\nAnd I do think that\n\n189\n00:13:42,620 --> 00:13:45,140\nif that is, you know, if someone,\n\n190\n00:13:45,460 --> 00:13:50,040\nif that is the art that someone wants to pursue, that's absolutely amazing.\n\n191\n00:13:50,740 --> 00:13:57,760\nBut I also do think that we need to give ourselves credit for the fact that as front-end engineers, we're implicitly creative\n\n192\n00:13:58,380 --> 00:14:04,940\nin the jobs that we do. We have to think about design decisions. Even if we're not designers, we have to think about all of that.\n\n193\n00:14:05,860 --> 00:14:06,360\nSo\n\n194\n00:14:07,120 --> 00:14:14,600\nI want to kind of put that out there first that, you know, I think we're doing art, not, not in the way that we might\n\n195\n00:14:15,060 --> 00:14:20,020\nthink of art, but I do think we're doing art and creative things all the time in our job.\n\n196\n00:14:20,800 --> 00:14:21,860\nHaving said that,\n\n197\n00:14:23,200 --> 00:14:26,400\nagain, I don't think I can give advice of how\n\n198\n00:14:26,760 --> 00:14:27,740\nfor anyone\n\n199\n00:14:28,780 --> 00:14:34,780\nto get into art, because I feel like everybody has their own different stories and where they're coming from\n\n200\n00:14:36,820 --> 00:14:41,680\nand what they want to do with art. But I can share my story, which is that\n\n201\n00:14:43,420 --> 00:14:49,780\nI think I spent a really long time being like, oh, I'm not a good artist, so I obviously can't make a living off of that.\n\n202\n00:14:50,140 --> 00:14:51,520\nAnd what I realized,\n\n203\n00:14:52,120 --> 00:14:54,900\nwhat I was saying, is that I'm not a good drawer.\n\n204\n00:14:56,660 --> 00:15:03,280\nI'm not good at, or I'm not as good as people that make money\n\n205\n00:15:03,700 --> 00:15:05,400\ndoing illustrations and animations.\n\n206\n00:15:07,880 --> 00:15:08,380\nBut\n\n207\n00:15:08,900 --> 00:15:12,080\nwhat I do have is a very strong foundation\n\n208\n00:15:12,880 --> 00:15:18,220\nin technical skill. And that's why I chose to go to an art and technology program that like,\n\n209\n00:15:18,840 --> 00:15:20,240\nyou know, that acknowledges\n\n210\n00:15:20,660 --> 00:15:22,000\nmy technical background\n\n211\n00:15:23,040 --> 00:15:26,980\nand tries to apply that to the creative things I do.\n\n212\n00:15:28,580 --> 00:15:29,080\nAnd\n\n213\n00:15:29,440 --> 00:15:31,740\ninstead of just like a straight up fine arts\n\n214\n00:15:32,160 --> 00:15:40,340\nprogram. And so now the things I do is I'm not drawing, or at least my hand is not drawing, but I'm getting machines to draw for me, or\n\n215\n00:15:41,240 --> 00:15:42,240\nI'm getting motors\n\n216\n00:15:43,080 --> 00:15:48,000\nand like micro sensors or micro controllers to do things for me that\n\n217\n00:15:48,420 --> 00:15:54,300\ndoes have an artistic expression. And I've been thinking a lot about, like, what does art mean? And I\n\n218\n00:15:55,300 --> 00:15:57,080\nthink for me personally, it's\n\n219\n00:15:57,440 --> 00:16:02,540\nvery much about putting my perspective and my story and my opinions out there.\n\n220\n00:16:03,040 --> 00:16:03,540\nAnd\n\n221\n00:16:04,540 --> 00:16:11,860\nlike whatever medium I use does not matter as much as those stories. So this is a very long-winded way to say, like,\n\n222\n00:16:12,180 --> 00:16:14,560\nI think we're all artists in some way.\n\n223\n00:16:15,420 --> 00:16:20,140\nWe're just maybe not making capital A art in the capital A art world.\n\n224\n00:16:21,140 --> 00:16:25,120\nBut I guess if someone wants to transition into it as a career,\n\n225\n00:16:25,580 --> 00:16:27,460\nI think you're in a good place because\n\n226\n00:16:27,840 --> 00:16:29,280\nI've been learning that\n\n227\n00:16:29,660 --> 00:16:31,320\nart takes a lot of money\n\n228\n00:16:31,780 --> 00:16:33,300\nand does not pay you much.\n\n229\n00:16:33,700 --> 00:16:37,620\nBut you have to use a lot of money for it to make physical things\n\n230\n00:16:38,640 --> 00:16:40,100\nand invest in classes\n\n231\n00:16:40,400 --> 00:16:41,620\nand invest time\n\n232\n00:16:42,980 --> 00:16:48,060\nand then you probably won't have that much monetary return. So having\n\n233\n00:16:48,480 --> 00:16:50,820\nalmost everybody I know has a.\n\n234\n00:16:52,200 --> 00:16:58,940\nEverybody I know has a side gig, like every artist I know, practicing artists have a side gig, whether that's\n\n235\n00:16:59,340 --> 00:17:03,940\nbeing a teacher, a lot of them are professors or like they make,\n\n236\n00:17:05,599 --> 00:17:07,160\nthey substitute or they\n\n237\n00:17:08,000 --> 00:17:13,880\nsupplement their income in some other way. And I think that being an engineer and a web developer\n\n238\n00:17:14,380 --> 00:17:15,760\nis probably the\n\n239\n00:17:16,940 --> 00:17:20,359\nbest time to money ratio that you can have.\n\n240\n00:17:21,220 --> 00:17:23,900\nYeah, it is a really good time to money ratio.\n\n241\n00:17:24,240 --> 00:17:28,220\nThat's fair. Hopefully it stays that way. I don't know, the economy has been kind of funny.\n\n242\n00:17:28,780 --> 00:17:29,280\nYeah.\n\n243\n00:17:30,080 --> 00:17:31,040\nYeah, I actually\n\n244\n00:17:31,520 --> 00:17:36,940\nwanna branch off of this idea just a little bit, maybe in kind of an odd direction, but\n\n245\n00:17:38,260 --> 00:17:39,560\ndo you like,\n\n246\n00:17:40,440 --> 00:17:43,360\nI think that it's a shame that people have to supplement\n\n247\n00:17:44,380 --> 00:17:45,860\nwhat they enjoy doing,\n\n248\n00:17:46,500 --> 00:17:51,300\nright? Like, wouldn't it be nice if the world, like everybody could just do what they enjoy\n\n249\n00:17:51,900 --> 00:17:59,740\nto do. I feel like they would be better at their craft or whatever it is that they're doing. And it's just a shame that what people enjoy\n\n250\n00:18:00,060 --> 00:18:03,540\ndoesn't always equate very well to what they can make money doing.\n\n251\n00:18:04,280 --> 00:18:07,980\nThat Venn diagram doesn't like overlap very well for everything.\n\n252\n00:18:08,640 --> 00:18:09,840\nDo you think that\n\n253\n00:18:10,440 --> 00:18:12,680\nwe are in for a future where\n\n254\n00:18:13,080 --> 00:18:17,100\nthat's not going to be a problem with the advancements in technology and everything?\n\n255\n00:18:18,240 --> 00:18:20,560\nOh, what a juicy topic you've hit,\n\n256\n00:18:21,600 --> 00:18:22,400\nlike exactly.\n\n257\n00:18:23,520 --> 00:18:31,220\nSo I feel like there's 2 parts to that. The first part that you, to the question you just asked, and first part is like capitalism,\n\n258\n00:18:31,720 --> 00:18:32,940\nright? Capitalism\n\n259\n00:18:33,240 --> 00:18:33,740\nand\n\n260\n00:18:34,080 --> 00:18:38,880\nlike the obsession our society has with use and being useful\n\n261\n00:18:39,480 --> 00:18:46,600\nand about how, I think if the thing we love doing is useful, that's amazing, because that's now in alignment.\n\n262\n00:18:47,860 --> 00:18:48,580\nBut then\n\n263\n00:18:50,080 --> 00:19:00,260\nit took me a long time to admit to myself that the thing that I enjoy the most does not make me money because society does not find it useful. And what does it mean to be,\n\n264\n00:19:00,580 --> 00:19:04,860\nOh, I'm going on a rant here on my cell phone. No, you're not. Let's move it.\n\n265\n00:19:06,900 --> 00:19:10,820\nAnd it's very interesting to think about what society finds useful.\n\n266\n00:19:11,340 --> 00:19:15,960\nI mean, like, I think that tech does a lot of really helpful things,\n\n267\n00:19:16,780 --> 00:19:18,660\nbut tech also does a lot of.\n\n268\n00:19:20,020 --> 00:19:21,300\nUnnecessary things,\n\n269\n00:19:22,920 --> 00:19:28,480\nbut but there is because there is a direct connection between the code we write and\n\n270\n00:19:28,840 --> 00:19:29,980\nthe profit,\n\n271\n00:19:30,720 --> 00:19:31,220\nlike\n\n272\n00:19:31,620 --> 00:19:37,860\nbeing able to sell a piece of software for something is direct, like it's very close to the money.\n\n273\n00:19:38,600 --> 00:19:40,740\nAnd so I think we associate\n\n274\n00:19:41,480 --> 00:19:44,080\nuse with how quickly can we get money.\n\n275\n00:19:46,640 --> 00:19:50,500\nAnd also how quickly is it does it become useful in our lives?\n\n276\n00:19:51,220 --> 00:19:56,020\nAnd I think that art does not have such a direct tie. It's like very intangible\n\n277\n00:19:56,500 --> 00:19:58,320\nvalue, right? Like you,\n\n278\n00:19:58,620 --> 00:20:11,260\nI think there's people that see a piece of art and connect with it and they'll buy it because they connect with it. But then there are pieces of art that are social commentary that are like oftentimes very difficult social commentary\n\n279\n00:20:11,600 --> 00:20:15,140\nand people don't necessarily want to buy that. So like I think\n\n280\n00:20:15,660 --> 00:20:21,900\nI think like there's no direct use. There's like no straight line between art and like money.\n\n281\n00:20:23,140 --> 00:20:26,380\nAnd so I think that that's what makes it really hard.\n\n282\n00:20:28,360 --> 00:20:28,860\nAnd\n\n283\n00:20:29,760 --> 00:20:31,680\nthat's a rant with like no conclusion.\n\n284\n00:20:34,200 --> 00:20:35,260\nThat's just a\n\n285\n00:20:36,100 --> 00:20:41,780\nwhat we as a society have chosen to value versus not value and find use and not use in.\n\n286\n00:20:42,520 --> 00:20:49,980\nBut then there's a second part to that question that you had that was so interesting that I don't know the answer to what you said about technological\n\n287\n00:20:50,320 --> 00:20:50,820\nadvancements\n\n288\n00:20:51,680 --> 00:20:52,900\nand whether that\n\n289\n00:20:53,800 --> 00:20:57,620\nallows us to do more of what we would enjoy.\n\n290\n00:21:00,260 --> 00:21:01,340\nAnd I feel like\n\n291\n00:21:02,140 --> 00:21:04,140\nthat's a really difficult question\n\n292\n00:21:04,460 --> 00:21:04,960\nthat\n\n293\n00:21:05,660 --> 00:21:07,700\nI have some vague guesses.\n\n294\n00:21:08,000 --> 00:21:12,200\nAnd I would actually be very curious to hear what you think, Ken, about\n\n295\n00:21:12,560 --> 00:21:13,420\nall of that.\n\n296\n00:21:14,440 --> 00:21:16,220\nYeah, I think that\n\n297\n00:21:16,780 --> 00:21:19,060\nover the history of the world, we have\n\n298\n00:21:20,280 --> 00:21:24,860\nincreased in our amount of leisure time as a general populace, right?\n\n299\n00:21:25,520 --> 00:21:26,500\nSo before\n\n300\n00:21:27,040 --> 00:21:36,340\nthe advancements in agriculture, we were just hunting and gathering constantly. And if you like took a break for a day to just chill or go to Disneyland,\n\n301\n00:21:36,940 --> 00:21:39,220\nthen like you would starve. So\n\n302\n00:21:39,720 --> 00:21:48,060\nI think that this is just a tale as old as time that technology does give us more of what we want to be able to spend our time doing.\n\n303\n00:21:48,600 --> 00:21:51,720\nBut somehow we're still working 40 hours a week. And\n\n304\n00:21:52,280 --> 00:21:52,980\nI think\n\n305\n00:21:53,680 --> 00:21:55,620\nthat we are a little insatiable\n\n306\n00:21:56,320 --> 00:21:58,220\nfor how much we can accumulate\n\n307\n00:21:58,520 --> 00:22:00,560\nas far as wealth is concerned. And\n\n308\n00:22:01,280 --> 00:22:02,400\nso I\n\n309\n00:22:03,180 --> 00:22:14,240\ndo think that it is possible. We could get to a Star Trek-like future where you literally just do whatever you want. There is no money. It's just like, you know, if you want to search the galaxy and be part of this\n\n310\n00:22:14,600 --> 00:22:19,320\nStarfleet and everything, then like go for it. That'll be fun. But if you wanna just\n\n311\n00:22:20,020 --> 00:22:21,240\nhave a grape farm,\n\n312\n00:22:21,600 --> 00:22:25,140\nor a vineyard or whatever, then you can do that too. Like it's,\n\n313\n00:22:25,760 --> 00:22:27,760\nI do hope that the technological\n\n314\n00:22:28,080 --> 00:22:29,180\nadvancements with\n\n315\n00:22:29,600 --> 00:22:33,900\nAI and robots and all of that stuff could potentially get us to there.\n\n316\n00:22:34,600 --> 00:22:41,500\nBut I kind of feel like there are scarier directions that could go as well. And so I am cautiously,\n\n317\n00:22:42,800 --> 00:22:45,640\nI don't I'm somewhere between optimistic and pessimistic.\n\n318\n00:22:46,100 --> 00:22:48,080\nI'm like, right. I'm cautiously neutral.\n\n319\n00:22:50,380 --> 00:22:51,040\nI guess\n\n320\n00:22:52,300 --> 00:22:56,780\nI really, really appreciate that answer. I guess the question I would have is like\n\n321\n00:22:57,100 --> 00:23:03,360\noh what is the percentage of the population that gets to enjoy that I think that's always yeah\n\n322\n00:23:04,200 --> 00:23:10,380\nbecause I think that I you're absolutely right and I agree with you that technological advancements have\n\n323\n00:23:10,960 --> 00:23:11,460\ngiven\n\n324\n00:23:11,920 --> 00:23:12,840\nleisure time,\n\n325\n00:23:13,840 --> 00:23:17,140\nbut not at an equal distribution across the population.\n\n326\n00:23:18,660 --> 00:23:19,160\nAnd\n\n327\n00:23:21,200 --> 00:23:22,660\nlike going from,\n\n328\n00:23:23,140 --> 00:23:27,140\nyou said hunter-gatherer to agriculture, but then from agriculture to the industrial revolution,\n\n329\n00:23:28,060 --> 00:23:29,720\nand then from the industrial\n\n330\n00:23:30,060 --> 00:23:30,560\nto\n\n331\n00:23:31,020 --> 00:23:32,120\nthe computer age.\n\n332\n00:23:32,500 --> 00:23:34,240\nAnd all of those, I think\n\n333\n00:23:34,760 --> 00:23:38,660\nsome of us, and we definitely, I benefit from this,\n\n334\n00:23:39,400 --> 00:23:43,620\nthat I'm in a job where I could even remotely consider,\n\n335\n00:23:44,540 --> 00:23:45,460\nyou know, pursuing\n\n336\n00:23:46,580 --> 00:23:47,080\nart.\n\n337\n00:23:48,820 --> 00:23:49,740\nBut like,\n\n338\n00:23:52,160 --> 00:23:54,200\nBut at each of those revolutions,\n\n339\n00:23:55,080 --> 00:23:59,680\nthere's a whole subset of the population that never got to see that leisure because\n\n340\n00:24:00,120 --> 00:24:00,620\nThey\n\n341\n00:24:00,920 --> 00:24:02,940\nwere the ones working to enable\n\n342\n00:24:04,120 --> 00:24:06,100\nthat free time and that revolution.\n\n343\n00:24:07,720 --> 00:24:08,440\nAnd so\n\n344\n00:24:08,920 --> 00:24:09,620\nI guess\n\n345\n00:24:10,520 --> 00:24:14,120\nmy answer to build off of yours is,\n\n346\n00:24:15,340 --> 00:24:15,840\nI\n\n347\n00:24:16,160 --> 00:24:20,140\ndo think it will happen, and I think it's been happening.\n\n348\n00:24:21,000 --> 00:24:25,520\nAnd perhaps the answer is that if the first from hunter-gatherer\n\n349\n00:24:25,840 --> 00:24:37,180\nto agriculture allow for like this amount of population to have leisure and then agricultural to industrial maybe like a lot this much And then and then and then maybe it's all increasing.\n\n350\n00:24:37,800 --> 00:24:38,300\nMaybe.\n\n351\n00:24:38,940 --> 00:24:40,420\nI'm also very cynical.\n\n352\n00:24:46,920 --> 00:24:47,880\nSo That's the\n\n353\n00:24:48,540 --> 00:24:49,800\noptimistic side.\n\n354\n00:24:51,500 --> 00:24:56,140\nAnd I think the pessimistic side is that it could just exacerbate\n\n355\n00:24:56,580 --> 00:24:59,940\nthe wealth gap we have around the world already.\n\n356\n00:25:02,300 --> 00:25:03,740\nThat was not a fun answer.\n\n357\n00:25:04,540 --> 00:25:05,040\nNo,\n\n358\n00:25:05,460 --> 00:25:07,600\nI think it's very interesting. And\n\n359\n00:25:08,000 --> 00:25:13,940\nI definitely wasn't expecting our conversation to go this direction, but I'm glad that it did because I think it's pretty interesting\n\n360\n00:25:14,700 --> 00:25:15,480\nto consider.\n\n361\n00:25:16,800 --> 00:25:30,740\nMaybe to loop it back around to something that's more practical or applicable to people listening. What do you think people can do to make sure that they're a part of this, whatever revolution that we\n\n362\n00:25:31,340 --> 00:25:32,860\nwill be experiencing next.\n\n363\n00:25:33,620 --> 00:25:36,000\nOh, what a fascinating question.\n\n364\n00:25:37,440 --> 00:25:39,680\nAnd would you define for me\n\n365\n00:25:40,320 --> 00:25:43,020\nwhat being a part of the revolution\n\n366\n00:25:43,520 --> 00:25:44,840\nmeans to you?\n\n367\n00:25:45,260 --> 00:25:48,660\nYeah, that's a good question to throw back at me. So,\n\n368\n00:25:50,380 --> 00:25:51,100\nI think\n\n369\n00:25:52,900 --> 00:25:58,160\nthe fact is that each 1 of us individually has very limited power to make\n\n370\n00:25:58,660 --> 00:26:01,620\na very big impact on that wealth gap and\n\n371\n00:26:01,960 --> 00:26:02,460\nthings.\n\n372\n00:26:03,520 --> 00:26:07,080\nAnd we will have more power if we are on the\n\n373\n00:26:07,900 --> 00:26:13,540\nright side of that, right? If we are the ones who are able to accumulate the wealth and then\n\n374\n00:26:14,040 --> 00:26:15,560\ndo some good with that.\n\n375\n00:26:16,540 --> 00:26:17,620\nAnd so I guess\n\n376\n00:26:18,380 --> 00:26:18,880\nto\n\n377\n00:26:20,240 --> 00:26:22,100\nbe a part of that would be\n\n378\n00:26:22,460 --> 00:26:25,620\nto make sure that we are not left behind as\n\n379\n00:26:26,120 --> 00:26:27,740\nthe industry changes.\n\n380\n00:26:28,980 --> 00:26:29,660\nAnd then\n\n381\n00:26:30,480 --> 00:26:33,360\nto like find ways to use\n\n382\n00:26:34,120 --> 00:26:37,400\nthe wealth that we accumulate or the skills that we accumulate\n\n383\n00:26:38,400 --> 00:26:38,900\nto\n\n384\n00:26:39,660 --> 00:26:40,160\nhopefully\n\n385\n00:26:40,940 --> 00:26:42,900\nbring more people over to\n\n386\n00:26:43,240 --> 00:26:44,340\nthis side of\n\n387\n00:26:44,640 --> 00:26:46,100\nthe wealth gap, I guess.\n\n388\n00:26:46,800 --> 00:26:47,300\nYeah.\n\n389\n00:26:49,300 --> 00:26:51,920\nI was trying to buy time for my answer.\n\n390\n00:26:55,760 --> 00:26:57,780\nAnd I appreciate it what you said.\n\n391\n00:26:58,980 --> 00:27:03,980\nAnd again, I feel like it breaks down to 2 sides of like not being left behind technically\n\n392\n00:27:04,340 --> 00:27:07,620\nand also not being left behind ethically or morally.\n\n393\n00:27:08,440 --> 00:27:12,940\nWhich I think is very interesting is like what I got from the answer that you just gave.\n\n394\n00:27:13,500 --> 00:27:18,140\nAnd I certainly feel the like pressure of being left behind technically.\n\n395\n00:27:19,140 --> 00:27:23,660\nI think in my 20s, the pace at which our industry goes was really exciting.\n\n396\n00:27:25,440 --> 00:27:27,220\nAnd now that I'm not in my 20s,\n\n397\n00:27:27,800 --> 00:27:28,580\nI'm feeling\n\n398\n00:27:29,280 --> 00:27:29,780\ntired.\n\n399\n00:27:33,060 --> 00:27:33,920\nMore easily.\n\n400\n00:27:34,820 --> 00:27:37,860\nAnd I still find the pace really exciting, but\n\n401\n00:27:38,520 --> 00:27:42,180\nalso a little bit daunting. So I really do feel that like,\n\n402\n00:27:43,520 --> 00:27:45,560\nespecially as someone that, you know, like\n\n403\n00:27:46,080 --> 00:27:54,500\ntook a 2 year step back from the industry and back from coding and barely coded other than like Arduino, which you know,\n\n404\n00:27:55,080 --> 00:27:58,160\nno, right? That's that's coding. It's much more hardware.\n\n405\n00:27:58,500 --> 00:28:01,360\nLike it's much more like circuitry than it is.\n\n406\n00:28:02,860 --> 00:28:03,360\nThere's\n\n407\n00:28:03,920 --> 00:28:05,300\nlittle bits of code anyways.\n\n408\n00:28:06,660 --> 00:28:11,180\nSo taking a step back and then coming back in is both really exciting and daunting.\n\n409\n00:28:11,680 --> 00:28:18,140\nAnd I don't know if I have a really good answer for that of like, what does it mean to not get left behind\n\n410\n00:28:18,640 --> 00:28:19,140\ntechnically?\n\n411\n00:28:19,600 --> 00:28:21,800\nAnd I've been thinking a lot about like,\n\n412\n00:28:22,200 --> 00:28:25,620\nnow that I've been in this industry for more than decade,\n\n413\n00:28:27,180 --> 00:28:32,580\nI had to come to terms with the fact that the skill sets that I have gained in my 20s,\n\n414\n00:28:33,420 --> 00:28:40,360\nand that has sustained me financially via client projects is not necessarily the skill sets that will\n\n415\n00:28:41,000 --> 00:28:45,040\nlast me for the next, let's say, 3 decades that I choose to\n\n416\n00:28:45,480 --> 00:28:46,440\nhopefully work.\n\n417\n00:28:46,860 --> 00:28:49,460\nAnd so what are the skill sets that\n\n418\n00:28:50,460 --> 00:28:52,700\nmake sense for me to...\n\n419\n00:28:53,800 --> 00:28:59,940\nWhat are the new skill sets that make sense for me to gain and what are the skill sets that make sense for me to maintain\n\n420\n00:29:00,860 --> 00:29:02,420\nAnd what are the ones that\n\n421\n00:29:02,920 --> 00:29:03,980\nI can purge\n\n422\n00:29:04,400 --> 00:29:07,400\nbecause I only have so much brain space, presumably.\n\n423\n00:29:12,380 --> 00:29:13,540\nAnd or, you know,\n\n424\n00:29:14,280 --> 00:29:15,920\npurge Not voluntarily,\n\n425\n00:29:16,280 --> 00:29:17,660\nbut my brain involuntarily.\n\n426\n00:29:18,840 --> 00:29:20,460\nGarbage collection. Yeah.\n\n427\n00:29:22,100 --> 00:29:22,600\nAnd\n\n428\n00:29:23,080 --> 00:29:26,820\nI don't have a perfect answer for that. Other than that, I think it's\n\n429\n00:29:27,780 --> 00:29:29,700\nreally interesting as a thought exercise\n\n430\n00:29:30,040 --> 00:29:33,020\nbecause it also includes looking at where the\n\n431\n00:29:33,340 --> 00:29:39,220\nindustry is going. And certainly I do feel like a lot of our industry is,\n\n432\n00:29:39,640 --> 00:29:45,400\nand the world is very, or at least the Western affluent world, is very excited about AI.\n\n433\n00:29:46,060 --> 00:29:48,840\nLike, we've been excited about AI for the last,\n\n434\n00:29:49,540 --> 00:29:57,380\nhowever long we've, at least the last decade, I know. And now in the last year and a half, we've been ultra excited about AI.\n\n435\n00:29:59,540 --> 00:30:01,100\nAnd I do think\n\n436\n00:30:01,400 --> 00:30:03,340\nthat what I have seen\n\n437\n00:30:04,920 --> 00:30:05,420\nwith\n\n438\n00:30:05,780 --> 00:30:07,940\na lot of the newest technologies\n\n439\n00:30:08,640 --> 00:30:09,980\nare much more convincing\n\n440\n00:30:10,400 --> 00:30:14,640\nthan what I've seen in the past decade. And I do think it's something I need to enter\n\n441\n00:30:15,020 --> 00:30:15,520\nlike\n\n442\n00:30:16,020 --> 00:30:17,780\nand fold into my skillset.\n\n443\n00:30:18,580 --> 00:30:19,340\nI'm also\n\n444\n00:30:22,020 --> 00:30:25,680\ncynical about it. I also don't know if it's just a fad.\n\n445\n00:30:27,280 --> 00:30:29,860\nThis has also become a tangent to say,\n\n446\n00:30:32,720 --> 00:30:33,400\nI think\n\n447\n00:30:33,820 --> 00:30:36,320\nat the end of the day, we should just\n\n448\n00:30:36,660 --> 00:30:38,820\nkeep doing what we're good at.\n\n449\n00:30:39,300 --> 00:30:39,800\nLike,\n\n450\n00:30:40,260 --> 00:30:41,600\nI'm not going to switch\n\n451\n00:30:42,040 --> 00:30:43,940\nlike a 180 and become\n\n452\n00:30:44,280 --> 00:30:45,260\nlike an AI\n\n453\n00:30:46,100 --> 00:30:47,380\nand like machine learning\n\n454\n00:30:47,980 --> 00:30:48,920\nand LLM\n\n455\n00:30:49,320 --> 00:30:49,820\nspecialist.\n\n456\n00:30:50,660 --> 00:30:54,980\nI'm still gonna maintain what I used to do and then fold that in.\n\n457\n00:30:56,120 --> 00:30:57,680\nSo that's the technical side\n\n458\n00:30:58,120 --> 00:30:59,420\nand the ethical side.\n\n459\n00:31:00,180 --> 00:31:06,000\nWe're thinking about that a lot because what does it mean to give money? What does it mean to be charitable?\n\n460\n00:31:06,820 --> 00:31:07,320\nAnd\n\n461\n00:31:08,000 --> 00:31:09,160\nwhat is the actual\n\n462\n00:31:09,560 --> 00:31:11,880\nimpact of that? I don't know.\n\n463\n00:31:12,740 --> 00:31:13,240\nAnd\n\n464\n00:31:15,660 --> 00:31:16,160\nWhat,\n\n465\n00:31:17,980 --> 00:31:18,480\nlike,\n\n466\n00:31:19,900 --> 00:31:21,440\nis it about giving\n\n467\n00:31:22,660 --> 00:31:25,220\nmoney or is it about giving skill sets?\n\n468\n00:31:27,800 --> 00:31:30,460\nAnd is it much more about learning\n\n469\n00:31:30,900 --> 00:31:31,400\nand,\n\n470\n00:31:31,720 --> 00:31:33,780\nor sorry, is it much more about teaching\n\n471\n00:31:34,280 --> 00:31:34,780\nand\n\n472\n00:31:37,200 --> 00:31:39,060\nBringing more people in\n\n473\n00:31:39,480 --> 00:31:40,520\nto what we do.\n\n474\n00:31:42,540 --> 00:31:44,440\nThat's that's something that I\n\n475\n00:31:45,040 --> 00:31:50,460\nhave been thinking a lot about and I don't have a good conclusion, but I do feel like if there is\n\n476\n00:31:54,860 --> 00:32:03,440\na model for that, I do think that Sarah, like Sarah Drasner, I think she does an amazing job at, which is I think bringing people,\n\n477\n00:32:04,120 --> 00:32:04,860\njust like\n\n478\n00:32:05,540 --> 00:32:08,100\nshe just so casually gives out opportunities\n\n479\n00:32:08,900 --> 00:32:11,660\nto like people that might not ever have had opportunities.\n\n480\n00:32:12,620 --> 00:32:13,540\nLike for me,\n\n481\n00:32:14,220 --> 00:32:21,360\nlike the reason why we got to meet in person, the reason why I even got to give a talk at React Rally,\n\n482\n00:32:22,580 --> 00:32:23,080\nwhich\n\n483\n00:32:23,500 --> 00:32:27,260\nwas the talk that got me the opportunity to give more talks,\n\n484\n00:32:27,700 --> 00:32:30,860\nwas because Sarah just casually recommended me\n\n485\n00:32:31,320 --> 00:32:31,820\nto\n\n486\n00:32:32,260 --> 00:32:33,000\nthe team.\n\n487\n00:32:36,280 --> 00:32:37,180\nShe is great.\n\n488\n00:32:37,740 --> 00:32:38,800\nYeah, she's\n\n489\n00:32:39,400 --> 00:32:44,080\namazing. And I think that that's where I'll end that really long rant.\n\n490\n00:32:45,720 --> 00:32:58,540\nI'm sorry I don't give you direct answers. No, no, this is great. It actually, this is what, see, we can talk about like, what's 2 plus 2? And you know, it has a very definitive answer, but I think that these types of conversations\n\n491\n00:32:59,180 --> 00:33:03,100\nare much more interesting because they make you think. And I like what you said about\n\n492\n00:33:03,420 --> 00:33:04,860\nthe 2 parts of this.\n\n493\n00:33:05,660 --> 00:33:16,200\nAnd 1 thing I wanted to add to the first part of like your skill sets and everything is, I'm glad that you said you're not just gonna pivot totally and go, I'm gonna be an AI developer now.\n\n494\n00:33:16,780 --> 00:33:19,620\nI saw a lot of people make that mistake with Web 3.\n\n495\n00:33:20,080 --> 00:33:24,120\nThat same mistake has been made in other technologies in the past as well.\n\n496\n00:33:24,660 --> 00:33:25,860\nAnd so I think\n\n497\n00:33:27,040 --> 00:33:28,400\nfrom that angle,\n\n498\n00:33:29,160 --> 00:33:30,940\nit's better to try and incorporate\n\n499\n00:33:31,560 --> 00:33:37,620\nthose things into your existing skill set than to drop your existing skill set and jump over.\n\n500\n00:33:39,140 --> 00:33:41,460\nThat's not always the case. I'm sure\n\n501\n00:33:41,980 --> 00:33:46,740\nwhen Flash was killed by Apple, it was probably a good idea to jump off of flash at that point.\n\n502\n00:33:48,480 --> 00:33:53,000\nBut I think like, it's less about, you should be less about technology,\n\n503\n00:33:53,300 --> 00:33:55,740\nspecific technologies and a little bit more about\n\n504\n00:33:56,780 --> 00:33:59,620\nthe use cases that those technologies solve, right?\n\n505\n00:34:01,500 --> 00:34:10,340\nIntegrate, like find ways that you can integrate the new thing into those use cases that you're solving. Think more about the use cases than you do about the technologies and you'll be fine.\n\n506\n00:34:11,120 --> 00:34:24,500\nSo yeah, sorry, go ahead. Oh no, no, no, I was gonna say I love that and I 100% agree with that, which is that I've always found all those like fights about React versus Angular versus Vue versus any other new\n\n507\n00:34:24,960 --> 00:34:25,460\nframework,\n\n508\n00:34:25,760 --> 00:34:29,360\nthose fights I found always very silly. I don't know who I'm\n\n509\n00:34:29,840 --> 00:34:31,659\nshading by saying that, but\n\n510\n00:34:33,060 --> 00:34:39,520\nI because to me all of these framework, all of those frameworks have always just been another tool in our toolbox.\n\n511\n00:34:39,880 --> 00:34:46,260\nAnd it's like you said, it's just how we try, how we choose to use those tools to do what we would like.\n\n512\n00:34:46,820 --> 00:34:50,040\nAnd for me, how that's kind of changed a little bit since I've\n\n513\n00:34:50,739 --> 00:34:53,820\npivoted more into art is that for me now,\n\n514\n00:34:54,239 --> 00:35:04,300\nif making art is about telling a story, then it just becomes what is the right medium for that story? Is it software? Is it hardware? Is it Vue? Is it React? Is it actually,\n\n515\n00:35:04,640 --> 00:35:05,260\nyou know,\n\n516\n00:35:05,600 --> 00:35:06,500\ndifferent sensors?\n\n517\n00:35:07,280 --> 00:35:11,780\nAnd so for me, I guess it's been much more about like just collecting all the tools.\n\n518\n00:35:12,100 --> 00:35:12,780\nAnd like,\n\n519\n00:35:13,140 --> 00:35:30,320\nI love being able to go deep on a few tools, but then having the breadth of tools and breadth of knowledge has been really amazing. And so I think AI is interesting because it's a new tool. And I think that it's a tool worth investing time in, but it's only 1 tool as of right now in our toolboxes.\n\n520\n00:35:31,740 --> 00:35:33,180\nYes, yeah, bravo.\n\n521\n00:35:33,520 --> 00:35:35,160\nI completely agree. Thank you.\n\n522\n00:35:35,920 --> 00:35:41,860\nSo the second thing that you talked about being the ethical side, I'm so glad that you brought that up too. So\n\n523\n00:35:43,420 --> 00:35:44,080\nI think\n\n524\n00:35:45,300 --> 00:35:47,580\nWhen we talk about like what is\n\n525\n00:35:48,700 --> 00:35:49,540\nYou know closing\n\n526\n00:35:50,260 --> 00:35:52,620\nthe wealth gap ethically and everything.\n\n527\n00:35:53,000 --> 00:36:03,280\nWhat does that mean? Is it just giving money? I mean, there's that phrase, you know You can feed a man a fish or like give a man a fish you feed him for a day Whatever if they're starving\n\n528\n00:36:03,600 --> 00:36:11,900\nthen they probably need the fish and they need the fishing lessons. So like, I think that there is something to be said for a combination of\n\n529\n00:36:12,500 --> 00:36:13,680\nthose approaches.\n\n530\n00:36:14,180 --> 00:36:16,260\nAnd so I do think that\n\n531\n00:36:17,800 --> 00:36:18,300\ndonating\n\n532\n00:36:19,060 --> 00:36:24,180\nmoney and resources is a really worthwhile thing and people should be doing that if they're not,\n\n533\n00:36:26,240 --> 00:36:27,880\nif they have the means to do so.\n\n534\n00:36:29,020 --> 00:36:30,400\nAnd then as far as\n\n535\n00:36:31,620 --> 00:36:41,260\nteaching, I do really, I mean, obviously this is very self-serving because I'm a teacher and that's what I do, but there's a reason that I do it and I think it's because it's\n\n536\n00:36:41,600 --> 00:36:42,100\na\n\n537\n00:36:43,260 --> 00:36:45,040\nreally important thing for\n\n538\n00:36:46,560 --> 00:36:47,780\nhelping other people\n\n539\n00:36:48,460 --> 00:36:50,280\nto jump out of their,\n\n540\n00:36:50,640 --> 00:36:52,280\nwhatever circumstances they're in.\n\n541\n00:36:52,660 --> 00:36:55,820\nSo you talked about Sarah Drasner, love Sarah, she's fantastic.\n\n542\n00:36:56,200 --> 00:36:59,560\nAnd what you said was that she gives people opportunities,\n\n543\n00:37:00,140 --> 00:37:02,120\nbut she doesn't just give them,\n\n544\n00:37:02,720 --> 00:37:04,540\nthe results of those opportunities.\n\n545\n00:37:04,840 --> 00:37:11,400\nLike you did have to submit your talk and get approved. And you had to give your talk. And it had to be good.\n\n546\n00:37:11,980 --> 00:37:13,580\nSo I think that\n\n547\n00:37:14,180 --> 00:37:17,060\ngiving people The opportunities is really important.\n\n548\n00:37:18,040 --> 00:37:18,740\nAnd then\n\n549\n00:37:19,460 --> 00:37:20,760\n1 of the things that\n\n550\n00:37:21,340 --> 00:37:24,420\nI am just, I need to say thank you to the people watching because\n\n551\n00:37:24,720 --> 00:37:28,760\nyou have access to this material because you paid for a license to Epic Web.\n\n552\n00:37:29,180 --> 00:37:35,420\nAnd so much of Epic Web is free. There's just an enormous amount of the material there that is free.\n\n553\n00:37:35,980 --> 00:37:55,160\nAnd that's because this is part of my mission to help make the world a better place to quality software. And not everybody who can do that has the money to buy this. And so those of you who are watching this now who got a license to Epic Web, you make it possible for me to do that. So thank you so much for that.\n\n554\n00:37:56,200 --> 00:37:59,780\nSo yeah, I completely agree. We should look for opportunities to\n\n555\n00:38:00,380 --> 00:38:03,760\nboth give the fish and teach how to fish. And I think\n\n556\n00:38:04,340 --> 00:38:06,660\nthat is a way that we can help\n\n557\n00:38:08,640 --> 00:38:10,220\nangle us in the right direction\n\n558\n00:38:10,760 --> 00:38:11,620\nin the future.\n\n559\n00:38:12,720 --> 00:38:15,900\nSo, well, Shirley, this has just been a wonderful conversation.\n\n560\n00:38:16,220 --> 00:38:21,500\nWe are getting down to the last bit of it. This totally didn't go the direction I was expecting, but I'm super glad\n\n561\n00:38:21,940 --> 00:38:27,600\nthat it went the direct, this is why I actually do these conversations this way, because I think it ends up being better\n\n562\n00:38:28,340 --> 00:38:29,280\nanyway. So\n\n563\n00:38:30,060 --> 00:38:33,740\nWas there anything that you wanted to talk about that we didn't get to discuss?\n\n564\n00:38:34,120 --> 00:38:42,900\nOh, I was just about to say, I love that we spent 40 minutes talking and we didn't cover anything about my work. And I and I mean that genuinely\n\n565\n00:38:44,060 --> 00:38:56,820\nbecause I think the best kinds of friendships is where we are aware of each other's work and what we do, but we have much more to go off of than just our work and we can talk about other things too.\n\n566\n00:38:57,180 --> 00:38:58,780\nSo I really, really appreciated\n\n567\n00:38:59,220 --> 00:38:59,720\nthis\n\n568\n00:39:00,460 --> 00:39:03,020\nopportunity to just talk to you and hang.\n\n569\n00:39:03,940 --> 00:39:05,580\nAnd I don't know\n\n570\n00:39:08,360 --> 00:39:10,460\nif you're now talking to\n\n571\n00:39:11,000 --> 00:39:12,780\nEpic web dev\n\n572\n00:39:13,260 --> 00:39:16,140\nviewers, if you're interested in my work,\n\n573\n00:39:16,500 --> 00:39:18,300\nI guess you can find it at Shirleywood.studio\n\n574\n00:39:18,900 --> 00:39:21,800\nbecause I literally did not say anything about it.\n\n575\n00:39:22,360 --> 00:39:24,260\nYes, I was just going to say,\n\n576\n00:39:26,680 --> 00:39:30,940\nyou and I know each other well and I know your work, but the people watching probably don't.\n\n577\n00:39:31,460 --> 00:39:35,780\nWhy don't you give us like just 5 minutes or however long\n\n578\n00:39:36,180 --> 00:39:41,780\nabout like what your work is so that folks who are interested can go look into it further.\n\n579\n00:39:42,180 --> 00:39:48,940\nI actually was really glad that we didn't have to talk about it because I don't know how to describe my work thesis. I guess if I was to try,\n\n580\n00:39:49,440 --> 00:39:51,260\nit's not I started my work.\n\n581\n00:39:53,860 --> 00:39:56,540\nOK, so I started with data visualizations\n\n582\n00:39:56,920 --> 00:39:57,760\nfor the Web.\n\n583\n00:39:58,280 --> 00:39:59,020\nIf you've\n\n584\n00:39:59,340 --> 00:40:00,640\never seen a visualization\n\n585\n00:40:01,060 --> 00:40:01,560\nof\n\n586\n00:40:02,100 --> 00:40:03,180\nHamilton, the musical,\n\n587\n00:40:03,960 --> 00:40:06,360\nThat 1 is probably the best example\n\n588\n00:40:07,480 --> 00:40:10,020\nof web-based data visualizations I've done.\n\n589\n00:40:13,320 --> 00:40:14,000\nAnd so\n\n590\n00:40:14,600 --> 00:40:16,420\nI like to describe it as\n\n591\n00:40:17,720 --> 00:40:18,220\nvisualizations\n\n592\n00:40:19,400 --> 00:40:21,700\nthat push the boundaries of the web\n\n593\n00:40:22,740 --> 00:40:23,800\nis kind of\n\n594\n00:40:24,240 --> 00:40:28,480\nthe things that I enjoy doing. And since I've gone back to grad school,\n\n595\n00:40:28,980 --> 00:40:30,440\nmy focus has been\n\n596\n00:40:30,900 --> 00:40:34,020\ntrying to figure out how to bring those data\n\n597\n00:40:34,460 --> 00:40:42,280\nstories out of the screen and into the physical world so that you can kind of like work, walk through them and experience them\n\n598\n00:40:42,700 --> 00:40:45,800\nwith your whole body instead of like just\n\n599\n00:40:46,160 --> 00:40:48,480\nour eyes and our thumbs.\n\n600\n00:40:49,540 --> 00:40:50,340\nAnd so\n\n601\n00:40:50,660 --> 00:40:52,900\nI actually don't know how to describe those.\n\n602\n00:40:55,120 --> 00:40:56,140\nSo here's what\n\n603\n00:40:56,600 --> 00:40:58,520\nI would suggest. I'm sure you've got\n\n604\n00:40:58,840 --> 00:40:59,700\nsome like\n\n605\n00:41:00,360 --> 00:41:08,520\nvideos or pictures and things on your site. But you gave some really awesome videos in that talk, in the React Rally talk.\n\n606\n00:41:09,140 --> 00:41:10,400\nSo, and it's otherwise\n\n607\n00:41:10,740 --> 00:41:11,880\na very awesome\n\n608\n00:41:12,180 --> 00:41:16,080\nand inspiring talk as well. So I just point people over there for sure.\n\n609\n00:41:16,460 --> 00:41:17,140\nThank you.\n\n610\n00:41:17,800 --> 00:41:25,060\nYou just watched 45 minutes of me and Kent talking and now you can watch 45 minutes of me just me talking.\n\n611\n00:41:27,680 --> 00:41:28,760\nSeriously people,\n\n612\n00:41:30,060 --> 00:41:41,620\nLet me just be a little bit more clear. Go watch Shirley's talk, it will change you. It is very, very good. So I'll make sure that we get a link to that. If it's not online yet, I'll get it on there\n\n613\n00:41:42,440 --> 00:41:43,520\nonce we have that.\n\n614\n00:41:44,020 --> 00:41:45,360\nSo. Thank you so much.\n\n615\n00:41:45,820 --> 00:41:51,260\nYeah, thank you Shirley. So what is a way for people, like what is something that,\n\n616\n00:41:52,900 --> 00:41:57,760\nlike you're consulting right now, right? So like is there something that people might need your\n\n617\n00:41:58,100 --> 00:41:59,560\nconsulting services for?\n\n618\n00:42:00,060 --> 00:42:01,540\nOh, thank you so much.\n\n619\n00:42:02,020 --> 00:42:02,520\nSo\n\n620\n00:42:06,240 --> 00:42:08,000\nI love doing client work.\n\n621\n00:42:08,560 --> 00:42:09,300\nAnd so\n\n622\n00:42:09,720 --> 00:42:10,220\nessentially\n\n623\n00:42:10,840 --> 00:42:14,700\nany of the things that you see in my portfolio that you might see in\n\n624\n00:42:15,940 --> 00:42:27,140\nmy talk, if you want something along those lines, if you have a huge data set and you don't know how to tell the story, or if you have a small data set and you don't know how to reach the right audience,\n\n625\n00:42:27,500 --> 00:42:30,520\nthose are the kinds of things I love working with you on.\n\n626\n00:42:31,220 --> 00:42:34,340\nIf you have engineering problems around visualizations,\n\n627\n00:42:34,940 --> 00:42:39,640\nD3, how to incorporate that with React or Vue or any of those frameworks.\n\n628\n00:42:40,120 --> 00:42:41,620\nAlso, software architecture,\n\n629\n00:42:42,100 --> 00:42:43,980\nalso the kind of things that I love\n\n630\n00:42:44,480 --> 00:42:45,900\nthinking about. So\n\n631\n00:42:46,240 --> 00:42:48,040\nfeel free to contact me,\n\n632\n00:42:48,820 --> 00:42:52,320\nand thank you so much for giving me this platform, Ken.\n\n633\n00:42:53,420 --> 00:42:53,920\nAbsolutely,\n\n634\n00:42:54,620 --> 00:43:01,580\nthank you so much Shirley. This has just been so lovely. I'm gonna stop the recording here in a second and then I'm gonna just chat with you some more.\n\n635\n00:43:02,320 --> 00:43:03,180\nThis is fun.\n\n636\n00:43:03,560 --> 00:43:07,390\nThanks everybody for tuning in and we'll see you later. Thank you.",
            "text": "[00:00:00] Speaker 0:\nHey, everybody. I am so excited to be joined by my friend Shirley Wu. Say hi, Shirley. \n\n[00:00:05] Speaker 1:\nHi. Hi, everyone. Hi, Kent. \n\n[00:00:08] Speaker 0:\nHi. All right. So Shirley and I go back pretty far, actually. I think we first met on Twitter, as where I meet most of my friends these days, or X as it is now called, but it was Twitter back then. And then we met in person. I wanna say, I'm pretty sure I've got a picture of us \n\n[00:00:29] at Fluent Conf, like 2017 or something. \n\n[00:00:32] Speaker 1:\nI think React Rally 2017. I've never been to Fluent Conf. \n\n[00:00:37] Speaker 0:\nOh, okay, so it wasn't that 1. Yeah, so, but it was around that time. And actually, I'm finding with lots of these conversations I'm having with people that I met them first on Twitter and then met them first in person at a conference. And so there's something there, I guess. \n\n[00:00:55] Speaker 1:\nYeah, well, I actually don't remember the Twitter part, but I remember very well the React Rally part and you being 1 of the nicest people I've ever met. So thank you so much for having me here. \n\n[00:01:05] Speaker 0:\nOh, well, thank you. Yeah, you know, I was probably 1 of your adoring fans on Twitter that you didn't know anything about. And, but I'm so glad that we've developed this friendship now. And it's just been a total pleasure to know you and get to know you. I'd like the audience to get to know you a little bit as well. Could you introduce \n\n[00:01:25] yourself to us? \n\n[00:01:26] Speaker 1:\nYeah, so hello again, My name is Shirley Wu. I am a, I've come up with a new intro for myself. I am a Chinese American artist, software engineer, data visualization designer. And then I think the rest is like, I'm trying \n\n[00:01:46] to remember this bio I made for myself. Keynote speaker and published author. I think we're the last 2. Yeah. Awesome. \n\n[00:01:57] Speaker 0:\nThat's great. Yeah. List all of those accolades. That's super cool. Yeah. You have accomplished a lot of really cool things and I want to dive into some of those things. So, let's start a little bit further back from where you're at now. So, how did you get into web dev? \n\n[00:02:17] Speaker 1:\nYeah, So I actually, I feel like maybe I've told you this before, Ket, but I actually studied business in college. And about my junior year, I was starting to realize that my personality is not built for finance \n\n[00:02:38] and investment banking. And so I started taking computer science classes on the side for fun. And I really clicked with CS. And by the end of my junior year, I was like, by the summer, actually, I was like, I think I want to try and get a software \n\n[00:02:58] job. And so I dedicated all my senior year to CS classes and I just so happened to get a, I mean, I'm making it sound easy, but it was a lot of work. But by the end of my senior year, I was really \n\n[00:03:18] fortunate and I was able to get 2 offers for front-end engineering jobs. And at the time that was because I had been doing art since my childhood. I have been part of a graphic design club in college, and I definitely did not have the experience for a \n\n[00:03:39] back-end engineer. And so the 2 companies that took an interest in me was like, you're going to be a front-end engineer. And I was like, cool, I'm just desperate for a job. I'm 22, and I'm about to graduate. But that actually turned out to be an amazing coincidence, like when \n\n[00:03:59] universes just kind of align correctly. And I ended up at a big data company as a front-end engineer at a time when D3, the JavaScript library, was just in its infancy. And my manager asked me if I would be interested \n\n[00:04:19] in exploring that. And it just so happened to be like this perfect combination of everything I love, which is math and especially geometry, code and art and design. And so that's how I got into WebDem. \n\n[00:04:38] Speaker 0:\nWell, that is such a fun story. I love the really unique stories, not to like diminish people's stories that are very typical. Like I went to college, I got a CS degree, you know. But like, I really find it inspiring when people decide, you know what, what I'm doing is not working and I'm gonna make this leap \n\n[00:04:59] over here. And I'm so glad that it worked out. Thank you. Because you have made a really positive impact on the ecosystem, especially with regard to data visualization. So you gave a talk recently at the most recent React Rally that I will \n\n[00:05:19] never forget. It was really, I wonder, I don't know if the recordings are up yet. I'm gonna go find that later, but super, super good talk. So if you're watching this now, like pause it and go look up Shirley's talk at React Rally 2023. It was very good. But in that talk, you talk about how you are, you \n\n[00:05:39] have always really been interested in art. And when was it that you really discovered that you could combine art with computer science? \n\n[00:05:48] Speaker 1:\nYeah, that's such a great question. And thank you so much for being in the audience for that and being so supportive of that. I'm a huge fan of yours, Kent. And so the feeling is mutual about how amazing you are. And also just all of the positive vibes you gave me afterwards, because that was a \n\n[00:06:08] hard talk to give. \n\n[00:06:10] Speaker 0:\nOh, yeah. \n\n[00:06:11] Speaker 1:\nAnd I'm so happy it was received the way it was. But I have been wanting to be an artist since I was 4 years old. And I gave up on that dream sometime in my teenage years, probably my most cynical years. And then I think \n\n[00:06:31] that the way I fell into data visualization was almost very natural. I think maybe my manager at this time saw something in me that was like I was bursting and itching to do something creative. He knew about my design background, not a formal design background, but like the informal club things. And so he kind of just like handed me the \n\n[00:06:51] opportunity and I didn't even recognize it at the time about how perfect of a fit it was. And then as the years went on, where I eventually quit my full-time job and then I went off to work on my own. And as I was working on my own, the reason why I was interested in that was because I wanted to see all the different kinds of projects that were out \n\n[00:07:11] there. And as I got to go more and more into data visualization, the first thing I realized is that data visualization is the closest thing. I like to say this is the closest thing to art that I can still get tech companies to pay me for. \n\n[00:07:31] And then once I realized that, I also, I think as part of realizing that I got the opportunity to work with an art museum on their data. And it was the first time that I had been given like completely creative free reign of their like, do whatever visual form you want to so I got the opportunity to do data art \n\n[00:07:53] and that that was the moment in which I was like I think this was 2018 and that was a moment in which I was like I just re-remembered my four-year-old self's dream, and I want to make this a reality now. And so I think it was a very slow years and years, \n\n[00:08:14] years of denying that also, Years of being like, there's no financial stability in art. And that's not a smart decision. And years of denying and then eventually like slowly coming back around. And then in 2021, \n\n[00:08:34] I went and did a grad program for art and technology. And I just graduated. Here I am. \n\n[00:08:42] Speaker 0:\nYeah. Congratulations or congratulations. \n\n[00:08:47] Speaker 1:\nI appreciate that. \n\n[00:08:50] Speaker 0:\nI'm definitely that. But that's awesome. I love hearing that story. Now there very well could be people who are listening who are like, oh my gosh, I used to want to be an artist, and then I found out that you can't make any money doing that, so I had to pivot. So what advice would you give this person, \n\n[00:09:11] or even maybe the person who thought they might be into art and never really, you know, tried, what advice would you give them on like skills they can develop or things that they can try to kind of explore that area of themselves? \n\n[00:09:25] Speaker 1:\nWell, first, I want to say that I don't feel qualified at all to give this advice. The proportion of which I'm getting paid for art is like near 0. And my living is still based off of my software engineering background. \n\n[00:09:45] So having said that, I think everybody should take whatever I say with huge grains of salt But I do think well actually flip this around Kent which is like have you Because you're you're you're a very creative person You have to be very creative to make all of these \n\n[00:10:05] different courses, to put together the talks that you do. Have you ever wanted to do more artistic things? I don't think we've ever talked about this. \n\n[00:10:17] Speaker 0:\nNo, no. So, when I was a kid, I would draw pictures for my mom and all of that stuff, like everybody. And I found out pretty quickly that I'm not a very good artist, At least in drawing and stuff. Like I just can't get my hands to do what \n\n[00:10:37] I want them to in that context. And so, there was a short time when I was actually into anime. I say, everybody calls it anime. That is not how it's said, it's anime. But anyway, so I was into Naruto was actually my anime of choice \n\n[00:10:58] for a little while. And so I would draw characters from Naruto. And I really enjoyed that, and I actually feel like my art wasn't terribly bad, but eventually I just kind of, I got into video editing, and then I started doing, you know, computer art sort of in a video medium. And so yeah, as far \n\n[00:11:18] as like my modern creativity, I would say that I shy away from anything that resembles making things look good, like from a design perspective and stuff, just because it requires a lot of time for me to figure out how to make something look good. Like I can \n\n[00:11:38] look at something and I know that doesn't look good, but I don't know how to fix it. So yeah, that's been a struggle for me. \n\n[00:11:46] Speaker 1:\nSo I actually really, really relate to that. And it's, it's really interesting to hear people that are clearly very creative tell themselves that they're not creative just because we're not doing illustrations. Like I feel like when we think of art, I have this kind of, I'm hard \n\n[00:12:06] on myself because in high school, and I also really appreciate how you brought up your childhood because I feel like We very rarely talk about all the things that we've done as children that really kind of, you know, contribute to who we are today. And I have a very similar story to you in \n\n[00:12:26] that, like, I loved drawing as a kid. Then I found Photoshop. Then I found, then I was taught Dreamweaver, and then that's actually how I got to designing websites in my high school years, and that was the creative, my creative outlet. And I think that I took art all through my high school years, I got pretty decent at \n\n[00:12:46] still life, but I feel like I have a Lot of what you described which is that I would imagine something in my head and that's not what comes out through my hand Yeah, and then and then somehow I spent like More than a \n\n[00:13:06] decade beating myself up for the fact that I don't think I draw well And and I do really think that it's because when a lot of things us think about art we think about fine art and we think about paintings and we think about like Renaissance masters and being able to like, you know, render everything \n\n[00:13:28] photorealistically or Like even just being able to have your own illustration style. Or even like you said about all the things about design. And I do think that if that is, you know, if someone, if that is the art that someone wants to pursue, that's \n\n[00:13:48] absolutely amazing. But I also do think that we need to give ourselves credit for the fact that as front-end engineers, we're implicitly creative in the jobs that we do. We have to think about design decisions. Even if we're not designers, we have to think about all of that. So I want to kind of put that out \n\n[00:14:08] there first that, you know, I think we're doing art, not, not in the way that we might think of art, but I do think we're doing art and creative things all the time in our job. Having said that, again, I don't think I can give advice of how for anyone to \n\n[00:14:29] get into art, because I feel like everybody has their own different stories and where they're coming from and what they want to do with art. But I can share my story, which is that I think I spent a really long time being like, oh, I'm not a good artist, so I obviously can't make a living off \n\n[00:14:49] of that. And what I realized, what I was saying, is that I'm not a good drawer. I'm not good at, or I'm not as good as people that make money doing illustrations and animations. But what \n\n[00:15:09] I do have is a very strong foundation in technical skill. And that's why I chose to go to an art and technology program that like, you know, that acknowledges my technical background and tries to apply that to the creative things I do. And \n\n[00:15:29] instead of just like a straight up fine arts program. And so now the things I do is I'm not drawing, or at least my hand is not drawing, but I'm getting machines to draw for me, or I'm getting motors and like micro sensors or micro controllers to do things for me that does have an artistic \n\n[00:15:49] expression. And I've been thinking a lot about, like, what does art mean? And I think for me personally, it's very much about putting my perspective and my story and my opinions out there. And like whatever medium I use does not matter as much as those stories. So this is \n\n[00:16:09] a very long-winded way to say, like, I think we're all artists in some way. We're just maybe not making capital A art in the capital A art world. But I guess if someone wants to transition into it as a career, I think you're in a good place because I've been learning that \n\n[00:16:29] art takes a lot of money and does not pay you much. But you have to use a lot of money for it to make physical things and invest in classes and invest time and then you probably won't have that much monetary return. So having almost everybody I know \n\n[00:16:50] has a. Everybody I know has a side gig, like every artist I know, practicing artists have a side gig, whether that's being a teacher, a lot of them are professors or like they make, they substitute or they supplement their income in some other way. \n\n[00:17:10] And I think that being an engineer and a web developer is probably the best time to money ratio that you can have. \n\n[00:17:21] Speaker 0:\nYeah, it is a really good time to money ratio. That's fair. Hopefully it stays that way. I don't know, the economy has been kind of funny. Yeah. Yeah, I actually wanna branch off of this idea just a little bit, maybe in kind of an odd direction, but do you like, I think that it's \n\n[00:17:41] a shame that people have to supplement what they enjoy doing, right? Like, wouldn't it be nice if the world, like everybody could just do what they enjoy to do. I feel like they would be better at their craft or whatever it is that they're doing. And it's just a shame that what people enjoy doesn't always equate very \n\n[00:18:01] well to what they can make money doing. That Venn diagram doesn't like overlap very well for everything. Do you think that we are in for a future where that's not going to be a problem with the advancements in technology and everything? \n\n[00:18:18] Speaker 1:\nOh, what a juicy topic you've hit, like exactly. So I feel like there's 2 parts to that. The first part that you, to the question you just asked, and first part is like capitalism, right? Capitalism and like the obsession our society has with use and being \n\n[00:18:38] useful and about how, I think if the thing we love doing is useful, that's amazing, because that's now in alignment. But then it took me a long time to admit to myself that the thing that I enjoy the most does not make me money because society does not find it useful. \n\n[00:18:58] And what does it mean to be, Oh, I'm going on a rant here on my cell phone. No, \n\n[00:19:03] Speaker 0:\nyou're not. Let's move it. \n\n[00:19:06] Speaker 1:\nAnd it's very interesting to think about what society finds useful. I mean, like, I think that tech does a lot of really helpful things, but tech also does a lot of. Unnecessary things, but but there is because there is a direct connection between the \n\n[00:19:27] code we write and the profit, like being able to sell a piece of software for something is direct, like it's very close to the money. And so I think we associate use with how quickly can we get money. And also \n\n[00:19:47] how quickly is it does it become useful in our lives? And I think that art does not have such a direct tie. It's like very intangible value, right? Like you, I think there's people that see a piece of art and connect with it and they'll buy it because they connect with it. But then there are pieces of art that are social commentary \n\n[00:20:07] that are like oftentimes very difficult social commentary and people don't necessarily want to buy that. So like I think I think like there's no direct use. There's like no straight line between art and like money. And so I think that that's what makes it really hard. \n\n[00:20:28] And that's a rant with like no conclusion. That's just a what we as a society have chosen to value versus not value and find use and not use in. But then there's a second part to that question that you had that was so interesting that I don't know the answer to \n\n[00:20:48] what you said about technological advancements and whether that allows us to do more of what we would enjoy. And I feel like that's a really difficult question that I have some vague guesses. And I would \n\n[00:21:08] actually be very curious to hear what you think, Ken, about all of that. \n\n[00:21:14] Speaker 0:\nYeah, I think that over the history of the world, we have increased in our amount of leisure time as a general populace, right? So before the advancements in agriculture, we were just hunting and gathering constantly. And if you like took a break for a day to \n\n[00:21:34] just chill or go to Disneyland, then like you would starve. So I think that this is just a tale as old as time that technology does give us more of what we want to be able to spend our time doing. But somehow we're still working 40 hours a week. And I think that we are \n\n[00:21:54] a little insatiable for how much we can accumulate as far as wealth is concerned. And so I do think that it is possible. We could get to a Star Trek-like future where you literally just do whatever you want. There is no money. It's just like, you know, if you want to search the galaxy and be part of this \n\n[00:22:14] Starfleet and everything, then like go for it. That'll be fun. But if you wanna just have a grape farm, or a vineyard or whatever, then you can do that too. Like it's, I do hope that the technological advancements with AI and robots and all of that stuff could potentially get us to there. \n\n[00:22:34] But I kind of feel like there are scarier directions that could go as well. And so I am cautiously, I don't I'm somewhere between optimistic and pessimistic. I'm like, right. I'm cautiously neutral. I guess \n\n[00:22:52] Speaker 1:\nI really, really appreciate that answer. I guess the question I would have is like oh what is the percentage of the population that gets to enjoy that I think that's always yeah because I think that I you're absolutely right and I agree with you that technological advancements have given leisure \n\n[00:23:12] time, but not at an equal distribution across the population. And like going from, you said hunter-gatherer to agriculture, but then from agriculture to the industrial revolution, and then from the industrial to the computer age. \n\n[00:23:32] And all of those, I think some of us, and we definitely, I benefit from this, that I'm in a job where I could even remotely consider, you know, pursuing art. But like, But at \n\n[00:23:52] each of those revolutions, there's a whole subset of the population that never got to see that leisure because They were the ones working to enable that free time and that revolution. And so I guess my answer to build off of \n\n[00:24:12] yours is, I do think it will happen, and I think it's been happening. And perhaps the answer is that if the first from hunter-gatherer to agriculture allow for like this amount of population to have leisure and then agricultural to industrial maybe like \n\n[00:24:32] a lot this much And then and then and then maybe it's all increasing. Maybe. I'm also very cynical. So That's the optimistic side. And I think the pessimistic \n\n[00:24:53] side is that it could just exacerbate the wealth gap we have around the world already. That was not a fun answer. \n\n[00:25:04] Speaker 0:\nNo, I think it's very interesting. And I definitely wasn't expecting our conversation to go this direction, but I'm glad that it did because I think it's pretty interesting to consider. Maybe to loop it back around to something that's more practical or applicable to people listening. What do you \n\n[00:25:24] think people can do to make sure that they're a part of this, whatever revolution that we will be experiencing next. \n\n[00:25:33] Speaker 1:\nOh, what a fascinating question. And would you define for me what being a part of the revolution means to you? \n\n[00:25:45] Speaker 0:\nYeah, that's a good question to throw back at me. So, I think the fact is that each 1 of us individually has very limited power to make a very big impact on that wealth gap and things. And we will have more power \n\n[00:26:05] if we are on the right side of that, right? If we are the ones who are able to accumulate the wealth and then do some good with that. And so I guess to be a part of that would be to make sure that we are not left behind as \n\n[00:26:26] the industry changes. And then to like find ways to use the wealth that we accumulate or the skills that we accumulate to hopefully bring more people over to this side of the wealth gap, I guess. \n\n[00:26:46] Speaker 1:\nYeah. I was trying to buy time for my answer. And I appreciate it what you said. And again, I feel like it breaks down to 2 sides of like not being left behind technically and also not being left behind ethically \n\n[00:27:06] or morally. Which I think is very interesting is like what I got from the answer that you just gave. And I certainly feel the like pressure of being left behind technically. I think in my 20s, the pace at which our industry goes was really exciting. And now that I'm not in my 20s, \n\n[00:27:27] I'm feeling tired. More easily. And I still find the pace really exciting, but also a little bit daunting. So I really do feel that like, especially as someone that, you know, like took a 2 year step back \n\n[00:27:47] from the industry and back from coding and barely coded other than like Arduino, which you know, no, right? That's that's coding. \n\n[00:27:57] Speaker 0:\nIt's much \n\n[00:27:57] Speaker 1:\nmore hardware. Like it's much more like circuitry than it is. There's little bits of code anyways. So taking a step back and then coming back in is both really exciting and daunting. And I don't know if I have a really good answer for that of like, what does it mean to not get left \n\n[00:28:17] behind technically? And I've been thinking a lot about like, now that I've been in this industry for more than decade, I had to come to terms with the fact that the skill sets that I have gained in my 20s, and that has sustained me financially via client projects is not \n\n[00:28:37] necessarily the skill sets that will last me for the next, let's say, 3 decades that I choose to hopefully work. And so what are the skill sets that make sense for me to... What are the new skill sets that make sense for me to gain and what are the skill \n\n[00:28:58] sets that make sense for me to maintain And what are the ones that I can purge because I only have so much brain space, presumably. And or, you know, purge Not voluntarily, but my brain involuntarily. \n\n[00:29:18] Speaker 0:\nGarbage collection. \n\n[00:29:19] Speaker 1:\nYeah. And I don't have a perfect answer for that. Other than that, I think it's really interesting as a thought exercise because it also includes looking at where the industry is going. And certainly I do feel like a lot of our industry is, and the \n\n[00:29:39] world is very, or at least the Western affluent world, is very excited about AI. Like, we've been excited about AI for the last, however long we've, at least the last decade, I know. And now in the last year and a half, we've been ultra excited about AI. And \n\n[00:30:00] I do think that what I have seen with a lot of the newest technologies are much more convincing than what I've seen in the past decade. And I do think it's something I need to enter like and fold into my skillset. I'm also \n\n[00:30:22] cynical about it. I also don't know if it's just a fad. This has also become a tangent to say, I think at the end of the day, we should just keep doing what we're good at. Like, I'm not going to switch \n\n[00:30:42] like a 180 and become like an AI and like machine learning and LLM specialist. I'm still gonna maintain what I used to do and then fold that in. So that's the technical side and the ethical side. We're thinking about that a lot because \n\n[00:31:02] what does it mean to give money? What does it mean to be charitable? And what is the actual impact of that? I don't know. And What, like, is it about giving \n\n[00:31:22] money or is it about giving skill sets? And is it much more about learning and, or sorry, is it much more about teaching and Bringing more people in to what we do. That's \n\n[00:31:42] that's something that I have been thinking a lot about and I don't have a good conclusion, but I do feel like if there is a model for that, I do think that Sarah, like Sarah Drasner, I think she does an amazing job at, which is I think bringing people, \n\n[00:32:04] just like she just so casually gives out opportunities to like people that might not ever have had opportunities. Like for me, like the reason why we got to meet in person, the reason why I even got to give a talk at React Rally, which was the \n\n[00:32:24] talk that got me the opportunity to give more talks, was because Sarah just casually recommended me to the team. \n\n[00:32:36] Speaker 0:\nShe is great. \n\n[00:32:37] Speaker 1:\nYeah, she's amazing. And I think that that's where I'll end that really long rant. I'm sorry I don't give you direct answers. \n\n[00:32:48] Speaker 0:\nNo, no, this is great. It actually, this is what, see, we can talk about like, what's 2 plus 2? And you know, it has a very definitive answer, but I think that these types of conversations are much more interesting because they make you think. And I like what you said about the 2 parts of this. And 1 thing I wanted to add to the first part \n\n[00:33:08] of like your skill sets and everything is, I'm glad that you said you're not just gonna pivot totally and go, I'm gonna be an AI developer now. I saw a lot of people make that mistake with Web 3. That same mistake has been made in other technologies in the past as well. And so I think from that angle, \n\n[00:33:29] it's better to try and incorporate those things into your existing skill set than to drop your existing skill set and jump over. That's not always the case. I'm sure when Flash was killed by Apple, it was probably a good idea to jump off of flash at that point. But I think \n\n[00:33:49] like, it's less about, you should be less about technology, specific technologies and a little bit more about the use cases that those technologies solve, right? Integrate, like find ways that you can integrate the new thing into those use cases that you're solving. Think more about the use cases than you do about the technologies \n\n[00:34:09] and you'll be fine. So yeah, sorry, go ahead. \n\n[00:34:12] Speaker 1:\nOh no, no, no, I was gonna say I love that and I 100% agree with that, which is that I've always found all those like fights about React versus Angular versus Vue versus any other new framework, those fights I found always very silly. I don't know who I'm shading by saying that, but \n\n[00:34:33] I because to me all of these framework, all of those frameworks have always just been another tool in our toolbox. And it's like you said, it's just how we try, how we choose to use those tools to do what we would like. And for me, how that's kind of changed a little bit since I've pivoted more into art is that for me \n\n[00:34:53] now, if making art is about telling a story, then it just becomes what is the right medium for that story? Is it software? Is it hardware? Is it Vue? Is it React? Is it actually, you know, different sensors? And so for me, I guess it's been much more about like just collecting all the tools. And like, I love \n\n[00:35:13] being able to go deep on a few tools, but then having the breadth of tools and breadth of knowledge has been really amazing. And so I think AI is interesting because it's a new tool. And I think that it's a tool worth investing time in, but it's only 1 tool as of right now in our toolboxes. \n\n[00:35:31] Speaker 0:\nYes, yeah, bravo. I completely agree. Thank you. So the second thing that you talked about being the ethical side, I'm so glad that you brought that up too. So I think When we talk about like what is You know closing the wealth gap ethically \n\n[00:35:51] and everything. What does that mean? Is it just giving money? I mean, there's that phrase, you know You can feed a man a fish or like give a man a fish you feed him for a day Whatever if they're starving then they probably need the fish and they need the fishing lessons. So like, I think that there is something to be said for a combination of \n\n[00:36:12] those approaches. And so I do think that donating money and resources is a really worthwhile thing and people should be doing that if they're not, if they have the means to do so. And then as far as teaching, I \n\n[00:36:32] do really, I mean, obviously this is very self-serving because I'm a teacher and that's what I do, but there's a reason that I do it and I think it's because it's a really important thing for helping other people to jump out of their, whatever circumstances they're in. \n\n[00:36:52] So you talked about Sarah Drasner, love Sarah, she's fantastic. And what you said was that she gives people opportunities, but she doesn't just give them, the results of those opportunities. Like you did have to submit your talk and get approved. And you had to give your talk. And it had to be good. So I think \n\n[00:37:13] that giving people The opportunities is really important. And then 1 of the things that I am just, I need to say thank you to the people watching because you have access to this material because you paid for a license to Epic Web. And so much of Epic Web is free. There's just an enormous \n\n[00:37:33] amount of the material there that is free. And that's because this is part of my mission to help make the world a better place to quality software. And not everybody who can do that has the money to buy this. And so those of you who are watching this now who got a license to Epic Web, you make it possible for me to do that. So thank you so \n\n[00:37:53] much for that. So yeah, I completely agree. We should look for opportunities to both give the fish and teach how to fish. And I think that is a way that we can help angle us in the right direction in the future. So, well, Shirley, \n\n[00:38:13] this has just been a wonderful conversation. We are getting down to the last bit of it. This totally didn't go the direction I was expecting, but I'm super glad that it went the direct, this is why I actually do these conversations this way, because I think it ends up being better anyway. So Was there anything that you wanted to talk about that we didn't get to discuss? \n\n[00:38:34] Speaker 1:\nOh, I was just about to say, I love that we spent 40 minutes talking and we didn't cover anything about my work. And I and I mean that genuinely because I think the best kinds of friendships is where we are aware of each other's work and what we do, but we have much more to go off of than just \n\n[00:38:54] our work and we can talk about other things too. So I really, really appreciated this opportunity to just talk to you and hang. And I don't know if you're now talking to Epic web dev viewers, if you're \n\n[00:39:14] interested in my work, I guess you can find it at Shirleywood.studio because I literally did not say anything about it. \n\n[00:39:22] Speaker 0:\nYes, I was just going to say, you and I know each other well and I know your work, but the people watching probably don't. Why don't you give us like just 5 minutes or however long about like what your work is so that folks who are interested can go look into it further. \n\n[00:39:42] Speaker 1:\nI actually was really glad that we didn't have to talk about it because I don't know how to describe my work thesis. I guess if I was to try, it's not I started my work. OK, so I started with data visualizations for the Web. If you've ever seen a visualization of Hamilton, \n\n[00:40:02] the musical, That 1 is probably the best example of web-based data visualizations I've done. And so I like to describe it as visualizations that push the boundaries of the web \n\n[00:40:22] is kind of the things that I enjoy doing. And since I've gone back to grad school, my focus has been trying to figure out how to bring those data stories out of the screen and into the physical world so that you can kind of like work, walk through them and experience them with \n\n[00:40:43] your whole body instead of like just our eyes and our thumbs. And so I actually don't know how to describe those. \n\n[00:40:55] Speaker 0:\nSo here's what I would suggest. I'm sure you've got some like videos or pictures and things on your site. But you gave some really awesome videos in that talk, in the React Rally talk. So, and it's otherwise a very awesome and inspiring talk as well. So I just point people over there \n\n[00:41:15] for sure. \n\n[00:41:16] Speaker 1:\nThank you. You just watched 45 minutes of me and Kent talking and now you can watch 45 minutes of me just me talking. \n\n[00:41:27] Speaker 0:\nSeriously people, Let me just be a little bit more clear. Go watch Shirley's talk, it will change you. It is very, very good. So I'll make sure that we get a link to that. If it's not online yet, I'll get it on there once we have that. So. \n\n[00:41:44] Speaker 1:\nThank you so much. \n\n[00:41:45] Speaker 0:\nYeah, thank you Shirley. So what is a way for people, like what is something that, like you're consulting right now, right? So like is there something that people might need your consulting services for? \n\n[00:42:00] Speaker 1:\nOh, thank you so much. So I love doing client work. And so essentially any of the things that you see in my portfolio that you might see in my talk, if you want something along those lines, if you have \n\n[00:42:20] a huge data set and you don't know how to tell the story, or if you have a small data set and you don't know how to reach the right audience, those are the kinds of things I love working with you on. If you have engineering problems around visualizations, D3, how to incorporate that with React or Vue or any of those frameworks. Also, \n\n[00:42:40] software architecture, also the kind of things that I love thinking about. So feel free to contact me, and thank you so much for giving me this platform, Ken. \n\n[00:42:53] Speaker 0:\nAbsolutely, thank you so much Shirley. This has just been so lovely. I'm gonna stop the recording here in a second and then I'm gonna just chat with you some more. This is fun. Thanks everybody for tuning in and we'll see you later. \n\n[00:43:06] Speaker 1:\nThank you."
          },
          "_id": "Davc6tzHYCp36XjM2FsEKv",
          "state": "ready",
          "_createdAt": "2023-10-19T00:16:27Z",
          "_rev": "WsAmd18YA1frbQaWBZpnAY",
          "title": "Shirley Wu.mp4",
          "_updatedAt": "2024-03-19T20:25:12Z",
          "originalMediaUrl": "https://egghead-video-uploads.s3.amazonaws.com/epic-web/interviews/Shirley+Wu.mp4",
          "muxAsset": {
            "muxPlaybackId": "ZVK2h3qOXTeLu00HaYogvOFwZD5R1jSAExcJmHNJ7sV8",
            "muxAssetId": "HMcTjh00H01CUwJ3rxnxVhYWYZtsu02iUUlH01mY01xxVaL8",
            "_type": "muxAsset"
          }
        },
        "solution": null
      },
      {
        "slug": "the-future-of-authentication-with-will-johnson",
        "solution": null,
        "_type": "interview",
        "_updatedAt": "2023-10-19T00:29:30Z",
        "title": "The Future of Authentication with Will Johnson",
        "description": "Will Johnson, Sr. Developer Advocate at Auth0, explores the drawbacks of passwords, advocating for WebAuthn's secure, user-friendly authentication methods.",
        "_id": "umRzgEK3x2YA3YfFYHXhBP",
        "body": "Will Johnson, a senior developer advocate at Auth0, specializing in authentication and authorization education, discusses the challenges and future directions of user authentication.\n\nThere are shortcomings of relying on passwords for authentication that Will emphasizes, highlighting their complexity, poor user experience, and susceptibility to security risks. These limitations have prompted a search for more secure and user-friendly alternatives.\n\nThe conversation shifts to passwordless authentication, particularly through WebAuthn. This technology utilizes public and private keys, offering a robust alternative to password-based systems. Will and Kent discuss the specifics of implementing WebAuthn, including using authenticator apps like 1Password.\n\nAccording to Will, the days of passwords may be numbered. He foresees a shift toward unique identification methods, potentially replacing passwords with biometrics or digital versions of verified real-life documents.\n\nKent raises the subject of the limitations in current role-based access control systems. As organizations grow, there may be a need for more nuanced access controls. Both Kent and Will express optimism about a future that moves beyond the restrictions of passwords.\n\n## Resources\n\n- [Will Johnson on Twitter](https://twitter.com/willjohnsonio)",
        "videoResource": {
          "_id": "umRzgEK3x2YA3YfFYHXLFP",
          "_updatedAt": "2024-03-19T20:25:10Z",
          "duration": 2003.033333,
          "state": "ready",
          "_type": "videoResource",
          "muxAsset": {
            "muxPlaybackId": "574Jwz01JfFZie1PnawOTFUl6GeUGCBWZmB4wVd8hGTw",
            "muxAssetId": "lvW00nrLIlMMk01vbd3qIf5Hqyv9oKeDCoqDKMn9gMeoI",
            "_type": "muxAsset"
          },
          "originalMediaUrl": "https://egghead-video-uploads.s3.amazonaws.com/epic-web/interviews/Will+Johnson.mp4",
          "_createdAt": "2023-10-19T00:21:31Z",
          "_rev": "6LaeqP6n94P8FD3sVhYIcg",
          "title": "Will Johnson.mp4",
          "transcript": {
            "srt": "1\n00:00:00,380 --> 00:00:05,819\nHey everybody, I'm joined by my friend Will Johnson say hi Will. Hey, what's up everybody?\n\n2\n00:00:06,379 --> 00:00:11,660\nSuper happy to have you here. Thank you so much for giving us some your time today. So Will and I we met\n\n3\n00:00:12,179 --> 00:00:14,679\nI in person. This is another 1 of those\n\n4\n00:00:15,040 --> 00:00:18,020\nWe met online first and then met in person in a conference.\n\n5\n00:00:19,440 --> 00:00:20,340\nAnd I think,\n\n6\n00:00:20,660 --> 00:00:26,400\nI'm pretty sure where we met online first was through Egghead in the Egghead Slack. Is that right?\n\n7\n00:00:26,740 --> 00:00:33,220\nOr did we meet first on Twitter? I think it was an Egghead first. Yeah, I think it was through AK at first, the same.\n\n8\n00:00:33,620 --> 00:00:34,120\nYeah.\n\n9\n00:00:34,900 --> 00:00:36,239\nAnd then in person,\n\n10\n00:00:37,900 --> 00:00:50,960\nI don't want to, like, I'm pretty sure, was it a React rally a couple of years ago? Did you ever come to 1 of those? No, it was actually, It was at React Miami. Miami. Was that the first time? No, no, no. Yeah. Yeah, it was. No way.\n\n11\n00:00:52,780 --> 00:00:54,600\nWhat about last year at\n\n12\n00:00:55,440 --> 00:00:55,940\nRenderATL?\n\n13\n00:00:56,540 --> 00:00:59,640\nWere you there? No, I didn't go. I didn't go last year.\n\n14\n00:01:00,320 --> 00:01:00,860\nI Think\n\n15\n00:01:01,220 --> 00:01:05,280\nreact Miami was the first conference. I went to like outside of Kansas City, so\n\n16\n00:01:05,740 --> 00:01:06,240\nno\n\n17\n00:01:06,560 --> 00:01:08,660\nWe met okay, so KCDC\n\n18\n00:01:09,160 --> 00:01:15,580\nyou go to that conference as well, right? Yeah, yeah So I went to that conference in 20\n\n19\n00:01:16,940 --> 00:01:20,360\nMaybe 15 or 16 no no it would have been 2016\n\n20\n00:01:22,300 --> 00:01:31,200\nYeah, were you there at that or maybe like I don't know if you remember. Yeah, no, I wasn't doing, I didn't start like getting into dev stuff until like 2018.\n\n21\n00:01:31,760 --> 00:01:32,260\nSo\n\n22\n00:01:33,340 --> 00:01:37,880\nI wouldn't have been at that 1. I didn't know that was even a thing. I can't even believe\n\n23\n00:01:38,300 --> 00:01:42,540\nthat React Miami was the first time we met. That's crazy. I feel like I've known you forever.\n\n24\n00:01:44,320 --> 00:01:51,540\nBut it has been great to know you. And I'd like for the folks who are watching to get to know you too. Can you give us a little intro?\n\n25\n00:01:52,660 --> 00:01:57,080\nSure. Yeah. So my name is Will Johnson. I'm a senior developer advocate\n\n26\n00:01:57,440 --> 00:01:59,160\nat Auth0 by Okta.\n\n27\n00:02:00,400 --> 00:02:01,600\nI have 6 children\n\n28\n00:02:02,700 --> 00:02:05,460\nwho I love and we have a lot of fun together.\n\n29\n00:02:06,820 --> 00:02:12,940\nAnd I spend a lot of time just helping developers, how to talk about different things with authentication,\n\n30\n00:02:13,240 --> 00:02:15,180\nauthorization. I do a lot of education,\n\n31\n00:02:15,760 --> 00:02:19,340\nI plan events and I go through a lot of things with a,\n\n32\n00:02:20,140 --> 00:02:28,880\nlike a developer first or a customer first mindset. I always think of how can I make this thing more entertaining, more easy,\n\n33\n00:02:30,780 --> 00:02:38,980\nyou know, simpler, whatever, whatever I can to make sure that the person that's receiving is having a great experience is kind of what I like to focus on?\n\n34\n00:02:39,520 --> 00:02:40,520\nYeah, that's great.\n\n35\n00:02:40,920 --> 00:02:45,840\nSo you've been a part of education since like you first got into dev, with egghead, right?\n\n36\n00:02:46,300 --> 00:02:48,300\nYeah. Yeah. The first actually Joel,\n\n37\n00:02:48,800 --> 00:02:51,260\nJoel is actually who gave me the advice I was\n\n38\n00:02:51,940 --> 00:02:56,980\nI was I don't know I had said something on Twitter about because I had like just applied to this job and\n\n39\n00:02:58,300 --> 00:03:14,360\nlike didn't get it even though I really thought I did. And I was like, man, I really think I'm ready and I don't know what else I got to do. And then like Joel DM'd me and was like, you need to write like blog posts and tell people like what you're learning and stuff like that. So that's actually how I got started.\n\n40\n00:03:14,680 --> 00:03:18,300\nSo I started writing blog posts about different things I was learning about JavaScript.\n\n41\n00:03:19,740 --> 00:03:22,780\nAnd then I ended up working at Egghead, which is of course a\n\n42\n00:03:23,640 --> 00:03:24,460\nweb dev\n\n43\n00:03:24,800 --> 00:03:25,880\neducation company.\n\n44\n00:03:27,080 --> 00:03:29,360\nJoel is awesome, isn't he?\n\n45\n00:03:29,880 --> 00:03:36,000\nLike just super, super, like my strategy for success in my career has been do whatever Joel says\n\n46\n00:03:38,160 --> 00:03:39,780\nIt always works out great\n\n47\n00:03:40,240 --> 00:03:46,140\nI Agree that that is something that's true do what Joel says take and He always has like recommendations\n\n48\n00:03:46,480 --> 00:03:48,980\nfor random things. Like off topic,\n\n49\n00:03:51,040 --> 00:03:53,080\nhe had told me about like this program\n\n50\n00:03:53,560 --> 00:03:55,740\nto like loosen your hips up because\n\n51\n00:03:56,280 --> 00:03:56,780\nI'm,\n\n52\n00:03:57,980 --> 00:04:03,740\noh, I haven't talked about that. Another thing is like me and my kids got interested in soccer this year\n\n53\n00:04:04,440 --> 00:04:08,180\nand I've never played soccer before or watched soccer, so I got super interested.\n\n54\n00:04:08,520 --> 00:04:18,540\nSo I wanted to start playing, but like 1 time I had like went out and played and got hurt like real bad and I didn't even do anything, But I was like hurt and sideline for like 6 weeks.\n\n55\n00:04:19,079 --> 00:04:19,579\nOuch.\n\n56\n00:04:20,140 --> 00:04:24,940\nSo Joel had talked about, there's like this program he did to like loosen up your hips\n\n57\n00:04:25,260 --> 00:04:32,140\nso you can like move better and play sports. And I like, and it's like 21 days, I did it. And like my hips feel great.\n\n58\n00:04:32,740 --> 00:04:46,820\nLike, so same thing with like, even if it's not career related, listen to what Joel says and you'll probably be all right. That guy, yeah, seriously, Jay Hooks on Twitter. If you're not following Joel, you should. He's just a real pleasure. I should have him on here.\n\n59\n00:04:48,100 --> 00:04:49,800\nBut yeah, so, well,\n\n60\n00:04:50,740 --> 00:04:52,560\nwith your work over at\n\n61\n00:04:53,400 --> 00:04:55,680\nOkta, or Auth0 by Okta,\n\n62\n00:04:57,440 --> 00:05:04,580\nyou're focused on the education piece of that, But there's something really exciting coming into the world of authentication\n\n63\n00:05:05,580 --> 00:05:06,080\nthat\n\n64\n00:05:06,460 --> 00:05:08,940\nI know you're excited about, I'm interested in,\n\n65\n00:05:09,280 --> 00:05:15,860\nand we don't cover in Epic Web. So this would be a pretty cool opportunity to talk about that. And that's passwordless\n\n66\n00:05:16,360 --> 00:05:16,860\nauthentication\n\n67\n00:05:17,500 --> 00:05:18,760\nor web authen.\n\n68\n00:05:20,080 --> 00:05:20,880\nCan you\n\n69\n00:05:21,500 --> 00:05:23,080\nfirst talk about like,\n\n70\n00:05:23,440 --> 00:05:24,620\nwhat is the problem\n\n71\n00:05:25,160 --> 00:05:26,920\nwith the way that we do authentication\n\n72\n00:05:27,300 --> 00:05:28,400\nin the modern age?\n\n73\n00:05:28,780 --> 00:05:29,280\nAnd\n\n74\n00:05:29,640 --> 00:05:30,140\nhow\n\n75\n00:05:30,480 --> 00:05:31,080\ndoes passwordless\n\n76\n00:05:31,480 --> 00:05:31,980\nauth\n\n77\n00:05:32,460 --> 00:05:33,420\nsolve that problem?\n\n78\n00:05:34,740 --> 00:05:36,860\nSure, yeah, we can talk about that.\n\n79\n00:05:37,840 --> 00:05:39,580\nSo, I mean, there's a lot of problems\n\n80\n00:05:39,960 --> 00:05:40,740\nwith passwords,\n\n81\n00:05:41,680 --> 00:05:42,600\nin my opinion.\n\n82\n00:05:44,340 --> 00:05:45,560\nLike number 1,\n\n83\n00:05:46,380 --> 00:05:50,780\nprobably the, if you're trying to make a secure password or a good password,\n\n84\n00:05:51,540 --> 00:05:55,300\nit has to have different characters, uppercase, lowercase,\n\n85\n00:05:57,040 --> 00:05:58,780\nyou know, numbers, letters, like,\n\n86\n00:05:59,180 --> 00:06:01,620\nall of this stuff, be at least 15\n\n87\n00:06:02,120 --> 00:06:04,900\ncharacters and things like that. So it makes it incredibly\n\n88\n00:06:05,740 --> 00:06:09,940\ncomplex for you to be able to make a good password. And at the end of the day,\n\n89\n00:06:10,580 --> 00:06:13,120\nthat super complex password is also\n\n90\n00:06:13,420 --> 00:06:22,340\nsuper hard to remember. Right, And that's not a good user experience, right? You got something that's super long that you can't remember, but if you do happen to remember it,\n\n91\n00:06:22,860 --> 00:06:26,860\nand if you really think about it, humans in general, we're not necessarily\n\n92\n00:06:27,980 --> 00:06:37,400\nremembering the password. We're remembering the pattern on the keyboard. That's what you're actually remembering, right? So that's what you got stored in your brain, just that pattern. So\n\n93\n00:06:38,700 --> 00:06:39,200\nyou,\n\n94\n00:06:39,960 --> 00:06:44,840\nas humans, we wanna keep things easy. So what do you do? You reuse\n\n95\n00:06:45,360 --> 00:06:46,180\nthat password\n\n96\n00:06:46,780 --> 00:06:48,040\nsomewhere else, right?\n\n97\n00:06:48,740 --> 00:06:56,680\nAnd that's not a bad thing, right? As in, it's not a bad thing that you're doing, right? You're not committing a cardinal sin. It's just that\n\n98\n00:06:57,500 --> 00:07:01,980\nthe way that passwords are implemented, it kind of almost forces you\n\n99\n00:07:02,440 --> 00:07:05,140\nto have to take that route, right? Yeah.\n\n100\n00:07:05,940 --> 00:07:06,680\nBut then\n\n101\n00:07:07,280 --> 00:07:11,400\nsomeone breaches your password because, you know, no password or impregnable\n\n102\n00:07:12,180 --> 00:07:15,460\nhumans aren't as random as we think we are. Right.\n\n103\n00:07:16,220 --> 00:07:24,020\nSomeone says that password, they put it into a dictionary of breach passwords, someone accesses the dictionary and then they run that password\n\n104\n00:07:24,860 --> 00:07:29,340\non a bunch of different websites to see where they can get some hits. And now people log into\n\n105\n00:07:29,640 --> 00:07:31,080\nyour information. So\n\n106\n00:07:33,340 --> 00:07:43,400\nit's just that passwords in general, just in the way, especially with our lives being more and more online, they're just not really a good way to try to keep your data safe. And then\n\n107\n00:07:44,280 --> 00:07:52,080\nwe have different ways to try to make it more secure, right? So we could use a pathway manager, use one-time passcodes, use\n\n108\n00:07:52,900 --> 00:08:06,920\nmagic links and all these other things, but really they're just more steps for the user, more things that you gotta remember, more things that you have to keep up with and you know what if you break your phone right like real story\n\n109\n00:08:07,360 --> 00:08:09,760\nI had just just got a phone\n\n110\n00:08:11,400 --> 00:08:15,400\nI don't know like a week it was like I had it for like a week I went to the gym\n\n111\n00:08:15,720 --> 00:08:20,120\nand dropped the dumbbell on the phone smashed the entire screen right\n\n112\n00:08:20,500 --> 00:08:22,680\nSo I tried to like order it through,\n\n113\n00:08:23,100 --> 00:08:29,520\nyou know, the insurance or whatever, but in order to order replacement, it sent me a code to the phone. Oh no.\n\n114\n00:08:31,100 --> 00:08:31,600\nSo\n\n115\n00:08:32,140 --> 00:08:33,100\nI couldn't even,\n\n116\n00:08:33,460 --> 00:08:38,580\nyou know, get a replacement phone because they had that security measure set up.\n\n117\n00:08:40,280 --> 00:08:42,539\nSo that's kind of like the problems that we have\n\n118\n00:08:43,940 --> 00:08:44,940\nwith the passwords.\n\n119\n00:08:45,800 --> 00:08:48,420\nIt takes so much for the user\n\n120\n00:08:49,160 --> 00:08:53,040\nto be able to keep it secure. And even then it's not necessarily\n\n121\n00:08:53,560 --> 00:08:56,880\nsecure because there are still ways around it. Right.\n\n122\n00:08:57,560 --> 00:09:21,600\nSo that's what, go ahead. If you want to say something. Yeah. Yeah. I, I think, it's probably important to call out that, like, I can almost hear some people in the background saying, yeah, well, like, if you would just do these 6 things, then like everything's fine. And I don't disagree with that. Like, you can absolutely make yourself more secure. But we're web developers and we're building products for users\n\n123\n00:09:22,420 --> 00:09:26,080\nand we cannot force our users to do those 6 things.\n\n124\n00:09:27,740 --> 00:09:39,900\nAnd on top of that, I mean, I suppose you could force them to do that in the way you design your software, but you're going to have a hard time having happy users. And so like we're trying to make a good user experience here.\n\n125\n00:09:40,840 --> 00:09:41,500\nAnd so\n\n126\n00:09:42,880 --> 00:09:46,500\nthe fact that you have to do these 6 things to make your password\n\n127\n00:09:47,040 --> 00:09:47,540\nauthentication\n\n128\n00:09:47,860 --> 00:09:48,360\nsecure,\n\n129\n00:09:49,540 --> 00:09:53,340\nkind of makes you wonder if maybe there's another way to do this.\n\n130\n00:09:55,160 --> 00:09:58,080\nYeah, exactly. And that's like the\n\n131\n00:09:58,420 --> 00:10:01,860\npart that I don't like either As a user myself, right?\n\n132\n00:10:02,500 --> 00:10:03,900\nThe experience is\n\n133\n00:10:04,540 --> 00:10:10,940\nnot good. And yet, like you said, there are 6 steps. Like why would you want to have your user\n\n134\n00:10:11,400 --> 00:10:13,820\ndo all of those things, right? Because\n\n135\n00:10:14,280 --> 00:10:24,200\nat the end of the day, right? Like the website that I ordered that phone on, I'm not looking forward to going back there. Right. Because of that particular user experience.\n\n136\n00:10:24,620 --> 00:10:28,520\nSo those are the things that you want to think about because a bad authentication experience\n\n137\n00:10:29,180 --> 00:10:36,540\ncan leave a bad taste in your user or your user's mouth and not want them to, you know, return or avoid it as long as possible.\n\n138\n00:10:38,300 --> 00:10:40,380\nSo that's kind of what I like about the\n\n139\n00:10:40,920 --> 00:10:43,220\npassword list specifically with WebAuthn.\n\n140\n00:10:43,940 --> 00:10:44,880\nSo with WebAuthn,\n\n141\n00:10:46,220 --> 00:10:52,740\ninstead of storing any of your credentials or anything like that, it uses public key cryptography.\n\n142\n00:10:53,080 --> 00:10:56,620\nSo there's a public key and a private key that gets created\n\n143\n00:10:57,260 --> 00:10:59,540\nat the time that you're registering the website\n\n144\n00:11:00,060 --> 00:11:02,860\nor registering your authenticator to the website.\n\n145\n00:11:03,260 --> 00:11:06,780\nAnd the private key itself is stored on the device.\n\n146\n00:11:07,120 --> 00:11:07,620\nSo\n\n147\n00:11:08,680 --> 00:11:17,220\nnone of your like private details are sent to the server. The only thing that's sent to the server is the public key and that gets saved with your user ID.\n\n148\n00:11:17,780 --> 00:11:19,900\nAnd then when you want to log in again,\n\n149\n00:11:20,420 --> 00:11:23,220\nthe public key and the user ID are retrieved.\n\n150\n00:11:23,740 --> 00:11:29,020\nAnd then it does some stuff like that to verify everything is correct and sends it back.\n\n151\n00:11:31,640 --> 00:11:33,640\nBut no 1 has access to\n\n152\n00:11:34,200 --> 00:11:37,700\nyour device if it's on you. So of course, if\n\n153\n00:11:38,180 --> 00:11:43,820\nyou fell asleep and someone unlocked your phone with face ID, of course, but you but not like\n\n154\n00:11:44,540 --> 00:11:53,220\nAn attacker from another country who's stolen your passwords off of, you know, the web, the web somewhere can get access to it. Yeah.\n\n155\n00:11:54,160 --> 00:12:02,180\nNow I think that's a important distinction. There are a lot more attackers on the internet than there are people around you when you're sleeping.\n\n156\n00:12:04,140 --> 00:12:15,040\nSo, and the fact is like, if they got into your phone in that way, then you're pretty much borked anyway. So, I think it doesn't make much of a difference either way. Now, so this is really interesting.\n\n157\n00:12:15,460 --> 00:12:15,960\nAnd\n\n158\n00:12:16,620 --> 00:12:20,580\nwe don't have to go too deep into the actual implementation details of how\n\n159\n00:12:21,040 --> 00:12:23,040\npass keys work. But I think\n\n160\n00:12:23,600 --> 00:12:38,860\nif I understand it right, then the basic idea is now your phone is basically the password or whatever device or authenticator app. So like 1Password also has support for storing pass keys. So whatever that is, is gonna be your,\n\n161\n00:12:39,640 --> 00:12:40,940\neffectively your password.\n\n162\n00:12:41,740 --> 00:12:45,180\nAnd that communicates with the website and says, here's my\n\n163\n00:12:46,700 --> 00:12:48,480\npublic key, I guess. And then\n\n164\n00:12:49,280 --> 00:12:54,520\nthe server says, okay, let me check that. Oh, yep, you are who you say you are and now we can let you in.\n\n165\n00:12:55,460 --> 00:12:58,880\nYeah, pretty much. That's a way that you could look at it. So\n\n166\n00:12:59,380 --> 00:13:00,260\nlike you said,\n\n167\n00:13:01,400 --> 00:13:05,280\nthe private key is stored on the device or whatever\n\n168\n00:13:05,660 --> 00:13:08,160\nservice you may use that supports FAST keys.\n\n169\n00:13:09,760 --> 00:13:12,680\nAnd it stays there and you can,\n\n170\n00:13:13,040 --> 00:13:17,900\nwhen you do want to log in, Yeah, it gets sent. So what happens is that it sends\n\n171\n00:13:18,520 --> 00:13:20,640\na challenge. So the server,\n\n172\n00:13:21,280 --> 00:13:29,120\nit grabs the public ID that matches with that username and your ID that it gave you when you registered, it sends it to the authenticator\n\n173\n00:13:30,020 --> 00:13:34,300\nwith a challenge, then the challenge is what gets signed and verified.\n\n174\n00:13:35,500 --> 00:13:38,420\nAnd then it gets sent back with the okay to the server,\n\n175\n00:13:38,840 --> 00:13:39,860\nunless you win.\n\n176\n00:13:40,520 --> 00:13:43,040\nGotcha, gotcha, that makes sense. Okay, so\n\n177\n00:13:44,240 --> 00:13:46,420\nthis has a couple interesting implications.\n\n178\n00:13:47,080 --> 00:13:47,780\nFor 1,\n\n179\n00:13:49,640 --> 00:13:57,760\nhaving your password be effectively the device or the authenticator app means that if you lose the device, then you lose access to your account.\n\n180\n00:13:58,780 --> 00:13:59,280\nSo,\n\n181\n00:14:00,060 --> 00:14:00,940\nWhat are the\n\n182\n00:14:01,560 --> 00:14:04,140\nways that you can sidestep that particular problem?\n\n183\n00:14:06,340 --> 00:14:10,580\nSo a few of the ways is that you could be, you could,\n\n184\n00:14:10,920 --> 00:14:14,940\nyou know, have multiple devices, right? That's, you know, always a way.\n\n185\n00:14:16,940 --> 00:14:18,640\nSo if you had\n\n186\n00:14:19,500 --> 00:14:28,040\na phone, right, as you, that you're using as like your main thing, then you could get like a security key, like the YubiKey or a Google Titan.\n\n187\n00:14:28,620 --> 00:14:33,980\nIt just, we just want to have some type of backup. I would recommend that you don't have a password\n\n188\n00:14:34,440 --> 00:14:35,400\nas the backup,\n\n189\n00:14:35,820 --> 00:14:39,780\nbut that's 1 way to mitigate it. But that's 1 of the things that makes\n\n190\n00:14:40,680 --> 00:14:43,680\nPassKeys itself different. So there's WebAuthn,\n\n191\n00:14:44,140 --> 00:14:45,660\nwhich is a browser-based\n\n192\n00:14:46,000 --> 00:14:50,040\nAPI that you can use to create passwordless login.\n\n193\n00:14:50,460 --> 00:14:51,720\nBut pass keys,\n\n194\n00:14:52,240 --> 00:15:01,820\nwhen you're implementing pass keys, is that the private key, instead of getting saved on the device, it gets backed up to the cloud, right? So that could be the iCloud,\n\n195\n00:15:03,520 --> 00:15:07,700\nyou know, or the Google, you know, password manager, it'll be saved there.\n\n196\n00:15:08,040 --> 00:15:11,860\nAnd then you can access it on different devices. So\n\n197\n00:15:12,540 --> 00:15:15,640\nif that's something that you are worried about, which isn't a legitimate concern,\n\n198\n00:15:16,340 --> 00:15:17,540\nyou can actually use\n\n199\n00:15:17,860 --> 00:15:19,580\nthe pass keys implementation\n\n200\n00:15:20,060 --> 00:15:20,560\nof\n\n201\n00:15:21,140 --> 00:15:21,960\nusing WebAuthn.\n\n202\n00:15:22,720 --> 00:15:27,940\nAnd that way you can have it synced across different devices. And so if you lose your phone, it's not, you know,\n\n203\n00:15:28,740 --> 00:15:31,080\nthe end of your logging in experience.\n\n204\n00:15:31,420 --> 00:15:36,780\nYeah. Yeah. I think what's interesting about this is that whether you're using\n\n205\n00:15:37,540 --> 00:15:38,040\n1Password\n\n206\n00:15:38,460 --> 00:15:38,960\nor\n\n207\n00:15:39,280 --> 00:15:40,780\niCloud or Google\n\n208\n00:15:41,760 --> 00:15:43,000\nto sync all of those,\n\n209\n00:15:44,220 --> 00:15:45,320\nat some point,\n\n210\n00:15:46,400 --> 00:15:48,880\nlike you're signing up, getting a new device,\n\n211\n00:15:49,540 --> 00:15:57,140\nyou have to sign into that service to be able to authenticate your new device on these other services and things.\n\n212\n00:15:57,520 --> 00:15:58,020\nAnd\n\n213\n00:15:58,520 --> 00:16:01,820\nyou signing into that service will probably involve a password.\n\n214\n00:16:02,920 --> 00:16:03,960\nAnd eventually,\n\n215\n00:16:04,900 --> 00:16:09,520\nI would actually be interested in your take on what the future of that is in particular, but\n\n216\n00:16:10,160 --> 00:16:10,820\nI think\n\n217\n00:16:12,360 --> 00:16:15,600\nthe point isn't necessary, let's like kill all passwords,\n\n218\n00:16:16,260 --> 00:16:20,100\nbut let's reduce the number of passwords we rely on. And also,\n\n219\n00:16:20,460 --> 00:16:21,660\nlike if we do\n\n220\n00:16:21,960 --> 00:16:24,440\nneed to have a password for 1 reason or another,\n\n221\n00:16:25,260 --> 00:16:31,200\nlet's make it so that people don't have to enter it very often. And so like, then it's okay for them to,\n\n222\n00:16:31,510 --> 00:16:32,010\nyou\n\n223\n00:16:32,320 --> 00:16:35,720\nknow, have longer ones or like they never, they don't have to\n\n224\n00:16:36,340 --> 00:16:37,480\ngo through the whole\n\n225\n00:16:38,180 --> 00:16:42,220\n2 factor auth flow and all of that because it's still\n\n226\n00:16:43,260 --> 00:16:48,660\nmore secure to have a pass key. Is that kind of your take or what's your take on that?\n\n227\n00:16:50,580 --> 00:16:52,220\nI mean, for me,\n\n228\n00:16:52,880 --> 00:16:59,320\nof course, you know, no 1 knows what the future holds, but I think that the more and more that we\n\n229\n00:17:01,720 --> 00:17:02,220\nevolve\n\n230\n00:17:03,060 --> 00:17:04,080\nfor us like security,\n\n231\n00:17:04,640 --> 00:17:07,380\nwe're getting more and more digital. I think that\n\n232\n00:17:08,640 --> 00:17:11,760\nlike as of right now, will we completely replace passwords?\n\n233\n00:17:12,540 --> 00:17:18,980\nMaybe not, maybe not in the next, you know, 5 years, but 10 years, 15 years down the line,\n\n234\n00:17:19,500 --> 00:17:26,819\nI feel like we will do away with passwords and have more unique identifiers, like more ways, you know, more things with biometrics\n\n235\n00:17:27,180 --> 00:17:30,960\nor, or using your actual, you know, real identifiers,\n\n236\n00:17:31,360 --> 00:17:32,520\nright? So if you,\n\n237\n00:17:34,900 --> 00:17:36,540\nlike OffZero, we just launched\n\n238\n00:17:36,900 --> 00:17:41,260\nsupport for mobile driver's licenses, right? So that's something that's,\n\n239\n00:17:41,820 --> 00:17:42,680\nyou know, verified\n\n240\n00:17:43,200 --> 00:17:51,140\nin the real world, right? You got to have an address, a social security card, a birth certificate. You gotta have quite a few real-life documents to\n\n241\n00:17:51,560 --> 00:17:52,060\nverify\n\n242\n00:17:53,000 --> 00:17:57,940\nthat you can own this driver's license, right? So that would be a pretty good way\n\n243\n00:17:58,540 --> 00:18:01,780\nto use as an identifier over a password, right?\n\n244\n00:18:03,100 --> 00:18:09,220\nSo if we have like digital versions of that that have been verified, you know, through the proper parties that say who you are,\n\n245\n00:18:09,720 --> 00:18:13,520\nthat'd be a good way to, you know, get rid of passwords because usually\n\n246\n00:18:14,380 --> 00:18:18,580\nonly you can get those. So I do think in the future, we will\n\n247\n00:18:19,120 --> 00:18:24,640\nget rid of passwords and just use different ways to identify each other that are more personal\n\n248\n00:18:24,960 --> 00:18:25,700\nand unique.\n\n249\n00:18:26,280 --> 00:18:28,220\nJust because passwords is caused,\n\n250\n00:18:28,780 --> 00:18:31,620\nyou know, data breaches and like so many problems,\n\n251\n00:18:32,620 --> 00:18:36,060\nyou know, throughout these years. And it may have worked, you know,\n\n252\n00:18:36,780 --> 00:18:44,120\nback in Aladdin's times when you can say, you know, open Sesame and only the only person who knew it was, you know, that person, but,\n\n253\n00:18:45,060 --> 00:18:47,700\nyou know, these days they're just too easy to access.\n\n254\n00:18:49,020 --> 00:18:51,500\nYeah, yeah, that makes sense. I agree,\n\n255\n00:18:51,860 --> 00:18:54,120\nthere's definitely a problem there.\n\n256\n00:18:55,120 --> 00:19:00,180\nStill, I think it is something that users are kind of expecting and pass keys are pretty new.\n\n257\n00:19:00,580 --> 00:19:02,280\nLike literally just days\n\n258\n00:19:03,620 --> 00:19:06,720\nago, I got a notice that 1Password added support.\n\n259\n00:19:07,720 --> 00:19:10,320\nAnd I think Google also,\n\n260\n00:19:11,040 --> 00:19:15,760\nI got a notification in my browser that said, hey, we've got support now. And so\n\n261\n00:19:16,640 --> 00:19:34,180\nit's pretty new. And so definitely something interesting. And that's why it's actually not included in Epic web. I was thinking about it, but it was just like a little too new for me to say, this is how you do it. Like people paid for it. Cause I don't know, I got to play with it first. That said, actually,\n\n262\n00:19:34,740 --> 00:19:35,820\nthere is an example\n\n263\n00:19:36,260 --> 00:19:38,940\nof the Epic Notes app that people are building.\n\n264\n00:19:39,720 --> 00:19:41,060\nIt's with the Epic Stack,\n\n265\n00:19:41,520 --> 00:19:43,540\nwhere somebody put together WebAuthn\n\n266\n00:19:44,140 --> 00:19:45,260\nwith the Epic Stack.\n\n267\n00:19:45,820 --> 00:19:49,900\nAnd so if you do want to look into what things would look like adding\n\n268\n00:19:50,820 --> 00:19:52,860\nPass keys, then you can take a look at that\n\n269\n00:19:54,020 --> 00:19:56,540\nSo I wanted to ask also what about?\n\n270\n00:19:57,940 --> 00:20:08,280\nThings that where I've got a mobile app in addition to my web app so we have web auth n for doing pass keys If I've got like a desktop app,\n\n271\n00:20:08,680 --> 00:20:15,660\nand so Mac and Windows, and then we've got Android and iOS, and do all of these other platforms have implementations of\n\n272\n00:20:16,080 --> 00:20:18,900\nlike where we could use a passkey for those?\n\n273\n00:20:21,900 --> 00:20:26,340\nAs of right now, I do not know. I do, what I have seen\n\n274\n00:20:27,260 --> 00:20:31,500\nis that usually if it's done on a mobile app, It takes you to the browser\n\n275\n00:20:32,160 --> 00:20:33,040\nto do it.\n\n276\n00:20:34,020 --> 00:20:34,520\nAnd\n\n277\n00:20:34,860 --> 00:20:40,140\neven the same thing, if I have seen it on a desktop app, it takes it to the browser. So\n\n278\n00:20:41,320 --> 00:20:44,320\nto be honest, I don't know that there is any like native\n\n279\n00:20:45,040 --> 00:20:45,980\nones for those.\n\n280\n00:20:46,720 --> 00:20:51,000\nAny implementation I've seen so far redirects you to a browser to do the\n\n281\n00:20:51,340 --> 00:20:52,700\nregistration and authentication.\n\n282\n00:20:53,480 --> 00:20:56,020\nAnd honestly, I think that's actually great.\n\n283\n00:20:56,680 --> 00:20:58,480\nThe web is really awesome.\n\n284\n00:20:59,240 --> 00:21:04,780\nIn fact, folks watching this will be in the Workshop app, and to authenticate the Workshop app,\n\n285\n00:21:05,500 --> 00:21:15,040\nyou are authenticating your device. And so rather than setting cookies in the browser and stuff, we wanna authenticate the device so that every Workshop app you go through, you're authenticated,\n\n286\n00:21:15,360 --> 00:21:17,580\nwhatever browser you're using, you're still authenticated.\n\n287\n00:21:18,580 --> 00:21:25,020\nAnd in fact, some of the exercises I say, okay, now clear your cookies. And I don't wanna log you out when you clear your cookies either.\n\n288\n00:21:26,680 --> 00:21:30,560\nSo yeah, so we authenticate the device and the process for that involves\n\n289\n00:21:31,320 --> 00:21:33,840\nopening up a separate window\n\n290\n00:21:34,540 --> 00:21:36,440\nto talk to Epic Web Dev directly.\n\n291\n00:21:37,220 --> 00:21:38,720\nAnd you go to epicweb.dev\n\n292\n00:21:39,140 --> 00:21:44,020\nand say, yep, confirm this device. And then it sends back a code like this OIDC\n\n293\n00:21:44,380 --> 00:21:46,160\nflow, which is pretty interesting.\n\n294\n00:21:46,980 --> 00:21:50,100\nAnd so, yeah, that is what I would expect\n\n295\n00:21:50,980 --> 00:21:51,480\nfor\n\n296\n00:21:51,880 --> 00:22:05,580\npretty much authentication for all of these different platforms. Just like either, you could open up in the browser or I wonder if you could even just do like native has their web views and stuff like that. And you can make it look like it's just part of the app too. So,\n\n297\n00:22:06,820 --> 00:22:07,320\nawesome.\n\n298\n00:22:08,140 --> 00:22:08,640\nSo\n\n299\n00:22:09,140 --> 00:22:09,840\nwhat else\n\n300\n00:22:11,120 --> 00:22:15,540\nis exciting in the authentication space that people should keep an eye out for?\n\n301\n00:22:17,780 --> 00:22:23,300\nOh man, there's a, I mean, there's a lot, like I said, the, the, the mobile driver's licenses\n\n302\n00:22:23,760 --> 00:22:26,680\nis an interesting thing. And there's also the\n\n303\n00:22:27,500 --> 00:22:28,000\nverifiable\n\n304\n00:22:28,320 --> 00:22:28,820\ncredentials,\n\n305\n00:22:30,060 --> 00:22:34,220\nwhich is kind of the same thing like mobile driver license, but digital versions\n\n306\n00:22:34,640 --> 00:22:39,900\nof real artifacts. So for example, like your college ID, right?\n\n307\n00:22:40,460 --> 00:22:45,460\nOr even like the ID thing, you know, it's kind of, let's say if you want to go,\n\n308\n00:22:45,760 --> 00:22:47,580\nif you're someone who drinks alcohol,\n\n309\n00:22:48,320 --> 00:22:50,900\nthink how much personal information you give\n\n310\n00:22:51,340 --> 00:23:03,840\nlike a 16 year old cashier at a gas station, you know, just so you can prove that you're allowed to buy alcohol. You give your address, your birthday, the expiration date, you give them a lot of information just from the check that,\n\n311\n00:23:04,140 --> 00:23:11,340\nyou had like a digital version that could just be scanned where they don't have to see all your personal info, right? That'd be a lot easier.\n\n312\n00:23:11,760 --> 00:23:20,880\nYeah, that's what I like about verifiable credentials. If you wanna confirm that, you know, you're an alum or something like that, or you get access to special financing,\n\n313\n00:23:21,500 --> 00:23:24,360\nyou can just pass in that verifiable credential\n\n314\n00:23:25,160 --> 00:23:31,100\nthat's been verified through all parties. So it's, you have to get the okay from\n\n315\n00:23:31,500 --> 00:23:36,140\nthe school and from like whoever issued the ID. So it's not like it's easily forgeable\n\n316\n00:23:37,280 --> 00:23:41,460\nand verify who you are. So I think verifiable credentials is something to\n\n317\n00:23:41,980 --> 00:23:46,860\nkeep an eye on. And another thing is that I just seen a talk from\n\n318\n00:23:47,680 --> 00:23:48,540\nAngie Jones\n\n319\n00:23:49,960 --> 00:23:52,620\nabout Web5 and like decentralized identifiers,\n\n320\n00:23:53,360 --> 00:24:00,360\nwhich I don't know if anyone uses BlueSky, but that's kind of an example of, you know, that username that you have in BlueSky,\n\n321\n00:24:00,720 --> 00:24:10,460\nyou could potentially take that username and that data to other social media networks if they support Web5. So I think that's an interesting thing to look at as well.\n\n322\n00:24:11,040 --> 00:24:12,380\nSo I feel like the future\n\n323\n00:24:13,680 --> 00:24:14,420\nof identity\n\n324\n00:24:15,240 --> 00:24:18,700\nand online authentication things are very, very exciting.\n\n325\n00:24:19,740 --> 00:24:23,500\nAnd 1 more thing that this was actually launched recently by Auth0,\n\n326\n00:24:25,040 --> 00:24:26,540\ncause I feel like authentication\n\n327\n00:24:26,980 --> 00:24:28,100\nhas moved fast,\n\n328\n00:24:28,480 --> 00:24:34,180\nright. As far as like the innovations that we made to make it more secure. But the other side of that coin is authorization,\n\n329\n00:24:34,900 --> 00:24:36,680\nwhich is, you know,\n\n330\n00:24:37,300 --> 00:24:39,120\nsaying what you have access to,\n\n331\n00:24:39,720 --> 00:24:44,620\nhasn't made those same strides. So 1 of the things that we're working on is called,\n\n332\n00:24:45,280 --> 00:24:46,520\nfine grained authorization,\n\n333\n00:24:47,040 --> 00:24:47,540\nand\n\n334\n00:24:48,140 --> 00:24:49,620\nit's based on like relationships\n\n335\n00:24:50,080 --> 00:25:00,080\nof able to show what data you know your access to and Instead of just what we usually do is just you know, try to add roles. But as your company gets bigger\n\n336\n00:25:00,420 --> 00:25:04,900\nand more people have access to more things and don't need access to certain things.\n\n337\n00:25:05,580 --> 00:25:06,840\nThe roles just,\n\n338\n00:25:07,360 --> 00:25:11,700\nyou know, role-based access just isn't enough to cover all those use cases.\n\n339\n00:25:13,080 --> 00:25:16,980\nSo like open or find grant authorization is kind of\n\n340\n00:25:17,600 --> 00:25:26,600\nthe catalyst for trying to solve that, the authorization problem that we currently have. So I'd say those are the 2, the 3 things to look at. Verifiable credentials,\n\n341\n00:25:27,720 --> 00:25:28,220\ndecentralized\n\n342\n00:25:28,540 --> 00:25:29,040\nidentifiers\n\n343\n00:25:29,380 --> 00:25:30,040\nwith Web5\n\n344\n00:25:32,220 --> 00:25:35,360\nand fine-grained authorization. Those are like the\n\n345\n00:25:36,140 --> 00:25:45,540\nmost exciting things for me that I'm like, you know, digging into as time goes on right now. I'll more than likely give a talk on Verify for Credentials probably in the next,\n\n346\n00:25:46,360 --> 00:25:52,060\nyou know, year or something like that as more comes out about it, because I'm also pretty excited about that.\n\n347\n00:25:52,540 --> 00:25:56,140\nYeah. Yeah. That 1 sounds actually really interesting to me. So with,\n\n348\n00:25:56,720 --> 00:25:57,620\ndoes the driver's\n\n349\n00:25:58,320 --> 00:26:04,940\nlicense fall under that category of verifiable credentials? Is that the same thing, same sort of thing? Yeah, it is.\n\n350\n00:26:05,380 --> 00:26:06,240\nYeah, so\n\n351\n00:26:06,760 --> 00:26:12,540\nwould that mean that I can finally stop carrying around a wallet and I can only carry my phone?\n\n352\n00:26:13,940 --> 00:26:22,860\nYeah, which is kind of like, you know, weird that everything has like come to the phone these days. I always think about that. There's like this video\n\n353\n00:26:23,420 --> 00:26:36,940\nof it's like someone's desk and it has like a radio, a calculator, a calendar, a portable music player. And like As the video, the time lapse goes on, all of those things just start disappearing out the picture. And the only thing that's left is the phone.\n\n354\n00:26:39,340 --> 00:26:41,780\nThat's cool. I love it. I think it's awesome.\n\n355\n00:26:42,700 --> 00:26:53,740\nYeah, so I know that you European folks, you're like, wait, you have to carry a wallet around? But yes, in the US, we have to carry our driver's license everywhere, and it's the worst, I hate it.\n\n356\n00:26:55,360 --> 00:26:56,080\nSo that,\n\n357\n00:26:56,740 --> 00:27:01,060\nand that's like a standard. It's not just like a Okta thing. That's\n\n358\n00:27:02,280 --> 00:27:02,980\nthe credentials\n\n359\n00:27:03,520 --> 00:27:06,500\nthing. Oh yeah, Verified Printers, no, that's not\n\n360\n00:27:07,140 --> 00:27:09,940\na Okta exclusive thing or anything like that.\n\n361\n00:27:10,520 --> 00:27:11,020\nIt's\n\n362\n00:27:12,200 --> 00:27:16,220\nbeing worked on by a lot of people. And so We don't like\n\n363\n00:27:16,620 --> 00:27:23,960\nofficially support everything about it yet, but it's definitely something that's in the works. Yeah, I love that, love that. Okay, and then\n\n364\n00:27:24,640 --> 00:27:25,140\nthe\n\n365\n00:27:25,640 --> 00:27:26,140\ndecentralized\n\n366\n00:27:27,040 --> 00:27:30,520\nidentity, that's pretty cool. When I signed up for Blue Sky,\n\n367\n00:27:30,840 --> 00:27:44,180\nI remember like, just like anybody else, when their new social media thing comes out. You're like, oh, I've got to get my Username before somebody else takes it right? But once I got on blue sky, I was like, why was I in such a rush? You can use your website\n\n368\n00:27:44,600 --> 00:27:50,340\nlike your domain. Yeah. Yeah. Yeah, and I love that I just thought that was that was great.\n\n369\n00:27:51,580 --> 00:27:54,240\nAnd like that, that really helps with the,\n\n370\n00:27:56,380 --> 00:28:04,240\nwhat's the word I'm looking for? Like the, the problem that the verified check marks were supposed to solve or like impersonation, That's the word I'm looking for. Yeah, yeah.\n\n371\n00:28:04,540 --> 00:28:10,940\nSo I love that. And then the last thing you wanna say, or you talked about, I wanna dive into a little bit, because\n\n372\n00:28:11,240 --> 00:28:12,780\nin Epic Web Dev,\n\n373\n00:28:13,580 --> 00:28:15,660\nwe go through and implement\n\n374\n00:28:16,080 --> 00:28:17,620\nrole-based access control.\n\n375\n00:28:18,400 --> 00:28:19,660\nAnd actually I referenced\n\n376\n00:28:20,080 --> 00:28:21,720\na blog post from Auth0\n\n377\n00:28:22,360 --> 00:28:27,540\nas part of those instructions for people to kind of get an idea of how that all works.\n\n378\n00:28:28,840 --> 00:28:31,520\nAnd I think that it does work really well for\n\n379\n00:28:31,960 --> 00:28:36,740\nsome scales. In fact, for a lot of applications, you don't need permissions at all.\n\n380\n00:28:37,200 --> 00:28:44,180\nYou can like literally just say, you know, these couple of users are admins, they can do anything and everybody else is just a user for like\n\n381\n00:28:45,020 --> 00:28:53,460\nsimpler apps. But then like the layer above that would be role based access control and that can get you pretty far. So I'm curious, what are,\n\n382\n00:28:53,860 --> 00:29:00,780\ncan you like describe a little bit more some of the challenges with role based access control? And like when would somebody\n\n383\n00:29:01,360 --> 00:29:02,580\nfeel like it's it's\n\n384\n00:29:04,140 --> 00:29:07,500\ntime for them to upgrade from role-based access control to\n\n385\n00:29:07,800 --> 00:29:09,180\nmore fine-grained access\n\n386\n00:29:10,160 --> 00:29:12,000\nthat Okta is working on?\n\n387\n00:29:15,360 --> 00:29:19,620\nWell, you know, just like with anything with web development, the answer is\n\n388\n00:29:20,140 --> 00:29:20,820\nit depends.\n\n389\n00:29:22,060 --> 00:29:22,700\nBut it's\n\n390\n00:29:23,120 --> 00:29:24,260\nlike, for example,\n\n391\n00:29:25,080 --> 00:29:29,860\nof course, like, yeah, if you're doing like a hobby project or something like that, and you,\n\n392\n00:29:30,280 --> 00:29:31,560\nyou know, need roles,\n\n393\n00:29:33,300 --> 00:29:37,700\nYou know, you don't really need to go that far but you think about if you have like\n\n394\n00:29:39,720 --> 00:29:40,580\na 5,000\n\n395\n00:29:41,400 --> 00:29:42,160\na 5,000\n\n396\n00:29:44,440 --> 00:29:45,260\nMember company\n\n397\n00:29:45,940 --> 00:29:46,440\nand\n\n398\n00:29:46,780 --> 00:29:47,280\nsay\n\n399\n00:29:47,980 --> 00:29:48,480\nJack\n\n400\n00:29:48,940 --> 00:29:50,780\nhas a team of 100\n\n401\n00:29:51,200 --> 00:29:52,840\nor something like that, right?\n\n402\n00:29:53,500 --> 00:29:54,000\nAnd\n\n403\n00:29:54,800 --> 00:29:56,680\nyou want all of Jack's\n\n404\n00:29:57,540 --> 00:29:59,740\nreports to be able to access\n\n405\n00:30:03,220 --> 00:30:03,920\nthe document,\n\n406\n00:30:04,240 --> 00:30:04,980\nbut then\n\n407\n00:30:05,940 --> 00:30:07,060\nlet's say that\n\n408\n00:30:07,840 --> 00:30:13,520\n1 of the managers down there, you know, doesn't need access because it's not his department or something like that.\n\n409\n00:30:13,840 --> 00:30:16,220\nLike the bigger you get And the more the relationships\n\n410\n00:30:17,160 --> 00:30:20,340\nseem close, right? You have to go beyond\n\n411\n00:30:21,040 --> 00:30:21,540\njust,\n\n412\n00:30:23,000 --> 00:30:28,240\nyou know, adding a role and, you know, calling it good. And so with fine grained authorization,\n\n413\n00:30:29,060 --> 00:30:30,100\nit's relationship\n\n414\n00:30:30,440 --> 00:30:31,780\nbased access control.\n\n415\n00:30:33,040 --> 00:30:35,780\nSo you can, it's like, the access is very\n\n416\n00:30:36,760 --> 00:30:37,260\ngranular.\n\n417\n00:30:38,300 --> 00:30:39,660\nAnd if you wanted to,\n\n418\n00:30:40,080 --> 00:30:46,520\ngo ahead. I was just gonna say, yeah, that makes sense. Cause like, you'd have to have a role for like every single\n\n419\n00:30:48,200 --> 00:30:49,860\nperson. And like, typically\n\n420\n00:30:50,460 --> 00:30:52,000\nthe more permissive\n\n421\n00:30:52,440 --> 00:30:55,460\nrole wins in the event of a conflict. And so\n\n422\n00:30:55,900 --> 00:31:01,940\nthat would just, yeah, modeling that type of a role-based access control would be pretty tough.\n\n423\n00:31:02,740 --> 00:31:03,240\nYeah,\n\n424\n00:31:03,640 --> 00:31:04,400\nit's super.\n\n425\n00:31:04,860 --> 00:31:06,100\nI've seen like some,\n\n426\n00:31:06,660 --> 00:31:10,220\nyou know, pretty like hard to wrangle examples.\n\n427\n00:31:11,380 --> 00:31:18,020\nSo like people were interested in that. Just like to get like more info, there's a open FGA.dev\n\n428\n00:31:18,680 --> 00:31:22,940\nand it's basically an open source project that we have that kind of\n\n429\n00:31:23,260 --> 00:31:25,820\nhelps with that fine grain authorization implementation.\n\n430\n00:31:26,720 --> 00:31:35,200\nSo if anyone like was interested in that, they could definitely like check it out to try and dive a little deeper. Cause like I said, I'm, I'm new to it myself.\n\n431\n00:31:35,660 --> 00:31:36,840\nI find it interesting.\n\n432\n00:31:38,760 --> 00:31:42,280\nBut I'm by no means the expert on FGA.\n\n433\n00:31:43,220 --> 00:31:45,140\nNot yet. You'll get there.\n\n434\n00:31:46,360 --> 00:31:48,240\nHey, that's very helpful. Thank you.\n\n435\n00:31:48,900 --> 00:31:55,220\nAll right. We're coming down toward the end of the time we've got together. Is there anything that we didn't talk about that you'd like to?\n\n436\n00:31:58,320 --> 00:32:03,580\nNo, not that I think not that I can think of. We covered lots of good stuff. Yeah,\n\n437\n00:32:04,540 --> 00:32:12,180\nthe main things that excite me, I'm excited to, you know, 10 years from now, we revisit this conversation and with no passwords,\n\n438\n00:32:12,500 --> 00:32:21,480\nbut I just wanna say thanks for having me And congrats on the launch and can't wait to, for more people to learn about the web from Kent C. Dots.\n\n439\n00:32:22,080 --> 00:32:23,600\nHey, thanks a lot. Well,\n\n440\n00:32:24,080 --> 00:32:29,980\nawesome. What's the best way for people to keep up with what you're working on and, and to pitch in if they want to help out?\n\n441\n00:32:30,800 --> 00:32:32,660\nSure. The best way is on\n\n442\n00:32:33,480 --> 00:32:35,640\nTwitter or X, whatever\n\n443\n00:32:36,060 --> 00:32:37,860\nthe name is this week, but\n\n444\n00:32:38,260 --> 00:32:40,180\nit's Will Johnson IO,\n\n445\n00:32:40,520 --> 00:32:43,100\nand that's all the way through Will Johnson IO.\n\n446\n00:32:43,520 --> 00:32:45,300\nAnd then I'm also on LinkedIn\n\n447\n00:32:45,720 --> 00:32:48,300\nand I have my full name, William Johnson.\n\n448\n00:32:48,900 --> 00:32:52,320\nAnd those be the best places to reach me. So if you have any\n\n449\n00:32:53,000 --> 00:33:12,420\nquestions, I love talking about, you know, authentication scenarios and, you know, helping you out through using, you know, implementations and things like that. So don't help to send me a DM. If I don't know the answer I will make sure I get you in contact with someone who can help you but I'm here available to help if you need it.\n\n450\n00:33:13,360 --> 00:33:18,740\nWell that's awesome. Thank you very much Will. It's been a pleasure to chat with you. I always enjoy our chats.\n\n451\n00:33:19,120 --> 00:33:21,580\nAnd thanks everybody for watching. We'll see you later.\n\n452\n00:33:21,880 --> 00:33:22,580\nSee y'all.",
            "text": "[00:00:00] Speaker 0:\nHey everybody, I'm joined by my friend Will Johnson say hi Will. Hey, what's up everybody? Super happy to have you here. Thank you so much for giving us some your time today. So Will and I we met I in person. This is another 1 of those We met online first and then met in person in a conference. And I think, \n\n[00:00:20] I'm pretty sure where we met online first was through Egghead in the Egghead Slack. Is that right? Or did we meet first on Twitter? I think it was an Egghead first. \n\n[00:00:30] Speaker 1:\nYeah, I think it was through AK at first, the same. \n\n[00:00:33] Speaker 0:\nYeah. And then in person, I don't want to, like, I'm pretty sure, was it a React rally a couple of years ago? Did you ever come to 1 of those? \n\n[00:00:44] Speaker 1:\nNo, it was actually, It was at React Miami. Miami. Was that the \n\n[00:00:47] Speaker 0:\nfirst time? No, no, no. Yeah. \n\n[00:00:49] Speaker 1:\nYeah, it was. No way. \n\n[00:00:52] Speaker 0:\nWhat about last year at RenderATL? Were you there? \n\n[00:00:57] Speaker 1:\nNo, I didn't go. I didn't go last year. I Think react Miami was the first conference. I went to like outside of Kansas City, so \n\n[00:01:05] Speaker 0:\nno We met okay, so KCDC you go to that conference as well, right? Yeah, yeah So I went to that conference in 20 Maybe 15 or 16 no no it would have been 2016 Yeah, were you there at that or maybe like I don't know if you remember. \n\n[00:01:26] Speaker 1:\nYeah, no, I wasn't doing, I didn't start like getting into dev stuff until like 2018. So I wouldn't have been at that 1. I didn't know that was even a thing. \n\n[00:01:36] Speaker 0:\nI can't even believe that React Miami was the first time we met. That's crazy. I feel like I've known you forever. But it has been great to know you. And I'd like for the folks who are watching to get to know you too. Can you give us a little intro? \n\n[00:01:52] Speaker 1:\nSure. Yeah. So my name is Will Johnson. I'm a senior developer advocate at Auth0 by Okta. I have 6 children who I love and we have a lot of fun together. And I spend a lot of time just helping developers, how to talk about different things with authentication, \n\n[00:02:13] authorization. I do a lot of education, I plan events and I go through a lot of things with a, like a developer first or a customer first mindset. I always think of how can I make this thing more entertaining, more easy, you know, simpler, whatever, whatever I can to make sure \n\n[00:02:33] that the person that's receiving is having a great experience is kind of what I like to focus on? \n\n[00:02:39] Speaker 0:\nYeah, that's great. So you've been a part of education since like you first got into dev, with egghead, right? \n\n[00:02:46] Speaker 1:\nYeah. Yeah. The first actually Joel, Joel is actually who gave me the advice I was I was I don't know I had said something on Twitter about because I had like just applied to this job and like didn't get it even though I really thought I did. And I was like, man, I really think I'm ready and I don't know what else I got to do. And then like Joel DM'd me and \n\n[00:03:06] was like, you need to write like blog posts and tell people like what you're learning and stuff like that. So that's actually how I got started. So I started writing blog posts about different things I was learning about JavaScript. And then I ended up working at Egghead, which is of course a web dev education company. \n\n[00:03:27] Speaker 0:\nJoel is awesome, isn't he? Like just super, super, like my strategy for success in my career has been do whatever Joel says It always works out great \n\n[00:03:40] Speaker 1:\nI Agree that that is something that's true do what Joel says take and He always has like recommendations for random things. Like off topic, he had told me about like this program to like loosen your hips up because I'm, oh, I haven't talked about that. Another thing \n\n[00:04:00] is like me and my kids got interested in soccer this year and I've never played soccer before or watched soccer, so I got super interested. So I wanted to start playing, but like 1 time I had like went out and played and got hurt like real bad and I didn't even do anything, But I was like hurt and sideline for like 6 weeks. \n\n[00:04:19] Speaker 0:\nOuch. \n\n[00:04:20] Speaker 1:\nSo Joel had talked about, there's like this program he did to like loosen up your hips so you can like move better and play sports. And I like, and it's like 21 days, I did it. And like my hips feel great. \n\n[00:04:32] Speaker 0:\nLike, \n\n[00:04:32] Speaker 1:\nso same thing with like, even if it's not career related, listen to what Joel says and you'll probably be all right. \n\n[00:04:38] Speaker 0:\nThat guy, yeah, seriously, Jay Hooks on Twitter. If you're not following Joel, you should. He's just a real pleasure. I should have him on here. But yeah, so, well, with your work over at Okta, or Auth0 by Okta, you're focused on the \n\n[00:04:58] education piece of that, But there's something really exciting coming into the world of authentication that I know you're excited about, I'm interested in, and we don't cover in Epic Web. So this would be a pretty cool opportunity to talk about that. And that's passwordless authentication or web authen. \n\n[00:05:20] Can you first talk about like, what is the problem with the way that we do authentication in the modern age? And how does passwordless auth solve that problem? \n\n[00:05:34] Speaker 1:\nSure, yeah, we can talk about that. So, I mean, there's a lot of problems with passwords, in my opinion. Like number 1, probably the, if you're trying to make a secure password or a good password, it has to have different characters, uppercase, \n\n[00:05:54] lowercase, you know, numbers, letters, like, all of this stuff, be at least 15 characters and things like that. So it makes it incredibly complex for you to be able to make a good password. And at the end of the day, that super complex password is also super hard to remember. \n\n[00:06:14] Right, And that's not a good user experience, right? You got something that's super long that you can't remember, but if you do happen to remember it, and if you really think about it, humans in general, we're not necessarily remembering the password. We're remembering the pattern on the keyboard. That's what you're actually remembering, right? So that's what you got stored \n\n[00:06:35] in your brain, just that pattern. So you, as humans, we wanna keep things easy. So what do you do? You reuse that password somewhere else, right? And that's not a bad thing, right? As in, it's not a bad thing that you're doing, right? You're not committing a cardinal sin. \n\n[00:06:55] It's just that the way that passwords are implemented, it kind of almost forces you to have to take that route, right? \n\n[00:07:04] Speaker 0:\nYeah. \n\n[00:07:05] Speaker 1:\nBut then someone breaches your password because, you know, no password or impregnable humans aren't as random as we think we are. Right. Someone says that password, they put it into a dictionary of breach passwords, someone accesses the dictionary and then they run that password on a bunch of different websites \n\n[00:07:26] to see where they can get some hits. And now people log into your information. So it's just that passwords in general, just in the way, especially with our lives being more and more online, they're just not really a good way to try to keep your data safe. And then we have different ways to try to \n\n[00:07:46] make it more secure, right? So we could use a pathway manager, use one-time passcodes, use magic links and all these other things, but really they're just more steps for the user, more things that you gotta remember, more things that you have to keep up with and you know what if you break your phone right like real \n\n[00:08:06] story I had just just got a phone I don't know like a week it was like I had it for like a week I went to the gym and dropped the dumbbell on the phone smashed the entire screen right So I tried to like order it through, you know, the insurance or whatever, but in order to order replacement, it \n\n[00:08:26] sent me a code to the phone. Oh no. So I couldn't even, you know, get a replacement phone because they had that security measure set up. So that's kind of like the problems that we have with the passwords. It takes so \n\n[00:08:46] much for the user to be able to keep it secure. And even then it's not necessarily secure because there are still ways around it. Right. So that's what, go ahead. If you want to say something. \n\n[00:09:00] Speaker 0:\nYeah. Yeah. I, I think, it's probably important to call out that, like, I can almost hear some people in the background saying, yeah, well, like, if you would just do these 6 things, then like everything's fine. And I don't disagree with that. Like, you can absolutely make yourself more secure. But we're web developers and we're building products \n\n[00:09:20] for users and we cannot force our users to do those 6 things. And on top of that, I mean, I suppose you could force them to do that in the way you design your software, but you're going to have a hard time having happy users. And so like we're trying to make a good user experience here. \n\n[00:09:40] And so the fact that you have to do these 6 things to make your password authentication secure, kind of makes you wonder if maybe there's another way to do this. \n\n[00:09:55] Speaker 1:\nYeah, exactly. And that's like the part that I don't like either As a user myself, right? The experience is not good. And yet, like you said, there are 6 steps. Like why would you want to have your user do all of those things, right? Because at the end of the day, \n\n[00:10:15] right? Like the website that I ordered that phone on, I'm not looking forward to going back there. Right. Because of that particular user experience. So those are the things that you want to think about because a bad authentication experience can leave a bad taste in your user or your user's mouth and not want them to, you know, return or avoid it as \n\n[00:10:35] long as possible. So that's kind of what I like about the password list specifically with WebAuthn. So with WebAuthn, instead of storing any of your credentials or anything like that, it uses public key cryptography. So there's a public key and a private key \n\n[00:10:55] that gets created at the time that you're registering the website or registering your authenticator to the website. And the private key itself is stored on the device. So none of your like private details are sent to the server. The only thing that's sent to the server is the public key and that gets saved with \n\n[00:11:16] your user ID. And then when you want to log in again, the public key and the user ID are retrieved. And then it does some stuff like that to verify everything is correct and sends it back. But no 1 has access to your device if it's \n\n[00:11:36] on you. So of course, if you fell asleep and someone unlocked your phone with face ID, of course, but you but not like An attacker from another country who's stolen your passwords off of, you know, the web, the web somewhere can get access to it. \n\n[00:11:52] Speaker 0:\nYeah. Now I think that's a important distinction. There are a lot more attackers on the internet than there are people around you when you're sleeping. So, and the fact is like, if they got into your phone in that way, then you're pretty much borked anyway. So, I think it doesn't make much of a difference either \n\n[00:12:12] way. Now, so this is really interesting. And we don't have to go too deep into the actual implementation details of how pass keys work. But I think if I understand it right, then the basic idea is now your phone is basically the password or whatever device or authenticator app. So like 1Password \n\n[00:12:33] also has support for storing pass keys. So whatever that is, is gonna be your, effectively your password. And that communicates with the website and says, here's my public key, I guess. And then the server says, okay, let me check that. Oh, yep, you are who you say you are and now \n\n[00:12:53] we can let you in. \n\n[00:12:55] Speaker 1:\nYeah, pretty much. That's a way that you could look at it. So like you said, the private key is stored on the device or whatever service you may use that supports FAST keys. And it stays there and you can, when you do want to log in, Yeah, it gets \n\n[00:13:15] sent. So what happens is that it sends a challenge. So the server, it grabs the public ID that matches with that username and your ID that it gave you when you registered, it sends it to the authenticator with a challenge, then the challenge is what gets signed and verified. And \n\n[00:13:35] then it gets sent back with the okay to the server, unless you win. \n\n[00:13:40] Speaker 0:\nGotcha, gotcha, that makes sense. Okay, so this has a couple interesting implications. For 1, having your password be effectively the device or the authenticator app means that if you lose the device, then you lose access to your account. So, What are the \n\n[00:14:01] ways that you can sidestep that particular problem? \n\n[00:14:06] Speaker 1:\nSo a few of the ways is that you could be, you could, you know, have multiple devices, right? That's, you know, always a way. So if you had a phone, right, as you, that you're using as like your main thing, then you could get like a security key, like the YubiKey \n\n[00:14:26] or a Google Titan. It just, we just want to have some type of backup. I would recommend that you don't have a password as the backup, but that's 1 way to mitigate it. But that's 1 of the things that makes PassKeys itself different. So there's WebAuthn, which is a browser-based API \n\n[00:14:46] that you can use to create passwordless login. But pass keys, when you're implementing pass keys, is that the private key, instead of getting saved on the device, it gets backed up to the cloud, right? So that could be the iCloud, you know, or the Google, you know, password manager, it'll be \n\n[00:15:06] saved there. And then you can access it on different devices. So if that's something that you are worried about, which isn't a legitimate concern, you can actually use the pass keys implementation of using WebAuthn. And that way you can have it synced across different devices. And so if you lose your phone, it's \n\n[00:15:26] not, you know, the end of your logging in experience. \n\n[00:15:31] Speaker 0:\nYeah. Yeah. I think what's interesting about this is that whether you're using 1Password or iCloud or Google to sync all of those, at some point, like you're signing up, getting a new device, you have to sign into that service \n\n[00:15:51] to be able to authenticate your new device on these other services and things. And you signing into that service will probably involve a password. And eventually, I would actually be interested in your take on what the future of that is in particular, but I think \n\n[00:16:12] the point isn't necessary, let's like kill all passwords, but let's reduce the number of passwords we rely on. And also, like if we do need to have a password for 1 reason or another, let's make it so that people don't have to enter it very often. And so like, then it's okay for them to, you know, \n\n[00:16:32] have longer ones or like they never, they don't have to go through the whole 2 factor auth flow and all of that because it's still more secure to have a pass key. Is that kind of your take or what's your take on that? \n\n[00:16:50] Speaker 1:\nI mean, for me, of course, you know, no 1 knows what the future holds, but I think that the more and more that we evolve for us like security, we're getting more and more digital. I think that like as of right now, will we completely \n\n[00:17:10] replace passwords? Maybe not, maybe not in the next, you know, 5 years, but 10 years, 15 years down the line, I feel like we will do away with passwords and have more unique identifiers, like more ways, you know, more things with biometrics or, or using your actual, you know, real identifiers, \n\n[00:17:31] right? So if you, like OffZero, we just launched support for mobile driver's licenses, right? So that's something that's, you know, verified in the real world, right? You got to have an address, a social security card, a birth certificate. You gotta have quite a few real-life documents to \n\n[00:17:51] verify that you can own this driver's license, right? So that would be a pretty good way to use as an identifier over a password, right? So if we have like digital versions of that that have been verified, you know, through the proper parties that say who you are, that'd be a good way to, you know, get \n\n[00:18:11] rid of passwords because usually only you can get those. So I do think in the future, we will get rid of passwords and just use different ways to identify each other that are more personal and unique. Just because passwords is caused, you know, data breaches and like so many problems, \n\n[00:18:32] you know, throughout these years. And it may have worked, you know, back in Aladdin's times when you can say, you know, open Sesame and only the only person who knew it was, you know, that person, but, you know, these days they're just too easy to access. \n\n[00:18:49] Speaker 0:\nYeah, yeah, that makes sense. I agree, there's definitely a problem there. Still, I think it is something that users are kind of expecting and pass keys are pretty new. Like literally just days ago, I got a notice that 1Password added support. And I think \n\n[00:19:09] Google also, I got a notification in my browser that said, hey, we've got support now. And so it's pretty new. And so definitely something interesting. And that's why it's actually not included in Epic web. I was thinking about it, but it was just like a little too new for me to say, this is how you do it. Like \n\n[00:19:29] people paid for it. Cause I don't know, I got to play with it first. That said, actually, there is an example of the Epic Notes app that people are building. It's with the Epic Stack, where somebody put together WebAuthn with the Epic Stack. And so if you do want to look into what things would look like adding \n\n[00:19:50] Pass keys, then you can take a look at that So I wanted to ask also what about? Things that where I've got a mobile app in addition to my web app so we have web auth n for doing pass keys If I've got like a desktop app, and so Mac and Windows, and then we've got Android \n\n[00:20:11] and iOS, and do all of these other platforms have implementations of like where we could use a passkey for those? \n\n[00:20:21] Speaker 1:\nAs of right now, I do not know. I do, what I have seen is that usually if it's done on a mobile app, It takes you to the browser to do it. And even the same thing, if I have seen it on a desktop app, it takes it to the browser. So to be honest, \n\n[00:20:42] I don't know that there is any like native ones for those. Any implementation I've seen so far redirects you to a browser to do the registration and authentication. \n\n[00:20:53] Speaker 0:\nAnd honestly, I think that's actually great. The web is really awesome. In fact, folks watching this will be in the Workshop app, and to authenticate the Workshop app, you are authenticating your device. And so rather than setting cookies in the browser and stuff, we wanna authenticate the device so that every Workshop app \n\n[00:21:13] you go through, you're authenticated, whatever browser you're using, you're still authenticated. And in fact, some of the exercises I say, okay, now clear your cookies. And I don't wanna log you out when you clear your cookies either. So yeah, so we authenticate the device and the process for that involves opening up a separate window \n\n[00:21:34] to talk to Epic Web Dev directly. And you go to epicweb.dev and say, yep, confirm this device. And then it sends back a code like this OIDC flow, which is pretty interesting. And so, yeah, that is what I would expect for pretty much authentication for all of these different platforms. Just \n\n[00:21:55] like either, you could open up in the browser or I wonder if you could even just do like native has their web views and stuff like that. And you can make it look like it's just part of the app too. So, awesome. So what else is exciting in the authentication space that people should keep an eye out \n\n[00:22:15] for? \n\n[00:22:17] Speaker 1:\nOh man, there's a, I mean, there's a lot, like I said, the, the, the mobile driver's licenses is an interesting thing. And there's also the verifiable credentials, which is kind of the same thing like mobile driver license, but digital versions of real artifacts. So for example, like \n\n[00:22:37] your college ID, right? Or even like the ID thing, you know, it's kind of, let's say if you want to go, if you're someone who drinks alcohol, think how much personal information you give like a 16 year old cashier at a gas station, you know, just so you can prove that you're allowed to buy alcohol. You \n\n[00:22:57] give your address, your birthday, the expiration date, you give them a lot of information just from the check that, you had like a digital version that could just be scanned where they don't have to see all your personal info, right? That'd be a lot easier. Yeah, that's what I like about verifiable credentials. If you wanna confirm that, you know, you're an alum or something \n\n[00:23:17] like that, or you get access to special financing, you can just pass in that verifiable credential that's been verified through all parties. So it's, you have to get the okay from the school and from like whoever issued the ID. So it's not like it's easily forgeable and verify \n\n[00:23:38] who you are. So I think verifiable credentials is something to keep an eye on. And another thing is that I just seen a talk from Angie Jones about Web5 and like decentralized identifiers, which I don't know if anyone uses BlueSky, but that's kind of an example of, you \n\n[00:23:58] know, that username that you have in BlueSky, you could potentially take that username and that data to other social media networks if they support Web5. So I think that's an interesting thing to look at as well. So I feel like the future of identity and online authentication things are very, very exciting. \n\n[00:24:19] And 1 more thing that this was actually launched recently by Auth0, cause I feel like authentication has moved fast, right. As far as like the innovations that we made to make it more secure. But the other side of that coin is authorization, which is, you know, saying what you have access to, hasn't \n\n[00:24:40] made those same strides. So 1 of the things that we're working on is called, fine grained authorization, and it's based on like relationships of able to show what data you know your access to and Instead of just what we usually do is just you know, try to add roles. But as your company gets bigger \n\n[00:25:00] and more people have access to more things and don't need access to certain things. The roles just, you know, role-based access just isn't enough to cover all those use cases. So like open or find grant authorization is kind of the catalyst for trying to solve that, the authorization \n\n[00:25:20] problem that we currently have. So I'd say those are the 2, the 3 things to look at. Verifiable credentials, decentralized identifiers with Web5 and fine-grained authorization. Those are like the most exciting things for me that I'm like, you know, digging into as time goes on right \n\n[00:25:41] now. I'll more than likely give a talk on Verify for Credentials probably in the next, you know, year or something like that as more comes out about it, because I'm also pretty excited about that. \n\n[00:25:52] Speaker 0:\nYeah. Yeah. That 1 sounds actually really interesting to me. So with, does the driver's license fall under that category of verifiable credentials? Is that the same thing, same sort of thing? \n\n[00:26:03] Speaker 1:\nYeah, it is. \n\n[00:26:05] Speaker 0:\nYeah, so would that mean that I can finally stop carrying around a wallet and I can only carry my phone? \n\n[00:26:13] Speaker 1:\nYeah, which is kind of like, you know, weird that everything has like come to the phone these days. I always think about that. There's like this video of it's like someone's desk and it has like a radio, a calculator, a calendar, a portable music player. And like As the video, the time lapse goes on, all of those things just start disappearing \n\n[00:26:34] out the picture. And the only thing that's left is the phone. \n\n[00:26:39] Speaker 0:\nThat's cool. I love it. I think it's awesome. Yeah, so I know that you European folks, you're like, wait, you have to carry a wallet around? But yes, in the US, we have to carry our driver's license everywhere, and it's the worst, I hate it. So that, and that's like a standard. It's not just \n\n[00:26:59] like a Okta thing. That's the credentials thing. \n\n[00:27:04] Speaker 1:\nOh yeah, Verified Printers, no, that's not a Okta exclusive thing or anything like that. It's being worked on by a lot of people. And so We don't like officially support everything about it yet, but it's definitely something that's in the works. \n\n[00:27:20] Speaker 0:\nYeah, I love that, love that. Okay, and then the decentralized identity, that's pretty cool. When I signed up for Blue Sky, I remember like, just like anybody else, when their new social media thing comes out. You're like, oh, I've got to get my Username before somebody else takes it right? But once I got on blue \n\n[00:27:40] sky, I was like, why was I in such a rush? You can use your website like your domain. Yeah. Yeah. Yeah, and I love that I just thought that was that was great. And like that, that really helps with the, what's the word I'm looking for? Like the, the problem that the verified check marks were supposed to solve \n\n[00:28:01] or like impersonation, That's the word I'm looking for. \n\n[00:28:03] Speaker 1:\nYeah, \n\n[00:28:03] Speaker 0:\nyeah. So I love that. And then the last thing you wanna say, or you talked about, I wanna dive into a little bit, because in Epic Web Dev, we go through and implement role-based access control. And actually I referenced a blog post from Auth0 as part of those instructions \n\n[00:28:23] for people to kind of get an idea of how that all works. And I think that it does work really well for some scales. In fact, for a lot of applications, you don't need permissions at all. You can like literally just say, you know, these couple of users are admins, they can do anything and everybody else is just a user for like \n\n[00:28:45] simpler apps. But then like the layer above that would be role based access control and that can get you pretty far. So I'm curious, what are, can you like describe a little bit more some of the challenges with role based access control? And like when would somebody feel like it's it's time for them to upgrade \n\n[00:29:05] from role-based access control to more fine-grained access that Okta is working on? \n\n[00:29:15] Speaker 1:\nWell, you know, just like with anything with web development, the answer is it depends. But it's like, for example, of course, like, yeah, if you're doing like a hobby project or something like that, and you, you know, need roles, You know, you don't really need to go that far but \n\n[00:29:35] you think about if you have like a 5,000 a 5,000 Member company and say Jack has a team of 100 or something like that, right? And you want \n\n[00:29:55] all of Jack's reports to be able to access the document, but then let's say that 1 of the managers down there, you know, doesn't need access because it's not his department or something like that. Like the bigger you get And the more the \n\n[00:30:15] relationships seem close, right? You have to go beyond just, you know, adding a role and, you know, calling it good. And so with fine grained authorization, it's relationship based access control. So you can, it's like, the access is very \n\n[00:30:36] granular. And if you wanted to, go ahead. \n\n[00:30:40] Speaker 0:\nI was just gonna say, yeah, that makes sense. Cause like, you'd have to have a role for like every single person. And like, typically the more permissive role wins in the event of a conflict. And so that would just, yeah, modeling that type of a role-based access control would be \n\n[00:31:01] pretty tough. \n\n[00:31:02] Speaker 1:\nYeah, it's super. I've seen like some, you know, pretty like hard to wrangle examples. So like people were interested in that. Just like to get like more info, there's a open FGA.dev and it's basically an open source project that we have that kind of \n\n[00:31:23] helps with that fine grain authorization implementation. So if anyone like was interested in that, they could definitely like check it out to try and dive a little deeper. Cause \n\n[00:31:32] Speaker 0:\nlike \n\n[00:31:33] Speaker 1:\nI said, I'm, I'm new to it myself. I find it interesting. But I'm by no means the expert on FGA. Not yet. You'll get there. \n\n[00:31:46] Speaker 0:\nHey, that's very helpful. Thank you. All right. We're coming down toward the end of the time we've got together. Is there anything that we didn't talk about that you'd like to? \n\n[00:31:58] Speaker 1:\nNo, not that I think not that I can think of. \n\n[00:32:01] Speaker 0:\nWe covered lots of good stuff. \n\n[00:32:03] Speaker 1:\nYeah, the main things that excite me, I'm excited to, you know, 10 years from now, we revisit this conversation and with no passwords, but I just wanna say thanks for having me And congrats on the launch and can't wait to, for more people to learn about the web from Kent C. Dots. \n\n[00:32:22] Speaker 0:\nHey, thanks a lot. Well, awesome. What's the best way for people to keep up with what you're working on and, and to pitch in if they want to help out? \n\n[00:32:30] Speaker 1:\nSure. The best way is on Twitter or X, whatever the name is this week, but it's Will Johnson IO, and that's all the way through Will Johnson IO. And then I'm also on LinkedIn and I have my full name, William Johnson. And those be the best places to reach \n\n[00:32:50] me. So if you have any questions, I love talking about, you know, authentication scenarios and, you know, helping you out through using, you know, implementations and things like that. So don't help to send me a DM. If I don't know the answer I will make sure I get you in contact with someone who can help you but I'm here available \n\n[00:33:11] to help if you need it. \n\n[00:33:13] Speaker 0:\nWell that's awesome. Thank you very much Will. It's been a pleasure to chat with you. I always enjoy our chats. And thanks everybody for watching. We'll see you later. \n\n[00:33:21] Speaker 1:\nSee y'all."
          }
        }
      }
    ],
    "_id": "ec5d233d-a74f-4488-9760-0b46aa25504b",
    "_createdAt": "2023-10-12T10:27:11Z",
    "description": null,
    "moduleType": "bonus"
  }
]